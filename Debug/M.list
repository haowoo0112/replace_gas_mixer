
M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800eda8  0800eda8  0001eda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f23c  0800f23c  00020364  2**0
                  CONTENTS
  4 .ARM          00000008  0800f23c  0800f23c  0001f23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f244  0800f244  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f244  0800f244  0001f244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f248  0800f248  0001f248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800f24c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020364  2**0
                  CONTENTS
 10 .bss          00001ef4  20000368  20000368  00020368  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000225c  2000225c  00020368  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029074  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004afa  00000000  00000000  00049408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  0004df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f0  00000000  00000000  0004f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296b5  00000000  00000000  00051068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002092d  00000000  00000000  0007a71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d80f7  00000000  00000000  0009b04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00173141  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f88  00000000  00000000  00173194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000368 	.word	0x20000368
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ed8c 	.word	0x0800ed8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	0800ed8c 	.word	0x0800ed8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f001 fd84 	bl	8002a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f82e 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 fa8a 	bl	8001464 <MX_GPIO_Init>
  MX_UART4_Init();
 8000f50:	f000 f9b6 	bl	80012c0 <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 8000f54:	f009 fb76 	bl	800a644 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 8000f58:	f000 fa5a 	bl	8001410 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f5c:	f000 f890 	bl	8001080 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f60:	f000 f8bc 	bl	80010dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f64:	f000 fa00 	bl	8001368 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f68:	f000 fa28 	bl	80013bc <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000f6c:	f000 f972 	bl	8001254 <MX_TIM7_Init>
  MX_UART5_Init();
 8000f70:	f000 f9d0 	bl	8001314 <MX_UART5_Init>
  MX_TIM1_Init();
 8000f74:	f000 f8ea 	bl	800114c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <main+0x64>)
 8000f7c:	f005 fa8a 	bl	8006494 <HAL_TIMEx_PWMN_Start>
    __HAL_TIM_SET_AUTORELOAD(&htim1, 999);
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <main+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <main+0x64>)
 8000f8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f90:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,49);
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <main+0x64>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2231      	movs	r2, #49	; 0x31
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
  main_2_init();
 8000f9a:	f000 fe1d 	bl	8001bd8 <main_2_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    main_2_loop();
 8000f9e:	f000 fe2d 	bl	8001bfc <main_2_loop>
 8000fa2:	e7fc      	b.n	8000f9e <main+0x5e>
 8000fa4:	20000800 	.word	0x20000800

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f00b f83e 	bl	800c038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <SystemClock_Config+0xd0>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a28      	ldr	r2, [pc, #160]	; (8001078 <SystemClock_Config+0xd0>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <SystemClock_Config+0xd0>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <SystemClock_Config+0xd4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a22      	ldr	r2, [pc, #136]	; (800107c <SystemClock_Config+0xd4>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <SystemClock_Config+0xd4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001018:	2319      	movs	r3, #25
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800101c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001026:	2307      	movs	r3, #7
 8001028:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	4618      	mov	r0, r3
 8001030:	f003 ffe6 	bl	8005000 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800103a:	f000 faa3 	bl	8001584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2105      	movs	r1, #5
 800105c:	4618      	mov	r0, r3
 800105e:	f004 fa47 	bl	80054f0 <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001068:	f000 fa8c 	bl	8001584 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800106c:	f004 fb26 	bl	80056bc <HAL_RCC_EnableCSS>
}
 8001070:	bf00      	nop
 8001072:	3750      	adds	r7, #80	; 0x50
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <MX_I2C1_Init+0x54>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_I2C1_Init+0x50>)
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_I2C1_Init+0x58>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_I2C1_Init+0x50>)
 800109e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010be:	f002 f8b7 	bl	8003230 <HAL_I2C_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c8:	f000 fa5c 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000720 	.word	0x20000720
 80010d4:	40005400 	.word	0x40005400
 80010d8:	000186a0 	.word	0x000186a0

080010dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_SPI1_Init+0x68>)
 80010e2:	4a19      	ldr	r2, [pc, #100]	; (8001148 <MX_SPI1_Init+0x6c>)
 80010e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_SPI1_Init+0x68>)
 80010e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_SPI1_Init+0x68>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_SPI1_Init+0x68>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_SPI1_Init+0x68>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_SPI1_Init+0x68>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_SPI1_Init+0x68>)
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_SPI1_Init+0x68>)
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_SPI1_Init+0x68>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_SPI1_Init+0x68>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_SPI1_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_SPI1_Init+0x68>)
 800112a:	220a      	movs	r2, #10
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_SPI1_Init+0x68>)
 8001130:	f004 fbd5 	bl	80058de <HAL_SPI_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800113a:	f000 fa23 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000088c 	.word	0x2000088c
 8001148:	40013000 	.word	0x40013000

0800114c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b092      	sub	sp, #72	; 0x48
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2220      	movs	r2, #32
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f00a ff5e 	bl	800c038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <MX_TIM1_Init+0x100>)
 800117e:	4a34      	ldr	r2, [pc, #208]	; (8001250 <MX_TIM1_Init+0x104>)
 8001180:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <MX_TIM1_Init+0x100>)
 8001184:	22a7      	movs	r2, #167	; 0xa7
 8001186:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <MX_TIM1_Init+0x100>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <MX_TIM1_Init+0x100>)
 8001190:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001194:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <MX_TIM1_Init+0x100>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <MX_TIM1_Init+0x100>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <MX_TIM1_Init+0x100>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <MX_TIM1_Init+0x100>)
 80011aa:	f004 fce1 	bl	8005b70 <HAL_TIM_PWM_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80011b4:	f000 f9e6 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011c4:	4619      	mov	r1, r3
 80011c6:	4821      	ldr	r0, [pc, #132]	; (800124c <MX_TIM1_Init+0x100>)
 80011c8:	f005 fa1e 	bl	8006608 <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80011d2:	f000 f9d7 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d6:	2360      	movs	r3, #96	; 0x60
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4814      	ldr	r0, [pc, #80]	; (800124c <MX_TIM1_Init+0x100>)
 80011fc:	f004 fe10 	bl	8005e20 <HAL_TIM_PWM_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001206:	f000 f9bd 	bl	8001584 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <MX_TIM1_Init+0x100>)
 800122e:	f005 fa67 	bl	8006700 <HAL_TIMEx_ConfigBreakDeadTime>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001238:	f000 f9a4 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <MX_TIM1_Init+0x100>)
 800123e:	f000 fefb 	bl	8002038 <HAL_TIM_MspPostInit>

}
 8001242:	bf00      	nop
 8001244:	3748      	adds	r7, #72	; 0x48
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000800 	.word	0x20000800
 8001250:	40010000 	.word	0x40010000

08001254 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_TIM7_Init+0x64>)
 8001264:	4a15      	ldr	r2, [pc, #84]	; (80012bc <MX_TIM7_Init+0x68>)
 8001266:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2099;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_TIM7_Init+0x64>)
 800126a:	f640 0233 	movw	r2, #2099	; 0x833
 800126e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_TIM7_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_TIM7_Init+0x64>)
 8001278:	f240 32e7 	movw	r2, #999	; 0x3e7
 800127c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_TIM7_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM7_Init+0x64>)
 8001286:	f004 fbb3 	bl	80059f0 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001290:	f000 f978 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM7_Init+0x64>)
 80012a2:	f005 f9b1 	bl	8006608 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80012ac:	f000 f96a 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000928 	.word	0x20000928
 80012bc:	40001400 	.word	0x40001400

080012c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_UART4_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_UART4_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_UART4_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_UART4_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_UART4_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_UART4_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_UART4_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_UART4_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_UART4_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_UART4_Init+0x4c>)
 80012f8:	f005 fa8d 	bl	8006816 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 f93f 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000848 	.word	0x20000848
 8001310:	40004c00 	.word	0x40004c00

08001314 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_UART5_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_UART5_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_UART5_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_UART5_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_UART5_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_UART5_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_UART5_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_UART5_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_UART5_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_UART5_Init+0x4c>)
 800134c:	f005 fa63 	bl	8006816 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001356:	f000 f915 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000778 	.word	0x20000778
 8001364:	40005000 	.word	0x40005000

08001368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART1_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 80013a0:	f005 fa39 	bl	8006816 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f8eb 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200007bc 	.word	0x200007bc
 80013b8:	40011000 	.word	0x40011000

080013bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_USART2_UART_Init+0x50>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013f4:	f005 fa0f 	bl	8006816 <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013fe:	f000 f8c1 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200008e4 	.word	0x200008e4
 800140c:	40004400 	.word	0x40004400

08001410 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART3_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800141c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001420:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001448:	f005 f9e5 	bl	8006816 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f000 f897 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200006dc 	.word	0x200006dc
 8001460:	40004800 	.word	0x40004800

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <MX_GPIO_Init+0x114>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a3d      	ldr	r2, [pc, #244]	; (8001578 <MX_GPIO_Init+0x114>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <MX_GPIO_Init+0x114>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <MX_GPIO_Init+0x114>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a36      	ldr	r2, [pc, #216]	; (8001578 <MX_GPIO_Init+0x114>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <MX_GPIO_Init+0x114>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <MX_GPIO_Init+0x114>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <MX_GPIO_Init+0x114>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <MX_GPIO_Init+0x114>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <MX_GPIO_Init+0x114>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a28      	ldr	r2, [pc, #160]	; (8001578 <MX_GPIO_Init+0x114>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <MX_GPIO_Init+0x114>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MX_GPIO_Init+0x114>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a21      	ldr	r2, [pc, #132]	; (8001578 <MX_GPIO_Init+0x114>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_GPIO_Init+0x114>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_GPIO_Init+0x114>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a1a      	ldr	r2, [pc, #104]	; (8001578 <MX_GPIO_Init+0x114>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_GPIO_Init+0x114>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	21b4      	movs	r1, #180	; 0xb4
 8001526:	4815      	ldr	r0, [pc, #84]	; (800157c <MX_GPIO_Init+0x118>)
 8001528:	f001 fe68 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_GPIO_Init+0x11c>)
 8001532:	f001 fe63 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001536:	23b4      	movs	r3, #180	; 0xb4
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <MX_GPIO_Init+0x118>)
 800154e:	f001 fcb9 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_GPIO_Init+0x11c>)
 800156a:	f001 fcab 	bl	8002ec4 <HAL_GPIO_Init>

}
 800156e:	bf00      	nop
 8001570:	3730      	adds	r7, #48	; 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40021000 	.word	0x40021000
 8001580:	40020000 	.word	0x40020000

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	e7fe      	b.n	800158c <Error_Handler+0x8>
	...

08001590 <_Z12get_pressurev>:
int valve_on=40; //7.5: 50
int flag=0;
int err=0;
int flag_co2 = 0;

float get_pressure(){
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af02      	add	r7, sp, #8
	int OUTPUT_MIN = 1638;
 8001596:	f240 6366 	movw	r3, #1638	; 0x666
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
	int OUTPUT_MAX = 14746;
 800159c:	f643 139a 	movw	r3, #14746	; 0x399a
 80015a0:	623b      	str	r3, [r7, #32]
	float PRESSURE_MIN = -15.0;
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <_Z12get_pressurev+0x118>)
 80015a4:	61fb      	str	r3, [r7, #28]
	float PRESSURE_MAX = +15.0;
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <_Z12get_pressurev+0x11c>)
 80015a8:	61bb      	str	r3, [r7, #24]

	uint8_t S = 5; // pressure gauge: status
 80015aa:	2305      	movs	r3, #5
 80015ac:	75fb      	strb	r3, [r7, #23]
	float T = -28.1; // pressure gauge: temperature
 80015ae:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <_Z12get_pressurev+0x120>)
 80015b0:	613b      	str	r3, [r7, #16]
	uint8_t pData[4];
	// info needed
	float P = -28.0; // pressure gauge: pressure (mBar)
 80015b2:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <_Z12get_pressurev+0x124>)
 80015b4:	60fb      	str	r3, [r7, #12]

	// pressure gauge
	HAL_I2C_Master_Receive(&hi2c1, 0x28 << 1, pData, 4, 2);
 80015b6:	1d3a      	adds	r2, r7, #4
 80015b8:	2302      	movs	r3, #2
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2304      	movs	r3, #4
 80015be:	2150      	movs	r1, #80	; 0x50
 80015c0:	483d      	ldr	r0, [pc, #244]	; (80016b8 <_Z12get_pressurev+0x128>)
 80015c2:	f001 ff79 	bl	80034b8 <HAL_I2C_Master_Receive>
	S = pData[0] >> 6;
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	119b      	asrs	r3, r3, #6
 80015ca:	75fb      	strb	r3, [r7, #23]
	uint16_t tmp = (((uint16_t)pData[0] & 0x3f) << 8) | pData[1];
 80015cc:	793b      	ldrb	r3, [r7, #4]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	797b      	ldrb	r3, [r7, #5]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b21b      	sxth	r3, r3
 80015e0:	817b      	strh	r3, [r7, #10]
	P = (tmp - OUTPUT_MIN) * (PRESSURE_MAX - PRESSURE_MIN) / (OUTPUT_MAX - OUTPUT_MIN) + (PRESSURE_MIN);
 80015e2:	897a      	ldrh	r2, [r7, #10]
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f0:	edd7 6a06 	vldr	s13, [r7, #24]
 80015f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001600:	6a3a      	ldr	r2, [r7, #32]
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001612:	ed97 7a07 	vldr	s14, [r7, #28]
 8001616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161a:	edc7 7a03 	vstr	s15, [r7, #12]
	tmp = (((uint16_t)pData[2] << 8) + (pData[3] & 0xe0)) >> 5;
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	021a      	lsls	r2, r3, #8
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001628:	4413      	add	r3, r2
 800162a:	115b      	asrs	r3, r3, #5
 800162c:	817b      	strh	r3, [r7, #10]
	T = (tmp * 0.0977) - 50;
 800162e:	897b      	ldrh	r3, [r7, #10]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff77 	bl	8000524 <__aeabi_i2d>
 8001636:	a318      	add	r3, pc, #96	; (adr r3, 8001698 <_Z12get_pressurev+0x108>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7fe ffdc 	bl	80005f8 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <_Z12get_pressurev+0x12c>)
 800164e:	f7fe fe1b 	bl	8000288 <__aeabi_dsub>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff faa5 	bl	8000ba8 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	613b      	str	r3, [r7, #16]
	P *= 68.94757;
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7fe ff70 	bl	8000548 <__aeabi_f2d>
 8001668:	a30d      	add	r3, pc, #52	; (adr r3, 80016a0 <_Z12get_pressurev+0x110>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe ffc3 	bl	80005f8 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fa95 	bl	8000ba8 <__aeabi_d2f>
 800167e:	4603      	mov	r3, r0
 8001680:	60fb      	str	r3, [r7, #12]

	UNUSED(S);
	UNUSED(T);

	return P;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	ee07 3a90 	vmov	s15, r3
}
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	f3af 8000 	nop.w
 8001698:	00d1b717 	.word	0x00d1b717
 800169c:	3fb902de 	.word	0x3fb902de
 80016a0:	fca42aed 	.word	0xfca42aed
 80016a4:	40513ca4 	.word	0x40513ca4
 80016a8:	c1700000 	.word	0xc1700000
 80016ac:	41700000 	.word	0x41700000
 80016b0:	c1e0cccd 	.word	0xc1e0cccd
 80016b4:	c1e00000 	.word	0xc1e00000
 80016b8:	20000720 	.word	0x20000720
 80016bc:	40490000 	.word	0x40490000

080016c0 <_Z15set_vacuum_pumpb>:
	} else {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
	}
}

void set_vacuum_pump(bool en){
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	static int i=0;
	if(en){
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <_Z15set_vacuum_pumpb+0x1c>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,499);
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <_Z15set_vacuum_pumpb+0x30>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
//		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);

	}
}
 80016da:	e003      	b.n	80016e4 <_Z15set_vacuum_pumpb+0x24>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <_Z15set_vacuum_pumpb+0x30>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000800 	.word	0x20000800
 80016f4:	00000000 	.word	0x00000000

080016f8 <_Z11gas_controlv>:
	bool adjust_valve;//valve_on_ctrl
	bool steady;//statistics
	bool air_flag;//pump_flag
	bool f_co2_flag;
};
void gas_control(){
 80016f8:	b5b0      	push	{r4, r5, r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
	float p_upper = 580.0;
 80016fe:	4b74      	ldr	r3, [pc, #464]	; (80018d0 <_Z11gas_controlv+0x1d8>)
 8001700:	60fb      	str	r3, [r7, #12]
	float p_lower = 460.0;
 8001702:	4b74      	ldr	r3, [pc, #464]	; (80018d4 <_Z11gas_controlv+0x1dc>)
 8001704:	60bb      	str	r3, [r7, #8]
	float sec = 0;
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	607b      	str	r3, [r7, #4]

	static float last_co2 = 0;
	float difference = 0;
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
	static int target_change_times = 1;
	static float timer = 0;

	static control_flag ctrl = {false,false,false,false,false,false,false};

	P = get_pressure();
 8001712:	f7ff ff3d 	bl	8001590 <_Z12get_pressurev>
 8001716:	eef0 7a40 	vmov.f32	s15, s0
 800171a:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <_Z11gas_controlv+0x1e0>)
 800171c:	edc3 7a00 	vstr	s15, [r3]
	pressure = P;
 8001720:	4b6d      	ldr	r3, [pc, #436]	; (80018d8 <_Z11gas_controlv+0x1e0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a6d      	ldr	r2, [pc, #436]	; (80018dc <_Z11gas_controlv+0x1e4>)
 8001726:	6013      	str	r3, [r2, #0]
	timer++;
 8001728:	4b6d      	ldr	r3, [pc, #436]	; (80018e0 <_Z11gas_controlv+0x1e8>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001736:	4b6a      	ldr	r3, [pc, #424]	; (80018e0 <_Z11gas_controlv+0x1e8>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
	sec = timer/40; 
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <_Z11gas_controlv+0x1e8>)
 800173e:	ed93 7a00 	vldr	s14, [r3]
 8001742:	eddf 6a68 	vldr	s13, [pc, #416]	; 80018e4 <_Z11gas_controlv+0x1ec>
 8001746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174a:	edc7 7a01 	vstr	s15, [r7, #4]
	if(sec<3)
 800174e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001752:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d505      	bpl.n	800176c <_Z11gas_controlv+0x74>
	{
		target = 5;
 8001760:	4b61      	ldr	r3, [pc, #388]	; (80018e8 <_Z11gas_controlv+0x1f0>)
 8001762:	4a62      	ldr	r2, [pc, #392]	; (80018ec <_Z11gas_controlv+0x1f4>)
 8001764:	601a      	str	r2, [r3, #0]
		valve_on = 30;
 8001766:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <_Z11gas_controlv+0x1f8>)
 8001768:	221e      	movs	r2, #30
 800176a:	601a      	str	r2, [r3, #0]
	}
	if( sec > 1800 * target_change_times)
 800176c:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <_Z11gas_controlv+0x1fc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001780:	ed97 7a01 	vldr	s14, [r7, #4]
 8001784:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	dd1f      	ble.n	80017ce <_Z11gas_controlv+0xd6>
	{
		target_change_times++;
 800178e:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <_Z11gas_controlv+0x1fc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	4a57      	ldr	r2, [pc, #348]	; (80018f4 <_Z11gas_controlv+0x1fc>)
 8001796:	6013      	str	r3, [r2, #0]
		target = target+1.0;
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <_Z11gas_controlv+0x1f0>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a6:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <_Z11gas_controlv+0x1f0>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
		valve_on = (target-1)*10;
 80017ac:	4b4e      	ldr	r3, [pc, #312]	; (80018e8 <_Z11gas_controlv+0x1f0>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c6:	ee17 2a90 	vmov	r2, s15
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <_Z11gas_controlv+0x1f8>)
 80017cc:	601a      	str	r2, [r3, #0]
	}


	if(P < p_lower)
 80017ce:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <_Z11gas_controlv+0x1e0>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80017d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	f340 8094 	ble.w	800190c <_Z11gas_controlv+0x214>
	{
		i=0;
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <_Z11gas_controlv+0x200>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
		ctrl.f_co2_flag = false;
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <_Z11gas_controlv+0x204>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	719a      	strb	r2, [r3, #6]
		ctrl.f_air_flag = false;
 80017f0:	4b42      	ldr	r3, [pc, #264]	; (80018fc <_Z11gas_controlv+0x204>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	709a      	strb	r2, [r3, #2]
		if(CO2_L < target - 0.2 && !ctrl.co2_on){
 80017f6:	4b42      	ldr	r3, [pc, #264]	; (8001900 <_Z11gas_controlv+0x208>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fea4 	bl	8000548 <__aeabi_f2d>
 8001800:	4604      	mov	r4, r0
 8001802:	460d      	mov	r5, r1
 8001804:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <_Z11gas_controlv+0x1f0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe9d 	bl	8000548 <__aeabi_f2d>
 800180e:	a32e      	add	r3, pc, #184	; (adr r3, 80018c8 <_Z11gas_controlv+0x1d0>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fd38 	bl	8000288 <__aeabi_dsub>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7ff f95c 	bl	8000adc <__aeabi_dcmplt>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00d      	beq.n	8001846 <_Z11gas_controlv+0x14e>
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <_Z11gas_controlv+0x204>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f083 0301 	eor.w	r3, r3, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <_Z11gas_controlv+0x14e>
			counter = 0;
 8001838:	4b32      	ldr	r3, [pc, #200]	; (8001904 <_Z11gas_controlv+0x20c>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
			ctrl.co2_on = true;
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <_Z11gas_controlv+0x204>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	e0c1      	b.n	80019ca <_Z11gas_controlv+0x2d2>
		}
		else if (CO2_L > target+0.2 && !ctrl.co2_on){
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <_Z11gas_controlv+0x208>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe7c 	bl	8000548 <__aeabi_f2d>
 8001850:	4604      	mov	r4, r0
 8001852:	460d      	mov	r5, r1
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <_Z11gas_controlv+0x1f0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe75 	bl	8000548 <__aeabi_f2d>
 800185e:	a31a      	add	r3, pc, #104	; (adr r3, 80018c8 <_Z11gas_controlv+0x1d0>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fd12 	bl	800028c <__adddf3>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4620      	mov	r0, r4
 800186e:	4629      	mov	r1, r5
 8001870:	f7ff f952 	bl	8000b18 <__aeabi_dcmpgt>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d017      	beq.n	80018aa <_Z11gas_controlv+0x1b2>
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <_Z11gas_controlv+0x204>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f083 0301 	eor.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <_Z11gas_controlv+0x1b2>
			ctrl.adjust_valve = true;
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <_Z11gas_controlv+0x204>)
 800188a:	2201      	movs	r2, #1
 800188c:	70da      	strb	r2, [r3, #3]
			counter = valve_on/3*2;
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <_Z11gas_controlv+0x1f8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <_Z11gas_controlv+0x210>)
 8001894:	fb82 1203 	smull	r1, r2, r2, r3
 8001898:	17db      	asrs	r3, r3, #31
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4a19      	ldr	r2, [pc, #100]	; (8001904 <_Z11gas_controlv+0x20c>)
 80018a0:	6013      	str	r3, [r2, #0]
			ctrl.co2_on=true;
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <_Z11gas_controlv+0x204>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	e08f      	b.n	80019ca <_Z11gas_controlv+0x2d2>
		}
		else if(!ctrl.co2_on) {
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <_Z11gas_controlv+0x204>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	f083 0301 	eor.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8088 	beq.w	80019ca <_Z11gas_controlv+0x2d2>
			counter = 0;
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <_Z11gas_controlv+0x20c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
			ctrl.co2_on =true;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <_Z11gas_controlv+0x204>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	e080      	b.n	80019ca <_Z11gas_controlv+0x2d2>
 80018c8:	9999999a 	.word	0x9999999a
 80018cc:	3fc99999 	.word	0x3fc99999
 80018d0:	44110000 	.word	0x44110000
 80018d4:	43e60000 	.word	0x43e60000
 80018d8:	2000038c 	.word	0x2000038c
 80018dc:	20000774 	.word	0x20000774
 80018e0:	200003a0 	.word	0x200003a0
 80018e4:	42200000 	.word	0x42200000
 80018e8:	20000004 	.word	0x20000004
 80018ec:	40a00000 	.word	0x40a00000
 80018f0:	20000008 	.word	0x20000008
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	2000039c 	.word	0x2000039c
 80018fc:	200003a4 	.word	0x200003a4
 8001900:	20000390 	.word	0x20000390
 8001904:	20000394 	.word	0x20000394
 8001908:	55555556 	.word	0x55555556
		}
	}
	else
	{
		if(CO2_L < target && !ctrl.co2_on && ctrl.f_co2_flag)
 800190c:	4ba6      	ldr	r3, [pc, #664]	; (8001ba8 <_Z11gas_controlv+0x4b0>)
 800190e:	ed93 7a00 	vldr	s14, [r3]
 8001912:	4ba6      	ldr	r3, [pc, #664]	; (8001bac <_Z11gas_controlv+0x4b4>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	d519      	bpl.n	8001956 <_Z11gas_controlv+0x25e>
 8001922:	4ba3      	ldr	r3, [pc, #652]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	f083 0301 	eor.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d012      	beq.n	8001956 <_Z11gas_controlv+0x25e>
 8001930:	4b9f      	ldr	r3, [pc, #636]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001932:	799b      	ldrb	r3, [r3, #6]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00e      	beq.n	8001956 <_Z11gas_controlv+0x25e>
		{
			ctrl.co2_on = true;
 8001938:	4b9d      	ldr	r3, [pc, #628]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
			ctrl.f_co2_flag = false;
 800193e:	4b9c      	ldr	r3, [pc, #624]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001940:	2200      	movs	r2, #0
 8001942:	719a      	strb	r2, [r3, #6]
			counter = valve_on/3;
 8001944:	4b9b      	ldr	r3, [pc, #620]	; (8001bb4 <_Z11gas_controlv+0x4bc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a9b      	ldr	r2, [pc, #620]	; (8001bb8 <_Z11gas_controlv+0x4c0>)
 800194a:	fb82 1203 	smull	r1, r2, r2, r3
 800194e:	17db      	asrs	r3, r3, #31
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	4a9a      	ldr	r2, [pc, #616]	; (8001bbc <_Z11gas_controlv+0x4c4>)
 8001954:	6013      	str	r3, [r2, #0]
		}
		
		if(CO2_L > target + 0.2 && !ctrl.f_air_on && !ctrl.f_air_flag)
 8001956:	4b94      	ldr	r3, [pc, #592]	; (8001ba8 <_Z11gas_controlv+0x4b0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdf4 	bl	8000548 <__aeabi_f2d>
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
 8001964:	4b91      	ldr	r3, [pc, #580]	; (8001bac <_Z11gas_controlv+0x4b4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fded 	bl	8000548 <__aeabi_f2d>
 800196e:	a388      	add	r3, pc, #544	; (adr r3, 8001b90 <_Z11gas_controlv+0x498>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fc8a 	bl	800028c <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7ff f8ca 	bl	8000b18 <__aeabi_dcmpgt>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01f      	beq.n	80019ca <_Z11gas_controlv+0x2d2>
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 800198c:	785b      	ldrb	r3, [r3, #1]
 800198e:	f083 0301 	eor.w	r3, r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d018      	beq.n	80019ca <_Z11gas_controlv+0x2d2>
 8001998:	4b85      	ldr	r3, [pc, #532]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 800199a:	789b      	ldrb	r3, [r3, #2]
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d011      	beq.n	80019ca <_Z11gas_controlv+0x2d2>
		{
			ctrl.f_air_on = true;
 80019a6:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	705a      	strb	r2, [r3, #1]
			ctrl.f_air_flag = true;
 80019ac:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	709a      	strb	r2, [r3, #2]
			if(ctrl.adjust_valve == true)
 80019b2:	4b7f      	ldr	r3, [pc, #508]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 80019b4:	78db      	ldrb	r3, [r3, #3]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <_Z11gas_controlv+0x2d2>
			{
				valve_on--;
 80019ba:	4b7e      	ldr	r3, [pc, #504]	; (8001bb4 <_Z11gas_controlv+0x4bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3b01      	subs	r3, #1
 80019c0:	4a7c      	ldr	r2, [pc, #496]	; (8001bb4 <_Z11gas_controlv+0x4bc>)
 80019c2:	6013      	str	r3, [r2, #0]
				ctrl.adjust_valve = false;
 80019c4:	4b7a      	ldr	r3, [pc, #488]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	70da      	strb	r2, [r3, #3]
			}
		}
	}

	if (P > p_upper){
 80019ca:	4b7d      	ldr	r3, [pc, #500]	; (8001bc0 <_Z11gas_controlv+0x4c8>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80019d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	d50a      	bpl.n	80019f4 <_Z11gas_controlv+0x2fc>
		ctrl.air_flag = false;
 80019de:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	715a      	strb	r2, [r3, #5]
		ctrl.steady = false;
 80019e4:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	711a      	strb	r2, [r3, #4]
		i++;
 80019ea:	4b76      	ldr	r3, [pc, #472]	; (8001bc4 <_Z11gas_controlv+0x4cc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	4a74      	ldr	r2, [pc, #464]	; (8001bc4 <_Z11gas_controlv+0x4cc>)
 80019f2:	6013      	str	r3, [r2, #0]
	}
	if(i==1)
 80019f4:	4b73      	ldr	r3, [pc, #460]	; (8001bc4 <_Z11gas_controlv+0x4cc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <_Z11gas_controlv+0x314>
	{
		ctrl.f_co2_flag = true;
 80019fc:	4b6c      	ldr	r3, [pc, #432]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	719a      	strb	r2, [r3, #6]
		i++;
 8001a02:	4b70      	ldr	r3, [pc, #448]	; (8001bc4 <_Z11gas_controlv+0x4cc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	4a6e      	ldr	r2, [pc, #440]	; (8001bc4 <_Z11gas_controlv+0x4cc>)
 8001a0a:	6013      	str	r3, [r2, #0]
	}
	if(P> p_upper+50 || CO2_L < target+0.1){
 8001a0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a10:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001bc8 <_Z11gas_controlv+0x4d0>
 8001a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a18:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <_Z11gas_controlv+0x4c8>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	d419      	bmi.n	8001a5c <_Z11gas_controlv+0x364>
 8001a28:	4b5f      	ldr	r3, [pc, #380]	; (8001ba8 <_Z11gas_controlv+0x4b0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd8b 	bl	8000548 <__aeabi_f2d>
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <_Z11gas_controlv+0x4b4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd84 	bl	8000548 <__aeabi_f2d>
 8001a40:	a355      	add	r3, pc, #340	; (adr r3, 8001b98 <_Z11gas_controlv+0x4a0>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fc21 	bl	800028c <__adddf3>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4629      	mov	r1, r5
 8001a52:	f7ff f843 	bl	8000adc <__aeabi_dcmplt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <_Z11gas_controlv+0x36a>
		ctrl.f_air_on=false;
 8001a5c:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	705a      	strb	r2, [r3, #1]
	}


	if(ctrl.co2_on){
 8001a62:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d02a      	beq.n	8001ac0 <_Z11gas_controlv+0x3c8>
		if(counter < valve_on){
 8001a6a:	4b54      	ldr	r3, [pc, #336]	; (8001bbc <_Z11gas_controlv+0x4c4>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b51      	ldr	r3, [pc, #324]	; (8001bb4 <_Z11gas_controlv+0x4bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	da0a      	bge.n	8001a8c <_Z11gas_controlv+0x394>
			counter ++;
 8001a76:	4b51      	ldr	r3, [pc, #324]	; (8001bbc <_Z11gas_controlv+0x4c4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	4a4f      	ldr	r2, [pc, #316]	; (8001bbc <_Z11gas_controlv+0x4c4>)
 8001a7e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2120      	movs	r1, #32
 8001a84:	4851      	ldr	r0, [pc, #324]	; (8001bcc <_Z11gas_controlv+0x4d4>)
 8001a86:	f001 fbb9 	bl	80031fc <HAL_GPIO_WritePin>
 8001a8a:	e01e      	b.n	8001aca <_Z11gas_controlv+0x3d2>
		}
		else{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2120      	movs	r1, #32
 8001a90:	484e      	ldr	r0, [pc, #312]	; (8001bcc <_Z11gas_controlv+0x4d4>)
 8001a92:	f001 fbb3 	bl	80031fc <HAL_GPIO_WritePin>
			if(P < p_lower + 40)
 8001a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a9a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001bd0 <_Z11gas_controlv+0x4d8>
 8001a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <_Z11gas_controlv+0x4c8>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	dd02      	ble.n	8001ab8 <_Z11gas_controlv+0x3c0>
				ctrl.air_flag = true;
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	715a      	strb	r2, [r3, #5]
			ctrl.co2_on = false;
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e004      	b.n	8001aca <_Z11gas_controlv+0x3d2>
		}
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2120      	movs	r1, #32
 8001ac4:	4841      	ldr	r0, [pc, #260]	; (8001bcc <_Z11gas_controlv+0x4d4>)
 8001ac6:	f001 fb99 	bl	80031fc <HAL_GPIO_WritePin>
	}

	if(ctrl.air_flag || ctrl.f_air_on)
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001acc:	795b      	ldrb	r3, [r3, #5]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d103      	bne.n	8001ada <_Z11gas_controlv+0x3e2>
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d050      	beq.n	8001b7c <_Z11gas_controlv+0x484>
	{
		set_vacuum_pump(true);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f7ff fdf0 	bl	80016c0 <_Z15set_vacuum_pumpb>
		if(!ctrl.steady)
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001ae2:	791b      	ldrb	r3, [r3, #4]
 8001ae4:	f083 0301 	eor.w	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d04a      	beq.n	8001b84 <_Z11gas_controlv+0x48c>
		{
			difference  =  last_co2 - CO2_L;
 8001aee:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <_Z11gas_controlv+0x4dc>)
 8001af0:	ed93 7a00 	vldr	s14, [r3]
 8001af4:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <_Z11gas_controlv+0x4b0>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afe:	edc7 7a00 	vstr	s15, [r7]
			if(difference < 0.1 && difference > -0.1 && CO2_L < target-0.2)
 8001b02:	6838      	ldr	r0, [r7, #0]
 8001b04:	f7fe fd20 	bl	8000548 <__aeabi_f2d>
 8001b08:	a323      	add	r3, pc, #140	; (adr r3, 8001b98 <_Z11gas_controlv+0x4a0>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	f7fe ffe5 	bl	8000adc <__aeabi_dcmplt>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d029      	beq.n	8001b6c <_Z11gas_controlv+0x474>
 8001b18:	6838      	ldr	r0, [r7, #0]
 8001b1a:	f7fe fd15 	bl	8000548 <__aeabi_f2d>
 8001b1e:	a320      	add	r3, pc, #128	; (adr r3, 8001ba0 <_Z11gas_controlv+0x4a8>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fff8 	bl	8000b18 <__aeabi_dcmpgt>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01e      	beq.n	8001b6c <_Z11gas_controlv+0x474>
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <_Z11gas_controlv+0x4b0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd08 	bl	8000548 <__aeabi_f2d>
 8001b38:	4604      	mov	r4, r0
 8001b3a:	460d      	mov	r5, r1
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <_Z11gas_controlv+0x4b4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fd01 	bl	8000548 <__aeabi_f2d>
 8001b46:	a312      	add	r3, pc, #72	; (adr r3, 8001b90 <_Z11gas_controlv+0x498>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fb9c 	bl	8000288 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4620      	mov	r0, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7fe ffc0 	bl	8000adc <__aeabi_dcmplt>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <_Z11gas_controlv+0x474>
			{	
				valve_on++ ;
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <_Z11gas_controlv+0x4bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <_Z11gas_controlv+0x4bc>)
 8001b6a:	6013      	str	r3, [r2, #0]
			}
			ctrl.steady = true;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	711a      	strb	r2, [r3, #4]
			last_co2 = CO2_L;
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <_Z11gas_controlv+0x4b0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <_Z11gas_controlv+0x4dc>)
 8001b78:	6013      	str	r3, [r2, #0]
		if(!ctrl.steady)
 8001b7a:	e003      	b.n	8001b84 <_Z11gas_controlv+0x48c>
		}
	}
	else
		set_vacuum_pump(false);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff fd9f 	bl	80016c0 <_Z15set_vacuum_pumpb>

}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8c:	f3af 8000 	nop.w
 8001b90:	9999999a 	.word	0x9999999a
 8001b94:	3fc99999 	.word	0x3fc99999
 8001b98:	9999999a 	.word	0x9999999a
 8001b9c:	3fb99999 	.word	0x3fb99999
 8001ba0:	9999999a 	.word	0x9999999a
 8001ba4:	bfb99999 	.word	0xbfb99999
 8001ba8:	20000390 	.word	0x20000390
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	200003a4 	.word	0x200003a4
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	55555556 	.word	0x55555556
 8001bbc:	20000394 	.word	0x20000394
 8001bc0:	2000038c 	.word	0x2000038c
 8001bc4:	2000039c 	.word	0x2000039c
 8001bc8:	42480000 	.word	0x42480000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	42200000 	.word	0x42200000
 8001bd4:	20000398 	.word	0x20000398

08001bd8 <main_2_init>:
uint8_t GM[100] = {};
uint32_t global_count = 0;
uint8_t DO[500] = {};


void main_2_init(void){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	/* modules initialization */
	// gas_mixer.init();
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <main_2_init+0x1c>)
 8001be2:	f001 fb0b 	bl	80031fc <HAL_GPIO_WritePin>
	//doph.init();
	//linear_motor.init();

	/* timer 7 */
	HAL_TIM_Base_Start_IT(&htim7);
 8001be6:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <main_2_init+0x20>)
 8001be8:	f003 ff52 	bl	8005a90 <HAL_TIM_Base_Start_IT>
	EXPLOR_read();
 8001bec:	f000 fd10 	bl	8002610 <EXPLOR_read>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	20000928 	.word	0x20000928

08001bfc <main_2_loop>:

void main_2_loop(void){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0fe      	sub	sp, #504	; 0x1f8
 8001c00:	af00      	add	r7, sp, #0
	mother_routine_update_to_PC(tick, 250);
	mother_routine_handle_PC();
	*/

	/* periodic process */
	if(tim7_EN){
 8001c02:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <main_2_loop+0x1d0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80d9 	beq.w	8001dc0 <main_2_loop+0x1c4>
		gas_control();
 8001c0e:	f7ff fd73 	bl	80016f8 <_Z11gas_controlv>
		user_main();
 8001c12:	f000 fce5 	bl	80025e0 <user_main>
		CO2_L = r/100;
 8001c16:	4b6e      	ldr	r3, [pc, #440]	; (8001dd0 <main_2_loop+0x1d4>)
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001dd4 <main_2_loop+0x1d8>
 8001c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c24:	4b6c      	ldr	r3, [pc, #432]	; (8001dd8 <main_2_loop+0x1dc>)
 8001c26:	edc3 7a00 	vstr	s15, [r3]
		count++;
 8001c2a:	4b6c      	ldr	r3, [pc, #432]	; (8001ddc <main_2_loop+0x1e0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	4a6a      	ldr	r2, [pc, #424]	; (8001ddc <main_2_loop+0x1e0>)
 8001c32:	6013      	str	r3, [r2, #0]
		if(count%40==0)
 8001c34:	4b69      	ldr	r3, [pc, #420]	; (8001ddc <main_2_loop+0x1e0>)
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	4b69      	ldr	r3, [pc, #420]	; (8001de0 <main_2_loop+0x1e4>)
 8001c3a:	fb83 2301 	smull	r2, r3, r3, r1
 8001c3e:	111a      	asrs	r2, r3, #4
 8001c40:	17cb      	asrs	r3, r1, #31
 8001c42:	1ad2      	subs	r2, r2, r3
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1aca      	subs	r2, r1, r3
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d10c      	bne.n	8001c6c <main_2_loop+0x70>
		{
			time++;
 8001c52:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <main_2_loop+0x1e8>)
 8001c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b62      	ldr	r3, [pc, #392]	; (8001de8 <main_2_loop+0x1ec>)
 8001c5e:	f7fe fb15 	bl	800028c <__adddf3>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	495f      	ldr	r1, [pc, #380]	; (8001de4 <main_2_loop+0x1e8>)
 8001c68:	e9c1 2300 	strd	r2, r3, [r1]
		}
		//doph.loop();

		if(flag_p == 1)
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <main_2_loop+0x1f0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d114      	bne.n	8001c9e <main_2_loop+0xa2>
		{
			count_pon++;
 8001c74:	4b5e      	ldr	r3, [pc, #376]	; (8001df0 <main_2_loop+0x1f4>)
 8001c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <main_2_loop+0x1ec>)
 8001c80:	f7fe fb04 	bl	800028c <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4959      	ldr	r1, [pc, #356]	; (8001df0 <main_2_loop+0x1f4>)
 8001c8a:	e9c1 2300 	strd	r2, r3, [r1]
			count_poff = 0;
 8001c8e:	4959      	ldr	r1, [pc, #356]	; (8001df4 <main_2_loop+0x1f8>)
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9c1 2300 	strd	r2, r3, [r1]
 8001c9c:	e017      	b.n	8001cce <main_2_loop+0xd2>
		}
		else if(flag_p == 2)
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <main_2_loop+0x1f0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d113      	bne.n	8001cce <main_2_loop+0xd2>
		{
			count_poff++;
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <main_2_loop+0x1f8>)
 8001ca8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	4b4d      	ldr	r3, [pc, #308]	; (8001de8 <main_2_loop+0x1ec>)
 8001cb2:	f7fe faeb 	bl	800028c <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	494e      	ldr	r1, [pc, #312]	; (8001df4 <main_2_loop+0x1f8>)
 8001cbc:	e9c1 2300 	strd	r2, r3, [r1]
			count_pon = 0;
 8001cc0:	494b      	ldr	r1, [pc, #300]	; (8001df0 <main_2_loop+0x1f4>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(flag_v == 1)
 8001cce:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <main_2_loop+0x1fc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d114      	bne.n	8001d00 <main_2_loop+0x104>
		{
			count_von++;
 8001cd6:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <main_2_loop+0x200>)
 8001cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <main_2_loop+0x1ec>)
 8001ce2:	f7fe fad3 	bl	800028c <__adddf3>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4944      	ldr	r1, [pc, #272]	; (8001dfc <main_2_loop+0x200>)
 8001cec:	e9c1 2300 	strd	r2, r3, [r1]
			count_voff=0;
 8001cf0:	4943      	ldr	r1, [pc, #268]	; (8001e00 <main_2_loop+0x204>)
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9c1 2300 	strd	r2, r3, [r1]
 8001cfe:	e017      	b.n	8001d30 <main_2_loop+0x134>
		}
		else if(flag_v == 2)
 8001d00:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <main_2_loop+0x1fc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d113      	bne.n	8001d30 <main_2_loop+0x134>
		{
			count_voff++;
 8001d08:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <main_2_loop+0x204>)
 8001d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <main_2_loop+0x1ec>)
 8001d14:	f7fe faba 	bl	800028c <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4938      	ldr	r1, [pc, #224]	; (8001e00 <main_2_loop+0x204>)
 8001d1e:	e9c1 2300 	strd	r2, r3, [r1]
			count_von = 0;
 8001d22:	4936      	ldr	r1, [pc, #216]	; (8001dfc <main_2_loop+0x200>)
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	e9c1 2300 	strd	r2, r3, [r1]
		 * CDC_RD:
		 * 1. time tick
		 * 2. gas mixer
		 * 3. gas source control
		 */
		char foo[400] = "";
 8001d30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f00a f979 	bl	800c038 <memset>
		char bar[100] = "";
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2260      	movs	r2, #96	; 0x60
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f00a f970 	bl	800c038 <memset>

	//	strcat(foo, (char*)GM);

		// sprintf(bar, "[P]%.2f,[V]%.2f,p_on:%.2f,p_off:%.2f,v_on:%.2f,v_off:%.2f\r\n", P, V,float(count_pon*25/1000),float(count_poff*25/1000),float(count_von*25/1000),float(count_voff*25/1000));
		// strcat(foo, bar);
		if(count%20==0)
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <main_2_loop+0x1e0>)
 8001d5a:	6819      	ldr	r1, [r3, #0]
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <main_2_loop+0x1e4>)
 8001d5e:	fb83 2301 	smull	r2, r3, r3, r1
 8001d62:	10da      	asrs	r2, r3, #3
 8001d64:	17cb      	asrs	r3, r1, #31
 8001d66:	1ad2      	subs	r2, r2, r3
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	1aca      	subs	r2, r1, r3
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d121      	bne.n	8001dba <main_2_loop+0x1be>
		{
//			sprintf(bar,"P:%.2f,CO2:%.2f,valve_on:%d,counter:%d,err:%d,time:%.2f,target:%.2f\r\n",P,CO2_L,valve_on,counter,err,time,target);
			sprintf(bar,"CO2:%.2f\r\n",CO2_L);
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <main_2_loop+0x1dc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fbe4 	bl	8000548 <__aeabi_f2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	1d38      	adds	r0, r7, #4
 8001d86:	491f      	ldr	r1, [pc, #124]	; (8001e04 <main_2_loop+0x208>)
 8001d88:	f00a fdc8 	bl	800c91c <siprintf>
			strcat(foo,bar);
 8001d8c:	1d3a      	adds	r2, r7, #4
 8001d8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00a fde1 	bl	800c95c <strcat>
			HAL_Delay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f000 feca 	bl	8002b34 <HAL_Delay>
			CDC_Transmit_FS((uint8_t*)foo, strlen(foo));
 8001da0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fa13 	bl	80001d0 <strlen>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f008 fd03 	bl	800a7c0 <CDC_Transmit_FS>
		}


		tim7_EN = false;
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <main_2_loop+0x1d0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
//			CDC_Transmit_FS(op, 97 + 6);
			HAL_Delay(2);
		}
		*/
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003ab 	.word	0x200003ab
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	42c80000 	.word	0x42c80000
 8001dd8:	20000390 	.word	0x20000390
 8001ddc:	200003d0 	.word	0x200003d0
 8001de0:	66666667 	.word	0x66666667
 8001de4:	200003d8 	.word	0x200003d8
 8001de8:	3ff00000 	.word	0x3ff00000
 8001dec:	20000384 	.word	0x20000384
 8001df0:	200003b0 	.word	0x200003b0
 8001df4:	200003b8 	.word	0x200003b8
 8001df8:	20000388 	.word	0x20000388
 8001dfc:	200003c0 	.word	0x200003c0
 8001e00:	200003c8 	.word	0x200003c8
 8001e04:	0800eda8 	.word	0x0800eda8

08001e08 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	if(htim == &htim7){
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d102      	bne.n	8001e1e <HAL_TIM_PeriodElapsedCallback+0x16>
		tim7_EN = true;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
	}
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000928 	.word	0x20000928
 8001e30:	200003ab 	.word	0x200003ab

08001e34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_I2C_MspInit+0x84>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12c      	bne.n	8001f00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	480c      	ldr	r0, [pc, #48]	; (8001f10 <HAL_I2C_MspInit+0x8c>)
 8001ee0:	f000 fff0 	bl	8002ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40005400 	.word	0x40005400
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020400 	.word	0x40020400

08001f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_SPI_MspInit+0x84>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12b      	bne.n	8001f8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f6e:	2318      	movs	r3, #24
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_SPI_MspInit+0x8c>)
 8001f8a:	f000 ff9b 	bl	8002ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40013000 	.word	0x40013000
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020400 	.word	0x40020400

08001fa4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <HAL_TIM_Base_MspInit+0x48>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d115      	bne.n	8002026 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_TIM_Base_MspInit+0x4c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <HAL_TIM_Base_MspInit+0x4c>)
 8002004:	f043 0320 	orr.w	r3, r3, #32
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_TIM_Base_MspInit+0x4c>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	2037      	movs	r0, #55	; 0x37
 800201c:	f000 fe89 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002020:	2037      	movs	r0, #55	; 0x37
 8002022:	f000 fea2 	bl	8002d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40001400 	.word	0x40001400
 8002034:	40023800 	.word	0x40023800

08002038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_TIM_MspPostInit+0x68>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d11e      	bne.n	8002098 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_TIM_MspPostInit+0x6c>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_TIM_MspPostInit+0x6c>)
 8002064:	f043 0310 	orr.w	r3, r3, #16
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_TIM_MspPostInit+0x6c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002076:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002088:	2301      	movs	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	4619      	mov	r1, r3
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <HAL_TIM_MspPostInit+0x70>)
 8002094:	f000 ff16 	bl	8002ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002098:	bf00      	nop
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b092      	sub	sp, #72	; 0x48
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4aa1      	ldr	r2, [pc, #644]	; (8002350 <HAL_UART_MspInit+0x2a4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d135      	bne.n	800213a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
 80020d2:	4ba0      	ldr	r3, [pc, #640]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a9f      	ldr	r2, [pc, #636]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b9d      	ldr	r3, [pc, #628]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ee:	4b99      	ldr	r3, [pc, #612]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a98      	ldr	r2, [pc, #608]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b96      	ldr	r3, [pc, #600]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002106:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002118:	2308      	movs	r3, #8
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002120:	4619      	mov	r1, r3
 8002122:	488d      	ldr	r0, [pc, #564]	; (8002358 <HAL_UART_MspInit+0x2ac>)
 8002124:	f000 fece 	bl	8002ec4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	2100      	movs	r1, #0
 800212c:	2034      	movs	r0, #52	; 0x34
 800212e:	f000 fe00 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002132:	2034      	movs	r0, #52	; 0x34
 8002134:	f000 fe19 	bl	8002d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002138:	e106      	b.n	8002348 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==UART5)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a87      	ldr	r2, [pc, #540]	; (800235c <HAL_UART_MspInit+0x2b0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d14b      	bne.n	80021dc <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
 8002148:	4b82      	ldr	r3, [pc, #520]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	4a81      	ldr	r2, [pc, #516]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800214e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002152:	6413      	str	r3, [r2, #64]	; 0x40
 8002154:	4b7f      	ldr	r3, [pc, #508]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	4b7b      	ldr	r3, [pc, #492]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	4a7a      	ldr	r2, [pc, #488]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	6313      	str	r3, [r2, #48]	; 0x30
 8002170:	4b78      	ldr	r3, [pc, #480]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
 8002180:	4b74      	ldr	r3, [pc, #464]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	4a73      	ldr	r2, [pc, #460]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002186:	f043 0308 	orr.w	r3, r3, #8
 800218a:	6313      	str	r3, [r2, #48]	; 0x30
 800218c:	4b71      	ldr	r3, [pc, #452]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	623b      	str	r3, [r7, #32]
 8002196:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021aa:	2308      	movs	r3, #8
 80021ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021b2:	4619      	mov	r1, r3
 80021b4:	4868      	ldr	r0, [pc, #416]	; (8002358 <HAL_UART_MspInit+0x2ac>)
 80021b6:	f000 fe85 	bl	8002ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ba:	2304      	movs	r3, #4
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021ca:	2308      	movs	r3, #8
 80021cc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021d2:	4619      	mov	r1, r3
 80021d4:	4862      	ldr	r0, [pc, #392]	; (8002360 <HAL_UART_MspInit+0x2b4>)
 80021d6:	f000 fe75 	bl	8002ec4 <HAL_GPIO_Init>
}
 80021da:	e0b5      	b.n	8002348 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a60      	ldr	r2, [pc, #384]	; (8002364 <HAL_UART_MspInit+0x2b8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d12c      	bne.n	8002240 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a59      	ldr	r2, [pc, #356]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80021f0:	f043 0310 	orr.w	r3, r3, #16
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b57      	ldr	r3, [pc, #348]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b50      	ldr	r3, [pc, #320]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800221e:	23c0      	movs	r3, #192	; 0xc0
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800222e:	2307      	movs	r3, #7
 8002230:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002236:	4619      	mov	r1, r3
 8002238:	484b      	ldr	r0, [pc, #300]	; (8002368 <HAL_UART_MspInit+0x2bc>)
 800223a:	f000 fe43 	bl	8002ec4 <HAL_GPIO_Init>
}
 800223e:	e083      	b.n	8002348 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a49      	ldr	r2, [pc, #292]	; (800236c <HAL_UART_MspInit+0x2c0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d144      	bne.n	80022d4 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART2_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a40      	ldr	r2, [pc, #256]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a39      	ldr	r2, [pc, #228]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002270:	f043 0308 	orr.w	r3, r3, #8
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002282:	2320      	movs	r3, #32
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002292:	2307      	movs	r3, #7
 8002294:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002296:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800229a:	4619      	mov	r1, r3
 800229c:	4830      	ldr	r0, [pc, #192]	; (8002360 <HAL_UART_MspInit+0x2b4>)
 800229e:	f000 fe11 	bl	8002ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022a2:	2340      	movs	r3, #64	; 0x40
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b2:	2307      	movs	r3, #7
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ba:	4619      	mov	r1, r3
 80022bc:	4828      	ldr	r0, [pc, #160]	; (8002360 <HAL_UART_MspInit+0x2b4>)
 80022be:	f000 fe01 	bl	8002ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	2026      	movs	r0, #38	; 0x26
 80022c8:	f000 fd33 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022cc:	2026      	movs	r0, #38	; 0x26
 80022ce:	f000 fd4c 	bl	8002d6a <HAL_NVIC_EnableIRQ>
}
 80022d2:	e039      	b.n	8002348 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART3)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a25      	ldr	r2, [pc, #148]	; (8002370 <HAL_UART_MspInit+0x2c4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d134      	bne.n	8002348 <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a14      	ldr	r2, [pc, #80]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002328:	2307      	movs	r3, #7
 800232a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002330:	4619      	mov	r1, r3
 8002332:	480b      	ldr	r0, [pc, #44]	; (8002360 <HAL_UART_MspInit+0x2b4>)
 8002334:	f000 fdc6 	bl	8002ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	2027      	movs	r0, #39	; 0x27
 800233e:	f000 fcf8 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002342:	2027      	movs	r0, #39	; 0x27
 8002344:	f000 fd11 	bl	8002d6a <HAL_NVIC_EnableIRQ>
}
 8002348:	bf00      	nop
 800234a:	3748      	adds	r7, #72	; 0x48
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40004c00 	.word	0x40004c00
 8002354:	40023800 	.word	0x40023800
 8002358:	40020800 	.word	0x40020800
 800235c:	40005000 	.word	0x40005000
 8002360:	40020c00 	.word	0x40020c00
 8002364:	40011000 	.word	0x40011000
 8002368:	40020400 	.word	0x40020400
 800236c:	40004400 	.word	0x40004400
 8002370:	40004800 	.word	0x40004800

08002374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002378:	f003 fa96 	bl	80058a8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800237c:	e7fe      	b.n	800237c <NMI_Handler+0x8>

0800237e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
	 * 	To keep the program running, maybe I can make a fault_cnt here,
	     every time entering xxxFault_Handler(), fault_cnt++ and return.
	     Once fault_cnt++ exceeds a threshold, do softreset or while(1).
	 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler+0x4>

0800238a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler+0x4>

08002396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c4:	f000 fb96 	bl	8002af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <USART2_IRQHandler+0x10>)
 80023d2:	f004 fae3 	bl	800699c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200008e4 	.word	0x200008e4

080023e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <USART3_IRQHandler+0x10>)
 80023e6:	f004 fad9 	bl	800699c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200006dc 	.word	0x200006dc

080023f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <UART4_IRQHandler+0x10>)
 80023fa:	f004 facf 	bl	800699c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000848 	.word	0x20000848

08002408 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <TIM7_IRQHandler+0x10>)
 800240e:	f003 fbfe 	bl	8005c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000928 	.word	0x20000928

0800241c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <OTG_FS_IRQHandler+0x10>)
 8002422:	f001 fdb9 	bl	8003f98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20001e44 	.word	0x20001e44

08002430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
	return 1;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_kill>:

int _kill(int pid, int sig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800244a:	f009 fdcb 	bl	800bfe4 <__errno>
 800244e:	4603      	mov	r3, r0
 8002450:	2216      	movs	r2, #22
 8002452:	601a      	str	r2, [r3, #0]
	return -1;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_exit>:

void _exit (int status)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ffe7 	bl	8002440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002472:	e7fe      	b.n	8002472 <_exit+0x12>

08002474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e00a      	b.n	800249c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002486:	f3af 8000 	nop.w
 800248a:	4601      	mov	r1, r0
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	60ba      	str	r2, [r7, #8]
 8002492:	b2ca      	uxtb	r2, r1
 8002494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dbf0      	blt.n	8002486 <_read+0x12>
	}

return len;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	e009      	b.n	80024d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	60ba      	str	r2, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3301      	adds	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	dbf1      	blt.n	80024c0 <_write+0x12>
	}
	return len;
 80024dc:	687b      	ldr	r3, [r7, #4]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <_close>:

int _close(int file)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	return -1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800250e:	605a      	str	r2, [r3, #4]
	return 0;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <_isatty>:

int _isatty(int file)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
	return 1;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
	return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <_sbrk+0x5c>)
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <_sbrk+0x60>)
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <_sbrk+0x64>)
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <_sbrk+0x68>)
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d207      	bcs.n	8002590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002580:	f009 fd30 	bl	800bfe4 <__errno>
 8002584:	4603      	mov	r3, r0
 8002586:	220c      	movs	r2, #12
 8002588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e009      	b.n	80025a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <_sbrk+0x64>)
 80025a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20020000 	.word	0x20020000
 80025b0:	00000400 	.word	0x00000400
 80025b4:	200003e0 	.word	0x200003e0
 80025b8:	20002260 	.word	0x20002260

080025bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <SystemInit+0x20>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <SystemInit+0x20>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <user_main>:
uint8_t bufdata[200] = {0}, result_bufdata[200] = {0};
uint8_t abufdata;
uint8_t data[] = {0x5A, 0x0D, 0x0A};
extern float P;
extern float r;
void user_main(void){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)data, 3);
 80025e4:	2203      	movs	r2, #3
 80025e6:	4907      	ldr	r1, [pc, #28]	; (8002604 <user_main+0x24>)
 80025e8:	4807      	ldr	r0, [pc, #28]	; (8002608 <user_main+0x28>)
 80025ea:	f004 f961 	bl	80068b0 <HAL_UART_Transmit_IT>
//
	HAL_Delay(1000);
 80025ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025f2:	f000 fa9f 	bl	8002b34 <HAL_Delay>
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&abufdata, 1);
 80025f6:	2201      	movs	r2, #1
 80025f8:	4904      	ldr	r1, [pc, #16]	; (800260c <user_main+0x2c>)
 80025fa:	4803      	ldr	r0, [pc, #12]	; (8002608 <user_main+0x28>)
 80025fc:	f004 f99d 	bl	800693a <HAL_UART_Receive_IT>

}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000014 	.word	0x20000014
 8002608:	200006dc 	.word	0x200006dc
 800260c:	200004b0 	.word	0x200004b0

08002610 <EXPLOR_read>:

void EXPLOR_read(void){
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0


//	HAL_UART_Transmit_IT(&huart3, data, strlen(data));
	HAL_Delay(3000);
 8002614:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002618:	f000 fa8c 	bl	8002b34 <HAL_Delay>
//	HAL_UART_Transmit(&huart3, (uint8_t *)&data, 5, 100);
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)data, 3);
 800261c:	2203      	movs	r2, #3
 800261e:	4905      	ldr	r1, [pc, #20]	; (8002634 <EXPLOR_read+0x24>)
 8002620:	4805      	ldr	r0, [pc, #20]	; (8002638 <EXPLOR_read+0x28>)
 8002622:	f004 f945 	bl	80068b0 <HAL_UART_Transmit_IT>
//
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&abufdata, 1);
 8002626:	2201      	movs	r2, #1
 8002628:	4904      	ldr	r1, [pc, #16]	; (800263c <EXPLOR_read+0x2c>)
 800262a:	4803      	ldr	r0, [pc, #12]	; (8002638 <EXPLOR_read+0x28>)
 800262c:	f004 f985 	bl	800693a <HAL_UART_Receive_IT>

}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000014 	.word	0x20000014
 8002638:	200006dc 	.word	0x200006dc
 800263c:	200004b0 	.word	0x200004b0

08002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fd ff6a 	bl	8000524 <__aeabi_i2d>
 8002650:	4604      	mov	r4, r0
 8002652:	460d      	mov	r5, r1
 8002654:	6838      	ldr	r0, [r7, #0]
 8002656:	f7fd ff65 	bl	8000524 <__aeabi_i2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	ec43 2b11 	vmov	d1, r2, r3
 8002662:	ec45 4b10 	vmov	d0, r4, r5
 8002666:	f008 fd07 	bl	800b078 <pow>
 800266a:	eeb0 7a40 	vmov.f32	s14, s0
 800266e:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002672:	eeb0 0a47 	vmov.f32	s0, s14
 8002676:	eef0 0a67 	vmov.f32	s1, s15
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bdb0      	pop	{r4, r5, r7, pc}

08002680 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002684:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002688:	af04      	add	r7, sp, #16
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	6018      	str	r0, [r3, #0]

	bufdata[cnt++] = abufdata;
 800268e:	4bc0      	ldr	r3, [pc, #768]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	49be      	ldr	r1, [pc, #760]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 8002696:	600a      	str	r2, [r1, #0]
 8002698:	4abe      	ldr	r2, [pc, #760]	; (8002994 <HAL_UART_RxCpltCallback+0x314>)
 800269a:	7811      	ldrb	r1, [r2, #0]
 800269c:	4abe      	ldr	r2, [pc, #760]	; (8002998 <HAL_UART_RxCpltCallback+0x318>)
 800269e:	54d1      	strb	r1, [r2, r3]

	char DEBUG_cmd[300] = "";
 80026a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	3304      	adds	r3, #4
 80026aa:	f44f 7294 	mov.w	r2, #296	; 0x128
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f009 fcc1 	bl	800c038 <memset>
	char DEBUG_temp[300] = "";
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	3304      	adds	r3, #4
 80026c0:	f44f 7294 	mov.w	r2, #296	; 0x128
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f009 fcb6 	bl	800c038 <memset>
	float C1 = 0, y=0,result=10;
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80026dc:	4baf      	ldr	r3, [pc, #700]	; (800299c <HAL_UART_RxCpltCallback+0x31c>)
 80026de:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
//	sprintf(DEBUG_cmd, "%d \r\n",cnt);
//	CDC_Transmit_FS((uint8_t*)DEBUG_cmd, strlen(DEBUG_cmd));
	if((bufdata[cnt-1] == 0x0A) && (bufdata[cnt-2] == 0x0D)){
 80026e2:	4bab      	ldr	r3, [pc, #684]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	4aab      	ldr	r2, [pc, #684]	; (8002998 <HAL_UART_RxCpltCallback+0x318>)
 80026ea:	5cd3      	ldrb	r3, [r2, r3]
 80026ec:	2b0a      	cmp	r3, #10
 80026ee:	f040 8130 	bne.w	8002952 <HAL_UART_RxCpltCallback+0x2d2>
 80026f2:	4ba7      	ldr	r3, [pc, #668]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3b02      	subs	r3, #2
 80026f8:	4aa7      	ldr	r2, [pc, #668]	; (8002998 <HAL_UART_RxCpltCallback+0x318>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	2b0d      	cmp	r3, #13
 80026fe:	f040 8128 	bne.w	8002952 <HAL_UART_RxCpltCallback+0x2d2>
		sprintf(DEBUG_cmd, "%d \r\n", cnt);
 8002702:	4ba3      	ldr	r3, [pc, #652]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800270a:	49a5      	ldr	r1, [pc, #660]	; (80029a0 <HAL_UART_RxCpltCallback+0x320>)
 800270c:	4618      	mov	r0, r3
 800270e:	f00a f905 	bl	800c91c <siprintf>
		int co2=0;
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
		for(int i=3;i<cnt-2;i++){
 8002718:	2303      	movs	r3, #3
 800271a:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800271e:	4b9c      	ldr	r3, [pc, #624]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3b02      	subs	r3, #2
 8002724:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002728:	429a      	cmp	r2, r3
 800272a:	da15      	bge.n	8002758 <HAL_UART_RxCpltCallback+0xd8>
			co2 = co2*10+ (bufdata[i]-48);
 800272c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4619      	mov	r1, r3
 800273a:	4a97      	ldr	r2, [pc, #604]	; (8002998 <HAL_UART_RxCpltCallback+0x318>)
 800273c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002740:	4413      	add	r3, r2
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	3b30      	subs	r3, #48	; 0x30
 8002746:	440b      	add	r3, r1
 8002748:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
		for(int i=3;i<cnt-2;i++){
 800274c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002750:	3301      	adds	r3, #1
 8002752:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8002756:	e7e2      	b.n	800271e <HAL_UART_RxCpltCallback+0x9e>
		}
		C1 = co2;
 8002758:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002764:	edc7 7a9b 	vstr	s15, [r7, #620]	; 0x26c

		y = (2.6661 * pow(10,-16)* pow(C1,4) - 1.1146 * pow(10,-12) * pow(C1,3) + 1.7397 * pow(10,-9) * pow(C1,2) - 1.2556 * pow(10,-6)*C1 - 9.8754 * pow(10,-4));
 8002768:	f06f 010f 	mvn.w	r1, #15
 800276c:	200a      	movs	r0, #10
 800276e:	f7ff ff67 	bl	8002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002772:	ec51 0b10 	vmov	r0, r1, d0
 8002776:	a37c      	add	r3, pc, #496	; (adr r3, 8002968 <HAL_UART_RxCpltCallback+0x2e8>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f7fd ff3c 	bl	80005f8 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4614      	mov	r4, r2
 8002786:	461d      	mov	r5, r3
 8002788:	2004      	movs	r0, #4
 800278a:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 800278e:	f000 f913 	bl	80029b8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002792:	ec53 2b10 	vmov	r2, r3, d0
 8002796:	4620      	mov	r0, r4
 8002798:	4629      	mov	r1, r5
 800279a:	f7fd ff2d 	bl	80005f8 <__aeabi_dmul>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4614      	mov	r4, r2
 80027a4:	461d      	mov	r5, r3
 80027a6:	f06f 010b 	mvn.w	r1, #11
 80027aa:	200a      	movs	r0, #10
 80027ac:	f7ff ff48 	bl	8002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027b0:	ec51 0b10 	vmov	r0, r1, d0
 80027b4:	a36e      	add	r3, pc, #440	; (adr r3, 8002970 <HAL_UART_RxCpltCallback+0x2f0>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd ff1d 	bl	80005f8 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	2003      	movs	r0, #3
 80027c8:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 80027cc:	f000 f8f4 	bl	80029b8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027d0:	ec53 2b10 	vmov	r2, r3, d0
 80027d4:	4640      	mov	r0, r8
 80027d6:	4649      	mov	r1, r9
 80027d8:	f7fd ff0e 	bl	80005f8 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fd50 	bl	8000288 <__aeabi_dsub>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4614      	mov	r4, r2
 80027ee:	461d      	mov	r5, r3
 80027f0:	f06f 0108 	mvn.w	r1, #8
 80027f4:	200a      	movs	r0, #10
 80027f6:	f7ff ff23 	bl	8002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027fa:	ec51 0b10 	vmov	r0, r1, d0
 80027fe:	a35e      	add	r3, pc, #376	; (adr r3, 8002978 <HAL_UART_RxCpltCallback+0x2f8>)
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	f7fd fef8 	bl	80005f8 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4690      	mov	r8, r2
 800280e:	4699      	mov	r9, r3
 8002810:	2002      	movs	r0, #2
 8002812:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 8002816:	f000 f8cf 	bl	80029b8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800281a:	ec53 2b10 	vmov	r2, r3, d0
 800281e:	4640      	mov	r0, r8
 8002820:	4649      	mov	r1, r9
 8002822:	f7fd fee9 	bl	80005f8 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4620      	mov	r0, r4
 800282c:	4629      	mov	r1, r5
 800282e:	f7fd fd2d 	bl	800028c <__adddf3>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4614      	mov	r4, r2
 8002838:	461d      	mov	r5, r3
 800283a:	f06f 0105 	mvn.w	r1, #5
 800283e:	200a      	movs	r0, #10
 8002840:	f7ff fefe 	bl	8002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002844:	ec51 0b10 	vmov	r0, r1, d0
 8002848:	a34d      	add	r3, pc, #308	; (adr r3, 8002980 <HAL_UART_RxCpltCallback+0x300>)
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	f7fd fed3 	bl	80005f8 <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4690      	mov	r8, r2
 8002858:	4699      	mov	r9, r3
 800285a:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 800285e:	f7fd fe73 	bl	8000548 <__aeabi_f2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4640      	mov	r0, r8
 8002868:	4649      	mov	r1, r9
 800286a:	f7fd fec5 	bl	80005f8 <__aeabi_dmul>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	f7fd fd07 	bl	8000288 <__aeabi_dsub>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4614      	mov	r4, r2
 8002880:	461d      	mov	r5, r3
 8002882:	f06f 0103 	mvn.w	r1, #3
 8002886:	200a      	movs	r0, #10
 8002888:	f7ff feda 	bl	8002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800288c:	ec51 0b10 	vmov	r0, r1, d0
 8002890:	a33d      	add	r3, pc, #244	; (adr r3, 8002988 <HAL_UART_RxCpltCallback+0x308>)
 8002892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002896:	f7fd feaf 	bl	80005f8 <__aeabi_dmul>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4620      	mov	r0, r4
 80028a0:	4629      	mov	r1, r5
 80028a2:	f7fd fcf1 	bl	8000288 <__aeabi_dsub>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7fe f97b 	bl	8000ba8 <__aeabi_d2f>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
//		y = (2.811 * pow(10,-38)* pow(C1,6) - 9.817 * pow(10,-32) * pow(C1,5) + 1.304 * pow(10,-25) * pow(C1,4) - 8.126 * pow(10,-20)*pow(C1,3) + 2.311 * pow(10,-14) * pow(C1,2)- 2.195 * pow(10,-9) * C1 - 1.471 * pow(10,-3));
//		result = C1/(1+y*(1013-(1013+P)));
		result = C1/(1+y*(1013-(1013+0)));
 80028b8:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 80028bc:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80029a4 <HAL_UART_RxCpltCallback+0x324>
 80028c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80028cc:	edd7 6a9b 	vldr	s13, [r7, #620]	; 0x26c
 80028d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d4:	edc7 7a99 	vstr	s15, [r7, #612]	; 0x264
		r=result;
 80028d8:	4a33      	ldr	r2, [pc, #204]	; (80029a8 <HAL_UART_RxCpltCallback+0x328>)
 80028da:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80028de:	6013      	str	r3, [r2, #0]
//		sprintf(DEBUG_cmd, " %d %d %d\r\n", cnt, bufdata[0],bufdata[1]);
		sprintf(DEBUG_cmd, "%f,%f,%f\r\n ", C1/100,y,result/100);
 80028e0:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 80028e4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80029ac <HAL_UART_RxCpltCallback+0x32c>
 80028e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028ec:	ee16 0a90 	vmov	r0, s13
 80028f0:	f7fd fe2a 	bl	8000548 <__aeabi_f2d>
 80028f4:	4680      	mov	r8, r0
 80028f6:	4689      	mov	r9, r1
 80028f8:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 80028fc:	f7fd fe24 	bl	8000548 <__aeabi_f2d>
 8002900:	4604      	mov	r4, r0
 8002902:	460d      	mov	r5, r1
 8002904:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 8002908:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80029ac <HAL_UART_RxCpltCallback+0x32c>
 800290c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002910:	ee16 0a90 	vmov	r0, s13
 8002914:	f7fd fe18 	bl	8000548 <__aeabi_f2d>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8002920:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002924:	e9cd 4500 	strd	r4, r5, [sp]
 8002928:	4642      	mov	r2, r8
 800292a:	464b      	mov	r3, r9
 800292c:	4920      	ldr	r1, [pc, #128]	; (80029b0 <HAL_UART_RxCpltCallback+0x330>)
 800292e:	f009 fff5 	bl	800c91c <siprintf>
		CDC_Transmit_FS((uint8_t*)DEBUG_cmd, strlen(DEBUG_cmd));
 8002932:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fc4a 	bl	80001d0 <strlen>
 800293c:	4603      	mov	r3, r0
 800293e:	b29a      	uxth	r2, r3
 8002940:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f007 ff3a 	bl	800a7c0 <CDC_Transmit_FS>
//		for(int i=0;i<cnt;i++){
//			result_bufdata[i] = bufdata[i];
//		}

		cnt = 0;
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
	}



	HAL_UART_Receive_IT(&huart3, (uint8_t *)&abufdata, 1);
 8002952:	2201      	movs	r2, #1
 8002954:	490f      	ldr	r1, [pc, #60]	; (8002994 <HAL_UART_RxCpltCallback+0x314>)
 8002956:	4817      	ldr	r0, [pc, #92]	; (80029b4 <HAL_UART_RxCpltCallback+0x334>)
 8002958:	f003 ffef 	bl	800693a <HAL_UART_Receive_IT>
}
 800295c:	bf00      	nop
 800295e:	f507 771e 	add.w	r7, r7, #632	; 0x278
 8002962:	46bd      	mov	sp, r7
 8002964:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002968:	3c9eecc0 	.word	0x3c9eecc0
 800296c:	4005542c 	.word	0x4005542c
 8002970:	cf41f213 	.word	0xcf41f213
 8002974:	3ff1d566 	.word	0x3ff1d566
 8002978:	aacd9e84 	.word	0xaacd9e84
 800297c:	3ffbd5cf 	.word	0x3ffbd5cf
 8002980:	068db8bb 	.word	0x068db8bb
 8002984:	3ff416f0 	.word	0x3ff416f0
 8002988:	6dc5d639 	.word	0x6dc5d639
 800298c:	4023c034 	.word	0x4023c034
 8002990:	200003e4 	.word	0x200003e4
 8002994:	200004b0 	.word	0x200004b0
 8002998:	200003e8 	.word	0x200003e8
 800299c:	41200000 	.word	0x41200000
 80029a0:	0800edb4 	.word	0x0800edb4
 80029a4:	00000000 	.word	0x00000000
 80029a8:	20000000 	.word	0x20000000
 80029ac:	42c80000 	.word	0x42c80000
 80029b0:	0800edbc 	.word	0x0800edbc
 80029b4:	200006dc 	.word	0x200006dc

080029b8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	ed87 0a01 	vstr	s0, [r7, #4]
 80029c2:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fd fdbf 	bl	8000548 <__aeabi_f2d>
 80029ca:	4604      	mov	r4, r0
 80029cc:	460d      	mov	r5, r1
 80029ce:	6838      	ldr	r0, [r7, #0]
 80029d0:	f7fd fda8 	bl	8000524 <__aeabi_i2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	ec43 2b11 	vmov	d1, r2, r3
 80029dc:	ec45 4b10 	vmov	d0, r4, r5
 80029e0:	f008 fb4a 	bl	800b078 <pow>
 80029e4:	eeb0 7a40 	vmov.f32	s14, s0
 80029e8:	eef0 7a60 	vmov.f32	s15, s1
    }
 80029ec:	eeb0 0a47 	vmov.f32	s0, s14
 80029f0:	eef0 0a67 	vmov.f32	s1, s15
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080029fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a02:	490e      	ldr	r1, [pc, #56]	; (8002a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a18:	4c0b      	ldr	r4, [pc, #44]	; (8002a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a26:	f7ff fdc9 	bl	80025bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f009 fae1 	bl	800bff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a2e:	f7fe fa87 	bl	8000f40 <main>
  bx  lr    
 8002a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a3c:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8002a40:	0800f24c 	.word	0x0800f24c
  ldr r2, =_sbss
 8002a44:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8002a48:	2000225c 	.word	0x2000225c

08002a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a4c:	e7fe      	b.n	8002a4c <ADC_IRQHandler>
	...

08002a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <HAL_Init+0x40>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_Init+0x40>)
 8002a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_Init+0x40>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f000 f94f 	bl	8002d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7e:	200f      	movs	r0, #15
 8002a80:	f000 f808 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a84:	f7ff f9d6 	bl	8001e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00

08002a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_InitTick+0x54>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_InitTick+0x58>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f967 	bl	8002d86 <HAL_SYSTICK_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00e      	b.n	8002ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d80a      	bhi.n	8002ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f000 f92f 	bl	8002d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad4:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <HAL_InitTick+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000010 	.word	0x20000010
 8002aec:	2000001c 	.word	0x2000001c
 8002af0:	20000018 	.word	0x20000018

08002af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_IncTick+0x20>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_IncTick+0x24>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_IncTick+0x24>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	2000001c 	.word	0x2000001c
 8002b18:	20000970 	.word	0x20000970

08002b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_GetTick+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000970 	.word	0x20000970

08002b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff ffee 	bl	8002b1c <HAL_GetTick>
 8002b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d005      	beq.n	8002b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_Delay+0x44>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b5a:	bf00      	nop
 8002b5c:	f7ff ffde 	bl	8002b1c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d8f7      	bhi.n	8002b5c <HAL_Delay+0x28>
  {
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000001c 	.word	0x2000001c

08002b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bae:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	60d3      	str	r3, [r2, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4907      	ldr	r1, [pc, #28]	; (8002c18 <__NVIC_EnableIRQ+0x38>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	; (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce8:	d301      	bcc.n	8002cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00f      	b.n	8002d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <SysTick_Config+0x40>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf6:	210f      	movs	r1, #15
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f7ff ff8e 	bl	8002c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <SysTick_Config+0x40>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <SysTick_Config+0x40>)
 8002d08:	2207      	movs	r2, #7
 8002d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	e000e010 	.word	0xe000e010

08002d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ff29 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d44:	f7ff ff3e 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f7ff ff8e 	bl	8002c70 <NVIC_EncodePriority>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff5d 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff31 	bl	8002be0 <__NVIC_EnableIRQ>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ffa2 	bl	8002cd8 <SysTick_Config>
 8002d94:	4603      	mov	r3, r0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff feb6 	bl	8002b1c <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d008      	beq.n	8002dd0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e052      	b.n	8002e76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0216 	bic.w	r2, r2, #22
 8002dde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <HAL_DMA_Abort+0x62>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0208 	bic.w	r2, r2, #8
 8002e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e20:	e013      	b.n	8002e4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e22:	f7ff fe7b 	bl	8002b1c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d90c      	bls.n	8002e4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e015      	b.n	8002e76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e4      	bne.n	8002e22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	223f      	movs	r2, #63	; 0x3f
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d004      	beq.n	8002e9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e00c      	b.n	8002eb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2205      	movs	r2, #5
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e16b      	b.n	80031b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f040 815a 	bne.w	80031b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d005      	beq.n	8002f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d130      	bne.n	8002f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	2203      	movs	r2, #3
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 0201 	and.w	r2, r3, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d017      	beq.n	8002fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d123      	bne.n	8003008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3208      	adds	r2, #8
 8002fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80b4 	beq.w	80031b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <HAL_GPIO_Init+0x30c>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	4a5f      	ldr	r2, [pc, #380]	; (80031d0 <HAL_GPIO_Init+0x30c>)
 8003054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003058:	6453      	str	r3, [r2, #68]	; 0x44
 800305a:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_GPIO_Init+0x30c>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003066:	4a5b      	ldr	r2, [pc, #364]	; (80031d4 <HAL_GPIO_Init+0x310>)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_GPIO_Init+0x314>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d02b      	beq.n	80030ea <HAL_GPIO_Init+0x226>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a51      	ldr	r2, [pc, #324]	; (80031dc <HAL_GPIO_Init+0x318>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d025      	beq.n	80030e6 <HAL_GPIO_Init+0x222>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a50      	ldr	r2, [pc, #320]	; (80031e0 <HAL_GPIO_Init+0x31c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01f      	beq.n	80030e2 <HAL_GPIO_Init+0x21e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4f      	ldr	r2, [pc, #316]	; (80031e4 <HAL_GPIO_Init+0x320>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d019      	beq.n	80030de <HAL_GPIO_Init+0x21a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a4e      	ldr	r2, [pc, #312]	; (80031e8 <HAL_GPIO_Init+0x324>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0x216>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a4d      	ldr	r2, [pc, #308]	; (80031ec <HAL_GPIO_Init+0x328>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <HAL_GPIO_Init+0x212>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4c      	ldr	r2, [pc, #304]	; (80031f0 <HAL_GPIO_Init+0x32c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x20e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <HAL_GPIO_Init+0x330>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_GPIO_Init+0x20a>
 80030ca:	2307      	movs	r3, #7
 80030cc:	e00e      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030ce:	2308      	movs	r3, #8
 80030d0:	e00c      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030d2:	2306      	movs	r3, #6
 80030d4:	e00a      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030d6:	2305      	movs	r3, #5
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030da:	2304      	movs	r3, #4
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	; (80031d4 <HAL_GPIO_Init+0x310>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310a:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <HAL_GPIO_Init+0x334>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800312e:	4a32      	ldr	r2, [pc, #200]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003134:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003158:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <HAL_GPIO_Init+0x334>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003182:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_GPIO_Init+0x334>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ac:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <HAL_GPIO_Init+0x334>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f ae90 	bls.w	8002ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40021400 	.word	0x40021400
 80031f0:	40021800 	.word	0x40021800
 80031f4:	40021c00 	.word	0x40021c00
 80031f8:	40013c00 	.word	0x40013c00

080031fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
 8003208:	4613      	mov	r3, r2
 800320a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003218:	e003      	b.n	8003222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	041a      	lsls	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	619a      	str	r2, [r3, #24]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e12b      	b.n	800349a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe fe14 	bl	8001e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003294:	f002 fae0 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8003298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a81      	ldr	r2, [pc, #516]	; (80034a4 <HAL_I2C_Init+0x274>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d807      	bhi.n	80032b4 <HAL_I2C_Init+0x84>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a80      	ldr	r2, [pc, #512]	; (80034a8 <HAL_I2C_Init+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bf94      	ite	ls
 80032ac:	2301      	movls	r3, #1
 80032ae:	2300      	movhi	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e006      	b.n	80032c2 <HAL_I2C_Init+0x92>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a7d      	ldr	r2, [pc, #500]	; (80034ac <HAL_I2C_Init+0x27c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0e7      	b.n	800349a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a78      	ldr	r2, [pc, #480]	; (80034b0 <HAL_I2C_Init+0x280>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9b      	lsrs	r3, r3, #18
 80032d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a6a      	ldr	r2, [pc, #424]	; (80034a4 <HAL_I2C_Init+0x274>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d802      	bhi.n	8003304 <HAL_I2C_Init+0xd4>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3301      	adds	r3, #1
 8003302:	e009      	b.n	8003318 <HAL_I2C_Init+0xe8>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	4a69      	ldr	r2, [pc, #420]	; (80034b4 <HAL_I2C_Init+0x284>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	3301      	adds	r3, #1
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800332a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	495c      	ldr	r1, [pc, #368]	; (80034a4 <HAL_I2C_Init+0x274>)
 8003334:	428b      	cmp	r3, r1
 8003336:	d819      	bhi.n	800336c <HAL_I2C_Init+0x13c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e59      	subs	r1, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fbb1 f3f3 	udiv	r3, r1, r3
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800334c:	400b      	ands	r3, r1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_I2C_Init+0x138>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e59      	subs	r1, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	e051      	b.n	800340c <HAL_I2C_Init+0x1dc>
 8003368:	2304      	movs	r3, #4
 800336a:	e04f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <HAL_I2C_Init+0x168>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e012      	b.n	80033be <HAL_I2C_Init+0x18e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x196>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_I2C_Init+0x1bc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e58      	subs	r0, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	440b      	add	r3, r1
 80033dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ea:	e00f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	0099      	lsls	r1, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6809      	ldr	r1, [r1, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800343a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6911      	ldr	r1, [r2, #16]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	430b      	orrs	r3, r1
 800344e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	000186a0 	.word	0x000186a0
 80034a8:	001e847f 	.word	0x001e847f
 80034ac:	003d08ff 	.word	0x003d08ff
 80034b0:	431bde83 	.word	0x431bde83
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	461a      	mov	r2, r3
 80034c4:	460b      	mov	r3, r1
 80034c6:	817b      	strh	r3, [r7, #10]
 80034c8:	4613      	mov	r3, r2
 80034ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034cc:	f7ff fb26 	bl	8002b1c <HAL_GetTick>
 80034d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f040 820b 	bne.w	80038f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2319      	movs	r3, #25
 80034e6:	2201      	movs	r2, #1
 80034e8:	497c      	ldr	r1, [pc, #496]	; (80036dc <HAL_I2C_Master_Receive+0x224>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fad8 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	e1fe      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_I2C_Master_Receive+0x50>
 8003504:	2302      	movs	r3, #2
 8003506:	e1f7      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d007      	beq.n	800352e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2222      	movs	r2, #34	; 0x22
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2210      	movs	r2, #16
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	893a      	ldrh	r2, [r7, #8]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a5c      	ldr	r2, [pc, #368]	; (80036e0 <HAL_I2C_Master_Receive+0x228>)
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003570:	8979      	ldrh	r1, [r7, #10]
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f9c4 	bl	8003904 <I2C_MasterRequestRead>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e1b8      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d113      	bne.n	80035b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	623b      	str	r3, [r7, #32]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e18c      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d11b      	bne.n	80035f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e16c      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d11b      	bne.n	8003636 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	e14c      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800365c:	e138      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	2b03      	cmp	r3, #3
 8003664:	f200 80f1 	bhi.w	800384a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	2b01      	cmp	r3, #1
 800366e:	d123      	bne.n	80036b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fae9 	bl	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e139      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036b6:	e10b      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d14e      	bne.n	800375e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	2200      	movs	r2, #0
 80036c8:	4906      	ldr	r1, [pc, #24]	; (80036e4 <HAL_I2C_Master_Receive+0x22c>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f9e8 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e10e      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
 80036da:	bf00      	nop
 80036dc:	00100002 	.word	0x00100002
 80036e0:	ffff0000 	.word	0xffff0000
 80036e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800375c:	e0b8      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	2200      	movs	r2, #0
 8003766:	4966      	ldr	r1, [pc, #408]	; (8003900 <HAL_I2C_Master_Receive+0x448>)
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f999 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0bf      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	2200      	movs	r2, #0
 80037c2:	494f      	ldr	r1, [pc, #316]	; (8003900 <HAL_I2C_Master_Receive+0x448>)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f96b 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e091      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003848:	e042      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f9fc 	bl	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e04c      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b04      	cmp	r3, #4
 800389c:	d118      	bne.n	80038d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f47f aec2 	bne.w	800365e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3728      	adds	r7, #40	; 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	00010004 	.word	0x00010004

08003904 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	460b      	mov	r3, r1
 8003912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003928:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d006      	beq.n	800393e <I2C_MasterRequestRead+0x3a>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d003      	beq.n	800393e <I2C_MasterRequestRead+0x3a>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800393c:	d108      	bne.n	8003950 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e00b      	b.n	8003968 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	2b11      	cmp	r3, #17
 8003956:	d107      	bne.n	8003968 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003966:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f893 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	d103      	bne.n	8003998 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e079      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	e05f      	b.n	8003a78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	11db      	asrs	r3, r3, #7
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0306 	and.w	r3, r3, #6
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f063 030f 	orn	r3, r3, #15
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4930      	ldr	r1, [pc, #192]	; (8003a98 <I2C_MasterRequestRead+0x194>)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f8b9 	bl	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e054      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4929      	ldr	r1, [pc, #164]	; (8003a9c <I2C_MasterRequestRead+0x198>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f8a9 	bl	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e044      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f831 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a52:	d103      	bne.n	8003a5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e017      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	11db      	asrs	r3, r3, #7
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0306 	and.w	r3, r3, #6
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f063 030e 	orn	r3, r3, #14
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4907      	ldr	r1, [pc, #28]	; (8003a9c <I2C_MasterRequestRead+0x198>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f865 	bl	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	00010008 	.word	0x00010008
 8003a9c:	00010002 	.word	0x00010002

08003aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab0:	e025      	b.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d021      	beq.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7ff f82f 	bl	8002b1c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d116      	bne.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e023      	b.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d10d      	bne.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	e00c      	b.n	8003b3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d0b6      	beq.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b5c:	e051      	b.n	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6c:	d123      	bne.n	8003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f043 0204 	orr.w	r2, r3, #4
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e046      	b.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d021      	beq.n	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	f7fe ffad 	bl	8002b1c <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d116      	bne.n	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0220 	orr.w	r2, r3, #32
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e020      	b.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10c      	bne.n	8003c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e00b      	b.n	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d18d      	bne.n	8003b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c58:	e042      	b.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d119      	bne.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0210 	mvn.w	r2, #16
 8003c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e029      	b.n	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9c:	f7fe ff3e 	bl	8002b1c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e007      	b.n	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d1b5      	bne.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfa:	b08f      	sub	sp, #60	; 0x3c
 8003cfc:	af0a      	add	r7, sp, #40	; 0x28
 8003cfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e10f      	b.n	8003f2a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f006 fe93 	bl	800aa50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f003 fd86 	bl	800785a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	687e      	ldr	r6, [r7, #4]
 8003d56:	466d      	mov	r5, sp
 8003d58:	f106 0410 	add.w	r4, r6, #16
 8003d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d68:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d6c:	1d33      	adds	r3, r6, #4
 8003d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d70:	6838      	ldr	r0, [r7, #0]
 8003d72:	f003 fc5d 	bl	8007630 <USB_CoreInit>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0d0      	b.n	8003f2a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f003 fd74 	bl	800787c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e04a      	b.n	8003e30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	333d      	adds	r3, #61	; 0x3d
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	333c      	adds	r3, #60	; 0x3c
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dc2:	7bfa      	ldrb	r2, [r7, #15]
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	b298      	uxth	r0, r3
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3342      	adds	r3, #66	; 0x42
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	333f      	adds	r3, #63	; 0x3f
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3344      	adds	r3, #68	; 0x44
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3348      	adds	r3, #72	; 0x48
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	3350      	adds	r3, #80	; 0x50
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3af      	bcc.n	8003d9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	e044      	b.n	8003eca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003eae:	7bfa      	ldrb	r2, [r7, #15]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d3b5      	bcc.n	8003e40 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	687e      	ldr	r6, [r7, #4]
 8003edc:	466d      	mov	r5, sp
 8003ede:	f106 0410 	add.w	r4, r6, #16
 8003ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eee:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ef2:	1d33      	adds	r3, r6, #4
 8003ef4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ef6:	6838      	ldr	r0, [r7, #0]
 8003ef8:	f003 fd0c 	bl	8007914 <USB_DevInit>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e00d      	b.n	8003f2a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f004 fd88 	bl	8008a38 <USB_DevDisconnect>

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_PCD_Start+0x1c>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e020      	b.n	8003f90 <HAL_PCD_Start+0x5e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d109      	bne.n	8003f72 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d005      	beq.n	8003f72 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f003 fc5e 	bl	8007838 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 fd38 	bl	80089f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b08d      	sub	sp, #52	; 0x34
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f004 fdf6 	bl	8008ba0 <USB_GetMode>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 839d 	bne.w	80046f6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f004 fd5a 	bl	8008a7a <USB_ReadInterrupts>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8393 	beq.w	80046f4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f004 fd51 	bl	8008a7a <USB_ReadInterrupts>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d107      	bne.n	8003ff2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f002 0202 	and.w	r2, r2, #2
 8003ff0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f004 fd3f 	bl	8008a7a <USB_ReadInterrupts>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b10      	cmp	r3, #16
 8004004:	d161      	bne.n	80040ca <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0210 	bic.w	r2, r2, #16
 8004014:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	3304      	adds	r3, #4
 8004034:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	0c5b      	lsrs	r3, r3, #17
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	2b02      	cmp	r3, #2
 8004040:	d124      	bne.n	800408c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d035      	beq.n	80040ba <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800405c:	b29b      	uxth	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	6a38      	ldr	r0, [r7, #32]
 8004062:	f004 fb76 	bl	8008752 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004072:	441a      	add	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004084:	441a      	add	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	619a      	str	r2, [r3, #24]
 800408a:	e016      	b.n	80040ba <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	0c5b      	lsrs	r3, r3, #17
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	2b06      	cmp	r3, #6
 8004096:	d110      	bne.n	80040ba <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800409e:	2208      	movs	r2, #8
 80040a0:	4619      	mov	r1, r3
 80040a2:	6a38      	ldr	r0, [r7, #32]
 80040a4:	f004 fb55 	bl	8008752 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040b4:	441a      	add	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0210 	orr.w	r2, r2, #16
 80040c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 fcd3 	bl	8008a7a <USB_ReadInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040de:	d16e      	bne.n	80041be <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f004 fcd9 	bl	8008aa0 <USB_ReadDevAllOutEpInterrupt>
 80040ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80040f0:	e062      	b.n	80041b8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d057      	beq.n	80041ac <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f004 fcfe 	bl	8008b08 <USB_ReadDevOutEPInterrupt>
 800410c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00c      	beq.n	8004132 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004124:	461a      	mov	r2, r3
 8004126:	2301      	movs	r3, #1
 8004128:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800412a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fdb1 	bl	8004c94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00c      	beq.n	8004156 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	461a      	mov	r2, r3
 800414a:	2308      	movs	r3, #8
 800414c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800414e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 feab 	bl	8004eac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	461a      	mov	r2, r3
 800416e:	2310      	movs	r3, #16
 8004170:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004188:	461a      	mov	r2, r3
 800418a:	2320      	movs	r3, #32
 800418c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a4:	461a      	mov	r2, r3
 80041a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	3301      	adds	r3, #1
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d199      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f004 fc59 	bl	8008a7a <USB_ReadInterrupts>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041d2:	f040 80c0 	bne.w	8004356 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f004 fc7a 	bl	8008ad4 <USB_ReadDevAllInEpInterrupt>
 80041e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80041e6:	e0b2      	b.n	800434e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 80a7 	beq.w	8004342 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f004 fca0 	bl	8008b44 <USB_ReadDevInEPInterrupt>
 8004204:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d057      	beq.n	80042c0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	2201      	movs	r2, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	43db      	mvns	r3, r3
 800422a:	69f9      	ldr	r1, [r7, #28]
 800422c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004230:	4013      	ands	r3, r2
 8004232:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	461a      	mov	r2, r3
 8004242:	2301      	movs	r3, #1
 8004244:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d132      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	3348      	adds	r3, #72	; 0x48
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4403      	add	r3, r0
 800426e:	3344      	adds	r3, #68	; 0x44
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4419      	add	r1, r3
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4403      	add	r3, r0
 8004282:	3348      	adds	r3, #72	; 0x48
 8004284:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	2b00      	cmp	r3, #0
 800428a:	d113      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x31c>
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	3350      	adds	r3, #80	; 0x50
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d108      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042ac:	461a      	mov	r2, r3
 80042ae:	2101      	movs	r1, #1
 80042b0:	f004 fca8 	bl	8008c04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f006 fc49 	bl	800ab52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d6:	461a      	mov	r2, r3
 80042d8:	2308      	movs	r3, #8
 80042da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	461a      	mov	r2, r3
 80042f4:	2310      	movs	r3, #16
 80042f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430e:	461a      	mov	r2, r3
 8004310:	2340      	movs	r3, #64	; 0x40
 8004312:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432a:	461a      	mov	r2, r3
 800432c:	2302      	movs	r3, #2
 800432e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800433a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fc1b 	bl	8004b78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	3301      	adds	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	f47f af49 	bne.w	80041e8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f004 fb8d 	bl	8008a7a <USB_ReadInterrupts>
 8004360:	4603      	mov	r3, r0
 8004362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800436a:	d122      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004386:	2b01      	cmp	r3, #1
 8004388:	d108      	bne.n	800439c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004392:	2100      	movs	r1, #0
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fe27 	bl	8004fe8 <HAL_PCDEx_LPM_Callback>
 800439a:	e002      	b.n	80043a2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f006 fc4f 	bl	800ac40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80043b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f004 fb5f 	bl	8008a7a <USB_ReadInterrupts>
 80043bc:	4603      	mov	r3, r0
 80043be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c6:	d112      	bne.n	80043ee <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d102      	bne.n	80043de <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f006 fc0b 	bl	800abf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043ec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f004 fb41 	bl	8008a7a <USB_ReadInterrupts>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004402:	f040 80c7 	bne.w	8004594 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2110      	movs	r1, #16
 8004420:	4618      	mov	r0, r3
 8004422:	f003 fbdb 	bl	8007bdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004426:	2300      	movs	r3, #0
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442a:	e056      	b.n	80044da <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004438:	461a      	mov	r2, r3
 800443a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800443e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004450:	0151      	lsls	r1, r2, #5
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	440a      	add	r2, r1
 8004456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800445e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800447e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448c:	461a      	mov	r2, r3
 800448e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004492:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c4:	0151      	lsls	r1, r2, #5
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	440a      	add	r2, r1
 80044ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	3301      	adds	r3, #1
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d3a3      	bcc.n	800442c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d016      	beq.n	800452e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004510:	f043 030b 	orr.w	r3, r3, #11
 8004514:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004526:	f043 030b 	orr.w	r3, r3, #11
 800452a:	6453      	str	r3, [r2, #68]	; 0x44
 800452c:	e015      	b.n	800455a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004540:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004544:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004554:	f043 030b 	orr.w	r3, r3, #11
 8004558:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004568:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800456c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800457e:	461a      	mov	r2, r3
 8004580:	f004 fb40 	bl	8008c04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f004 fa6e 	bl	8008a7a <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a8:	d124      	bne.n	80045f4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f004 fb04 	bl	8008bbc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f003 fb6c 	bl	8007c96 <USB_GetDevSpeed>
 80045be:	4603      	mov	r3, r0
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681c      	ldr	r4, [r3, #0]
 80045ca:	f001 f939 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 80045ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	4620      	mov	r0, r4
 80045da:	f003 f88b 	bl	80076f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f006 fadf 	bl	800aba2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f004 fa3e 	bl	8008a7a <USB_ReadInterrupts>
 80045fe:	4603      	mov	r3, r0
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d10a      	bne.n	800461e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f006 fabc 	bl	800ab86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f002 0208 	and.w	r2, r2, #8
 800461c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f004 fa29 	bl	8008a7a <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800462e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004632:	d10f      	bne.n	8004654 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	b2db      	uxtb	r3, r3
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f006 fb1e 	bl	800ac80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f004 fa0e 	bl	8008a7a <USB_ReadInterrupts>
 800465e:	4603      	mov	r3, r0
 8004660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004668:	d10f      	bne.n	800468a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	b2db      	uxtb	r3, r3
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f006 faf1 	bl	800ac5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f004 f9f3 	bl	8008a7a <USB_ReadInterrupts>
 8004694:	4603      	mov	r3, r0
 8004696:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d10a      	bne.n	80046b6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f006 faff 	bl	800aca4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80046b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f004 f9dd 	bl	8008a7a <USB_ReadInterrupts>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d115      	bne.n	80046f6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f006 faef 	bl	800acc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6859      	ldr	r1, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	e000      	b.n	80046f6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80046f4:	bf00      	nop
    }
  }
}
 80046f6:	3734      	adds	r7, #52	; 0x34
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd90      	pop	{r4, r7, pc}

080046fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_PCD_SetAddress+0x1a>
 8004712:	2302      	movs	r3, #2
 8004714:	e013      	b.n	800473e <HAL_PCD_SetAddress+0x42>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f004 f93b 	bl	80089aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	4608      	mov	r0, r1
 8004750:	4611      	mov	r1, r2
 8004752:	461a      	mov	r2, r3
 8004754:	4603      	mov	r3, r0
 8004756:	70fb      	strb	r3, [r7, #3]
 8004758:	460b      	mov	r3, r1
 800475a:	803b      	strh	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004768:	2b00      	cmp	r3, #0
 800476a:	da0f      	bge.n	800478c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	f003 020f 	and.w	r2, r3, #15
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	3338      	adds	r3, #56	; 0x38
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	705a      	strb	r2, [r3, #1]
 800478a:	e00f      	b.n	80047ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	f003 020f 	and.w	r2, r3, #15
 8004792:	4613      	mov	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	3304      	adds	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80047b8:	883a      	ldrh	r2, [r7, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	78ba      	ldrb	r2, [r7, #2]
 80047c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047d6:	78bb      	ldrb	r3, [r7, #2]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d102      	bne.n	80047e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_PCD_EP_Open+0xaa>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e00e      	b.n	800480e <HAL_PCD_EP_Open+0xc8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68f9      	ldr	r1, [r7, #12]
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 fa6e 	bl	8007ce0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800480c:	7afb      	ldrb	r3, [r7, #11]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004826:	2b00      	cmp	r3, #0
 8004828:	da0f      	bge.n	800484a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 020f 	and.w	r2, r3, #15
 8004830:	4613      	mov	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	3338      	adds	r3, #56	; 0x38
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	3304      	adds	r3, #4
 8004840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	705a      	strb	r2, [r3, #1]
 8004848:	e00f      	b.n	800486a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	f003 020f 	and.w	r2, r3, #15
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	3304      	adds	r3, #4
 8004862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_PCD_EP_Close+0x6e>
 8004880:	2302      	movs	r3, #2
 8004882:	e00e      	b.n	80048a2 <HAL_PCD_EP_Close+0x8c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	4618      	mov	r0, r3
 8004894:	f003 faac 	bl	8007df0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	460b      	mov	r3, r1
 80048b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048ba:	7afb      	ldrb	r3, [r7, #11]
 80048bc:	f003 020f 	and.w	r2, r3, #15
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	3304      	adds	r3, #4
 80048d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2200      	movs	r2, #0
 80048e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ec:	7afb      	ldrb	r3, [r7, #11]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d102      	bne.n	8004906 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004906:	7afb      	ldrb	r3, [r7, #11]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	6979      	ldr	r1, [r7, #20]
 800491e:	f003 fd87 	bl	8008430 <USB_EP0StartXfer>
 8004922:	e008      	b.n	8004936 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	6979      	ldr	r1, [r7, #20]
 8004932:	f003 fb39 	bl	8007fa8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	f003 020f 	and.w	r2, r3, #15
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	460b      	mov	r3, r1
 800497e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004980:	7afb      	ldrb	r3, [r7, #11]
 8004982:	f003 020f 	and.w	r2, r3, #15
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	3338      	adds	r3, #56	; 0x38
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	3304      	adds	r3, #4
 8004996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2200      	movs	r2, #0
 80049a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2201      	movs	r2, #1
 80049ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049b0:	7afb      	ldrb	r3, [r7, #11]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d102      	bne.n	80049ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	6979      	ldr	r1, [r7, #20]
 80049e2:	f003 fd25 	bl	8008430 <USB_EP0StartXfer>
 80049e6:	e008      	b.n	80049fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	6979      	ldr	r1, [r7, #20]
 80049f6:	f003 fad7 	bl	8007fa8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 020f 	and.w	r2, r3, #15
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d901      	bls.n	8004a22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e050      	b.n	8004ac4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	da0f      	bge.n	8004a4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	f003 020f 	and.w	r2, r3, #15
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	3338      	adds	r3, #56	; 0x38
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3304      	adds	r3, #4
 8004a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	705a      	strb	r2, [r3, #1]
 8004a48:	e00d      	b.n	8004a66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_PCD_EP_SetStall+0x82>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e01e      	b.n	8004ac4 <HAL_PCD_EP_SetStall+0xc0>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f003 feb4 	bl	8008802 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	b2d9      	uxtb	r1, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f004 f8a5 	bl	8008c04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	f003 020f 	and.w	r2, r3, #15
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d901      	bls.n	8004aea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e042      	b.n	8004b70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da0f      	bge.n	8004b12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	f003 020f 	and.w	r2, r3, #15
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	3338      	adds	r3, #56	; 0x38
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	3304      	adds	r3, #4
 8004b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	705a      	strb	r2, [r3, #1]
 8004b10:	e00f      	b.n	8004b32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f003 020f 	and.w	r2, r3, #15
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	4413      	add	r3, r2
 8004b28:	3304      	adds	r3, #4
 8004b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_PCD_EP_ClrStall+0x86>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e00e      	b.n	8004b70 <HAL_PCD_EP_ClrStall+0xa4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f003 febc 	bl	80088de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	3338      	adds	r3, #56	; 0x38
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d901      	bls.n	8004bb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e06c      	b.n	8004c8a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d902      	bls.n	8004bcc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	3303      	adds	r3, #3
 8004bd0:	089b      	lsrs	r3, r3, #2
 8004bd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bd4:	e02b      	b.n	8004c2e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d902      	bls.n	8004bf2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3303      	adds	r3, #3
 8004bf6:	089b      	lsrs	r3, r3, #2
 8004bf8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68d9      	ldr	r1, [r3, #12]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	4603      	mov	r3, r0
 8004c10:	6978      	ldr	r0, [r7, #20]
 8004c12:	f003 fd60 	bl	80086d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	441a      	add	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d809      	bhi.n	8004c58 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d203      	bcs.n	8004c58 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1be      	bne.n	8004bd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d811      	bhi.n	8004c88 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	6939      	ldr	r1, [r7, #16]
 8004c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c84:	4013      	ands	r3, r2
 8004c86:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	333c      	adds	r3, #60	; 0x3c
 8004cac:	3304      	adds	r3, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	f040 80a0 	bne.w	8004e0c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d015      	beq.n	8004d02 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a72      	ldr	r2, [pc, #456]	; (8004ea4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f240 80dd 	bls.w	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80d7 	beq.w	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfe:	6093      	str	r3, [r2, #8]
 8004d00:	e0cb      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d009      	beq.n	8004d20 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2320      	movs	r3, #32
 8004d1c:	6093      	str	r3, [r2, #8]
 8004d1e:	e0bc      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 80b7 	bne.w	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4a5d      	ldr	r2, [pc, #372]	; (8004ea4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d90f      	bls.n	8004d54 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d50:	6093      	str	r3, [r2, #8]
 8004d52:	e0a2      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d66:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	0159      	lsls	r1, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	440b      	add	r3, r1
 8004d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004d7a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	4613      	mov	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4403      	add	r3, r0
 8004d8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d8e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4403      	add	r3, r0
 8004db2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4419      	add	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4403      	add	r3, r0
 8004dc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004dcc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d114      	bne.n	8004dfe <PCD_EP_OutXfrComplete_int+0x16a>
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d108      	bne.n	8004dfe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004df6:	461a      	mov	r2, r3
 8004df8:	2101      	movs	r1, #1
 8004dfa:	f003 ff03 	bl	8008c04 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f005 fe89 	bl	800ab1c <HAL_PCD_DataOutStageCallback>
 8004e0a:	e046      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4a26      	ldr	r2, [pc, #152]	; (8004ea8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d124      	bne.n	8004e5e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e30:	6093      	str	r3, [r2, #8]
 8004e32:	e032      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f005 fe60 	bl	800ab1c <HAL_PCD_DataOutStageCallback>
 8004e5c:	e01d      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d114      	bne.n	8004e8e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d108      	bne.n	8004e8e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e86:	461a      	mov	r2, r3
 8004e88:	2100      	movs	r1, #0
 8004e8a:	f003 febb 	bl	8008c04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f005 fe41 	bl	800ab1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	4f54300a 	.word	0x4f54300a
 8004ea8:	4f54310a 	.word	0x4f54310a

08004eac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	333c      	adds	r3, #60	; 0x3c
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d90e      	bls.n	8004f00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f005 fdf9 	bl	800aaf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d90c      	bls.n	8004f28 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d108      	bne.n	8004f28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f20:	461a      	mov	r2, r3
 8004f22:	2101      	movs	r1, #1
 8004f24:	f003 fe6e 	bl	8008c04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	4f54300a 	.word	0x4f54300a

08004f38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]
 8004f44:	4613      	mov	r3, r2
 8004f46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d107      	bne.n	8004f66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f56:	883b      	ldrh	r3, [r7, #0]
 8004f58:	0419      	lsls	r1, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28
 8004f64:	e028      	b.n	8004fb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	4413      	add	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f74:	2300      	movs	r3, #0
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	e00d      	b.n	8004f96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	3340      	adds	r3, #64	; 0x40
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	3301      	adds	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
 8004f96:	7bfa      	ldrb	r2, [r7, #15]
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d3ec      	bcc.n	8004f7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fa0:	883b      	ldrh	r3, [r7, #0]
 8004fa2:	0418      	lsls	r0, r3, #16
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6819      	ldr	r1, [r3, #0]
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	4302      	orrs	r2, r0
 8004fb0:	3340      	adds	r3, #64	; 0x40
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	887a      	ldrh	r2, [r7, #2]
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e264      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d075      	beq.n	800510a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800501e:	4ba3      	ldr	r3, [pc, #652]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b04      	cmp	r3, #4
 8005028:	d00c      	beq.n	8005044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800502a:	4ba0      	ldr	r3, [pc, #640]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005032:	2b08      	cmp	r3, #8
 8005034:	d112      	bne.n	800505c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	4b9d      	ldr	r3, [pc, #628]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005042:	d10b      	bne.n	800505c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	4b99      	ldr	r3, [pc, #612]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d05b      	beq.n	8005108 <HAL_RCC_OscConfig+0x108>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d157      	bne.n	8005108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e23f      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d106      	bne.n	8005074 <HAL_RCC_OscConfig+0x74>
 8005066:	4b91      	ldr	r3, [pc, #580]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a90      	ldr	r2, [pc, #576]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800506c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e01d      	b.n	80050b0 <HAL_RCC_OscConfig+0xb0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800507c:	d10c      	bne.n	8005098 <HAL_RCC_OscConfig+0x98>
 800507e:	4b8b      	ldr	r3, [pc, #556]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a8a      	ldr	r2, [pc, #552]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	4b88      	ldr	r3, [pc, #544]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a87      	ldr	r2, [pc, #540]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e00b      	b.n	80050b0 <HAL_RCC_OscConfig+0xb0>
 8005098:	4b84      	ldr	r3, [pc, #528]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a83      	ldr	r2, [pc, #524]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800509e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b81      	ldr	r3, [pc, #516]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a80      	ldr	r2, [pc, #512]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80050aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d013      	beq.n	80050e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fd fd30 	bl	8002b1c <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c0:	f7fd fd2c 	bl	8002b1c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	; 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e204      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	4b76      	ldr	r3, [pc, #472]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0xc0>
 80050de:	e014      	b.n	800510a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e0:	f7fd fd1c 	bl	8002b1c <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fd fd18 	bl	8002b1c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	; 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e1f0      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fa:	4b6c      	ldr	r3, [pc, #432]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0xe8>
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d063      	beq.n	80051de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005116:	4b65      	ldr	r3, [pc, #404]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005122:	4b62      	ldr	r3, [pc, #392]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800512a:	2b08      	cmp	r3, #8
 800512c:	d11c      	bne.n	8005168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512e:	4b5f      	ldr	r3, [pc, #380]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d116      	bne.n	8005168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513a:	4b5c      	ldr	r3, [pc, #368]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_RCC_OscConfig+0x152>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e1c4      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005152:	4b56      	ldr	r3, [pc, #344]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4952      	ldr	r1, [pc, #328]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005162:	4313      	orrs	r3, r2
 8005164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005166:	e03a      	b.n	80051de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d020      	beq.n	80051b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005170:	4b4f      	ldr	r3, [pc, #316]	; (80052b0 <HAL_RCC_OscConfig+0x2b0>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fd fcd1 	bl	8002b1c <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517e:	f7fd fccd 	bl	8002b1c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e1a5      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005190:	4b46      	ldr	r3, [pc, #280]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519c:	4b43      	ldr	r3, [pc, #268]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4940      	ldr	r1, [pc, #256]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]
 80051b0:	e015      	b.n	80051de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b2:	4b3f      	ldr	r3, [pc, #252]	; (80052b0 <HAL_RCC_OscConfig+0x2b0>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd fcb0 	bl	8002b1c <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c0:	f7fd fcac 	bl	8002b1c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e184      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d2:	4b36      	ldr	r3, [pc, #216]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d030      	beq.n	800524c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f2:	4b30      	ldr	r3, [pc, #192]	; (80052b4 <HAL_RCC_OscConfig+0x2b4>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fd fc90 	bl	8002b1c <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005200:	f7fd fc8c 	bl	8002b1c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e164      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005212:	4b26      	ldr	r3, [pc, #152]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x200>
 800521e:	e015      	b.n	800524c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005220:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <HAL_RCC_OscConfig+0x2b4>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005226:	f7fd fc79 	bl	8002b1c <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800522e:	f7fd fc75 	bl	8002b1c <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e14d      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005240:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80a0 	beq.w	800539a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	6413      	str	r3, [r2, #64]	; 0x40
 800527a:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_RCC_OscConfig+0x2b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d121      	bne.n	80052da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <HAL_RCC_OscConfig+0x2b8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a07      	ldr	r2, [pc, #28]	; (80052b8 <HAL_RCC_OscConfig+0x2b8>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a2:	f7fd fc3b 	bl	8002b1c <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	e011      	b.n	80052ce <HAL_RCC_OscConfig+0x2ce>
 80052aa:	bf00      	nop
 80052ac:	40023800 	.word	0x40023800
 80052b0:	42470000 	.word	0x42470000
 80052b4:	42470e80 	.word	0x42470e80
 80052b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052bc:	f7fd fc2e 	bl	8002b1c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e106      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ce:	4b85      	ldr	r3, [pc, #532]	; (80054e4 <HAL_RCC_OscConfig+0x4e4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d106      	bne.n	80052f0 <HAL_RCC_OscConfig+0x2f0>
 80052e2:	4b81      	ldr	r3, [pc, #516]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e6:	4a80      	ldr	r2, [pc, #512]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	6713      	str	r3, [r2, #112]	; 0x70
 80052ee:	e01c      	b.n	800532a <HAL_RCC_OscConfig+0x32a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b05      	cmp	r3, #5
 80052f6:	d10c      	bne.n	8005312 <HAL_RCC_OscConfig+0x312>
 80052f8:	4b7b      	ldr	r3, [pc, #492]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	4a7a      	ldr	r2, [pc, #488]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80052fe:	f043 0304 	orr.w	r3, r3, #4
 8005302:	6713      	str	r3, [r2, #112]	; 0x70
 8005304:	4b78      	ldr	r3, [pc, #480]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	4a77      	ldr	r2, [pc, #476]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	6713      	str	r3, [r2, #112]	; 0x70
 8005310:	e00b      	b.n	800532a <HAL_RCC_OscConfig+0x32a>
 8005312:	4b75      	ldr	r3, [pc, #468]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	4a74      	ldr	r2, [pc, #464]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	6713      	str	r3, [r2, #112]	; 0x70
 800531e:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005322:	4a71      	ldr	r2, [pc, #452]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d015      	beq.n	800535e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7fd fbf3 	bl	8002b1c <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005338:	e00a      	b.n	8005350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fd fbef 	bl	8002b1c <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	; 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e0c5      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005350:	4b65      	ldr	r3, [pc, #404]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0ee      	beq.n	800533a <HAL_RCC_OscConfig+0x33a>
 800535c:	e014      	b.n	8005388 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535e:	f7fd fbdd 	bl	8002b1c <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005364:	e00a      	b.n	800537c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005366:	f7fd fbd9 	bl	8002b1c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	f241 3288 	movw	r2, #5000	; 0x1388
 8005374:	4293      	cmp	r3, r2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e0af      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800537c:	4b5a      	ldr	r3, [pc, #360]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1ee      	bne.n	8005366 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d105      	bne.n	800539a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538e:	4b56      	ldr	r3, [pc, #344]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	4a55      	ldr	r2, [pc, #340]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 809b 	beq.w	80054da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053a4:	4b50      	ldr	r3, [pc, #320]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 030c 	and.w	r3, r3, #12
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d05c      	beq.n	800546a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d141      	bne.n	800543c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b8:	4b4c      	ldr	r3, [pc, #304]	; (80054ec <HAL_RCC_OscConfig+0x4ec>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053be:	f7fd fbad 	bl	8002b1c <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c6:	f7fd fba9 	bl	8002b1c <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e081      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d8:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f0      	bne.n	80053c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	019b      	lsls	r3, r3, #6
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	3b01      	subs	r3, #1
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	061b      	lsls	r3, r3, #24
 8005408:	4937      	ldr	r1, [pc, #220]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 800540a:	4313      	orrs	r3, r2
 800540c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800540e:	4b37      	ldr	r3, [pc, #220]	; (80054ec <HAL_RCC_OscConfig+0x4ec>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7fd fb82 	bl	8002b1c <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800541c:	f7fd fb7e 	bl	8002b1c <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e056      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542e:	4b2e      	ldr	r3, [pc, #184]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0x41c>
 800543a:	e04e      	b.n	80054da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543c:	4b2b      	ldr	r3, [pc, #172]	; (80054ec <HAL_RCC_OscConfig+0x4ec>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005442:	f7fd fb6b 	bl	8002b1c <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544a:	f7fd fb67 	bl	8002b1c <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e03f      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545c:	4b22      	ldr	r3, [pc, #136]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCC_OscConfig+0x44a>
 8005468:	e037      	b.n	80054da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e032      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005476:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d028      	beq.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548e:	429a      	cmp	r2, r3
 8005490:	d121      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d11a      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054a6:	4013      	ands	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d111      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	3b01      	subs	r3, #1
 80054c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d107      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d001      	beq.n	80054da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40007000 	.word	0x40007000
 80054e8:	40023800 	.word	0x40023800
 80054ec:	42470060 	.word	0x42470060

080054f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0cc      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005504:	4b68      	ldr	r3, [pc, #416]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d90c      	bls.n	800552c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005512:	4b65      	ldr	r3, [pc, #404]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800551a:	4b63      	ldr	r3, [pc, #396]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d001      	beq.n	800552c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e0b8      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d020      	beq.n	800557a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005544:	4b59      	ldr	r3, [pc, #356]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4a58      	ldr	r2, [pc, #352]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800554a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800554e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800555c:	4b53      	ldr	r3, [pc, #332]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a52      	ldr	r2, [pc, #328]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005568:	4b50      	ldr	r3, [pc, #320]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	494d      	ldr	r1, [pc, #308]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d044      	beq.n	8005610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d107      	bne.n	800559e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558e:	4b47      	ldr	r3, [pc, #284]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d119      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e07f      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d003      	beq.n	80055ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d107      	bne.n	80055be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ae:	4b3f      	ldr	r3, [pc, #252]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e06f      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055be:	4b3b      	ldr	r3, [pc, #236]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e067      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ce:	4b37      	ldr	r3, [pc, #220]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 0203 	bic.w	r2, r3, #3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4934      	ldr	r1, [pc, #208]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055e0:	f7fd fa9c 	bl	8002b1c <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e8:	f7fd fa98 	bl	8002b1c <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e04f      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	4b2b      	ldr	r3, [pc, #172]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 020c 	and.w	r2, r3, #12
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	429a      	cmp	r2, r3
 800560e:	d1eb      	bne.n	80055e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005610:	4b25      	ldr	r3, [pc, #148]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d20c      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b22      	ldr	r3, [pc, #136]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005626:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d001      	beq.n	8005638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e032      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005644:	4b19      	ldr	r3, [pc, #100]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4916      	ldr	r1, [pc, #88]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005662:	4b12      	ldr	r3, [pc, #72]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	490e      	ldr	r1, [pc, #56]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	4313      	orrs	r3, r2
 8005674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005676:	f000 f82d 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 800567a:	4602      	mov	r2, r0
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	490a      	ldr	r1, [pc, #40]	; (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005688:	5ccb      	ldrb	r3, [r1, r3]
 800568a:	fa22 f303 	lsr.w	r3, r2, r3
 800568e:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fd f9fc 	bl	8002a94 <HAL_InitTick>

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023c00 	.word	0x40023c00
 80056ac:	40023800 	.word	0x40023800
 80056b0:	0800ee00 	.word	0x0800ee00
 80056b4:	20000010 	.word	0x20000010
 80056b8:	20000018 	.word	0x20000018

080056bc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80056c0:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <HAL_RCC_EnableCSS+0x14>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
}
 80056c6:	bf00      	nop
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	4247004c 	.word	0x4247004c

080056d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d4:	b5b0      	push	{r4, r5, r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056da:	2100      	movs	r1, #0
 80056dc:	6079      	str	r1, [r7, #4]
 80056de:	2100      	movs	r1, #0
 80056e0:	60f9      	str	r1, [r7, #12]
 80056e2:	2100      	movs	r1, #0
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80056e6:	2100      	movs	r1, #0
 80056e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ea:	4952      	ldr	r1, [pc, #328]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 80056ec:	6889      	ldr	r1, [r1, #8]
 80056ee:	f001 010c 	and.w	r1, r1, #12
 80056f2:	2908      	cmp	r1, #8
 80056f4:	d00d      	beq.n	8005712 <HAL_RCC_GetSysClockFreq+0x3e>
 80056f6:	2908      	cmp	r1, #8
 80056f8:	f200 8094 	bhi.w	8005824 <HAL_RCC_GetSysClockFreq+0x150>
 80056fc:	2900      	cmp	r1, #0
 80056fe:	d002      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x32>
 8005700:	2904      	cmp	r1, #4
 8005702:	d003      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x38>
 8005704:	e08e      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005706:	4b4c      	ldr	r3, [pc, #304]	; (8005838 <HAL_RCC_GetSysClockFreq+0x164>)
 8005708:	60bb      	str	r3, [r7, #8]
       break;
 800570a:	e08e      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800570c:	4b4b      	ldr	r3, [pc, #300]	; (800583c <HAL_RCC_GetSysClockFreq+0x168>)
 800570e:	60bb      	str	r3, [r7, #8]
      break;
 8005710:	e08b      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005712:	4948      	ldr	r1, [pc, #288]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 8005714:	6849      	ldr	r1, [r1, #4]
 8005716:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800571a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800571c:	4945      	ldr	r1, [pc, #276]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 800571e:	6849      	ldr	r1, [r1, #4]
 8005720:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005724:	2900      	cmp	r1, #0
 8005726:	d024      	beq.n	8005772 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005728:	4942      	ldr	r1, [pc, #264]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 800572a:	6849      	ldr	r1, [r1, #4]
 800572c:	0989      	lsrs	r1, r1, #6
 800572e:	4608      	mov	r0, r1
 8005730:	f04f 0100 	mov.w	r1, #0
 8005734:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005738:	f04f 0500 	mov.w	r5, #0
 800573c:	ea00 0204 	and.w	r2, r0, r4
 8005740:	ea01 0305 	and.w	r3, r1, r5
 8005744:	493d      	ldr	r1, [pc, #244]	; (800583c <HAL_RCC_GetSysClockFreq+0x168>)
 8005746:	fb01 f003 	mul.w	r0, r1, r3
 800574a:	2100      	movs	r1, #0
 800574c:	fb01 f102 	mul.w	r1, r1, r2
 8005750:	1844      	adds	r4, r0, r1
 8005752:	493a      	ldr	r1, [pc, #232]	; (800583c <HAL_RCC_GetSysClockFreq+0x168>)
 8005754:	fba2 0101 	umull	r0, r1, r2, r1
 8005758:	1863      	adds	r3, r4, r1
 800575a:	4619      	mov	r1, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	461a      	mov	r2, r3
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	f7fb fa70 	bl	8000c48 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4613      	mov	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e04a      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005772:	4b30      	ldr	r3, [pc, #192]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	461a      	mov	r2, r3
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005782:	f04f 0100 	mov.w	r1, #0
 8005786:	ea02 0400 	and.w	r4, r2, r0
 800578a:	ea03 0501 	and.w	r5, r3, r1
 800578e:	4620      	mov	r0, r4
 8005790:	4629      	mov	r1, r5
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	014b      	lsls	r3, r1, #5
 800579c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057a0:	0142      	lsls	r2, r0, #5
 80057a2:	4610      	mov	r0, r2
 80057a4:	4619      	mov	r1, r3
 80057a6:	1b00      	subs	r0, r0, r4
 80057a8:	eb61 0105 	sbc.w	r1, r1, r5
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	018b      	lsls	r3, r1, #6
 80057b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057ba:	0182      	lsls	r2, r0, #6
 80057bc:	1a12      	subs	r2, r2, r0
 80057be:	eb63 0301 	sbc.w	r3, r3, r1
 80057c2:	f04f 0000 	mov.w	r0, #0
 80057c6:	f04f 0100 	mov.w	r1, #0
 80057ca:	00d9      	lsls	r1, r3, #3
 80057cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057d0:	00d0      	lsls	r0, r2, #3
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	1912      	adds	r2, r2, r4
 80057d8:	eb45 0303 	adc.w	r3, r5, r3
 80057dc:	f04f 0000 	mov.w	r0, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	0299      	lsls	r1, r3, #10
 80057e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80057ea:	0290      	lsls	r0, r2, #10
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	f7fb fa24 	bl	8000c48 <__aeabi_uldivmod>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4613      	mov	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	3301      	adds	r3, #1
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005820:	60bb      	str	r3, [r7, #8]
      break;
 8005822:	e002      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <HAL_RCC_GetSysClockFreq+0x164>)
 8005826:	60bb      	str	r3, [r7, #8]
      break;
 8005828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800582a:	68bb      	ldr	r3, [r7, #8]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bdb0      	pop	{r4, r5, r7, pc}
 8005834:	40023800 	.word	0x40023800
 8005838:	00f42400 	.word	0x00f42400
 800583c:	017d7840 	.word	0x017d7840

08005840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005844:	4b03      	ldr	r3, [pc, #12]	; (8005854 <HAL_RCC_GetHCLKFreq+0x14>)
 8005846:	681b      	ldr	r3, [r3, #0]
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000010 	.word	0x20000010

08005858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800585c:	f7ff fff0 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0a9b      	lsrs	r3, r3, #10
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4903      	ldr	r1, [pc, #12]	; (800587c <HAL_RCC_GetPCLK1Freq+0x24>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40023800 	.word	0x40023800
 800587c:	0800ee10 	.word	0x0800ee10

08005880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005884:	f7ff ffdc 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005888:	4602      	mov	r2, r0
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	0b5b      	lsrs	r3, r3, #13
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	4903      	ldr	r1, [pc, #12]	; (80058a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005896:	5ccb      	ldrb	r3, [r1, r3]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40023800 	.word	0x40023800
 80058a4:	0800ee10 	.word	0x0800ee10

080058a8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d104      	bne.n	80058c2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80058b8:	f000 f80a 	bl	80058d0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80058bc:	4b03      	ldr	r3, [pc, #12]	; (80058cc <HAL_RCC_NMI_IRQHandler+0x24>)
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	701a      	strb	r2, [r3, #0]
  }
}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800
 80058cc:	4002380e 	.word	0x4002380e

080058d0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e07b      	b.n	80059e8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005900:	d009      	beq.n	8005916 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	61da      	str	r2, [r3, #28]
 8005908:	e005      	b.n	8005916 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fc faef 	bl	8001f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	ea42 0103 	orr.w	r1, r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	0c1b      	lsrs	r3, r3, #16
 80059b4:	f003 0104 	and.w	r1, r3, #4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	f003 0210 	and.w	r2, r3, #16
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e041      	b.n	8005a86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fc fae6 	bl	8001fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f000 fae0 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d001      	beq.n	8005aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e04e      	b.n	8005b46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a23      	ldr	r2, [pc, #140]	; (8005b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d022      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d01d      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d018      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d111      	bne.n	8005b34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	d010      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0201 	orr.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b32:	e007      	b.n	8005b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40000400 	.word	0x40000400
 8005b5c:	40000800 	.word	0x40000800
 8005b60:	40000c00 	.word	0x40000c00
 8005b64:	40010400 	.word	0x40010400
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40001800 	.word	0x40001800

08005b70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e041      	b.n	8005c06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fc fa04 	bl	8001fa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f000 fa20 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d122      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d11b      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f06f 0202 	mvn.w	r2, #2
 8005c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f9b1 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005c56:	e005      	b.n	8005c64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f9a3 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f9b4 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d122      	bne.n	8005cbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d11b      	bne.n	8005cbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f06f 0204 	mvn.w	r2, #4
 8005c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f987 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005caa:	e005      	b.n	8005cb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f979 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f98a 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d122      	bne.n	8005d12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d11b      	bne.n	8005d12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0208 	mvn.w	r2, #8
 8005ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f95d 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005cfe:	e005      	b.n	8005d0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f94f 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f960 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d122      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d11b      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f06f 0210 	mvn.w	r2, #16
 8005d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f933 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005d52:	e005      	b.n	8005d60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f925 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f936 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10e      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f06f 0201 	mvn.w	r2, #1
 8005d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fc f83b 	bl	8001e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9c:	2b80      	cmp	r3, #128	; 0x80
 8005d9e:	d10e      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005daa:	2b80      	cmp	r3, #128	; 0x80
 8005dac:	d107      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fcfd 	bl	80067b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d10e      	bne.n	8005dea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	d107      	bne.n	8005dea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f8fb 	bl	8005fe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d10e      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d107      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f06f 0220 	mvn.w	r2, #32
 8005e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fcc7 	bl	80067a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e0ae      	b.n	8005f9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b0c      	cmp	r3, #12
 8005e4a:	f200 809f 	bhi.w	8005f8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e4e:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005f8d 	.word	0x08005f8d
 8005e5c:	08005f8d 	.word	0x08005f8d
 8005e60:	08005f8d 	.word	0x08005f8d
 8005e64:	08005ec9 	.word	0x08005ec9
 8005e68:	08005f8d 	.word	0x08005f8d
 8005e6c:	08005f8d 	.word	0x08005f8d
 8005e70:	08005f8d 	.word	0x08005f8d
 8005e74:	08005f0b 	.word	0x08005f0b
 8005e78:	08005f8d 	.word	0x08005f8d
 8005e7c:	08005f8d 	.word	0x08005f8d
 8005e80:	08005f8d 	.word	0x08005f8d
 8005e84:	08005f4b 	.word	0x08005f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68b9      	ldr	r1, [r7, #8]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f950 	bl	8006134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0208 	orr.w	r2, r2, #8
 8005ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0204 	bic.w	r2, r2, #4
 8005eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6999      	ldr	r1, [r3, #24]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	619a      	str	r2, [r3, #24]
      break;
 8005ec6:	e064      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f9a0 	bl	8006214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6999      	ldr	r1, [r3, #24]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	021a      	lsls	r2, r3, #8
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	619a      	str	r2, [r3, #24]
      break;
 8005f08:	e043      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 f9f5 	bl	8006300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0208 	orr.w	r2, r2, #8
 8005f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0204 	bic.w	r2, r2, #4
 8005f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	69d9      	ldr	r1, [r3, #28]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	61da      	str	r2, [r3, #28]
      break;
 8005f48:	e023      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 fa49 	bl	80063e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69da      	ldr	r2, [r3, #28]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69d9      	ldr	r1, [r3, #28]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	021a      	lsls	r2, r3, #8
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	61da      	str	r2, [r3, #28]
      break;
 8005f8a:	e002      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a40      	ldr	r2, [pc, #256]	; (8006108 <TIM_Base_SetConfig+0x114>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006012:	d00f      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3d      	ldr	r2, [pc, #244]	; (800610c <TIM_Base_SetConfig+0x118>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3c      	ldr	r2, [pc, #240]	; (8006110 <TIM_Base_SetConfig+0x11c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3b      	ldr	r2, [pc, #236]	; (8006114 <TIM_Base_SetConfig+0x120>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a3a      	ldr	r2, [pc, #232]	; (8006118 <TIM_Base_SetConfig+0x124>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2f      	ldr	r2, [pc, #188]	; (8006108 <TIM_Base_SetConfig+0x114>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d02b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006054:	d027      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2c      	ldr	r2, [pc, #176]	; (800610c <TIM_Base_SetConfig+0x118>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d023      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2b      	ldr	r2, [pc, #172]	; (8006110 <TIM_Base_SetConfig+0x11c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01f      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2a      	ldr	r2, [pc, #168]	; (8006114 <TIM_Base_SetConfig+0x120>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a29      	ldr	r2, [pc, #164]	; (8006118 <TIM_Base_SetConfig+0x124>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d017      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a28      	ldr	r2, [pc, #160]	; (800611c <TIM_Base_SetConfig+0x128>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a27      	ldr	r2, [pc, #156]	; (8006120 <TIM_Base_SetConfig+0x12c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00f      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a26      	ldr	r2, [pc, #152]	; (8006124 <TIM_Base_SetConfig+0x130>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a25      	ldr	r2, [pc, #148]	; (8006128 <TIM_Base_SetConfig+0x134>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a24      	ldr	r2, [pc, #144]	; (800612c <TIM_Base_SetConfig+0x138>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a23      	ldr	r2, [pc, #140]	; (8006130 <TIM_Base_SetConfig+0x13c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <TIM_Base_SetConfig+0x114>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_Base_SetConfig+0xf8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a0c      	ldr	r2, [pc, #48]	; (8006118 <TIM_Base_SetConfig+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d103      	bne.n	80060f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	615a      	str	r2, [r3, #20]
}
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40010000 	.word	0x40010000
 800610c:	40000400 	.word	0x40000400
 8006110:	40000800 	.word	0x40000800
 8006114:	40000c00 	.word	0x40000c00
 8006118:	40010400 	.word	0x40010400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800
 8006128:	40001800 	.word	0x40001800
 800612c:	40001c00 	.word	0x40001c00
 8006130:	40002000 	.word	0x40002000

08006134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 0302 	bic.w	r3, r3, #2
 800617c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a20      	ldr	r2, [pc, #128]	; (800620c <TIM_OC1_SetConfig+0xd8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC1_SetConfig+0x64>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <TIM_OC1_SetConfig+0xdc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10c      	bne.n	80061b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0308 	bic.w	r3, r3, #8
 800619e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 0304 	bic.w	r3, r3, #4
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a15      	ldr	r2, [pc, #84]	; (800620c <TIM_OC1_SetConfig+0xd8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC1_SetConfig+0x8e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a14      	ldr	r2, [pc, #80]	; (8006210 <TIM_OC1_SetConfig+0xdc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d111      	bne.n	80061e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	621a      	str	r2, [r3, #32]
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f023 0210 	bic.w	r2, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0320 	bic.w	r3, r3, #32
 800625e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a22      	ldr	r2, [pc, #136]	; (80062f8 <TIM_OC2_SetConfig+0xe4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC2_SetConfig+0x68>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a21      	ldr	r2, [pc, #132]	; (80062fc <TIM_OC2_SetConfig+0xe8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d10d      	bne.n	8006298 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <TIM_OC2_SetConfig+0xe4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC2_SetConfig+0x94>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a16      	ldr	r2, [pc, #88]	; (80062fc <TIM_OC2_SetConfig+0xe8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d113      	bne.n	80062d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40010400 	.word	0x40010400

08006300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0303 	bic.w	r3, r3, #3
 8006336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a21      	ldr	r2, [pc, #132]	; (80063e0 <TIM_OC3_SetConfig+0xe0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC3_SetConfig+0x66>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a20      	ldr	r2, [pc, #128]	; (80063e4 <TIM_OC3_SetConfig+0xe4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d10d      	bne.n	8006382 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800636c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <TIM_OC3_SetConfig+0xe0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_OC3_SetConfig+0x92>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <TIM_OC3_SetConfig+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d113      	bne.n	80063ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	621a      	str	r2, [r3, #32]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40010400 	.word	0x40010400

080063e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	031b      	lsls	r3, r3, #12
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a12      	ldr	r2, [pc, #72]	; (800648c <TIM_OC4_SetConfig+0xa4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_OC4_SetConfig+0x68>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a11      	ldr	r2, [pc, #68]	; (8006490 <TIM_OC4_SetConfig+0xa8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d109      	bne.n	8006464 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	019b      	lsls	r3, r3, #6
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40010400 	.word	0x40010400

08006494 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <HAL_TIMEx_PWMN_Start+0x24>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	bf14      	ite	ne
 80064b0:	2301      	movne	r3, #1
 80064b2:	2300      	moveq	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	e022      	b.n	80064fe <HAL_TIMEx_PWMN_Start+0x6a>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d109      	bne.n	80064d2 <HAL_TIMEx_PWMN_Start+0x3e>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	bf14      	ite	ne
 80064ca:	2301      	movne	r3, #1
 80064cc:	2300      	moveq	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	e015      	b.n	80064fe <HAL_TIMEx_PWMN_Start+0x6a>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d109      	bne.n	80064ec <HAL_TIMEx_PWMN_Start+0x58>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	bf14      	ite	ne
 80064e4:	2301      	movne	r3, #1
 80064e6:	2300      	moveq	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	e008      	b.n	80064fe <HAL_TIMEx_PWMN_Start+0x6a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e06d      	b.n	80065e2 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <HAL_TIMEx_PWMN_Start+0x82>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006514:	e013      	b.n	800653e <HAL_TIMEx_PWMN_Start+0xaa>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b04      	cmp	r3, #4
 800651a:	d104      	bne.n	8006526 <HAL_TIMEx_PWMN_Start+0x92>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006524:	e00b      	b.n	800653e <HAL_TIMEx_PWMN_Start+0xaa>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d104      	bne.n	8006536 <HAL_TIMEx_PWMN_Start+0xa2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006534:	e003      	b.n	800653e <HAL_TIMEx_PWMN_Start+0xaa>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2204      	movs	r2, #4
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f940 	bl	80067cc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a22      	ldr	r2, [pc, #136]	; (80065ec <HAL_TIMEx_PWMN_Start+0x158>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d022      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d01d      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1e      	ldr	r2, [pc, #120]	; (80065f0 <HAL_TIMEx_PWMN_Start+0x15c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d018      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1d      	ldr	r2, [pc, #116]	; (80065f4 <HAL_TIMEx_PWMN_Start+0x160>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1b      	ldr	r2, [pc, #108]	; (80065f8 <HAL_TIMEx_PWMN_Start+0x164>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00e      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1a      	ldr	r2, [pc, #104]	; (80065fc <HAL_TIMEx_PWMN_Start+0x168>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a18      	ldr	r2, [pc, #96]	; (8006600 <HAL_TIMEx_PWMN_Start+0x16c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a17      	ldr	r2, [pc, #92]	; (8006604 <HAL_TIMEx_PWMN_Start+0x170>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d111      	bne.n	80065d0 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b06      	cmp	r3, #6
 80065bc:	d010      	beq.n	80065e0 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0201 	orr.w	r2, r2, #1
 80065cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ce:	e007      	b.n	80065e0 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0201 	orr.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	40010400 	.word	0x40010400
 8006600:	40014000 	.word	0x40014000
 8006604:	40001800 	.word	0x40001800

08006608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800661c:	2302      	movs	r3, #2
 800661e:	e05a      	b.n	80066d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d022      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666c:	d01d      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d018      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1b      	ldr	r2, [pc, #108]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1a      	ldr	r2, [pc, #104]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00e      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d004      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a15      	ldr	r2, [pc, #84]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10c      	bne.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40010400 	.word	0x40010400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40001800 	.word	0x40001800

08006700 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006718:	2302      	movs	r3, #2
 800671a:	e03d      	b.n	8006798 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	2204      	movs	r2, #4
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a1a      	ldr	r2, [r3, #32]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	401a      	ands	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1a      	ldr	r2, [r3, #32]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	fa01 f303 	lsl.w	r3, r1, r3
 8006804:	431a      	orrs	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e03f      	b.n	80068a8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fb fc35 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2224      	movs	r2, #36	; 0x24
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006858:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fd20 	bl	80072a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800686e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695a      	ldr	r2, [r3, #20]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800687e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800688e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d130      	bne.n	800692c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_UART_Transmit_IT+0x26>
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e029      	b.n	800692e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_UART_Transmit_IT+0x38>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e022      	b.n	800692e <HAL_UART_Transmit_IT+0x7e>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	88fa      	ldrh	r2, [r7, #6]
 80068fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2221      	movs	r2, #33	; 0x21
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006926:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800692c:	2302      	movs	r3, #2
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	4613      	mov	r3, r2
 8006946:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b20      	cmp	r3, #32
 8006952:	d11d      	bne.n	8006990 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <HAL_UART_Receive_IT+0x26>
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e016      	b.n	8006992 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_UART_Receive_IT+0x38>
 800696e:	2302      	movs	r3, #2
 8006970:	e00f      	b.n	8006992 <HAL_UART_Receive_IT+0x58>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006980:	88fb      	ldrh	r3, [r7, #6]
 8006982:	461a      	mov	r2, r3
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fab6 	bl	8006ef8 <UART_Start_Receive_IT>
 800698c:	4603      	mov	r3, r0
 800698e:	e000      	b.n	8006992 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006990:	2302      	movs	r3, #2
  }
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b0ba      	sub	sp, #232	; 0xe8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80069da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10f      	bne.n	8006a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d009      	beq.n	8006a02 <HAL_UART_IRQHandler+0x66>
 80069ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fb95 	bl	800712a <UART_Receive_IT>
      return;
 8006a00:	e256      	b.n	8006eb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 80de 	beq.w	8006bc8 <HAL_UART_IRQHandler+0x22c>
 8006a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d106      	bne.n	8006a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 80d1 	beq.w	8006bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <HAL_UART_IRQHandler+0xae>
 8006a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f043 0201 	orr.w	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <HAL_UART_IRQHandler+0xd2>
 8006a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f043 0202 	orr.w	r2, r3, #2
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00b      	beq.n	8006a92 <HAL_UART_IRQHandler+0xf6>
 8006a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f043 0204 	orr.w	r2, r3, #4
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d011      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x126>
 8006a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d105      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	f043 0208 	orr.w	r2, r3, #8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 81ed 	beq.w	8006ea6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d008      	beq.n	8006aea <HAL_UART_IRQHandler+0x14e>
 8006ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fb20 	bl	800712a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b40      	cmp	r3, #64	; 0x40
 8006af6:	bf0c      	ite	eq
 8006af8:	2301      	moveq	r3, #1
 8006afa:	2300      	movne	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <HAL_UART_IRQHandler+0x17a>
 8006b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d04f      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa28 	bl	8006f6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d141      	bne.n	8006bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3314      	adds	r3, #20
 8006b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3314      	adds	r3, #20
 8006b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1d9      	bne.n	8006b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d013      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	4a7d      	ldr	r2, [pc, #500]	; (8006d78 <HAL_UART_IRQHandler+0x3dc>)
 8006b84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fc f977 	bl	8002e7e <HAL_DMA_Abort_IT>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d016      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba4:	e00e      	b.n	8006bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f990 	bl	8006ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bac:	e00a      	b.n	8006bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f98c 	bl	8006ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb4:	e006      	b.n	8006bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f988 	bl	8006ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bc2:	e170      	b.n	8006ea6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc4:	bf00      	nop
    return;
 8006bc6:	e16e      	b.n	8006ea6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	f040 814a 	bne.w	8006e66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd6:	f003 0310 	and.w	r3, r3, #16
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 8143 	beq.w	8006e66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 813c 	beq.w	8006e66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60bb      	str	r3, [r7, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	60bb      	str	r3, [r7, #8]
 8006c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b40      	cmp	r3, #64	; 0x40
 8006c10:	f040 80b4 	bne.w	8006d7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 8140 	beq.w	8006eaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c32:	429a      	cmp	r2, r3
 8006c34:	f080 8139 	bcs.w	8006eaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c4a:	f000 8088 	beq.w	8006d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	330c      	adds	r3, #12
 8006c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	330c      	adds	r3, #12
 8006c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1d9      	bne.n	8006c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3314      	adds	r3, #20
 8006ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cac:	f023 0301 	bic.w	r3, r3, #1
 8006cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3314      	adds	r3, #20
 8006cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e1      	bne.n	8006c9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3314      	adds	r3, #20
 8006cdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e3      	bne.n	8006cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d2e:	f023 0310 	bic.w	r3, r3, #16
 8006d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	330c      	adds	r3, #12
 8006d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d40:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e3      	bne.n	8006d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fc f820 	bl	8002d9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f8b6 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d74:	e099      	b.n	8006eaa <HAL_UART_IRQHandler+0x50e>
 8006d76:	bf00      	nop
 8006d78:	08007033 	.word	0x08007033
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 808b 	beq.w	8006eae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8086 	beq.w	8006eae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	330c      	adds	r3, #12
 8006da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8006dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e3      	bne.n	8006da2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3314      	adds	r3, #20
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	623b      	str	r3, [r7, #32]
   return(result);
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3314      	adds	r3, #20
 8006dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e3      	bne.n	8006dda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0310 	bic.w	r3, r3, #16
 8006e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	330c      	adds	r3, #12
 8006e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e44:	61fa      	str	r2, [r7, #28]
 8006e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	69b9      	ldr	r1, [r7, #24]
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	617b      	str	r3, [r7, #20]
   return(result);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e3      	bne.n	8006e20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f83e 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e64:	e023      	b.n	8006eae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d009      	beq.n	8006e86 <HAL_UART_IRQHandler+0x4ea>
 8006e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f8eb 	bl	800705a <UART_Transmit_IT>
    return;
 8006e84:	e014      	b.n	8006eb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x514>
 8006e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d008      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f92b 	bl	80070fa <UART_EndTransmit_IT>
    return;
 8006ea4:	e004      	b.n	8006eb0 <HAL_UART_IRQHandler+0x514>
    return;
 8006ea6:	bf00      	nop
 8006ea8:	e002      	b.n	8006eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8006eaa:	bf00      	nop
 8006eac:	e000      	b.n	8006eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8006eae:	bf00      	nop
  }
}
 8006eb0:	37e8      	adds	r7, #232	; 0xe8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop

08006eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4613      	mov	r3, r2
 8006f04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	88fa      	ldrh	r2, [r7, #6]
 8006f16:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2222      	movs	r2, #34	; 0x22
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f3c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0201 	orr.w	r2, r2, #1
 8006f4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0220 	orr.w	r2, r2, #32
 8006f5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b095      	sub	sp, #84	; 0x54
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f94:	643a      	str	r2, [r7, #64]	; 0x40
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3314      	adds	r3, #20
 8006fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3314      	adds	r3, #20
 8006fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e5      	bne.n	8006fa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d119      	bne.n	8007018 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f023 0310 	bic.w	r3, r3, #16
 8006ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007004:	61ba      	str	r2, [r7, #24]
 8007006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6979      	ldr	r1, [r7, #20]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	613b      	str	r3, [r7, #16]
   return(result);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007026:	bf00      	nop
 8007028:	3754      	adds	r7, #84	; 0x54
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff ff3d 	bl	8006ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b21      	cmp	r3, #33	; 0x21
 800706c:	d13e      	bne.n	80070ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007076:	d114      	bne.n	80070a2 <UART_Transmit_IT+0x48>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d110      	bne.n	80070a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007094:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	1c9a      	adds	r2, r3, #2
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	621a      	str	r2, [r3, #32]
 80070a0:	e008      	b.n	80070b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	1c59      	adds	r1, r3, #1
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6211      	str	r1, [r2, #32]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29b      	uxth	r3, r3
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4619      	mov	r1, r3
 80070c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10f      	bne.n	80070e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	e000      	b.n	80070ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070ec:	2302      	movs	r3, #2
  }
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007110:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff fecc 	bl	8006eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b08c      	sub	sp, #48	; 0x30
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b22      	cmp	r3, #34	; 0x22
 800713c:	f040 80ab 	bne.w	8007296 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007148:	d117      	bne.n	800717a <UART_Receive_IT+0x50>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d113      	bne.n	800717a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007168:	b29a      	uxth	r2, r3
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	1c9a      	adds	r2, r3, #2
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	629a      	str	r2, [r3, #40]	; 0x28
 8007178:	e026      	b.n	80071c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718c:	d007      	beq.n	800719e <UART_Receive_IT+0x74>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <UART_Receive_IT+0x82>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e008      	b.n	80071be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4619      	mov	r1, r3
 80071d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d15a      	bne.n	8007292 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0220 	bic.w	r2, r2, #32
 80071ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695a      	ldr	r2, [r3, #20]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0201 	bic.w	r2, r2, #1
 800720a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	2b01      	cmp	r3, #1
 800721a:	d135      	bne.n	8007288 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	613b      	str	r3, [r7, #16]
   return(result);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f023 0310 	bic.w	r3, r3, #16
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	330c      	adds	r3, #12
 8007240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007242:	623a      	str	r2, [r7, #32]
 8007244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	69f9      	ldr	r1, [r7, #28]
 8007248:	6a3a      	ldr	r2, [r7, #32]
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e5      	bne.n	8007222 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b10      	cmp	r3, #16
 8007262:	d10a      	bne.n	800727a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fe2d 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
 8007286:	e002      	b.n	800728e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7fb f9f9 	bl	8002680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	e002      	b.n	8007298 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	e000      	b.n	8007298 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007296:	2302      	movs	r3, #2
  }
}
 8007298:	4618      	mov	r0, r3
 800729a:	3730      	adds	r7, #48	; 0x30
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	b09f      	sub	sp, #124	; 0x7c
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b6:	68d9      	ldr	r1, [r3, #12]
 80072b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	ea40 0301 	orr.w	r3, r0, r1
 80072c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	431a      	orrs	r2, r3
 80072cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	431a      	orrs	r2, r3
 80072d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80072da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072e4:	f021 010c 	bic.w	r1, r1, #12
 80072e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072ee:	430b      	orrs	r3, r1
 80072f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fe:	6999      	ldr	r1, [r3, #24]
 8007300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	ea40 0301 	orr.w	r3, r0, r1
 8007308:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800730a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4bc5      	ldr	r3, [pc, #788]	; (8007624 <UART_SetConfig+0x384>)
 8007310:	429a      	cmp	r2, r3
 8007312:	d004      	beq.n	800731e <UART_SetConfig+0x7e>
 8007314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	4bc3      	ldr	r3, [pc, #780]	; (8007628 <UART_SetConfig+0x388>)
 800731a:	429a      	cmp	r2, r3
 800731c:	d103      	bne.n	8007326 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800731e:	f7fe faaf 	bl	8005880 <HAL_RCC_GetPCLK2Freq>
 8007322:	6778      	str	r0, [r7, #116]	; 0x74
 8007324:	e002      	b.n	800732c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007326:	f7fe fa97 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 800732a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800732c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007334:	f040 80b6 	bne.w	80074a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800733a:	461c      	mov	r4, r3
 800733c:	f04f 0500 	mov.w	r5, #0
 8007340:	4622      	mov	r2, r4
 8007342:	462b      	mov	r3, r5
 8007344:	1891      	adds	r1, r2, r2
 8007346:	6439      	str	r1, [r7, #64]	; 0x40
 8007348:	415b      	adcs	r3, r3
 800734a:	647b      	str	r3, [r7, #68]	; 0x44
 800734c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007350:	1912      	adds	r2, r2, r4
 8007352:	eb45 0303 	adc.w	r3, r5, r3
 8007356:	f04f 0000 	mov.w	r0, #0
 800735a:	f04f 0100 	mov.w	r1, #0
 800735e:	00d9      	lsls	r1, r3, #3
 8007360:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007364:	00d0      	lsls	r0, r2, #3
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	1911      	adds	r1, r2, r4
 800736c:	6639      	str	r1, [r7, #96]	; 0x60
 800736e:	416b      	adcs	r3, r5
 8007370:	667b      	str	r3, [r7, #100]	; 0x64
 8007372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	461a      	mov	r2, r3
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	1891      	adds	r1, r2, r2
 800737e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007380:	415b      	adcs	r3, r3
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007384:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007388:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800738c:	f7f9 fc5c 	bl	8000c48 <__aeabi_uldivmod>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4ba5      	ldr	r3, [pc, #660]	; (800762c <UART_SetConfig+0x38c>)
 8007396:	fba3 2302 	umull	r2, r3, r3, r2
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	011e      	lsls	r6, r3, #4
 800739e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a0:	461c      	mov	r4, r3
 80073a2:	f04f 0500 	mov.w	r5, #0
 80073a6:	4622      	mov	r2, r4
 80073a8:	462b      	mov	r3, r5
 80073aa:	1891      	adds	r1, r2, r2
 80073ac:	6339      	str	r1, [r7, #48]	; 0x30
 80073ae:	415b      	adcs	r3, r3
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
 80073b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80073b6:	1912      	adds	r2, r2, r4
 80073b8:	eb45 0303 	adc.w	r3, r5, r3
 80073bc:	f04f 0000 	mov.w	r0, #0
 80073c0:	f04f 0100 	mov.w	r1, #0
 80073c4:	00d9      	lsls	r1, r3, #3
 80073c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073ca:	00d0      	lsls	r0, r2, #3
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	1911      	adds	r1, r2, r4
 80073d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80073d4:	416b      	adcs	r3, r5
 80073d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	461a      	mov	r2, r3
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	1891      	adds	r1, r2, r2
 80073e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80073e6:	415b      	adcs	r3, r3
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80073f2:	f7f9 fc29 	bl	8000c48 <__aeabi_uldivmod>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4b8c      	ldr	r3, [pc, #560]	; (800762c <UART_SetConfig+0x38c>)
 80073fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	2164      	movs	r1, #100	; 0x64
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	3332      	adds	r3, #50	; 0x32
 800740e:	4a87      	ldr	r2, [pc, #540]	; (800762c <UART_SetConfig+0x38c>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800741c:	441e      	add	r6, r3
 800741e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007420:	4618      	mov	r0, r3
 8007422:	f04f 0100 	mov.w	r1, #0
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	1894      	adds	r4, r2, r2
 800742c:	623c      	str	r4, [r7, #32]
 800742e:	415b      	adcs	r3, r3
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
 8007432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007436:	1812      	adds	r2, r2, r0
 8007438:	eb41 0303 	adc.w	r3, r1, r3
 800743c:	f04f 0400 	mov.w	r4, #0
 8007440:	f04f 0500 	mov.w	r5, #0
 8007444:	00dd      	lsls	r5, r3, #3
 8007446:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800744a:	00d4      	lsls	r4, r2, #3
 800744c:	4622      	mov	r2, r4
 800744e:	462b      	mov	r3, r5
 8007450:	1814      	adds	r4, r2, r0
 8007452:	653c      	str	r4, [r7, #80]	; 0x50
 8007454:	414b      	adcs	r3, r1
 8007456:	657b      	str	r3, [r7, #84]	; 0x54
 8007458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	461a      	mov	r2, r3
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	1891      	adds	r1, r2, r2
 8007464:	61b9      	str	r1, [r7, #24]
 8007466:	415b      	adcs	r3, r3
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800746e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007472:	f7f9 fbe9 	bl	8000c48 <__aeabi_uldivmod>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4b6c      	ldr	r3, [pc, #432]	; (800762c <UART_SetConfig+0x38c>)
 800747c:	fba3 1302 	umull	r1, r3, r3, r2
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	2164      	movs	r1, #100	; 0x64
 8007484:	fb01 f303 	mul.w	r3, r1, r3
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	3332      	adds	r3, #50	; 0x32
 800748e:	4a67      	ldr	r2, [pc, #412]	; (800762c <UART_SetConfig+0x38c>)
 8007490:	fba2 2303 	umull	r2, r3, r2, r3
 8007494:	095b      	lsrs	r3, r3, #5
 8007496:	f003 0207 	and.w	r2, r3, #7
 800749a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4432      	add	r2, r6
 80074a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074a2:	e0b9      	b.n	8007618 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074a6:	461c      	mov	r4, r3
 80074a8:	f04f 0500 	mov.w	r5, #0
 80074ac:	4622      	mov	r2, r4
 80074ae:	462b      	mov	r3, r5
 80074b0:	1891      	adds	r1, r2, r2
 80074b2:	6139      	str	r1, [r7, #16]
 80074b4:	415b      	adcs	r3, r3
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80074bc:	1912      	adds	r2, r2, r4
 80074be:	eb45 0303 	adc.w	r3, r5, r3
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f04f 0100 	mov.w	r1, #0
 80074ca:	00d9      	lsls	r1, r3, #3
 80074cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d0:	00d0      	lsls	r0, r2, #3
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	eb12 0804 	adds.w	r8, r2, r4
 80074da:	eb43 0905 	adc.w	r9, r3, r5
 80074de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f04f 0100 	mov.w	r1, #0
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	008b      	lsls	r3, r1, #2
 80074f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074f6:	0082      	lsls	r2, r0, #2
 80074f8:	4640      	mov	r0, r8
 80074fa:	4649      	mov	r1, r9
 80074fc:	f7f9 fba4 	bl	8000c48 <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4b49      	ldr	r3, [pc, #292]	; (800762c <UART_SetConfig+0x38c>)
 8007506:	fba3 2302 	umull	r2, r3, r3, r2
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	011e      	lsls	r6, r3, #4
 800750e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007510:	4618      	mov	r0, r3
 8007512:	f04f 0100 	mov.w	r1, #0
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	1894      	adds	r4, r2, r2
 800751c:	60bc      	str	r4, [r7, #8]
 800751e:	415b      	adcs	r3, r3
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007526:	1812      	adds	r2, r2, r0
 8007528:	eb41 0303 	adc.w	r3, r1, r3
 800752c:	f04f 0400 	mov.w	r4, #0
 8007530:	f04f 0500 	mov.w	r5, #0
 8007534:	00dd      	lsls	r5, r3, #3
 8007536:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800753a:	00d4      	lsls	r4, r2, #3
 800753c:	4622      	mov	r2, r4
 800753e:	462b      	mov	r3, r5
 8007540:	1814      	adds	r4, r2, r0
 8007542:	64bc      	str	r4, [r7, #72]	; 0x48
 8007544:	414b      	adcs	r3, r1
 8007546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4618      	mov	r0, r3
 800754e:	f04f 0100 	mov.w	r1, #0
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	008b      	lsls	r3, r1, #2
 800755c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007560:	0082      	lsls	r2, r0, #2
 8007562:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007566:	f7f9 fb6f 	bl	8000c48 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4b2f      	ldr	r3, [pc, #188]	; (800762c <UART_SetConfig+0x38c>)
 8007570:	fba3 1302 	umull	r1, r3, r3, r2
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	2164      	movs	r1, #100	; 0x64
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	3332      	adds	r3, #50	; 0x32
 8007582:	4a2a      	ldr	r2, [pc, #168]	; (800762c <UART_SetConfig+0x38c>)
 8007584:	fba2 2303 	umull	r2, r3, r2, r3
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800758e:	441e      	add	r6, r3
 8007590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007592:	4618      	mov	r0, r3
 8007594:	f04f 0100 	mov.w	r1, #0
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	1894      	adds	r4, r2, r2
 800759e:	603c      	str	r4, [r7, #0]
 80075a0:	415b      	adcs	r3, r3
 80075a2:	607b      	str	r3, [r7, #4]
 80075a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a8:	1812      	adds	r2, r2, r0
 80075aa:	eb41 0303 	adc.w	r3, r1, r3
 80075ae:	f04f 0400 	mov.w	r4, #0
 80075b2:	f04f 0500 	mov.w	r5, #0
 80075b6:	00dd      	lsls	r5, r3, #3
 80075b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075bc:	00d4      	lsls	r4, r2, #3
 80075be:	4622      	mov	r2, r4
 80075c0:	462b      	mov	r3, r5
 80075c2:	eb12 0a00 	adds.w	sl, r2, r0
 80075c6:	eb43 0b01 	adc.w	fp, r3, r1
 80075ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f04f 0100 	mov.w	r1, #0
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	008b      	lsls	r3, r1, #2
 80075de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075e2:	0082      	lsls	r2, r0, #2
 80075e4:	4650      	mov	r0, sl
 80075e6:	4659      	mov	r1, fp
 80075e8:	f7f9 fb2e 	bl	8000c48 <__aeabi_uldivmod>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4b0e      	ldr	r3, [pc, #56]	; (800762c <UART_SetConfig+0x38c>)
 80075f2:	fba3 1302 	umull	r1, r3, r3, r2
 80075f6:	095b      	lsrs	r3, r3, #5
 80075f8:	2164      	movs	r1, #100	; 0x64
 80075fa:	fb01 f303 	mul.w	r3, r1, r3
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	3332      	adds	r3, #50	; 0x32
 8007604:	4a09      	ldr	r2, [pc, #36]	; (800762c <UART_SetConfig+0x38c>)
 8007606:	fba2 2303 	umull	r2, r3, r2, r3
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	f003 020f 	and.w	r2, r3, #15
 8007610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4432      	add	r2, r6
 8007616:	609a      	str	r2, [r3, #8]
}
 8007618:	bf00      	nop
 800761a:	377c      	adds	r7, #124	; 0x7c
 800761c:	46bd      	mov	sp, r7
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	bf00      	nop
 8007624:	40011000 	.word	0x40011000
 8007628:	40011400 	.word	0x40011400
 800762c:	51eb851f 	.word	0x51eb851f

08007630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007630:	b084      	sub	sp, #16
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	f107 001c 	add.w	r0, r7, #28
 800763e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	2b01      	cmp	r3, #1
 8007646:	d122      	bne.n	800768e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800765c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007672:	2b01      	cmp	r3, #1
 8007674:	d105      	bne.n	8007682 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fb1c 	bl	8008cc0 <USB_CoreReset>
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
 800768c:	e01a      	b.n	80076c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 fb10 	bl	8008cc0 <USB_CoreReset>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d106      	bne.n	80076b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
 80076b6:	e005      	b.n	80076c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d10b      	bne.n	80076e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f043 0206 	orr.w	r2, r3, #6
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f043 0220 	orr.w	r2, r3, #32
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076ee:	b004      	add	sp, #16
 80076f0:	4770      	bx	lr
	...

080076f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d165      	bne.n	80077d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4a41      	ldr	r2, [pc, #260]	; (8007810 <USB_SetTurnaroundTime+0x11c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d906      	bls.n	800771e <USB_SetTurnaroundTime+0x2a>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4a40      	ldr	r2, [pc, #256]	; (8007814 <USB_SetTurnaroundTime+0x120>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d202      	bcs.n	800771e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007718:	230f      	movs	r3, #15
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	e062      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4a3c      	ldr	r2, [pc, #240]	; (8007814 <USB_SetTurnaroundTime+0x120>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d306      	bcc.n	8007734 <USB_SetTurnaroundTime+0x40>
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	4a3b      	ldr	r2, [pc, #236]	; (8007818 <USB_SetTurnaroundTime+0x124>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d202      	bcs.n	8007734 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800772e:	230e      	movs	r3, #14
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	e057      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4a38      	ldr	r2, [pc, #224]	; (8007818 <USB_SetTurnaroundTime+0x124>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d306      	bcc.n	800774a <USB_SetTurnaroundTime+0x56>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4a37      	ldr	r2, [pc, #220]	; (800781c <USB_SetTurnaroundTime+0x128>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d202      	bcs.n	800774a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007744:	230d      	movs	r3, #13
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	e04c      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4a33      	ldr	r2, [pc, #204]	; (800781c <USB_SetTurnaroundTime+0x128>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d306      	bcc.n	8007760 <USB_SetTurnaroundTime+0x6c>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	4a32      	ldr	r2, [pc, #200]	; (8007820 <USB_SetTurnaroundTime+0x12c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d802      	bhi.n	8007760 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800775a:	230c      	movs	r3, #12
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	e041      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4a2f      	ldr	r2, [pc, #188]	; (8007820 <USB_SetTurnaroundTime+0x12c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d906      	bls.n	8007776 <USB_SetTurnaroundTime+0x82>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4a2e      	ldr	r2, [pc, #184]	; (8007824 <USB_SetTurnaroundTime+0x130>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d802      	bhi.n	8007776 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007770:	230b      	movs	r3, #11
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e036      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4a2a      	ldr	r2, [pc, #168]	; (8007824 <USB_SetTurnaroundTime+0x130>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d906      	bls.n	800778c <USB_SetTurnaroundTime+0x98>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4a29      	ldr	r2, [pc, #164]	; (8007828 <USB_SetTurnaroundTime+0x134>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d802      	bhi.n	800778c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007786:	230a      	movs	r3, #10
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e02b      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4a26      	ldr	r2, [pc, #152]	; (8007828 <USB_SetTurnaroundTime+0x134>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d906      	bls.n	80077a2 <USB_SetTurnaroundTime+0xae>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4a25      	ldr	r2, [pc, #148]	; (800782c <USB_SetTurnaroundTime+0x138>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d202      	bcs.n	80077a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800779c:	2309      	movs	r3, #9
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	e020      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4a21      	ldr	r2, [pc, #132]	; (800782c <USB_SetTurnaroundTime+0x138>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d306      	bcc.n	80077b8 <USB_SetTurnaroundTime+0xc4>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4a20      	ldr	r2, [pc, #128]	; (8007830 <USB_SetTurnaroundTime+0x13c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d802      	bhi.n	80077b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077b2:	2308      	movs	r3, #8
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e015      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4a1d      	ldr	r2, [pc, #116]	; (8007830 <USB_SetTurnaroundTime+0x13c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d906      	bls.n	80077ce <USB_SetTurnaroundTime+0xda>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4a1c      	ldr	r2, [pc, #112]	; (8007834 <USB_SetTurnaroundTime+0x140>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d202      	bcs.n	80077ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077c8:	2307      	movs	r3, #7
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e00a      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077ce:	2306      	movs	r3, #6
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e007      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077da:	2309      	movs	r3, #9
 80077dc:	617b      	str	r3, [r7, #20]
 80077de:	e001      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077e0:	2309      	movs	r3, #9
 80077e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	029b      	lsls	r3, r3, #10
 80077f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80077fc:	431a      	orrs	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	00d8acbf 	.word	0x00d8acbf
 8007814:	00e4e1c0 	.word	0x00e4e1c0
 8007818:	00f42400 	.word	0x00f42400
 800781c:	01067380 	.word	0x01067380
 8007820:	011a499f 	.word	0x011a499f
 8007824:	01312cff 	.word	0x01312cff
 8007828:	014ca43f 	.word	0x014ca43f
 800782c:	016e3600 	.word	0x016e3600
 8007830:	01a6ab1f 	.word	0x01a6ab1f
 8007834:	01e84800 	.word	0x01e84800

08007838 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f043 0201 	orr.w	r2, r3, #1
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f023 0201 	bic.w	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d115      	bne.n	80078ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078aa:	2001      	movs	r0, #1
 80078ac:	f7fb f942 	bl	8002b34 <HAL_Delay>
      ms++;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3301      	adds	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 f972 	bl	8008ba0 <USB_GetMode>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d01e      	beq.n	8007900 <USB_SetCurrentMode+0x84>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b31      	cmp	r3, #49	; 0x31
 80078c6:	d9f0      	bls.n	80078aa <USB_SetCurrentMode+0x2e>
 80078c8:	e01a      	b.n	8007900 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d115      	bne.n	80078fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078dc:	2001      	movs	r0, #1
 80078de:	f7fb f929 	bl	8002b34 <HAL_Delay>
      ms++;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f959 	bl	8008ba0 <USB_GetMode>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <USB_SetCurrentMode+0x84>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b31      	cmp	r3, #49	; 0x31
 80078f8:	d9f0      	bls.n	80078dc <USB_SetCurrentMode+0x60>
 80078fa:	e001      	b.n	8007900 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e005      	b.n	800790c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b32      	cmp	r3, #50	; 0x32
 8007904:	d101      	bne.n	800790a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007914:	b084      	sub	sp, #16
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800792e:	2300      	movs	r3, #0
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	e009      	b.n	8007948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3340      	adds	r3, #64	; 0x40
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	2200      	movs	r2, #0
 8007940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	3301      	adds	r3, #1
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b0e      	cmp	r3, #14
 800794c:	d9f2      	bls.n	8007934 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800794e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d11c      	bne.n	800798e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007962:	f043 0302 	orr.w	r3, r3, #2
 8007966:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	639a      	str	r2, [r3, #56]	; 0x38
 800798c:	e00b      	b.n	80079a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079ac:	461a      	mov	r2, r3
 80079ae:	2300      	movs	r3, #0
 80079b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b8:	4619      	mov	r1, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c0:	461a      	mov	r2, r3
 80079c2:	680b      	ldr	r3, [r1, #0]
 80079c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d10c      	bne.n	80079e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079d2:	2100      	movs	r1, #0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f945 	bl	8007c64 <USB_SetDevSpeed>
 80079da:	e008      	b.n	80079ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079dc:	2101      	movs	r1, #1
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f940 	bl	8007c64 <USB_SetDevSpeed>
 80079e4:	e003      	b.n	80079ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079e6:	2103      	movs	r1, #3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f93b 	bl	8007c64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079ee:	2110      	movs	r1, #16
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f8f3 	bl	8007bdc <USB_FlushTxFifo>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f90f 	bl	8007c24 <USB_FlushRxFifo>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	461a      	mov	r2, r3
 8007a18:	2300      	movs	r3, #0
 8007a1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a22:	461a      	mov	r2, r3
 8007a24:	2300      	movs	r3, #0
 8007a26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2300      	movs	r3, #0
 8007a32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a34:	2300      	movs	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	e043      	b.n	8007ac2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a50:	d118      	bne.n	8007a84 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a64:	461a      	mov	r2, r3
 8007a66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	e013      	b.n	8007a96 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e008      	b.n	8007a96 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	461a      	mov	r2, r3
 8007a92:	2300      	movs	r3, #0
 8007a94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d3b7      	bcc.n	8007a3a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	e043      	b.n	8007b58 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ae6:	d118      	bne.n	8007b1a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afa:	461a      	mov	r2, r3
 8007afc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	e013      	b.n	8007b2c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b10:	461a      	mov	r2, r3
 8007b12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	e008      	b.n	8007b2c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b26:	461a      	mov	r2, r3
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b38:	461a      	mov	r2, r3
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3301      	adds	r3, #1
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d3b7      	bcc.n	8007ad0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d105      	bne.n	8007b94 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	f043 0210 	orr.w	r2, r3, #16
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <USB_DevInit+0x2c4>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f043 0208 	orr.w	r2, r3, #8
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d107      	bne.n	8007bc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bc0:	f043 0304 	orr.w	r3, r3, #4
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bd4:	b004      	add	sp, #16
 8007bd6:	4770      	bx	lr
 8007bd8:	803c3800 	.word	0x803c3800

08007bdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	019b      	lsls	r3, r3, #6
 8007bee:	f043 0220 	orr.w	r2, r3, #32
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	4a08      	ldr	r2, [pc, #32]	; (8007c20 <USB_FlushTxFifo+0x44>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d901      	bls.n	8007c06 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e006      	b.n	8007c14 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d0f1      	beq.n	8007bf6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	00030d40 	.word	0x00030d40

08007c24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2210      	movs	r2, #16
 8007c34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	4a08      	ldr	r2, [pc, #32]	; (8007c60 <USB_FlushRxFifo+0x3c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d901      	bls.n	8007c46 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e006      	b.n	8007c54 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d0f1      	beq.n	8007c36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	00030d40 	.word	0x00030d40

08007c64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c84:	4313      	orrs	r3, r2
 8007c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b087      	sub	sp, #28
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0306 	and.w	r3, r3, #6
 8007cae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75fb      	strb	r3, [r7, #23]
 8007cba:	e00a      	b.n	8007cd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d002      	beq.n	8007cc8 <USB_GetDevSpeed+0x32>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b06      	cmp	r3, #6
 8007cc6:	d102      	bne.n	8007cce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	75fb      	strb	r3, [r7, #23]
 8007ccc:	e001      	b.n	8007cd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007cce:	230f      	movs	r3, #15
 8007cd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	371c      	adds	r7, #28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d13a      	bne.n	8007d72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	69da      	ldr	r2, [r3, #28]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	68f9      	ldr	r1, [r7, #12]
 8007d16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d155      	bne.n	8007de0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	78db      	ldrb	r3, [r3, #3]
 8007d4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	059b      	lsls	r3, r3, #22
 8007d56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	e036      	b.n	8007de0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d78:	69da      	ldr	r2, [r3, #28]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 030f 	and.w	r3, r3, #15
 8007d82:	2101      	movs	r1, #1
 8007d84:	fa01 f303 	lsl.w	r3, r1, r3
 8007d88:	041b      	lsls	r3, r3, #16
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d90:	4313      	orrs	r3, r2
 8007d92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d11a      	bne.n	8007de0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	78db      	ldrb	r3, [r3, #3]
 8007dc4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	0151      	lsls	r1, r2, #5
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	440a      	add	r2, r1
 8007dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dde:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d161      	bne.n	8007ed0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e22:	d11f      	bne.n	8007e64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	440a      	add	r2, r1
 8007e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	0151      	lsls	r1, r2, #5
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	440a      	add	r2, r1
 8007e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	2101      	movs	r1, #1
 8007e76:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	43db      	mvns	r3, r3
 8007e7e:	68f9      	ldr	r1, [r7, #12]
 8007e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e84:	4013      	ands	r3, r2
 8007e86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8e:	69da      	ldr	r2, [r3, #28]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	f003 030f 	and.w	r3, r3, #15
 8007e98:	2101      	movs	r1, #1
 8007e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	0159      	lsls	r1, r3, #5
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	440b      	add	r3, r1
 8007ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4b35      	ldr	r3, [pc, #212]	; (8007fa0 <USB_DeactivateEndpoint+0x1b0>)
 8007eca:	4013      	ands	r3, r2
 8007ecc:	600b      	str	r3, [r1, #0]
 8007ece:	e060      	b.n	8007f92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ee6:	d11f      	bne.n	8007f28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	0151      	lsls	r1, r2, #5
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	440a      	add	r2, r1
 8007efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	0151      	lsls	r1, r2, #5
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	440a      	add	r2, r1
 8007f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	f003 030f 	and.w	r3, r3, #15
 8007f38:	2101      	movs	r1, #1
 8007f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3e:	041b      	lsls	r3, r3, #16
 8007f40:	43db      	mvns	r3, r3
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f48:	4013      	ands	r3, r2
 8007f4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	f003 030f 	and.w	r3, r3, #15
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f62:	041b      	lsls	r3, r3, #16
 8007f64:	43db      	mvns	r3, r3
 8007f66:	68f9      	ldr	r1, [r7, #12]
 8007f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	0159      	lsls	r1, r3, #5
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	440b      	add	r3, r1
 8007f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <USB_DeactivateEndpoint+0x1b4>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	ec337800 	.word	0xec337800
 8007fa4:	eff37800 	.word	0xeff37800

08007fa8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	; 0x28
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	785b      	ldrb	r3, [r3, #1]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	f040 815c 	bne.w	8008282 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d132      	bne.n	8008038 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	0151      	lsls	r1, r2, #5
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	440a      	add	r2, r1
 8007fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	440a      	add	r2, r1
 800802c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008030:	0cdb      	lsrs	r3, r3, #19
 8008032:	04db      	lsls	r3, r3, #19
 8008034:	6113      	str	r3, [r2, #16]
 8008036:	e074      	b.n	8008122 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008052:	0cdb      	lsrs	r3, r3, #19
 8008054:	04db      	lsls	r3, r3, #19
 8008056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	440a      	add	r2, r1
 800806e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800807a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008088:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	6959      	ldr	r1, [r3, #20]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	440b      	add	r3, r1
 8008094:	1e59      	subs	r1, r3, #1
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	fbb1 f3f3 	udiv	r3, r1, r3
 800809e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080a0:	4b9d      	ldr	r3, [pc, #628]	; (8008318 <USB_EPStartXfer+0x370>)
 80080a2:	400b      	ands	r3, r1
 80080a4:	69b9      	ldr	r1, [r7, #24]
 80080a6:	0148      	lsls	r0, r1, #5
 80080a8:	69f9      	ldr	r1, [r7, #28]
 80080aa:	4401      	add	r1, r0
 80080ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080b0:	4313      	orrs	r3, r2
 80080b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ca:	69b9      	ldr	r1, [r7, #24]
 80080cc:	0148      	lsls	r0, r1, #5
 80080ce:	69f9      	ldr	r1, [r7, #28]
 80080d0:	4401      	add	r1, r0
 80080d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080d6:	4313      	orrs	r3, r2
 80080d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	78db      	ldrb	r3, [r3, #3]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d11f      	bne.n	8008122 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008100:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	69fa      	ldr	r2, [r7, #28]
 8008116:	440a      	add	r2, r1
 8008118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008120:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d14b      	bne.n	80081c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d009      	beq.n	8008144 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813c:	461a      	mov	r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	78db      	ldrb	r3, [r3, #3]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d128      	bne.n	800819e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008158:	2b00      	cmp	r3, #0
 800815a:	d110      	bne.n	800817e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	0151      	lsls	r1, r2, #5
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	440a      	add	r2, r1
 8008172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	e00f      	b.n	800819e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	440a      	add	r2, r1
 8008194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800819c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	0151      	lsls	r1, r2, #5
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	440a      	add	r2, r1
 80081b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	e12f      	b.n	8008420 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	0151      	lsls	r1, r2, #5
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	440a      	add	r2, r1
 80081d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	78db      	ldrb	r3, [r3, #3]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d015      	beq.n	8008214 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8117 	beq.w	8008420 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	2101      	movs	r1, #1
 8008204:	fa01 f303 	lsl.w	r3, r1, r3
 8008208:	69f9      	ldr	r1, [r7, #28]
 800820a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800820e:	4313      	orrs	r3, r2
 8008210:	634b      	str	r3, [r1, #52]	; 0x34
 8008212:	e105      	b.n	8008420 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008220:	2b00      	cmp	r3, #0
 8008222:	d110      	bne.n	8008246 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	0151      	lsls	r1, r2, #5
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	440a      	add	r2, r1
 800823a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800823e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	e00f      	b.n	8008266 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	0151      	lsls	r1, r2, #5
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	440a      	add	r2, r1
 800825c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008264:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	68d9      	ldr	r1, [r3, #12]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	781a      	ldrb	r2, [r3, #0]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	b298      	uxth	r0, r3
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	4603      	mov	r3, r0
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 fa2b 	bl	80086d6 <USB_WritePacket>
 8008280:	e0ce      	b.n	8008420 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	440a      	add	r2, r1
 8008298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800829c:	0cdb      	lsrs	r3, r3, #19
 800829e:	04db      	lsls	r3, r3, #19
 80082a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	0151      	lsls	r1, r2, #5
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	440a      	add	r2, r1
 80082b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d126      	bne.n	800831c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082e4:	69b9      	ldr	r1, [r7, #24]
 80082e6:	0148      	lsls	r0, r1, #5
 80082e8:	69f9      	ldr	r1, [r7, #28]
 80082ea:	4401      	add	r1, r0
 80082ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082f0:	4313      	orrs	r3, r2
 80082f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800830e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008312:	6113      	str	r3, [r2, #16]
 8008314:	e036      	b.n	8008384 <USB_EPStartXfer+0x3dc>
 8008316:	bf00      	nop
 8008318:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	695a      	ldr	r2, [r3, #20]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	4413      	add	r3, r2
 8008326:	1e5a      	subs	r2, r3, #1
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008330:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833e:	691a      	ldr	r2, [r3, #16]
 8008340:	8afb      	ldrh	r3, [r7, #22]
 8008342:	04d9      	lsls	r1, r3, #19
 8008344:	4b39      	ldr	r3, [pc, #228]	; (800842c <USB_EPStartXfer+0x484>)
 8008346:	400b      	ands	r3, r1
 8008348:	69b9      	ldr	r1, [r7, #24]
 800834a:	0148      	lsls	r0, r1, #5
 800834c:	69f9      	ldr	r1, [r7, #28]
 800834e:	4401      	add	r1, r0
 8008350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008354:	4313      	orrs	r3, r2
 8008356:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	4413      	add	r3, r2
 8008360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008364:	691a      	ldr	r2, [r3, #16]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	8af9      	ldrh	r1, [r7, #22]
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008374:	69b9      	ldr	r1, [r7, #24]
 8008376:	0148      	lsls	r0, r1, #5
 8008378:	69f9      	ldr	r1, [r7, #28]
 800837a:	4401      	add	r1, r0
 800837c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008380:	4313      	orrs	r3, r2
 8008382:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d10d      	bne.n	80083a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d009      	beq.n	80083a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	68d9      	ldr	r1, [r3, #12]
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a2:	460a      	mov	r2, r1
 80083a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	78db      	ldrb	r3, [r3, #3]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d128      	bne.n	8008400 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d110      	bne.n	80083e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	e00f      	b.n	8008400 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	0151      	lsls	r1, r2, #5
 80083f2:	69fa      	ldr	r2, [r7, #28]
 80083f4:	440a      	add	r2, r1
 80083f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	0151      	lsls	r1, r2, #5
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	440a      	add	r2, r1
 8008416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800841a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800841e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	1ff80000 	.word	0x1ff80000

08008430 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	4613      	mov	r3, r2
 800843c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	2b01      	cmp	r3, #1
 800844e:	f040 80cd 	bne.w	80085ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d132      	bne.n	80084c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008474:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008478:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800847c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	0151      	lsls	r1, r2, #5
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	440a      	add	r2, r1
 8008494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800849c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	0151      	lsls	r1, r2, #5
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	440a      	add	r2, r1
 80084b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b8:	0cdb      	lsrs	r3, r3, #19
 80084ba:	04db      	lsls	r3, r3, #19
 80084bc:	6113      	str	r3, [r2, #16]
 80084be:	e04e      	b.n	800855e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084da:	0cdb      	lsrs	r3, r3, #19
 80084dc:	04db      	lsls	r3, r3, #19
 80084de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008502:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	695a      	ldr	r2, [r3, #20]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	429a      	cmp	r2, r3
 800850e:	d903      	bls.n	8008518 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	440a      	add	r2, r1
 800852e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008544:	691a      	ldr	r2, [r3, #16]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800854e:	6939      	ldr	r1, [r7, #16]
 8008550:	0148      	lsls	r0, r1, #5
 8008552:	6979      	ldr	r1, [r7, #20]
 8008554:	4401      	add	r1, r0
 8008556:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800855a:	4313      	orrs	r3, r2
 800855c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d11e      	bne.n	80085a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008578:	461a      	mov	r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800859a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	e092      	b.n	80086c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	0151      	lsls	r1, r2, #5
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	440a      	add	r2, r1
 80085b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d07e      	beq.n	80086c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f003 030f 	and.w	r3, r3, #15
 80085da:	2101      	movs	r1, #1
 80085dc:	fa01 f303 	lsl.w	r3, r1, r3
 80085e0:	6979      	ldr	r1, [r7, #20]
 80085e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085e6:	4313      	orrs	r3, r2
 80085e8:	634b      	str	r3, [r1, #52]	; 0x34
 80085ea:	e06d      	b.n	80086c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	0151      	lsls	r1, r2, #5
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	440a      	add	r2, r1
 8008602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008606:	0cdb      	lsrs	r3, r3, #19
 8008608:	04db      	lsls	r3, r3, #19
 800860a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	0151      	lsls	r1, r2, #5
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	440a      	add	r2, r1
 8008622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008626:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800862a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800862e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4413      	add	r3, r2
 8008648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	0151      	lsls	r1, r2, #5
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	440a      	add	r2, r1
 8008656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800865a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800865e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866c:	691a      	ldr	r2, [r3, #16]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008676:	6939      	ldr	r1, [r7, #16]
 8008678:	0148      	lsls	r0, r1, #5
 800867a:	6979      	ldr	r1, [r7, #20]
 800867c:	4401      	add	r1, r0
 800867e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008682:	4313      	orrs	r3, r2
 8008684:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d10d      	bne.n	80086a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d009      	beq.n	80086a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	68d9      	ldr	r1, [r3, #12]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a4:	460a      	mov	r2, r1
 80086a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b089      	sub	sp, #36	; 0x24
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	4611      	mov	r1, r2
 80086e2:	461a      	mov	r2, r3
 80086e4:	460b      	mov	r3, r1
 80086e6:	71fb      	strb	r3, [r7, #7]
 80086e8:	4613      	mov	r3, r2
 80086ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80086f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d123      	bne.n	8008744 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086fc:	88bb      	ldrh	r3, [r7, #4]
 80086fe:	3303      	adds	r3, #3
 8008700:	089b      	lsrs	r3, r3, #2
 8008702:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008704:	2300      	movs	r3, #0
 8008706:	61bb      	str	r3, [r7, #24]
 8008708:	e018      	b.n	800873c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	031a      	lsls	r2, r3, #12
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	4413      	add	r3, r2
 8008712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008716:	461a      	mov	r2, r3
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	3301      	adds	r3, #1
 8008722:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	3301      	adds	r3, #1
 8008728:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	3301      	adds	r3, #1
 800872e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	3301      	adds	r3, #1
 8008734:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	3301      	adds	r3, #1
 800873a:	61bb      	str	r3, [r7, #24]
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	429a      	cmp	r2, r3
 8008742:	d3e2      	bcc.n	800870a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3724      	adds	r7, #36	; 0x24
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008752:	b480      	push	{r7}
 8008754:	b08b      	sub	sp, #44	; 0x2c
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	4613      	mov	r3, r2
 800875e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008768:	88fb      	ldrh	r3, [r7, #6]
 800876a:	089b      	lsrs	r3, r3, #2
 800876c:	b29b      	uxth	r3, r3
 800876e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008770:	88fb      	ldrh	r3, [r7, #6]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008778:	2300      	movs	r3, #0
 800877a:	623b      	str	r3, [r7, #32]
 800877c:	e014      	b.n	80087a8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	601a      	str	r2, [r3, #0]
    pDest++;
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	3301      	adds	r3, #1
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	3301      	adds	r3, #1
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	3301      	adds	r3, #1
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	3301      	adds	r3, #1
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	3301      	adds	r3, #1
 80087a6:	623b      	str	r3, [r7, #32]
 80087a8:	6a3a      	ldr	r2, [r7, #32]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d3e6      	bcc.n	800877e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087b0:	8bfb      	ldrh	r3, [r7, #30]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01e      	beq.n	80087f4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c0:	461a      	mov	r2, r3
 80087c2:	f107 0310 	add.w	r3, r7, #16
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	fa22 f303 	lsr.w	r3, r2, r3
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	701a      	strb	r2, [r3, #0]
      i++;
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	3301      	adds	r3, #1
 80087e0:	623b      	str	r3, [r7, #32]
      pDest++;
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	3301      	adds	r3, #1
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80087e8:	8bfb      	ldrh	r3, [r7, #30]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80087ee:	8bfb      	ldrh	r3, [r7, #30]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1ea      	bne.n	80087ca <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	372c      	adds	r7, #44	; 0x2c
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008802:	b480      	push	{r7}
 8008804:	b085      	sub	sp, #20
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d12c      	bne.n	8008878 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	db12      	blt.n	8008856 <USB_EPSetStall+0x54>
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00f      	beq.n	8008856 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	440a      	add	r2, r1
 800884c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008850:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008854:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	0151      	lsls	r1, r2, #5
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	440a      	add	r2, r1
 800886c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	e02b      	b.n	80088d0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	db12      	blt.n	80088b0 <USB_EPSetStall+0xae>
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00f      	beq.n	80088b0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088ae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	0151      	lsls	r1, r2, #5
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	440a      	add	r2, r1
 80088c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088de:	b480      	push	{r7}
 80088e0:	b085      	sub	sp, #20
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d128      	bne.n	800894c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	440a      	add	r2, r1
 8008910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008918:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	78db      	ldrb	r3, [r3, #3]
 800891e:	2b03      	cmp	r3, #3
 8008920:	d003      	beq.n	800892a <USB_EPClearStall+0x4c>
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	78db      	ldrb	r3, [r3, #3]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d138      	bne.n	800899c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	4413      	add	r3, r2
 8008932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	440a      	add	r2, r1
 8008940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	e027      	b.n	800899c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	440a      	add	r2, r1
 8008962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800896a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	78db      	ldrb	r3, [r3, #3]
 8008970:	2b03      	cmp	r3, #3
 8008972:	d003      	beq.n	800897c <USB_EPClearStall+0x9e>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	78db      	ldrb	r3, [r3, #3]
 8008978:	2b02      	cmp	r3, #2
 800897a:	d10f      	bne.n	800899c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	0151      	lsls	r1, r2, #5
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	440a      	add	r2, r1
 8008992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800899a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	460b      	mov	r3, r1
 80089b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089cc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	78fb      	ldrb	r3, [r7, #3]
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80089de:	68f9      	ldr	r1, [r7, #12]
 80089e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089e4:	4313      	orrs	r3, r2
 80089e6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a10:	f023 0303 	bic.w	r3, r3, #3
 8008a14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a24:	f023 0302 	bic.w	r3, r3, #2
 8008a28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a66:	f043 0302 	orr.w	r3, r3, #2
 8008a6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a92:	68fb      	ldr	r3, [r7, #12]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	0c1b      	lsrs	r3, r3, #16
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	4013      	ands	r3, r2
 8008af6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	b29b      	uxth	r3, r3
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	4013      	ands	r3, r2
 8008b34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b36:	68bb      	ldr	r3, [r7, #8]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b66:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	f003 030f 	and.w	r3, r3, #15
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	fa22 f303 	lsr.w	r3, r2, r3
 8008b74:	01db      	lsls	r3, r3, #7
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	4013      	ands	r3, r2
 8008b90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b92:	68bb      	ldr	r3, [r7, #8]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	f003 0301 	and.w	r3, r3, #1
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008bda:	f023 0307 	bic.w	r3, r3, #7
 8008bde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	333c      	adds	r3, #60	; 0x3c
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	4a26      	ldr	r2, [pc, #152]	; (8008cbc <USB_EP0_OutStart+0xb8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d90a      	bls.n	8008c3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c38:	d101      	bne.n	8008c3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e037      	b.n	8008cae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c44:	461a      	mov	r2, r3
 8008c46:	2300      	movs	r3, #0
 8008c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c6c:	f043 0318 	orr.w	r3, r3, #24
 8008c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d10f      	bne.n	8008cac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c92:	461a      	mov	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008caa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	4f54300a 	.word	0x4f54300a

08008cc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	4a13      	ldr	r2, [pc, #76]	; (8008d20 <USB_CoreReset+0x60>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d901      	bls.n	8008cdc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e01a      	b.n	8008d12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	daf3      	bge.n	8008ccc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f043 0201 	orr.w	r2, r3, #1
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	4a09      	ldr	r2, [pc, #36]	; (8008d20 <USB_CoreReset+0x60>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d901      	bls.n	8008d04 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e006      	b.n	8008d12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d0f1      	beq.n	8008cf4 <USB_CoreReset+0x34>

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	00030d40 	.word	0x00030d40

08008d24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d34:	f002 f95c 	bl	800aff0 <USBD_static_malloc>
 8008d38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d105      	bne.n	8008d4c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e066      	b.n	8008e1a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	7c1b      	ldrb	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d119      	bne.n	8008d90 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d60:	2202      	movs	r2, #2
 8008d62:	2181      	movs	r1, #129	; 0x81
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f002 f820 	bl	800adaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d74:	2202      	movs	r2, #2
 8008d76:	2101      	movs	r1, #1
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f002 f816 	bl	800adaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2210      	movs	r2, #16
 8008d8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008d8e:	e016      	b.n	8008dbe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d90:	2340      	movs	r3, #64	; 0x40
 8008d92:	2202      	movs	r2, #2
 8008d94:	2181      	movs	r1, #129	; 0x81
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f002 f807 	bl	800adaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008da2:	2340      	movs	r3, #64	; 0x40
 8008da4:	2202      	movs	r2, #2
 8008da6:	2101      	movs	r1, #1
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f001 fffe 	bl	800adaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2210      	movs	r2, #16
 8008dba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	2203      	movs	r2, #3
 8008dc2:	2182      	movs	r1, #130	; 0x82
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 fff0 	bl	800adaa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7c1b      	ldrb	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d109      	bne.n	8008e08 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dfe:	2101      	movs	r1, #1
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f002 f8c1 	bl	800af88 <USBD_LL_PrepareReceive>
 8008e06:	e007      	b.n	8008e18 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e0e:	2340      	movs	r3, #64	; 0x40
 8008e10:	2101      	movs	r1, #1
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f002 f8b8 	bl	800af88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008e2e:	2181      	movs	r1, #129	; 0x81
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 ffe0 	bl	800adf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 ffd9 	bl	800adf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008e4c:	2182      	movs	r1, #130	; 0x82
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 ffd1 	bl	800adf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00e      	beq.n	8008e8c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f002 f8c4 	bl	800b00c <USBD_static_free>
    pdev->pClassData = NULL;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ea8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e0af      	b.n	8009020 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d03f      	beq.n	8008f4c <USBD_CDC_Setup+0xb4>
 8008ecc:	2b20      	cmp	r3, #32
 8008ece:	f040 809f 	bne.w	8009010 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	88db      	ldrh	r3, [r3, #6]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d02e      	beq.n	8008f38 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b25b      	sxtb	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	da16      	bge.n	8008f12 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008ef0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	88d2      	ldrh	r2, [r2, #6]
 8008ef6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	88db      	ldrh	r3, [r3, #6]
 8008efc:	2b07      	cmp	r3, #7
 8008efe:	bf28      	it	cs
 8008f00:	2307      	movcs	r3, #7
 8008f02:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	89fa      	ldrh	r2, [r7, #14]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 fb19 	bl	800a542 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008f10:	e085      	b.n	800901e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	785a      	ldrb	r2, [r3, #1]
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	88db      	ldrh	r3, [r3, #6]
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008f28:	6939      	ldr	r1, [r7, #16]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	88db      	ldrh	r3, [r3, #6]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 fb32 	bl	800a59a <USBD_CtlPrepareRx>
      break;
 8008f36:	e072      	b.n	800901e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	7850      	ldrb	r0, [r2, #1]
 8008f44:	2200      	movs	r2, #0
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	4798      	blx	r3
      break;
 8008f4a:	e068      	b.n	800901e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	785b      	ldrb	r3, [r3, #1]
 8008f50:	2b0b      	cmp	r3, #11
 8008f52:	d852      	bhi.n	8008ffa <USBD_CDC_Setup+0x162>
 8008f54:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <USBD_CDC_Setup+0xc4>)
 8008f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5a:	bf00      	nop
 8008f5c:	08008f8d 	.word	0x08008f8d
 8008f60:	08009009 	.word	0x08009009
 8008f64:	08008ffb 	.word	0x08008ffb
 8008f68:	08008ffb 	.word	0x08008ffb
 8008f6c:	08008ffb 	.word	0x08008ffb
 8008f70:	08008ffb 	.word	0x08008ffb
 8008f74:	08008ffb 	.word	0x08008ffb
 8008f78:	08008ffb 	.word	0x08008ffb
 8008f7c:	08008ffb 	.word	0x08008ffb
 8008f80:	08008ffb 	.word	0x08008ffb
 8008f84:	08008fb7 	.word	0x08008fb7
 8008f88:	08008fe1 	.word	0x08008fe1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d107      	bne.n	8008fa8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f98:	f107 030a 	add.w	r3, r7, #10
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 face 	bl	800a542 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fa6:	e032      	b.n	800900e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 fa58 	bl	800a460 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	75fb      	strb	r3, [r7, #23]
          break;
 8008fb4:	e02b      	b.n	800900e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d107      	bne.n	8008fd2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008fc2:	f107 030d 	add.w	r3, r7, #13
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fab9 	bl	800a542 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fd0:	e01d      	b.n	800900e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 fa43 	bl	800a460 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8008fde:	e016      	b.n	800900e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d00f      	beq.n	800900c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fa36 	bl	800a460 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ff8:	e008      	b.n	800900c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 fa2f 	bl	800a460 <USBD_CtlError>
          ret = USBD_FAIL;
 8009002:	2303      	movs	r3, #3
 8009004:	75fb      	strb	r3, [r7, #23]
          break;
 8009006:	e002      	b.n	800900e <USBD_CDC_Setup+0x176>
          break;
 8009008:	bf00      	nop
 800900a:	e008      	b.n	800901e <USBD_CDC_Setup+0x186>
          break;
 800900c:	bf00      	nop
      }
      break;
 800900e:	e006      	b.n	800901e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fa24 	bl	800a460 <USBD_CtlError>
      ret = USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	75fb      	strb	r3, [r7, #23]
      break;
 800901c:	bf00      	nop
  }

  return (uint8_t)ret;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800903a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009046:	2303      	movs	r3, #3
 8009048:	e04f      	b.n	80090ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009052:	78fa      	ldrb	r2, [r7, #3]
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	3318      	adds	r3, #24
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d029      	beq.n	80090bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009068:	78fa      	ldrb	r2, [r7, #3]
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	3318      	adds	r3, #24
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	78f9      	ldrb	r1, [r7, #3]
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	460b      	mov	r3, r1
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	1a5b      	subs	r3, r3, r1
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4403      	add	r3, r0
 8009088:	3344      	adds	r3, #68	; 0x44
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009090:	fb03 f301 	mul.w	r3, r3, r1
 8009094:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009096:	2b00      	cmp	r3, #0
 8009098:	d110      	bne.n	80090bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800909a:	78fa      	ldrb	r2, [r7, #3]
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	440b      	add	r3, r1
 80090a8:	3318      	adds	r3, #24
 80090aa:	2200      	movs	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80090ae:	78f9      	ldrb	r1, [r7, #3]
 80090b0:	2300      	movs	r3, #0
 80090b2:	2200      	movs	r2, #0
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 ff46 	bl	800af46 <USBD_LL_Transmit>
 80090ba:	e015      	b.n	80090e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2200      	movs	r2, #0
 80090c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00b      	beq.n	80090e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80090e4:	78fa      	ldrb	r2, [r7, #3]
 80090e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009104:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009110:	2303      	movs	r3, #3
 8009112:	e015      	b.n	8009140 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 ff56 	bl	800afca <USBD_LL_GetRxDataSize>
 800911e:	4602      	mov	r2, r0
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800913a:	4611      	mov	r1, r2
 800913c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009156:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800915e:	2303      	movs	r3, #3
 8009160:	e01b      	b.n	800919a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d015      	beq.n	8009198 <USBD_CDC_EP0_RxReady+0x50>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009172:	2bff      	cmp	r3, #255	; 0xff
 8009174:	d010      	beq.n	8009198 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009184:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800918c:	b292      	uxth	r2, r2
 800918e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	22ff      	movs	r2, #255	; 0xff
 8009194:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2243      	movs	r2, #67	; 0x43
 80091b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80091b2:	4b03      	ldr	r3, [pc, #12]	; (80091c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	200000a8 	.word	0x200000a8

080091c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2243      	movs	r2, #67	; 0x43
 80091d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80091d2:	4b03      	ldr	r3, [pc, #12]	; (80091e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	20000064 	.word	0x20000064

080091e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2243      	movs	r2, #67	; 0x43
 80091f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80091f2:	4b03      	ldr	r3, [pc, #12]	; (8009200 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	200000ec 	.word	0x200000ec

08009204 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	220a      	movs	r2, #10
 8009210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009212:	4b03      	ldr	r3, [pc, #12]	; (8009220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	20000020 	.word	0x20000020

08009224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009234:	2303      	movs	r3, #3
 8009236:	e004      	b.n	8009242 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800924e:	b480      	push	{r7}
 8009250:	b087      	sub	sp, #28
 8009252:	af00      	add	r7, sp, #0
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009260:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009268:	2303      	movs	r3, #3
 800926a:	e008      	b.n	800927e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800928a:	b480      	push	{r7}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800929a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e004      	b.n	80092b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80092cc:	2301      	movs	r3, #1
 80092ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092da:	2303      	movs	r3, #3
 80092dc:	e01a      	b.n	8009314 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d114      	bne.n	8009312 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009306:	2181      	movs	r1, #129	; 0x81
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 fe1c 	bl	800af46 <USBD_LL_Transmit>

    ret = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800932a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009336:	2303      	movs	r3, #3
 8009338:	e016      	b.n	8009368 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	7c1b      	ldrb	r3, [r3, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d109      	bne.n	8009356 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800934c:	2101      	movs	r1, #1
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f001 fe1a 	bl	800af88 <USBD_LL_PrepareReceive>
 8009354:	e007      	b.n	8009366 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800935c:	2340      	movs	r3, #64	; 0x40
 800935e:	2101      	movs	r1, #1
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 fe11 	bl	800af88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009384:	2303      	movs	r3, #3
 8009386:	e01f      	b.n	80093c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	79fa      	ldrb	r2, [r7, #7]
 80093ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f001 fc8d 	bl	800acdc <USBD_LL_Init>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e016      	b.n	8009416 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00b      	beq.n	8009414 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	f107 020e 	add.w	r2, r7, #14
 8009408:	4610      	mov	r0, r2
 800940a:	4798      	blx	r3
 800940c:	4602      	mov	r2, r0
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 fca4 	bl	800ad74 <USBD_LL_Start>
 800942c:	4603      	mov	r3, r0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	460b      	mov	r3, r1
 8009456:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009458:	2303      	movs	r3, #3
 800945a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	4611      	mov	r1, r2
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	78fa      	ldrb	r2, [r7, #3]
 80094a4:	4611      	mov	r1, r2
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	4798      	blx	r3
  }

  return USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 ff90 	bl	800a3ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80094da:	461a      	mov	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094e8:	f003 031f 	and.w	r3, r3, #31
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d01a      	beq.n	8009526 <USBD_LL_SetupStage+0x72>
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d822      	bhi.n	800953a <USBD_LL_SetupStage+0x86>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <USBD_LL_SetupStage+0x4a>
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d00a      	beq.n	8009512 <USBD_LL_SetupStage+0x5e>
 80094fc:	e01d      	b.n	800953a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa62 	bl	80099d0 <USBD_StdDevReq>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]
      break;
 8009510:	e020      	b.n	8009554 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fac6 	bl	8009aac <USBD_StdItfReq>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]
      break;
 8009524:	e016      	b.n	8009554 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fb05 	bl	8009b3e <USBD_StdEPReq>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]
      break;
 8009538:	e00c      	b.n	8009554 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009540:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009544:	b2db      	uxtb	r3, r3
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 fc73 	bl	800ae34 <USBD_LL_StallEP>
 800954e:	4603      	mov	r3, r0
 8009550:	73fb      	strb	r3, [r7, #15]
      break;
 8009552:	bf00      	nop
  }

  return ret;
 8009554:	7bfb      	ldrb	r3, [r7, #15]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	460b      	mov	r3, r1
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800956c:	7afb      	ldrb	r3, [r7, #11]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d138      	bne.n	80095e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009578:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009580:	2b03      	cmp	r3, #3
 8009582:	d14a      	bne.n	800961a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	429a      	cmp	r2, r3
 800958e:	d913      	bls.n	80095b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	1ad2      	subs	r2, r2, r3
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	4293      	cmp	r3, r2
 80095a8:	bf28      	it	cs
 80095aa:	4613      	movcs	r3, r2
 80095ac:	461a      	mov	r2, r3
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f001 f80f 	bl	800a5d4 <USBD_CtlContinueRx>
 80095b6:	e030      	b.n	800961a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b03      	cmp	r3, #3
 80095c2:	d10b      	bne.n	80095dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d005      	beq.n	80095dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f001 f80a 	bl	800a5f6 <USBD_CtlSendStatus>
 80095e2:	e01a      	b.n	800961a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d114      	bne.n	800961a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00e      	beq.n	800961a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	7afa      	ldrb	r2, [r7, #11]
 8009606:	4611      	mov	r1, r2
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	4798      	blx	r3
 800960c:	4603      	mov	r3, r0
 800960e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	e000      	b.n	800961c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	460b      	mov	r3, r1
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009632:	7afb      	ldrb	r3, [r7, #11]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d16b      	bne.n	8009710 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3314      	adds	r3, #20
 800963c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009644:	2b02      	cmp	r3, #2
 8009646:	d156      	bne.n	80096f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	689a      	ldr	r2, [r3, #8]
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	429a      	cmp	r2, r3
 8009652:	d914      	bls.n	800967e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	1ad2      	subs	r2, r2, r3
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	461a      	mov	r2, r3
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 ff84 	bl	800a578 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009670:	2300      	movs	r3, #0
 8009672:	2200      	movs	r2, #0
 8009674:	2100      	movs	r1, #0
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f001 fc86 	bl	800af88 <USBD_LL_PrepareReceive>
 800967c:	e03b      	b.n	80096f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	429a      	cmp	r2, r3
 8009688:	d11c      	bne.n	80096c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009692:	429a      	cmp	r2, r3
 8009694:	d316      	bcc.n	80096c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d20f      	bcs.n	80096c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096a4:	2200      	movs	r2, #0
 80096a6:	2100      	movs	r1, #0
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 ff65 	bl	800a578 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096b6:	2300      	movs	r3, #0
 80096b8:	2200      	movs	r2, #0
 80096ba:	2100      	movs	r1, #0
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f001 fc63 	bl	800af88 <USBD_LL_PrepareReceive>
 80096c2:	e018      	b.n	80096f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d10b      	bne.n	80096e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096e8:	2180      	movs	r1, #128	; 0x80
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f001 fba2 	bl	800ae34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 ff93 	bl	800a61c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d122      	bne.n	8009746 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff fe98 	bl	8009436 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800970e:	e01a      	b.n	8009746 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b03      	cmp	r3, #3
 800971a:	d114      	bne.n	8009746 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00e      	beq.n	8009746 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	7afa      	ldrb	r2, [r7, #11]
 8009732:	4611      	mov	r1, r2
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	4798      	blx	r3
 8009738:	4603      	mov	r3, r0
 800973a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800973c:	7dfb      	ldrb	r3, [r7, #23]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	e000      	b.n	8009748 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3718      	adds	r7, #24
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009780:	2303      	movs	r3, #3
 8009782:	e02f      	b.n	80097e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00f      	beq.n	80097ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d009      	beq.n	80097ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	6852      	ldr	r2, [r2, #4]
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	4611      	mov	r1, r2
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097ae:	2340      	movs	r3, #64	; 0x40
 80097b0:	2200      	movs	r2, #0
 80097b2:	2100      	movs	r1, #0
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 faf8 	bl	800adaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2240      	movs	r2, #64	; 0x40
 80097c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097ca:	2340      	movs	r3, #64	; 0x40
 80097cc:	2200      	movs	r2, #0
 80097ce:	2180      	movs	r1, #128	; 0x80
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 faea 	bl	800adaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2240      	movs	r2, #64	; 0x40
 80097e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800981a:	b2da      	uxtb	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2204      	movs	r2, #4
 8009826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b04      	cmp	r3, #4
 800984a:	d106      	bne.n	800985a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009852:	b2da      	uxtb	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800987a:	2303      	movs	r3, #3
 800987c:	e012      	b.n	80098a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b03      	cmp	r3, #3
 8009888:	d10b      	bne.n	80098a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d005      	beq.n	80098a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e014      	b.n	80098f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d10d      	bne.n	80098ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d007      	beq.n	80098ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	78fa      	ldrb	r2, [r7, #3]
 80098e8:	4611      	mov	r1, r2
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800990e:	2303      	movs	r3, #3
 8009910:	e014      	b.n	800993c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b03      	cmp	r3, #3
 800991c:	d10d      	bne.n	800993a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	2b00      	cmp	r3, #0
 8009928:	d007      	beq.n	800993a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	78fa      	ldrb	r2, [r7, #3]
 8009934:	4611      	mov	r1, r2
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b082      	sub	sp, #8
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009970:	2b00      	cmp	r3, #0
 8009972:	d009      	beq.n	8009988 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6852      	ldr	r2, [r2, #4]
 8009980:	b2d2      	uxtb	r2, r2
 8009982:	4611      	mov	r1, r2
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	4798      	blx	r3
  }

  return USBD_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009992:	b480      	push	{r7}
 8009994:	b087      	sub	sp, #28
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	3301      	adds	r3, #1
 80099a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099b0:	8a3b      	ldrh	r3, [r7, #16]
 80099b2:	021b      	lsls	r3, r3, #8
 80099b4:	b21a      	sxth	r2, r3
 80099b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	b21b      	sxth	r3, r3
 80099be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099c0:	89fb      	ldrh	r3, [r7, #14]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
	...

080099d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	d005      	beq.n	80099f6 <USBD_StdDevReq+0x26>
 80099ea:	2b40      	cmp	r3, #64	; 0x40
 80099ec:	d853      	bhi.n	8009a96 <USBD_StdDevReq+0xc6>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00b      	beq.n	8009a0a <USBD_StdDevReq+0x3a>
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d14f      	bne.n	8009a96 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	4798      	blx	r3
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]
      break;
 8009a08:	e04a      	b.n	8009aa0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	2b09      	cmp	r3, #9
 8009a10:	d83b      	bhi.n	8009a8a <USBD_StdDevReq+0xba>
 8009a12:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <USBD_StdDevReq+0x48>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009a6d 	.word	0x08009a6d
 8009a1c:	08009a81 	.word	0x08009a81
 8009a20:	08009a8b 	.word	0x08009a8b
 8009a24:	08009a77 	.word	0x08009a77
 8009a28:	08009a8b 	.word	0x08009a8b
 8009a2c:	08009a4b 	.word	0x08009a4b
 8009a30:	08009a41 	.word	0x08009a41
 8009a34:	08009a8b 	.word	0x08009a8b
 8009a38:	08009a63 	.word	0x08009a63
 8009a3c:	08009a55 	.word	0x08009a55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f9de 	bl	8009e04 <USBD_GetDescriptor>
          break;
 8009a48:	e024      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fb43 	bl	800a0d8 <USBD_SetAddress>
          break;
 8009a52:	e01f      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fb82 	bl	800a160 <USBD_SetConfig>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
          break;
 8009a60:	e018      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fc21 	bl	800a2ac <USBD_GetConfig>
          break;
 8009a6a:	e013      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fc52 	bl	800a318 <USBD_GetStatus>
          break;
 8009a74:	e00e      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fc81 	bl	800a380 <USBD_SetFeature>
          break;
 8009a7e:	e009      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fc90 	bl	800a3a8 <USBD_ClrFeature>
          break;
 8009a88:	e004      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fce7 	bl	800a460 <USBD_CtlError>
          break;
 8009a92:	bf00      	nop
      }
      break;
 8009a94:	e004      	b.n	8009aa0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fce1 	bl	800a460 <USBD_CtlError>
      break;
 8009a9e:	bf00      	nop
  }

  return ret;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop

08009aac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ac2:	2b40      	cmp	r3, #64	; 0x40
 8009ac4:	d005      	beq.n	8009ad2 <USBD_StdItfReq+0x26>
 8009ac6:	2b40      	cmp	r3, #64	; 0x40
 8009ac8:	d82f      	bhi.n	8009b2a <USBD_StdItfReq+0x7e>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <USBD_StdItfReq+0x26>
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d12b      	bne.n	8009b2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	3b01      	subs	r3, #1
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d81d      	bhi.n	8009b1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	889b      	ldrh	r3, [r3, #4]
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d813      	bhi.n	8009b12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	4798      	blx	r3
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	88db      	ldrh	r3, [r3, #6]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d110      	bne.n	8009b26 <USBD_StdItfReq+0x7a>
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10d      	bne.n	8009b26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fd73 	bl	800a5f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b10:	e009      	b.n	8009b26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fca3 	bl	800a460 <USBD_CtlError>
          break;
 8009b1a:	e004      	b.n	8009b26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fc9e 	bl	800a460 <USBD_CtlError>
          break;
 8009b24:	e000      	b.n	8009b28 <USBD_StdItfReq+0x7c>
          break;
 8009b26:	bf00      	nop
      }
      break;
 8009b28:	e004      	b.n	8009b34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fc97 	bl	800a460 <USBD_CtlError>
      break;
 8009b32:	bf00      	nop
  }

  return ret;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	889b      	ldrh	r3, [r3, #4]
 8009b50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b5a:	2b40      	cmp	r3, #64	; 0x40
 8009b5c:	d007      	beq.n	8009b6e <USBD_StdEPReq+0x30>
 8009b5e:	2b40      	cmp	r3, #64	; 0x40
 8009b60:	f200 8145 	bhi.w	8009dee <USBD_StdEPReq+0x2b0>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00c      	beq.n	8009b82 <USBD_StdEPReq+0x44>
 8009b68:	2b20      	cmp	r3, #32
 8009b6a:	f040 8140 	bne.w	8009dee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b80:	e13a      	b.n	8009df8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	785b      	ldrb	r3, [r3, #1]
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d007      	beq.n	8009b9a <USBD_StdEPReq+0x5c>
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	f300 8129 	bgt.w	8009de2 <USBD_StdEPReq+0x2a4>
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d07f      	beq.n	8009c94 <USBD_StdEPReq+0x156>
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d03c      	beq.n	8009c12 <USBD_StdEPReq+0xd4>
 8009b98:	e123      	b.n	8009de2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d002      	beq.n	8009bac <USBD_StdEPReq+0x6e>
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d016      	beq.n	8009bd8 <USBD_StdEPReq+0x9a>
 8009baa:	e02c      	b.n	8009c06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00d      	beq.n	8009bce <USBD_StdEPReq+0x90>
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b80      	cmp	r3, #128	; 0x80
 8009bb6:	d00a      	beq.n	8009bce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 f939 	bl	800ae34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bc2:	2180      	movs	r1, #128	; 0x80
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 f935 	bl	800ae34 <USBD_LL_StallEP>
 8009bca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bcc:	e020      	b.n	8009c10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc45 	bl	800a460 <USBD_CtlError>
              break;
 8009bd6:	e01b      	b.n	8009c10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	885b      	ldrh	r3, [r3, #2]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10e      	bne.n	8009bfe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <USBD_StdEPReq+0xc0>
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	2b80      	cmp	r3, #128	; 0x80
 8009bea:	d008      	beq.n	8009bfe <USBD_StdEPReq+0xc0>
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	88db      	ldrh	r3, [r3, #6]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d104      	bne.n	8009bfe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 f91b 	bl	800ae34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fcf9 	bl	800a5f6 <USBD_CtlSendStatus>

              break;
 8009c04:	e004      	b.n	8009c10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fc29 	bl	800a460 <USBD_CtlError>
              break;
 8009c0e:	bf00      	nop
          }
          break;
 8009c10:	e0ec      	b.n	8009dec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d002      	beq.n	8009c24 <USBD_StdEPReq+0xe6>
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d016      	beq.n	8009c50 <USBD_StdEPReq+0x112>
 8009c22:	e030      	b.n	8009c86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00d      	beq.n	8009c46 <USBD_StdEPReq+0x108>
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
 8009c2c:	2b80      	cmp	r3, #128	; 0x80
 8009c2e:	d00a      	beq.n	8009c46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 f8fd 	bl	800ae34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c3a:	2180      	movs	r1, #128	; 0x80
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f001 f8f9 	bl	800ae34 <USBD_LL_StallEP>
 8009c42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c44:	e025      	b.n	8009c92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fc09 	bl	800a460 <USBD_CtlError>
              break;
 8009c4e:	e020      	b.n	8009c92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	885b      	ldrh	r3, [r3, #2]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11b      	bne.n	8009c90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d004      	beq.n	8009c6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f001 f903 	bl	800ae72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fcc2 	bl	800a5f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009c84:	e004      	b.n	8009c90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fbe9 	bl	800a460 <USBD_CtlError>
              break;
 8009c8e:	e000      	b.n	8009c92 <USBD_StdEPReq+0x154>
              break;
 8009c90:	bf00      	nop
          }
          break;
 8009c92:	e0ab      	b.n	8009dec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d002      	beq.n	8009ca6 <USBD_StdEPReq+0x168>
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d032      	beq.n	8009d0a <USBD_StdEPReq+0x1cc>
 8009ca4:	e097      	b.n	8009dd6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d007      	beq.n	8009cbc <USBD_StdEPReq+0x17e>
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	2b80      	cmp	r3, #128	; 0x80
 8009cb0:	d004      	beq.n	8009cbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fbd3 	bl	800a460 <USBD_CtlError>
                break;
 8009cba:	e091      	b.n	8009de0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	da0b      	bge.n	8009cdc <USBD_StdEPReq+0x19e>
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	3310      	adds	r3, #16
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	3304      	adds	r3, #4
 8009cda:	e00b      	b.n	8009cf4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fc1d 	bl	800a542 <USBD_CtlSendData>
              break;
 8009d08:	e06a      	b.n	8009de0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da11      	bge.n	8009d36 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	f003 020f 	and.w	r2, r3, #15
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	3324      	adds	r3, #36	; 0x24
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d117      	bne.n	8009d5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fb96 	bl	800a460 <USBD_CtlError>
                  break;
 8009d34:	e054      	b.n	8009de0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	f003 020f 	and.w	r2, r3, #15
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	440b      	add	r3, r1
 8009d48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d104      	bne.n	8009d5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fb83 	bl	800a460 <USBD_CtlError>
                  break;
 8009d5a:	e041      	b.n	8009de0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	da0b      	bge.n	8009d7c <USBD_StdEPReq+0x23e>
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	3310      	adds	r3, #16
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	4413      	add	r3, r2
 8009d78:	3304      	adds	r3, #4
 8009d7a:	e00b      	b.n	8009d94 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
 8009d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	4413      	add	r3, r2
 8009d92:	3304      	adds	r3, #4
 8009d94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <USBD_StdEPReq+0x264>
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
 8009d9e:	2b80      	cmp	r3, #128	; 0x80
 8009da0:	d103      	bne.n	8009daa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	2200      	movs	r2, #0
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	e00e      	b.n	8009dc8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f001 f87e 	bl	800aeb0 <USBD_LL_IsStallEP>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	e002      	b.n	8009dc8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fbb7 	bl	800a542 <USBD_CtlSendData>
              break;
 8009dd4:	e004      	b.n	8009de0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fb41 	bl	800a460 <USBD_CtlError>
              break;
 8009dde:	bf00      	nop
          }
          break;
 8009de0:	e004      	b.n	8009dec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fb3b 	bl	800a460 <USBD_CtlError>
          break;
 8009dea:	bf00      	nop
      }
      break;
 8009dec:	e004      	b.n	8009df8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fb35 	bl	800a460 <USBD_CtlError>
      break;
 8009df6:	bf00      	nop
  }

  return ret;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	0a1b      	lsrs	r3, r3, #8
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	3b01      	subs	r3, #1
 8009e24:	2b06      	cmp	r3, #6
 8009e26:	f200 8128 	bhi.w	800a07a <USBD_GetDescriptor+0x276>
 8009e2a:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <USBD_GetDescriptor+0x2c>)
 8009e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e30:	08009e4d 	.word	0x08009e4d
 8009e34:	08009e65 	.word	0x08009e65
 8009e38:	08009ea5 	.word	0x08009ea5
 8009e3c:	0800a07b 	.word	0x0800a07b
 8009e40:	0800a07b 	.word	0x0800a07b
 8009e44:	0800a01b 	.word	0x0800a01b
 8009e48:	0800a047 	.word	0x0800a047
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	7c12      	ldrb	r2, [r2, #16]
 8009e58:	f107 0108 	add.w	r1, r7, #8
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	4798      	blx	r3
 8009e60:	60f8      	str	r0, [r7, #12]
      break;
 8009e62:	e112      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	7c1b      	ldrb	r3, [r3, #16]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10d      	bne.n	8009e88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e74:	f107 0208 	add.w	r2, r7, #8
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4798      	blx	r3
 8009e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3301      	adds	r3, #1
 8009e82:	2202      	movs	r2, #2
 8009e84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e86:	e100      	b.n	800a08a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	f107 0208 	add.w	r2, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	701a      	strb	r2, [r3, #0]
      break;
 8009ea2:	e0f2      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	885b      	ldrh	r3, [r3, #2]
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	f200 80ac 	bhi.w	800a008 <USBD_GetDescriptor+0x204>
 8009eb0:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <USBD_GetDescriptor+0xb4>)
 8009eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb6:	bf00      	nop
 8009eb8:	08009ed1 	.word	0x08009ed1
 8009ebc:	08009f05 	.word	0x08009f05
 8009ec0:	08009f39 	.word	0x08009f39
 8009ec4:	08009f6d 	.word	0x08009f6d
 8009ec8:	08009fa1 	.word	0x08009fa1
 8009ecc:	08009fd5 	.word	0x08009fd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	7c12      	ldrb	r2, [r2, #16]
 8009ee8:	f107 0108 	add.w	r1, r7, #8
 8009eec:	4610      	mov	r0, r2
 8009eee:	4798      	blx	r3
 8009ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef2:	e091      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fab2 	bl	800a460 <USBD_CtlError>
            err++;
 8009efc:	7afb      	ldrb	r3, [r7, #11]
 8009efe:	3301      	adds	r3, #1
 8009f00:	72fb      	strb	r3, [r7, #11]
          break;
 8009f02:	e089      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	7c12      	ldrb	r2, [r2, #16]
 8009f1c:	f107 0108 	add.w	r1, r7, #8
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f26:	e077      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fa98 	bl	800a460 <USBD_CtlError>
            err++;
 8009f30:	7afb      	ldrb	r3, [r7, #11]
 8009f32:	3301      	adds	r3, #1
 8009f34:	72fb      	strb	r3, [r7, #11]
          break;
 8009f36:	e06f      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	7c12      	ldrb	r2, [r2, #16]
 8009f50:	f107 0108 	add.w	r1, r7, #8
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
 8009f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f5a:	e05d      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fa7e 	bl	800a460 <USBD_CtlError>
            err++;
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	3301      	adds	r3, #1
 8009f68:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6a:	e055      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	7c12      	ldrb	r2, [r2, #16]
 8009f84:	f107 0108 	add.w	r1, r7, #8
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f8e:	e043      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa64 	bl	800a460 <USBD_CtlError>
            err++;
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f9e:	e03b      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	7c12      	ldrb	r2, [r2, #16]
 8009fb8:	f107 0108 	add.w	r1, r7, #8
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4798      	blx	r3
 8009fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fc2:	e029      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fa4a 	bl	800a460 <USBD_CtlError>
            err++;
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fd2:	e021      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	7c12      	ldrb	r2, [r2, #16]
 8009fec:	f107 0108 	add.w	r1, r7, #8
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	4798      	blx	r3
 8009ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ff6:	e00f      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fa30 	bl	800a460 <USBD_CtlError>
            err++;
 800a000:	7afb      	ldrb	r3, [r7, #11]
 800a002:	3301      	adds	r3, #1
 800a004:	72fb      	strb	r3, [r7, #11]
          break;
 800a006:	e007      	b.n	800a018 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fa28 	bl	800a460 <USBD_CtlError>
          err++;
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	3301      	adds	r3, #1
 800a014:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a016:	bf00      	nop
      }
      break;
 800a018:	e037      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	7c1b      	ldrb	r3, [r3, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d109      	bne.n	800a036 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02a:	f107 0208 	add.w	r2, r7, #8
 800a02e:	4610      	mov	r0, r2
 800a030:	4798      	blx	r3
 800a032:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a034:	e029      	b.n	800a08a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fa11 	bl	800a460 <USBD_CtlError>
        err++;
 800a03e:	7afb      	ldrb	r3, [r7, #11]
 800a040:	3301      	adds	r3, #1
 800a042:	72fb      	strb	r3, [r7, #11]
      break;
 800a044:	e021      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	7c1b      	ldrb	r3, [r3, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10d      	bne.n	800a06a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a056:	f107 0208 	add.w	r2, r7, #8
 800a05a:	4610      	mov	r0, r2
 800a05c:	4798      	blx	r3
 800a05e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3301      	adds	r3, #1
 800a064:	2207      	movs	r2, #7
 800a066:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a068:	e00f      	b.n	800a08a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f9f7 	bl	800a460 <USBD_CtlError>
        err++;
 800a072:	7afb      	ldrb	r3, [r7, #11]
 800a074:	3301      	adds	r3, #1
 800a076:	72fb      	strb	r3, [r7, #11]
      break;
 800a078:	e007      	b.n	800a08a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f9ef 	bl	800a460 <USBD_CtlError>
      err++;
 800a082:	7afb      	ldrb	r3, [r7, #11]
 800a084:	3301      	adds	r3, #1
 800a086:	72fb      	strb	r3, [r7, #11]
      break;
 800a088:	bf00      	nop
  }

  if (err != 0U)
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d11e      	bne.n	800a0ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	88db      	ldrh	r3, [r3, #6]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d016      	beq.n	800a0c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a098:	893b      	ldrh	r3, [r7, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00e      	beq.n	800a0bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	88da      	ldrh	r2, [r3, #6]
 800a0a2:	893b      	ldrh	r3, [r7, #8]
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	bf28      	it	cs
 800a0a8:	4613      	movcs	r3, r2
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0ae:	893b      	ldrh	r3, [r7, #8]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	68f9      	ldr	r1, [r7, #12]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fa44 	bl	800a542 <USBD_CtlSendData>
 800a0ba:	e009      	b.n	800a0d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f9ce 	bl	800a460 <USBD_CtlError>
 800a0c4:	e004      	b.n	800a0d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fa95 	bl	800a5f6 <USBD_CtlSendStatus>
 800a0cc:	e000      	b.n	800a0d0 <USBD_GetDescriptor+0x2cc>
    return;
 800a0ce:	bf00      	nop
  }
}
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop

0800a0d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	889b      	ldrh	r3, [r3, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d131      	bne.n	800a14e <USBD_SetAddress+0x76>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	88db      	ldrh	r3, [r3, #6]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d12d      	bne.n	800a14e <USBD_SetAddress+0x76>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	885b      	ldrh	r3, [r3, #2]
 800a0f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a0f8:	d829      	bhi.n	800a14e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a104:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d104      	bne.n	800a11c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f9a3 	bl	800a460 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11a:	e01d      	b.n	800a158 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	7bfa      	ldrb	r2, [r7, #15]
 800a120:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a124:	7bfb      	ldrb	r3, [r7, #15]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 feed 	bl	800af08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa61 	bl	800a5f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d004      	beq.n	800a144 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2202      	movs	r2, #2
 800a13e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a142:	e009      	b.n	800a158 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a14c:	e004      	b.n	800a158 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f985 	bl	800a460 <USBD_CtlError>
  }
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	885b      	ldrh	r3, [r3, #2]
 800a172:	b2da      	uxtb	r2, r3
 800a174:	4b4c      	ldr	r3, [pc, #304]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a176:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a178:	4b4b      	ldr	r3, [pc, #300]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d905      	bls.n	800a18c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f96c 	bl	800a460 <USBD_CtlError>
    return USBD_FAIL;
 800a188:	2303      	movs	r3, #3
 800a18a:	e088      	b.n	800a29e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b02      	cmp	r3, #2
 800a196:	d002      	beq.n	800a19e <USBD_SetConfig+0x3e>
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d025      	beq.n	800a1e8 <USBD_SetConfig+0x88>
 800a19c:	e071      	b.n	800a282 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a19e:	4b42      	ldr	r3, [pc, #264]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d01c      	beq.n	800a1e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a1a6:	4b40      	ldr	r3, [pc, #256]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1b0:	4b3d      	ldr	r3, [pc, #244]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff f948 	bl	800944c <USBD_SetClassConfig>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d004      	beq.n	800a1d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f949 	bl	800a460 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1ce:	e065      	b.n	800a29c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fa10 	bl	800a5f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2203      	movs	r2, #3
 800a1da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1de:	e05d      	b.n	800a29c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fa08 	bl	800a5f6 <USBD_CtlSendStatus>
      break;
 800a1e6:	e059      	b.n	800a29c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1e8:	4b2f      	ldr	r3, [pc, #188]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d112      	bne.n	800a216 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a1f8:	4b2b      	ldr	r3, [pc, #172]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a202:	4b29      	ldr	r3, [pc, #164]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff f93b 	bl	8009484 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f9f1 	bl	800a5f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a214:	e042      	b.n	800a29c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a216:	4b24      	ldr	r3, [pc, #144]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	429a      	cmp	r2, r3
 800a222:	d02a      	beq.n	800a27a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7ff f929 	bl	8009484 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a232:	4b1d      	ldr	r3, [pc, #116]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a23c:	4b1a      	ldr	r3, [pc, #104]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff f902 	bl	800944c <USBD_SetClassConfig>
 800a248:	4603      	mov	r3, r0
 800a24a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00f      	beq.n	800a272 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f903 	bl	800a460 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff f90e 	bl	8009484 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a270:	e014      	b.n	800a29c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f9bf 	bl	800a5f6 <USBD_CtlSendStatus>
      break;
 800a278:	e010      	b.n	800a29c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f9bb 	bl	800a5f6 <USBD_CtlSendStatus>
      break;
 800a280:	e00c      	b.n	800a29c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f8eb 	bl	800a460 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a28a:	4b07      	ldr	r3, [pc, #28]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff f8f7 	bl	8009484 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a296:	2303      	movs	r3, #3
 800a298:	73fb      	strb	r3, [r7, #15]
      break;
 800a29a:	bf00      	nop
  }

  return ret;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200004b1 	.word	0x200004b1

0800a2ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	88db      	ldrh	r3, [r3, #6]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d004      	beq.n	800a2c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f8cd 	bl	800a460 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2c6:	e023      	b.n	800a310 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	dc02      	bgt.n	800a2da <USBD_GetConfig+0x2e>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	dc03      	bgt.n	800a2e0 <USBD_GetConfig+0x34>
 800a2d8:	e015      	b.n	800a306 <USBD_GetConfig+0x5a>
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d00b      	beq.n	800a2f6 <USBD_GetConfig+0x4a>
 800a2de:	e012      	b.n	800a306 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f927 	bl	800a542 <USBD_CtlSendData>
        break;
 800a2f4:	e00c      	b.n	800a310 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f91f 	bl	800a542 <USBD_CtlSendData>
        break;
 800a304:	e004      	b.n	800a310 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f8a9 	bl	800a460 <USBD_CtlError>
        break;
 800a30e:	bf00      	nop
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	3b01      	subs	r3, #1
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d81e      	bhi.n	800a36e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	88db      	ldrh	r3, [r3, #6]
 800a334:	2b02      	cmp	r3, #2
 800a336:	d004      	beq.n	800a342 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f890 	bl	800a460 <USBD_CtlError>
        break;
 800a340:	e01a      	b.n	800a378 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d005      	beq.n	800a35e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f043 0202 	orr.w	r2, r3, #2
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	330c      	adds	r3, #12
 800a362:	2202      	movs	r2, #2
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f8eb 	bl	800a542 <USBD_CtlSendData>
      break;
 800a36c:	e004      	b.n	800a378 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f875 	bl	800a460 <USBD_CtlError>
      break;
 800a376:	bf00      	nop
  }
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	885b      	ldrh	r3, [r3, #2]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d106      	bne.n	800a3a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f92b 	bl	800a5f6 <USBD_CtlSendStatus>
  }
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d80b      	bhi.n	800a3d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	885b      	ldrh	r3, [r3, #2]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d10c      	bne.n	800a3e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f910 	bl	800a5f6 <USBD_CtlSendStatus>
      }
      break;
 800a3d6:	e004      	b.n	800a3e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f840 	bl	800a460 <USBD_CtlError>
      break;
 800a3e0:	e000      	b.n	800a3e4 <USBD_ClrFeature+0x3c>
      break;
 800a3e2:	bf00      	nop
  }
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	781a      	ldrb	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3301      	adds	r3, #1
 800a406:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	781a      	ldrb	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3301      	adds	r3, #1
 800a414:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff fabb 	bl	8009992 <SWAPBYTE>
 800a41c:	4603      	mov	r3, r0
 800a41e:	461a      	mov	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	3301      	adds	r3, #1
 800a428:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3301      	adds	r3, #1
 800a42e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f7ff faae 	bl	8009992 <SWAPBYTE>
 800a436:	4603      	mov	r3, r0
 800a438:	461a      	mov	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3301      	adds	r3, #1
 800a442:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3301      	adds	r3, #1
 800a448:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7ff faa1 	bl	8009992 <SWAPBYTE>
 800a450:	4603      	mov	r3, r0
 800a452:	461a      	mov	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	80da      	strh	r2, [r3, #6]
}
 800a458:	bf00      	nop
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a46a:	2180      	movs	r1, #128	; 0x80
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fce1 	bl	800ae34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a472:	2100      	movs	r1, #0
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fcdd 	bl	800ae34 <USBD_LL_StallEP>
}
 800a47a:	bf00      	nop
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b086      	sub	sp, #24
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	60b9      	str	r1, [r7, #8]
 800a48c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a48e:	2300      	movs	r3, #0
 800a490:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d036      	beq.n	800a506 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a49c:	6938      	ldr	r0, [r7, #16]
 800a49e:	f000 f836 	bl	800a50e <USBD_GetLen>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a4b0:	7dfb      	ldrb	r3, [r7, #23]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	7812      	ldrb	r2, [r2, #0]
 800a4ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4bc:	7dfb      	ldrb	r3, [r7, #23]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	2203      	movs	r2, #3
 800a4ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a4d2:	e013      	b.n	800a4fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4413      	add	r3, r2
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	7812      	ldrb	r2, [r2, #0]
 800a4de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	613b      	str	r3, [r7, #16]
    idx++;
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a4ec:	7dfb      	ldrb	r3, [r7, #23]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800a4f6:	7dfb      	ldrb	r3, [r7, #23]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e7      	bne.n	800a4d4 <USBD_GetString+0x52>
 800a504:	e000      	b.n	800a508 <USBD_GetString+0x86>
    return;
 800a506:	bf00      	nop
  }
}
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a51e:	e005      	b.n	800a52c <USBD_GetLen+0x1e>
  {
    len++;
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	3301      	adds	r3, #1
 800a524:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	3301      	adds	r3, #1
 800a52a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1f5      	bne.n	800a520 <USBD_GetLen+0x12>
  }

  return len;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	60f8      	str	r0, [r7, #12]
 800a54a:	60b9      	str	r1, [r7, #8]
 800a54c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2202      	movs	r2, #2
 800a552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	2100      	movs	r1, #0
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 fcec 	bl	800af46 <USBD_LL_Transmit>

  return USBD_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	2100      	movs	r1, #0
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 fcdb 	bl	800af46 <USBD_LL_Transmit>

  return USBD_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	60b9      	str	r1, [r7, #8]
 800a5a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 fcdf 	bl	800af88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 fcce 	bl	800af88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2204      	movs	r2, #4
 800a602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a606:	2300      	movs	r3, #0
 800a608:	2200      	movs	r2, #0
 800a60a:	2100      	movs	r1, #0
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fc9a 	bl	800af46 <USBD_LL_Transmit>

  return USBD_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2205      	movs	r2, #5
 800a628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a62c:	2300      	movs	r3, #0
 800a62e:	2200      	movs	r2, #0
 800a630:	2100      	movs	r1, #0
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fca8 	bl	800af88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a648:	2200      	movs	r2, #0
 800a64a:	4912      	ldr	r1, [pc, #72]	; (800a694 <MX_USB_DEVICE_Init+0x50>)
 800a64c:	4812      	ldr	r0, [pc, #72]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a64e:	f7fe fe8f 	bl	8009370 <USBD_Init>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a658:	f7f6 ff94 	bl	8001584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a65c:	490f      	ldr	r1, [pc, #60]	; (800a69c <MX_USB_DEVICE_Init+0x58>)
 800a65e:	480e      	ldr	r0, [pc, #56]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a660:	f7fe feb6 	bl	80093d0 <USBD_RegisterClass>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a66a:	f7f6 ff8b 	bl	8001584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a66e:	490c      	ldr	r1, [pc, #48]	; (800a6a0 <MX_USB_DEVICE_Init+0x5c>)
 800a670:	4809      	ldr	r0, [pc, #36]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a672:	f7fe fdd7 	bl	8009224 <USBD_CDC_RegisterInterface>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a67c:	f7f6 ff82 	bl	8001584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a680:	4805      	ldr	r0, [pc, #20]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a682:	f7fe fecc 	bl	800941e <USBD_Start>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a68c:	f7f6 ff7a 	bl	8001584 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a690:	bf00      	nop
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20000144 	.word	0x20000144
 800a698:	20000974 	.word	0x20000974
 800a69c:	2000002c 	.word	0x2000002c
 800a6a0:	20000130 	.word	0x20000130

0800a6a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	4905      	ldr	r1, [pc, #20]	; (800a6c0 <CDC_Init_FS+0x1c>)
 800a6ac:	4805      	ldr	r0, [pc, #20]	; (800a6c4 <CDC_Init_FS+0x20>)
 800a6ae:	f7fe fdce 	bl	800924e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a6b2:	4905      	ldr	r1, [pc, #20]	; (800a6c8 <CDC_Init_FS+0x24>)
 800a6b4:	4803      	ldr	r0, [pc, #12]	; (800a6c4 <CDC_Init_FS+0x20>)
 800a6b6:	f7fe fde8 	bl	800928a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a6ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20001444 	.word	0x20001444
 800a6c4:	20000974 	.word	0x20000974
 800a6c8:	20000c44 	.word	0x20000c44

0800a6cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a6d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	6039      	str	r1, [r7, #0]
 800a6e6:	71fb      	strb	r3, [r7, #7]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	2b23      	cmp	r3, #35	; 0x23
 800a6f0:	d84a      	bhi.n	800a788 <CDC_Control_FS+0xac>
 800a6f2:	a201      	add	r2, pc, #4	; (adr r2, 800a6f8 <CDC_Control_FS+0x1c>)
 800a6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f8:	0800a789 	.word	0x0800a789
 800a6fc:	0800a789 	.word	0x0800a789
 800a700:	0800a789 	.word	0x0800a789
 800a704:	0800a789 	.word	0x0800a789
 800a708:	0800a789 	.word	0x0800a789
 800a70c:	0800a789 	.word	0x0800a789
 800a710:	0800a789 	.word	0x0800a789
 800a714:	0800a789 	.word	0x0800a789
 800a718:	0800a789 	.word	0x0800a789
 800a71c:	0800a789 	.word	0x0800a789
 800a720:	0800a789 	.word	0x0800a789
 800a724:	0800a789 	.word	0x0800a789
 800a728:	0800a789 	.word	0x0800a789
 800a72c:	0800a789 	.word	0x0800a789
 800a730:	0800a789 	.word	0x0800a789
 800a734:	0800a789 	.word	0x0800a789
 800a738:	0800a789 	.word	0x0800a789
 800a73c:	0800a789 	.word	0x0800a789
 800a740:	0800a789 	.word	0x0800a789
 800a744:	0800a789 	.word	0x0800a789
 800a748:	0800a789 	.word	0x0800a789
 800a74c:	0800a789 	.word	0x0800a789
 800a750:	0800a789 	.word	0x0800a789
 800a754:	0800a789 	.word	0x0800a789
 800a758:	0800a789 	.word	0x0800a789
 800a75c:	0800a789 	.word	0x0800a789
 800a760:	0800a789 	.word	0x0800a789
 800a764:	0800a789 	.word	0x0800a789
 800a768:	0800a789 	.word	0x0800a789
 800a76c:	0800a789 	.word	0x0800a789
 800a770:	0800a789 	.word	0x0800a789
 800a774:	0800a789 	.word	0x0800a789
 800a778:	0800a789 	.word	0x0800a789
 800a77c:	0800a789 	.word	0x0800a789
 800a780:	0800a789 	.word	0x0800a789
 800a784:	0800a789 	.word	0x0800a789
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a788:	bf00      	nop
  }

  return (USBD_OK);
 800a78a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	4805      	ldr	r0, [pc, #20]	; (800a7bc <CDC_Receive_FS+0x24>)
 800a7a6:	f7fe fd70 	bl	800928a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a7aa:	4804      	ldr	r0, [pc, #16]	; (800a7bc <CDC_Receive_FS+0x24>)
 800a7ac:	f7fe fdb6 	bl	800931c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a7b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000974 	.word	0x20000974

0800a7c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7d0:	4b0d      	ldr	r3, [pc, #52]	; (800a808 <CDC_Transmit_FS+0x48>)
 800a7d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e00b      	b.n	800a7fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a7e6:	887b      	ldrh	r3, [r7, #2]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4806      	ldr	r0, [pc, #24]	; (800a808 <CDC_Transmit_FS+0x48>)
 800a7ee:	f7fe fd2e 	bl	800924e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7f2:	4805      	ldr	r0, [pc, #20]	; (800a808 <CDC_Transmit_FS+0x48>)
 800a7f4:	f7fe fd62 	bl	80092bc <USBD_CDC_TransmitPacket>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20000974 	.word	0x20000974

0800a80c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	4613      	mov	r3, r2
 800a818:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a81e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a822:	4618      	mov	r0, r3
 800a824:	371c      	adds	r7, #28
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
	...

0800a830 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	6039      	str	r1, [r7, #0]
 800a83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2212      	movs	r2, #18
 800a840:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a842:	4b03      	ldr	r3, [pc, #12]	; (800a850 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	20000160 	.word	0x20000160

0800a854 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	4603      	mov	r3, r0
 800a85c:	6039      	str	r1, [r7, #0]
 800a85e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2204      	movs	r2, #4
 800a864:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a866:	4b03      	ldr	r3, [pc, #12]	; (800a874 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	20000174 	.word	0x20000174

0800a878 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	6039      	str	r1, [r7, #0]
 800a882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d105      	bne.n	800a896 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	4907      	ldr	r1, [pc, #28]	; (800a8ac <USBD_FS_ProductStrDescriptor+0x34>)
 800a88e:	4808      	ldr	r0, [pc, #32]	; (800a8b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a890:	f7ff fdf7 	bl	800a482 <USBD_GetString>
 800a894:	e004      	b.n	800a8a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	4904      	ldr	r1, [pc, #16]	; (800a8ac <USBD_FS_ProductStrDescriptor+0x34>)
 800a89a:	4805      	ldr	r0, [pc, #20]	; (800a8b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a89c:	f7ff fdf1 	bl	800a482 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a0:	4b02      	ldr	r3, [pc, #8]	; (800a8ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	20001c44 	.word	0x20001c44
 800a8b0:	0800edc8 	.word	0x0800edc8

0800a8b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	6039      	str	r1, [r7, #0]
 800a8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	4904      	ldr	r1, [pc, #16]	; (800a8d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a8c4:	4804      	ldr	r0, [pc, #16]	; (800a8d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a8c6:	f7ff fddc 	bl	800a482 <USBD_GetString>
  return USBD_StrDesc;
 800a8ca:	4b02      	ldr	r3, [pc, #8]	; (800a8d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	20001c44 	.word	0x20001c44
 800a8d8:	0800edd8 	.word	0x0800edd8

0800a8dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	6039      	str	r1, [r7, #0]
 800a8e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	221a      	movs	r2, #26
 800a8ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a8ee:	f000 f843 	bl	800a978 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a8f2:	4b02      	ldr	r3, [pc, #8]	; (800a8fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20000178 	.word	0x20000178

0800a900 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	4603      	mov	r3, r0
 800a908:	6039      	str	r1, [r7, #0]
 800a90a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a90c:	79fb      	ldrb	r3, [r7, #7]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d105      	bne.n	800a91e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	4907      	ldr	r1, [pc, #28]	; (800a934 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a916:	4808      	ldr	r0, [pc, #32]	; (800a938 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a918:	f7ff fdb3 	bl	800a482 <USBD_GetString>
 800a91c:	e004      	b.n	800a928 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	4904      	ldr	r1, [pc, #16]	; (800a934 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a922:	4805      	ldr	r0, [pc, #20]	; (800a938 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a924:	f7ff fdad 	bl	800a482 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a928:	4b02      	ldr	r3, [pc, #8]	; (800a934 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20001c44 	.word	0x20001c44
 800a938:	0800ede4 	.word	0x0800ede4

0800a93c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	6039      	str	r1, [r7, #0]
 800a946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d105      	bne.n	800a95a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	4907      	ldr	r1, [pc, #28]	; (800a970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a952:	4808      	ldr	r0, [pc, #32]	; (800a974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a954:	f7ff fd95 	bl	800a482 <USBD_GetString>
 800a958:	e004      	b.n	800a964 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	4904      	ldr	r1, [pc, #16]	; (800a970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a95e:	4805      	ldr	r0, [pc, #20]	; (800a974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a960:	f7ff fd8f 	bl	800a482 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a964:	4b02      	ldr	r3, [pc, #8]	; (800a970 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	20001c44 	.word	0x20001c44
 800a974:	0800edf0 	.word	0x0800edf0

0800a978 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a97e:	4b0f      	ldr	r3, [pc, #60]	; (800a9bc <Get_SerialNum+0x44>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a984:	4b0e      	ldr	r3, [pc, #56]	; (800a9c0 <Get_SerialNum+0x48>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a98a:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <Get_SerialNum+0x4c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4413      	add	r3, r2
 800a996:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d009      	beq.n	800a9b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a99e:	2208      	movs	r2, #8
 800a9a0:	4909      	ldr	r1, [pc, #36]	; (800a9c8 <Get_SerialNum+0x50>)
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 f814 	bl	800a9d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a9a8:	2204      	movs	r2, #4
 800a9aa:	4908      	ldr	r1, [pc, #32]	; (800a9cc <Get_SerialNum+0x54>)
 800a9ac:	68b8      	ldr	r0, [r7, #8]
 800a9ae:	f000 f80f 	bl	800a9d0 <IntToUnicode>
  }
}
 800a9b2:	bf00      	nop
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	1fff7a10 	.word	0x1fff7a10
 800a9c0:	1fff7a14 	.word	0x1fff7a14
 800a9c4:	1fff7a18 	.word	0x1fff7a18
 800a9c8:	2000017a 	.word	0x2000017a
 800a9cc:	2000018a 	.word	0x2000018a

0800a9d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	75fb      	strb	r3, [r7, #23]
 800a9e6:	e027      	b.n	800aa38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	0f1b      	lsrs	r3, r3, #28
 800a9ec:	2b09      	cmp	r3, #9
 800a9ee:	d80b      	bhi.n	800aa08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	0f1b      	lsrs	r3, r3, #28
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	7dfb      	ldrb	r3, [r7, #23]
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	440b      	add	r3, r1
 800aa00:	3230      	adds	r2, #48	; 0x30
 800aa02:	b2d2      	uxtb	r2, r2
 800aa04:	701a      	strb	r2, [r3, #0]
 800aa06:	e00a      	b.n	800aa1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	0f1b      	lsrs	r3, r3, #28
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	4619      	mov	r1, r3
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	440b      	add	r3, r1
 800aa18:	3237      	adds	r2, #55	; 0x37
 800aa1a:	b2d2      	uxtb	r2, r2
 800aa1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	011b      	lsls	r3, r3, #4
 800aa22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	3301      	adds	r3, #1
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	2200      	movs	r2, #0
 800aa30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
 800aa34:	3301      	adds	r3, #1
 800aa36:	75fb      	strb	r3, [r7, #23]
 800aa38:	7dfa      	ldrb	r2, [r7, #23]
 800aa3a:	79fb      	ldrb	r3, [r7, #7]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d3d3      	bcc.n	800a9e8 <IntToUnicode+0x18>
  }
}
 800aa40:	bf00      	nop
 800aa42:	bf00      	nop
 800aa44:	371c      	adds	r7, #28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
	...

0800aa50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08a      	sub	sp, #40	; 0x28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa58:	f107 0314 	add.w	r3, r7, #20
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	605a      	str	r2, [r3, #4]
 800aa62:	609a      	str	r2, [r3, #8]
 800aa64:	60da      	str	r2, [r3, #12]
 800aa66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa70:	d13a      	bne.n	800aae8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa72:	2300      	movs	r3, #0
 800aa74:	613b      	str	r3, [r7, #16]
 800aa76:	4b1e      	ldr	r3, [pc, #120]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7a:	4a1d      	ldr	r2, [pc, #116]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aa7c:	f043 0301 	orr.w	r3, r3, #1
 800aa80:	6313      	str	r3, [r2, #48]	; 0x30
 800aa82:	4b1b      	ldr	r3, [pc, #108]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	613b      	str	r3, [r7, #16]
 800aa8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aa92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa94:	2302      	movs	r3, #2
 800aa96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aaa0:	230a      	movs	r3, #10
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaa4:	f107 0314 	add.w	r3, r7, #20
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4812      	ldr	r0, [pc, #72]	; (800aaf4 <HAL_PCD_MspInit+0xa4>)
 800aaac:	f7f8 fa0a 	bl	8002ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aab0:	4b0f      	ldr	r3, [pc, #60]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab4:	4a0e      	ldr	r2, [pc, #56]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaba:	6353      	str	r3, [r2, #52]	; 0x34
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	4b0b      	ldr	r3, [pc, #44]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac4:	4a0a      	ldr	r2, [pc, #40]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aaca:	6453      	str	r3, [r2, #68]	; 0x44
 800aacc:	4b08      	ldr	r3, [pc, #32]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aad8:	2200      	movs	r2, #0
 800aada:	2100      	movs	r1, #0
 800aadc:	2043      	movs	r0, #67	; 0x43
 800aade:	f7f8 f928 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aae2:	2043      	movs	r0, #67	; 0x43
 800aae4:	f7f8 f941 	bl	8002d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aae8:	bf00      	nop
 800aaea:	3728      	adds	r7, #40	; 0x28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	40023800 	.word	0x40023800
 800aaf4:	40020000 	.word	0x40020000

0800aaf8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f7fe fcd0 	bl	80094b4 <USBD_LL_SetupStage>
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ab2e:	78fa      	ldrb	r2, [r7, #3]
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	4613      	mov	r3, r2
 800ab34:	00db      	lsls	r3, r3, #3
 800ab36:	1a9b      	subs	r3, r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	440b      	add	r3, r1
 800ab3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	78fb      	ldrb	r3, [r7, #3]
 800ab44:	4619      	mov	r1, r3
 800ab46:	f7fe fd0a 	bl	800955e <USBD_LL_DataOutStage>
}
 800ab4a:	bf00      	nop
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ab64:	78fa      	ldrb	r2, [r7, #3]
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	1a9b      	subs	r3, r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	440b      	add	r3, r1
 800ab72:	3348      	adds	r3, #72	; 0x48
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	78fb      	ldrb	r3, [r7, #3]
 800ab78:	4619      	mov	r1, r3
 800ab7a:	f7fe fd53 	bl	8009624 <USBD_LL_DataInStage>
}
 800ab7e:	bf00      	nop
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b082      	sub	sp, #8
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fe fe67 	bl	8009868 <USBD_LL_SOF>
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abaa:	2301      	movs	r3, #1
 800abac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d102      	bne.n	800abbc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]
 800abba:	e008      	b.n	800abce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d102      	bne.n	800abca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800abc4:	2301      	movs	r3, #1
 800abc6:	73fb      	strb	r3, [r7, #15]
 800abc8:	e001      	b.n	800abce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800abca:	f7f6 fcdb 	bl	8001584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abd4:	7bfa      	ldrb	r2, [r7, #15]
 800abd6:	4611      	mov	r1, r2
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fe fe07 	bl	80097ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fe fdb3 	bl	8009750 <USBD_LL_Reset>
}
 800abea:	bf00      	nop
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe fe02 	bl	800980c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	6812      	ldr	r2, [r2, #0]
 800ac16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac1a:	f043 0301 	orr.w	r3, r3, #1
 800ac1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d005      	beq.n	800ac34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac28:	4b04      	ldr	r3, [pc, #16]	; (800ac3c <HAL_PCD_SuspendCallback+0x48>)
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	4a03      	ldr	r2, [pc, #12]	; (800ac3c <HAL_PCD_SuspendCallback+0x48>)
 800ac2e:	f043 0306 	orr.w	r3, r3, #6
 800ac32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	e000ed00 	.word	0xe000ed00

0800ac40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe fdf2 	bl	8009838 <USBD_LL_Resume>
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	460b      	mov	r3, r1
 800ac66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac6e:	78fa      	ldrb	r2, [r7, #3]
 800ac70:	4611      	mov	r1, r2
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fe fe40 	bl	80098f8 <USBD_LL_IsoOUTIncomplete>
}
 800ac78:	bf00      	nop
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac92:	78fa      	ldrb	r2, [r7, #3]
 800ac94:	4611      	mov	r1, r2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fe fe08 	bl	80098ac <USBD_LL_IsoINIncomplete>
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fe46 	bl	8009944 <USBD_LL_DevConnected>
}
 800acb8:	bf00      	nop
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe fe43 	bl	800995a <USBD_LL_DevDisconnected>
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d13c      	bne.n	800ad66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800acec:	4a20      	ldr	r2, [pc, #128]	; (800ad70 <USBD_LL_Init+0x94>)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a1e      	ldr	r2, [pc, #120]	; (800ad70 <USBD_LL_Init+0x94>)
 800acf8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800acfc:	4b1c      	ldr	r3, [pc, #112]	; (800ad70 <USBD_LL_Init+0x94>)
 800acfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ad02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad04:	4b1a      	ldr	r3, [pc, #104]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad06:	2204      	movs	r2, #4
 800ad08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad0a:	4b19      	ldr	r3, [pc, #100]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad0c:	2202      	movs	r2, #2
 800ad0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad10:	4b17      	ldr	r3, [pc, #92]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad16:	4b16      	ldr	r3, [pc, #88]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad18:	2202      	movs	r2, #2
 800ad1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad1c:	4b14      	ldr	r3, [pc, #80]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ad28:	4b11      	ldr	r3, [pc, #68]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ad2e:	4b10      	ldr	r3, [pc, #64]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ad34:	4b0e      	ldr	r3, [pc, #56]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ad3a:	480d      	ldr	r0, [pc, #52]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad3c:	f7f8 ffdc 	bl	8003cf8 <HAL_PCD_Init>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ad46:	f7f6 fc1d 	bl	8001584 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ad4a:	2180      	movs	r1, #128	; 0x80
 800ad4c:	4808      	ldr	r0, [pc, #32]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad4e:	f7fa f93a 	bl	8004fc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ad52:	2240      	movs	r2, #64	; 0x40
 800ad54:	2100      	movs	r1, #0
 800ad56:	4806      	ldr	r0, [pc, #24]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad58:	f7fa f8ee 	bl	8004f38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ad5c:	2280      	movs	r2, #128	; 0x80
 800ad5e:	2101      	movs	r1, #1
 800ad60:	4803      	ldr	r0, [pc, #12]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad62:	f7fa f8e9 	bl	8004f38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20001e44 	.word	0x20001e44

0800ad74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7f9 f8d1 	bl	8003f32 <HAL_PCD_Start>
 800ad90:	4603      	mov	r3, r0
 800ad92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 f942 	bl	800b020 <USBD_Get_USB_Status>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b084      	sub	sp, #16
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	4608      	mov	r0, r1
 800adb4:	4611      	mov	r1, r2
 800adb6:	461a      	mov	r2, r3
 800adb8:	4603      	mov	r3, r0
 800adba:	70fb      	strb	r3, [r7, #3]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70bb      	strb	r3, [r7, #2]
 800adc0:	4613      	mov	r3, r2
 800adc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800add2:	78bb      	ldrb	r3, [r7, #2]
 800add4:	883a      	ldrh	r2, [r7, #0]
 800add6:	78f9      	ldrb	r1, [r7, #3]
 800add8:	f7f9 fcb5 	bl	8004746 <HAL_PCD_EP_Open>
 800addc:	4603      	mov	r3, r0
 800adde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 f91c 	bl	800b020 <USBD_Get_USB_Status>
 800ade8:	4603      	mov	r3, r0
 800adea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adec:	7bbb      	ldrb	r3, [r7, #14]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b084      	sub	sp, #16
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	460b      	mov	r3, r1
 800ae00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae10:	78fa      	ldrb	r2, [r7, #3]
 800ae12:	4611      	mov	r1, r2
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7f9 fcfe 	bl	8004816 <HAL_PCD_EP_Close>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 f8fd 	bl	800b020 <USBD_Get_USB_Status>
 800ae26:	4603      	mov	r3, r0
 800ae28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae4e:	78fa      	ldrb	r2, [r7, #3]
 800ae50:	4611      	mov	r1, r2
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7f9 fdd6 	bl	8004a04 <HAL_PCD_EP_SetStall>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 f8de 	bl	800b020 <USBD_Get_USB_Status>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae8c:	78fa      	ldrb	r2, [r7, #3]
 800ae8e:	4611      	mov	r1, r2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f9 fe1b 	bl	8004acc <HAL_PCD_EP_ClrStall>
 800ae96:	4603      	mov	r3, r0
 800ae98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 f8bf 	bl	800b020 <USBD_Get_USB_Status>
 800aea2:	4603      	mov	r3, r0
 800aea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aea6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aec2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	da0b      	bge.n	800aee4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aecc:	78fb      	ldrb	r3, [r7, #3]
 800aece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	4613      	mov	r3, r2
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	1a9b      	subs	r3, r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	440b      	add	r3, r1
 800aede:	333e      	adds	r3, #62	; 0x3e
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	e00b      	b.n	800aefc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	4613      	mov	r3, r2
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	1a9b      	subs	r3, r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	440b      	add	r3, r1
 800aef6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aefa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af22:	78fa      	ldrb	r2, [r7, #3]
 800af24:	4611      	mov	r1, r2
 800af26:	4618      	mov	r0, r3
 800af28:	f7f9 fbe8 	bl	80046fc <HAL_PCD_SetAddress>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	4618      	mov	r0, r3
 800af34:	f000 f874 	bl	800b020 <USBD_Get_USB_Status>
 800af38:	4603      	mov	r3, r0
 800af3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b086      	sub	sp, #24
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	603b      	str	r3, [r7, #0]
 800af52:	460b      	mov	r3, r1
 800af54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af64:	7af9      	ldrb	r1, [r7, #11]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	f7f9 fd01 	bl	8004970 <HAL_PCD_EP_Transmit>
 800af6e:	4603      	mov	r3, r0
 800af70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	4618      	mov	r0, r3
 800af76:	f000 f853 	bl	800b020 <USBD_Get_USB_Status>
 800af7a:	4603      	mov	r3, r0
 800af7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	607a      	str	r2, [r7, #4]
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	460b      	mov	r3, r1
 800af96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afa6:	7af9      	ldrb	r1, [r7, #11]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	f7f9 fc7d 	bl	80048aa <HAL_PCD_EP_Receive>
 800afb0:	4603      	mov	r3, r0
 800afb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb4:	7dfb      	ldrb	r3, [r7, #23]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 f832 	bl	800b020 <USBD_Get_USB_Status>
 800afbc:	4603      	mov	r3, r0
 800afbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afc0:	7dbb      	ldrb	r3, [r7, #22]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3718      	adds	r7, #24
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b082      	sub	sp, #8
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	460b      	mov	r3, r1
 800afd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afdc:	78fa      	ldrb	r2, [r7, #3]
 800afde:	4611      	mov	r1, r2
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7f9 fcad 	bl	8004940 <HAL_PCD_EP_GetRxCount>
 800afe6:	4603      	mov	r3, r0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aff8:	4b03      	ldr	r3, [pc, #12]	; (800b008 <USBD_static_malloc+0x18>)
}
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	200004b4 	.word	0x200004b4

0800b00c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]

}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	4603      	mov	r3, r0
 800b028:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b02e:	79fb      	ldrb	r3, [r7, #7]
 800b030:	2b03      	cmp	r3, #3
 800b032:	d817      	bhi.n	800b064 <USBD_Get_USB_Status+0x44>
 800b034:	a201      	add	r2, pc, #4	; (adr r2, 800b03c <USBD_Get_USB_Status+0x1c>)
 800b036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03a:	bf00      	nop
 800b03c:	0800b04d 	.word	0x0800b04d
 800b040:	0800b053 	.word	0x0800b053
 800b044:	0800b059 	.word	0x0800b059
 800b048:	0800b05f 	.word	0x0800b05f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	73fb      	strb	r3, [r7, #15]
    break;
 800b050:	e00b      	b.n	800b06a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b052:	2303      	movs	r3, #3
 800b054:	73fb      	strb	r3, [r7, #15]
    break;
 800b056:	e008      	b.n	800b06a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b058:	2301      	movs	r3, #1
 800b05a:	73fb      	strb	r3, [r7, #15]
    break;
 800b05c:	e005      	b.n	800b06a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b05e:	2303      	movs	r3, #3
 800b060:	73fb      	strb	r3, [r7, #15]
    break;
 800b062:	e002      	b.n	800b06a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b064:	2303      	movs	r3, #3
 800b066:	73fb      	strb	r3, [r7, #15]
    break;
 800b068:	bf00      	nop
  }
  return usb_status;
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <pow>:
 800b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	ec59 8b10 	vmov	r8, r9, d0
 800b080:	ec57 6b11 	vmov	r6, r7, d1
 800b084:	f000 f8a8 	bl	800b1d8 <__ieee754_pow>
 800b088:	4b4e      	ldr	r3, [pc, #312]	; (800b1c4 <pow+0x14c>)
 800b08a:	f993 3000 	ldrsb.w	r3, [r3]
 800b08e:	3301      	adds	r3, #1
 800b090:	ec55 4b10 	vmov	r4, r5, d0
 800b094:	d015      	beq.n	800b0c2 <pow+0x4a>
 800b096:	4632      	mov	r2, r6
 800b098:	463b      	mov	r3, r7
 800b09a:	4630      	mov	r0, r6
 800b09c:	4639      	mov	r1, r7
 800b09e:	f7f5 fd45 	bl	8000b2c <__aeabi_dcmpun>
 800b0a2:	b970      	cbnz	r0, 800b0c2 <pow+0x4a>
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	4640      	mov	r0, r8
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	f7f5 fd3e 	bl	8000b2c <__aeabi_dcmpun>
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	b148      	cbz	r0, 800b0ca <pow+0x52>
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	f7f5 fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d17d      	bne.n	800b1be <pow+0x146>
 800b0c2:	ec45 4b10 	vmov	d0, r4, r5
 800b0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	f7f5 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0d2:	b1e0      	cbz	r0, 800b10e <pow+0x96>
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d16c      	bne.n	800b1be <pow+0x146>
 800b0e4:	ec47 6b10 	vmov	d0, r6, r7
 800b0e8:	f000 fe55 	bl	800bd96 <finite>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d0e8      	beq.n	800b0c2 <pow+0x4a>
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	f7f5 fcf0 	bl	8000adc <__aeabi_dcmplt>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d0e0      	beq.n	800b0c2 <pow+0x4a>
 800b100:	f000 ff70 	bl	800bfe4 <__errno>
 800b104:	2321      	movs	r3, #33	; 0x21
 800b106:	6003      	str	r3, [r0, #0]
 800b108:	2400      	movs	r4, #0
 800b10a:	4d2f      	ldr	r5, [pc, #188]	; (800b1c8 <pow+0x150>)
 800b10c:	e7d9      	b.n	800b0c2 <pow+0x4a>
 800b10e:	ec45 4b10 	vmov	d0, r4, r5
 800b112:	f000 fe40 	bl	800bd96 <finite>
 800b116:	bbb8      	cbnz	r0, 800b188 <pow+0x110>
 800b118:	ec49 8b10 	vmov	d0, r8, r9
 800b11c:	f000 fe3b 	bl	800bd96 <finite>
 800b120:	b390      	cbz	r0, 800b188 <pow+0x110>
 800b122:	ec47 6b10 	vmov	d0, r6, r7
 800b126:	f000 fe36 	bl	800bd96 <finite>
 800b12a:	b368      	cbz	r0, 800b188 <pow+0x110>
 800b12c:	4622      	mov	r2, r4
 800b12e:	462b      	mov	r3, r5
 800b130:	4620      	mov	r0, r4
 800b132:	4629      	mov	r1, r5
 800b134:	f7f5 fcfa 	bl	8000b2c <__aeabi_dcmpun>
 800b138:	b160      	cbz	r0, 800b154 <pow+0xdc>
 800b13a:	f000 ff53 	bl	800bfe4 <__errno>
 800b13e:	2321      	movs	r3, #33	; 0x21
 800b140:	6003      	str	r3, [r0, #0]
 800b142:	2200      	movs	r2, #0
 800b144:	2300      	movs	r3, #0
 800b146:	4610      	mov	r0, r2
 800b148:	4619      	mov	r1, r3
 800b14a:	f7f5 fb7f 	bl	800084c <__aeabi_ddiv>
 800b14e:	4604      	mov	r4, r0
 800b150:	460d      	mov	r5, r1
 800b152:	e7b6      	b.n	800b0c2 <pow+0x4a>
 800b154:	f000 ff46 	bl	800bfe4 <__errno>
 800b158:	2322      	movs	r3, #34	; 0x22
 800b15a:	6003      	str	r3, [r0, #0]
 800b15c:	2200      	movs	r2, #0
 800b15e:	2300      	movs	r3, #0
 800b160:	4640      	mov	r0, r8
 800b162:	4649      	mov	r1, r9
 800b164:	f7f5 fcba 	bl	8000adc <__aeabi_dcmplt>
 800b168:	2400      	movs	r4, #0
 800b16a:	b158      	cbz	r0, 800b184 <pow+0x10c>
 800b16c:	ec47 6b10 	vmov	d0, r6, r7
 800b170:	f000 fe26 	bl	800bdc0 <rint>
 800b174:	4632      	mov	r2, r6
 800b176:	ec51 0b10 	vmov	r0, r1, d0
 800b17a:	463b      	mov	r3, r7
 800b17c:	f7f5 fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b180:	2800      	cmp	r0, #0
 800b182:	d0c2      	beq.n	800b10a <pow+0x92>
 800b184:	4d11      	ldr	r5, [pc, #68]	; (800b1cc <pow+0x154>)
 800b186:	e79c      	b.n	800b0c2 <pow+0x4a>
 800b188:	2200      	movs	r2, #0
 800b18a:	2300      	movs	r3, #0
 800b18c:	4620      	mov	r0, r4
 800b18e:	4629      	mov	r1, r5
 800b190:	f7f5 fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b194:	2800      	cmp	r0, #0
 800b196:	d094      	beq.n	800b0c2 <pow+0x4a>
 800b198:	ec49 8b10 	vmov	d0, r8, r9
 800b19c:	f000 fdfb 	bl	800bd96 <finite>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d08e      	beq.n	800b0c2 <pow+0x4a>
 800b1a4:	ec47 6b10 	vmov	d0, r6, r7
 800b1a8:	f000 fdf5 	bl	800bd96 <finite>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d088      	beq.n	800b0c2 <pow+0x4a>
 800b1b0:	f000 ff18 	bl	800bfe4 <__errno>
 800b1b4:	2322      	movs	r3, #34	; 0x22
 800b1b6:	6003      	str	r3, [r0, #0]
 800b1b8:	2400      	movs	r4, #0
 800b1ba:	2500      	movs	r5, #0
 800b1bc:	e781      	b.n	800b0c2 <pow+0x4a>
 800b1be:	4d04      	ldr	r5, [pc, #16]	; (800b1d0 <pow+0x158>)
 800b1c0:	2400      	movs	r4, #0
 800b1c2:	e77e      	b.n	800b0c2 <pow+0x4a>
 800b1c4:	20000192 	.word	0x20000192
 800b1c8:	fff00000 	.word	0xfff00000
 800b1cc:	7ff00000 	.word	0x7ff00000
 800b1d0:	3ff00000 	.word	0x3ff00000
 800b1d4:	00000000 	.word	0x00000000

0800b1d8 <__ieee754_pow>:
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	ed2d 8b06 	vpush	{d8-d10}
 800b1e0:	b08d      	sub	sp, #52	; 0x34
 800b1e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b1e6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b1ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b1ee:	ea56 0100 	orrs.w	r1, r6, r0
 800b1f2:	ec53 2b10 	vmov	r2, r3, d0
 800b1f6:	f000 84d1 	beq.w	800bb9c <__ieee754_pow+0x9c4>
 800b1fa:	497f      	ldr	r1, [pc, #508]	; (800b3f8 <__ieee754_pow+0x220>)
 800b1fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b200:	428c      	cmp	r4, r1
 800b202:	ee10 8a10 	vmov	r8, s0
 800b206:	4699      	mov	r9, r3
 800b208:	dc09      	bgt.n	800b21e <__ieee754_pow+0x46>
 800b20a:	d103      	bne.n	800b214 <__ieee754_pow+0x3c>
 800b20c:	b97a      	cbnz	r2, 800b22e <__ieee754_pow+0x56>
 800b20e:	42a6      	cmp	r6, r4
 800b210:	dd02      	ble.n	800b218 <__ieee754_pow+0x40>
 800b212:	e00c      	b.n	800b22e <__ieee754_pow+0x56>
 800b214:	428e      	cmp	r6, r1
 800b216:	dc02      	bgt.n	800b21e <__ieee754_pow+0x46>
 800b218:	428e      	cmp	r6, r1
 800b21a:	d110      	bne.n	800b23e <__ieee754_pow+0x66>
 800b21c:	b178      	cbz	r0, 800b23e <__ieee754_pow+0x66>
 800b21e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b222:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b226:	ea54 0308 	orrs.w	r3, r4, r8
 800b22a:	f000 84b7 	beq.w	800bb9c <__ieee754_pow+0x9c4>
 800b22e:	4873      	ldr	r0, [pc, #460]	; (800b3fc <__ieee754_pow+0x224>)
 800b230:	b00d      	add	sp, #52	; 0x34
 800b232:	ecbd 8b06 	vpop	{d8-d10}
 800b236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23a:	f000 bdb9 	b.w	800bdb0 <nan>
 800b23e:	f1b9 0f00 	cmp.w	r9, #0
 800b242:	da36      	bge.n	800b2b2 <__ieee754_pow+0xda>
 800b244:	496e      	ldr	r1, [pc, #440]	; (800b400 <__ieee754_pow+0x228>)
 800b246:	428e      	cmp	r6, r1
 800b248:	dc51      	bgt.n	800b2ee <__ieee754_pow+0x116>
 800b24a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b24e:	428e      	cmp	r6, r1
 800b250:	f340 84af 	ble.w	800bbb2 <__ieee754_pow+0x9da>
 800b254:	1531      	asrs	r1, r6, #20
 800b256:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b25a:	2914      	cmp	r1, #20
 800b25c:	dd0f      	ble.n	800b27e <__ieee754_pow+0xa6>
 800b25e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b262:	fa20 fc01 	lsr.w	ip, r0, r1
 800b266:	fa0c f101 	lsl.w	r1, ip, r1
 800b26a:	4281      	cmp	r1, r0
 800b26c:	f040 84a1 	bne.w	800bbb2 <__ieee754_pow+0x9da>
 800b270:	f00c 0c01 	and.w	ip, ip, #1
 800b274:	f1cc 0102 	rsb	r1, ip, #2
 800b278:	9100      	str	r1, [sp, #0]
 800b27a:	b180      	cbz	r0, 800b29e <__ieee754_pow+0xc6>
 800b27c:	e059      	b.n	800b332 <__ieee754_pow+0x15a>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d155      	bne.n	800b32e <__ieee754_pow+0x156>
 800b282:	f1c1 0114 	rsb	r1, r1, #20
 800b286:	fa46 fc01 	asr.w	ip, r6, r1
 800b28a:	fa0c f101 	lsl.w	r1, ip, r1
 800b28e:	42b1      	cmp	r1, r6
 800b290:	f040 848c 	bne.w	800bbac <__ieee754_pow+0x9d4>
 800b294:	f00c 0c01 	and.w	ip, ip, #1
 800b298:	f1cc 0102 	rsb	r1, ip, #2
 800b29c:	9100      	str	r1, [sp, #0]
 800b29e:	4959      	ldr	r1, [pc, #356]	; (800b404 <__ieee754_pow+0x22c>)
 800b2a0:	428e      	cmp	r6, r1
 800b2a2:	d12d      	bne.n	800b300 <__ieee754_pow+0x128>
 800b2a4:	2f00      	cmp	r7, #0
 800b2a6:	da79      	bge.n	800b39c <__ieee754_pow+0x1c4>
 800b2a8:	4956      	ldr	r1, [pc, #344]	; (800b404 <__ieee754_pow+0x22c>)
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	f7f5 face 	bl	800084c <__aeabi_ddiv>
 800b2b0:	e016      	b.n	800b2e0 <__ieee754_pow+0x108>
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	9100      	str	r1, [sp, #0]
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d13b      	bne.n	800b332 <__ieee754_pow+0x15a>
 800b2ba:	494f      	ldr	r1, [pc, #316]	; (800b3f8 <__ieee754_pow+0x220>)
 800b2bc:	428e      	cmp	r6, r1
 800b2be:	d1ee      	bne.n	800b29e <__ieee754_pow+0xc6>
 800b2c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b2c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b2c8:	ea53 0308 	orrs.w	r3, r3, r8
 800b2cc:	f000 8466 	beq.w	800bb9c <__ieee754_pow+0x9c4>
 800b2d0:	4b4d      	ldr	r3, [pc, #308]	; (800b408 <__ieee754_pow+0x230>)
 800b2d2:	429c      	cmp	r4, r3
 800b2d4:	dd0d      	ble.n	800b2f2 <__ieee754_pow+0x11a>
 800b2d6:	2f00      	cmp	r7, #0
 800b2d8:	f280 8464 	bge.w	800bba4 <__ieee754_pow+0x9cc>
 800b2dc:	2000      	movs	r0, #0
 800b2de:	2100      	movs	r1, #0
 800b2e0:	ec41 0b10 	vmov	d0, r0, r1
 800b2e4:	b00d      	add	sp, #52	; 0x34
 800b2e6:	ecbd 8b06 	vpop	{d8-d10}
 800b2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ee:	2102      	movs	r1, #2
 800b2f0:	e7e0      	b.n	800b2b4 <__ieee754_pow+0xdc>
 800b2f2:	2f00      	cmp	r7, #0
 800b2f4:	daf2      	bge.n	800b2dc <__ieee754_pow+0x104>
 800b2f6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b2fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b2fe:	e7ef      	b.n	800b2e0 <__ieee754_pow+0x108>
 800b300:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b304:	d104      	bne.n	800b310 <__ieee754_pow+0x138>
 800b306:	4610      	mov	r0, r2
 800b308:	4619      	mov	r1, r3
 800b30a:	f7f5 f975 	bl	80005f8 <__aeabi_dmul>
 800b30e:	e7e7      	b.n	800b2e0 <__ieee754_pow+0x108>
 800b310:	493e      	ldr	r1, [pc, #248]	; (800b40c <__ieee754_pow+0x234>)
 800b312:	428f      	cmp	r7, r1
 800b314:	d10d      	bne.n	800b332 <__ieee754_pow+0x15a>
 800b316:	f1b9 0f00 	cmp.w	r9, #0
 800b31a:	db0a      	blt.n	800b332 <__ieee754_pow+0x15a>
 800b31c:	ec43 2b10 	vmov	d0, r2, r3
 800b320:	b00d      	add	sp, #52	; 0x34
 800b322:	ecbd 8b06 	vpop	{d8-d10}
 800b326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32a:	f000 bc77 	b.w	800bc1c <__ieee754_sqrt>
 800b32e:	2100      	movs	r1, #0
 800b330:	9100      	str	r1, [sp, #0]
 800b332:	ec43 2b10 	vmov	d0, r2, r3
 800b336:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b33a:	f000 fd23 	bl	800bd84 <fabs>
 800b33e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b342:	ec51 0b10 	vmov	r0, r1, d0
 800b346:	f1b8 0f00 	cmp.w	r8, #0
 800b34a:	d12a      	bne.n	800b3a2 <__ieee754_pow+0x1ca>
 800b34c:	b12c      	cbz	r4, 800b35a <__ieee754_pow+0x182>
 800b34e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b404 <__ieee754_pow+0x22c>
 800b352:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b356:	45e6      	cmp	lr, ip
 800b358:	d123      	bne.n	800b3a2 <__ieee754_pow+0x1ca>
 800b35a:	2f00      	cmp	r7, #0
 800b35c:	da05      	bge.n	800b36a <__ieee754_pow+0x192>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	2000      	movs	r0, #0
 800b364:	4927      	ldr	r1, [pc, #156]	; (800b404 <__ieee754_pow+0x22c>)
 800b366:	f7f5 fa71 	bl	800084c <__aeabi_ddiv>
 800b36a:	f1b9 0f00 	cmp.w	r9, #0
 800b36e:	dab7      	bge.n	800b2e0 <__ieee754_pow+0x108>
 800b370:	9b00      	ldr	r3, [sp, #0]
 800b372:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b376:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b37a:	4323      	orrs	r3, r4
 800b37c:	d108      	bne.n	800b390 <__ieee754_pow+0x1b8>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4610      	mov	r0, r2
 800b384:	4619      	mov	r1, r3
 800b386:	f7f4 ff7f 	bl	8000288 <__aeabi_dsub>
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	e78d      	b.n	800b2ac <__ieee754_pow+0xd4>
 800b390:	9b00      	ldr	r3, [sp, #0]
 800b392:	2b01      	cmp	r3, #1
 800b394:	d1a4      	bne.n	800b2e0 <__ieee754_pow+0x108>
 800b396:	4602      	mov	r2, r0
 800b398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b39c:	4610      	mov	r0, r2
 800b39e:	4619      	mov	r1, r3
 800b3a0:	e79e      	b.n	800b2e0 <__ieee754_pow+0x108>
 800b3a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b3a6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800b3aa:	950a      	str	r5, [sp, #40]	; 0x28
 800b3ac:	9d00      	ldr	r5, [sp, #0]
 800b3ae:	46ac      	mov	ip, r5
 800b3b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b3b2:	ea5c 0505 	orrs.w	r5, ip, r5
 800b3b6:	d0e4      	beq.n	800b382 <__ieee754_pow+0x1aa>
 800b3b8:	4b15      	ldr	r3, [pc, #84]	; (800b410 <__ieee754_pow+0x238>)
 800b3ba:	429e      	cmp	r6, r3
 800b3bc:	f340 80fc 	ble.w	800b5b8 <__ieee754_pow+0x3e0>
 800b3c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b3c4:	429e      	cmp	r6, r3
 800b3c6:	4b10      	ldr	r3, [pc, #64]	; (800b408 <__ieee754_pow+0x230>)
 800b3c8:	dd07      	ble.n	800b3da <__ieee754_pow+0x202>
 800b3ca:	429c      	cmp	r4, r3
 800b3cc:	dc0a      	bgt.n	800b3e4 <__ieee754_pow+0x20c>
 800b3ce:	2f00      	cmp	r7, #0
 800b3d0:	da84      	bge.n	800b2dc <__ieee754_pow+0x104>
 800b3d2:	a307      	add	r3, pc, #28	; (adr r3, 800b3f0 <__ieee754_pow+0x218>)
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	e795      	b.n	800b306 <__ieee754_pow+0x12e>
 800b3da:	429c      	cmp	r4, r3
 800b3dc:	dbf7      	blt.n	800b3ce <__ieee754_pow+0x1f6>
 800b3de:	4b09      	ldr	r3, [pc, #36]	; (800b404 <__ieee754_pow+0x22c>)
 800b3e0:	429c      	cmp	r4, r3
 800b3e2:	dd17      	ble.n	800b414 <__ieee754_pow+0x23c>
 800b3e4:	2f00      	cmp	r7, #0
 800b3e6:	dcf4      	bgt.n	800b3d2 <__ieee754_pow+0x1fa>
 800b3e8:	e778      	b.n	800b2dc <__ieee754_pow+0x104>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	8800759c 	.word	0x8800759c
 800b3f4:	7e37e43c 	.word	0x7e37e43c
 800b3f8:	7ff00000 	.word	0x7ff00000
 800b3fc:	0800f0d0 	.word	0x0800f0d0
 800b400:	433fffff 	.word	0x433fffff
 800b404:	3ff00000 	.word	0x3ff00000
 800b408:	3fefffff 	.word	0x3fefffff
 800b40c:	3fe00000 	.word	0x3fe00000
 800b410:	41e00000 	.word	0x41e00000
 800b414:	4b64      	ldr	r3, [pc, #400]	; (800b5a8 <__ieee754_pow+0x3d0>)
 800b416:	2200      	movs	r2, #0
 800b418:	f7f4 ff36 	bl	8000288 <__aeabi_dsub>
 800b41c:	a356      	add	r3, pc, #344	; (adr r3, 800b578 <__ieee754_pow+0x3a0>)
 800b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b422:	4604      	mov	r4, r0
 800b424:	460d      	mov	r5, r1
 800b426:	f7f5 f8e7 	bl	80005f8 <__aeabi_dmul>
 800b42a:	a355      	add	r3, pc, #340	; (adr r3, 800b580 <__ieee754_pow+0x3a8>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	4606      	mov	r6, r0
 800b432:	460f      	mov	r7, r1
 800b434:	4620      	mov	r0, r4
 800b436:	4629      	mov	r1, r5
 800b438:	f7f5 f8de 	bl	80005f8 <__aeabi_dmul>
 800b43c:	4b5b      	ldr	r3, [pc, #364]	; (800b5ac <__ieee754_pow+0x3d4>)
 800b43e:	4682      	mov	sl, r0
 800b440:	468b      	mov	fp, r1
 800b442:	2200      	movs	r2, #0
 800b444:	4620      	mov	r0, r4
 800b446:	4629      	mov	r1, r5
 800b448:	f7f5 f8d6 	bl	80005f8 <__aeabi_dmul>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	a14d      	add	r1, pc, #308	; (adr r1, 800b588 <__ieee754_pow+0x3b0>)
 800b452:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b456:	f7f4 ff17 	bl	8000288 <__aeabi_dsub>
 800b45a:	4622      	mov	r2, r4
 800b45c:	462b      	mov	r3, r5
 800b45e:	f7f5 f8cb 	bl	80005f8 <__aeabi_dmul>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	2000      	movs	r0, #0
 800b468:	4951      	ldr	r1, [pc, #324]	; (800b5b0 <__ieee754_pow+0x3d8>)
 800b46a:	f7f4 ff0d 	bl	8000288 <__aeabi_dsub>
 800b46e:	4622      	mov	r2, r4
 800b470:	4680      	mov	r8, r0
 800b472:	4689      	mov	r9, r1
 800b474:	462b      	mov	r3, r5
 800b476:	4620      	mov	r0, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	f7f5 f8bd 	bl	80005f8 <__aeabi_dmul>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4640      	mov	r0, r8
 800b484:	4649      	mov	r1, r9
 800b486:	f7f5 f8b7 	bl	80005f8 <__aeabi_dmul>
 800b48a:	a341      	add	r3, pc, #260	; (adr r3, 800b590 <__ieee754_pow+0x3b8>)
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	f7f5 f8b2 	bl	80005f8 <__aeabi_dmul>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	4650      	mov	r0, sl
 800b49a:	4659      	mov	r1, fp
 800b49c:	f7f4 fef4 	bl	8000288 <__aeabi_dsub>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	4689      	mov	r9, r1
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	4639      	mov	r1, r7
 800b4ac:	f7f4 feee 	bl	800028c <__adddf3>
 800b4b0:	2400      	movs	r4, #0
 800b4b2:	4632      	mov	r2, r6
 800b4b4:	463b      	mov	r3, r7
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	f7f4 fee5 	bl	8000288 <__aeabi_dsub>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4640      	mov	r0, r8
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	f7f4 fedf 	bl	8000288 <__aeabi_dsub>
 800b4ca:	9b00      	ldr	r3, [sp, #0]
 800b4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	4682      	mov	sl, r0
 800b4d4:	468b      	mov	fp, r1
 800b4d6:	f040 81f1 	bne.w	800b8bc <__ieee754_pow+0x6e4>
 800b4da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b598 <__ieee754_pow+0x3c0>
 800b4de:	eeb0 8a47 	vmov.f32	s16, s14
 800b4e2:	eef0 8a67 	vmov.f32	s17, s15
 800b4e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b4ea:	2600      	movs	r6, #0
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	463b      	mov	r3, r7
 800b4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4f4:	f7f4 fec8 	bl	8000288 <__aeabi_dsub>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	f7f5 f87c 	bl	80005f8 <__aeabi_dmul>
 800b500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b504:	4680      	mov	r8, r0
 800b506:	4689      	mov	r9, r1
 800b508:	4650      	mov	r0, sl
 800b50a:	4659      	mov	r1, fp
 800b50c:	f7f5 f874 	bl	80005f8 <__aeabi_dmul>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4640      	mov	r0, r8
 800b516:	4649      	mov	r1, r9
 800b518:	f7f4 feb8 	bl	800028c <__adddf3>
 800b51c:	4632      	mov	r2, r6
 800b51e:	463b      	mov	r3, r7
 800b520:	4680      	mov	r8, r0
 800b522:	4689      	mov	r9, r1
 800b524:	4620      	mov	r0, r4
 800b526:	4629      	mov	r1, r5
 800b528:	f7f5 f866 	bl	80005f8 <__aeabi_dmul>
 800b52c:	460b      	mov	r3, r1
 800b52e:	4604      	mov	r4, r0
 800b530:	460d      	mov	r5, r1
 800b532:	4602      	mov	r2, r0
 800b534:	4649      	mov	r1, r9
 800b536:	4640      	mov	r0, r8
 800b538:	f7f4 fea8 	bl	800028c <__adddf3>
 800b53c:	4b1d      	ldr	r3, [pc, #116]	; (800b5b4 <__ieee754_pow+0x3dc>)
 800b53e:	4299      	cmp	r1, r3
 800b540:	ec45 4b19 	vmov	d9, r4, r5
 800b544:	4606      	mov	r6, r0
 800b546:	460f      	mov	r7, r1
 800b548:	468b      	mov	fp, r1
 800b54a:	f340 82fe 	ble.w	800bb4a <__ieee754_pow+0x972>
 800b54e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b552:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b556:	4303      	orrs	r3, r0
 800b558:	f000 81f0 	beq.w	800b93c <__ieee754_pow+0x764>
 800b55c:	a310      	add	r3, pc, #64	; (adr r3, 800b5a0 <__ieee754_pow+0x3c8>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	ec51 0b18 	vmov	r0, r1, d8
 800b566:	f7f5 f847 	bl	80005f8 <__aeabi_dmul>
 800b56a:	a30d      	add	r3, pc, #52	; (adr r3, 800b5a0 <__ieee754_pow+0x3c8>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	e6cb      	b.n	800b30a <__ieee754_pow+0x132>
 800b572:	bf00      	nop
 800b574:	f3af 8000 	nop.w
 800b578:	60000000 	.word	0x60000000
 800b57c:	3ff71547 	.word	0x3ff71547
 800b580:	f85ddf44 	.word	0xf85ddf44
 800b584:	3e54ae0b 	.word	0x3e54ae0b
 800b588:	55555555 	.word	0x55555555
 800b58c:	3fd55555 	.word	0x3fd55555
 800b590:	652b82fe 	.word	0x652b82fe
 800b594:	3ff71547 	.word	0x3ff71547
 800b598:	00000000 	.word	0x00000000
 800b59c:	bff00000 	.word	0xbff00000
 800b5a0:	8800759c 	.word	0x8800759c
 800b5a4:	7e37e43c 	.word	0x7e37e43c
 800b5a8:	3ff00000 	.word	0x3ff00000
 800b5ac:	3fd00000 	.word	0x3fd00000
 800b5b0:	3fe00000 	.word	0x3fe00000
 800b5b4:	408fffff 	.word	0x408fffff
 800b5b8:	4bd7      	ldr	r3, [pc, #860]	; (800b918 <__ieee754_pow+0x740>)
 800b5ba:	ea03 0309 	and.w	r3, r3, r9
 800b5be:	2200      	movs	r2, #0
 800b5c0:	b92b      	cbnz	r3, 800b5ce <__ieee754_pow+0x3f6>
 800b5c2:	4bd6      	ldr	r3, [pc, #856]	; (800b91c <__ieee754_pow+0x744>)
 800b5c4:	f7f5 f818 	bl	80005f8 <__aeabi_dmul>
 800b5c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	1523      	asrs	r3, r4, #20
 800b5d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5d4:	4413      	add	r3, r2
 800b5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d8:	4bd1      	ldr	r3, [pc, #836]	; (800b920 <__ieee754_pow+0x748>)
 800b5da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b5de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b5e2:	429c      	cmp	r4, r3
 800b5e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b5e8:	dd08      	ble.n	800b5fc <__ieee754_pow+0x424>
 800b5ea:	4bce      	ldr	r3, [pc, #824]	; (800b924 <__ieee754_pow+0x74c>)
 800b5ec:	429c      	cmp	r4, r3
 800b5ee:	f340 8163 	ble.w	800b8b8 <__ieee754_pow+0x6e0>
 800b5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b5fc:	2400      	movs	r4, #0
 800b5fe:	00e3      	lsls	r3, r4, #3
 800b600:	930b      	str	r3, [sp, #44]	; 0x2c
 800b602:	4bc9      	ldr	r3, [pc, #804]	; (800b928 <__ieee754_pow+0x750>)
 800b604:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b608:	ed93 7b00 	vldr	d7, [r3]
 800b60c:	4629      	mov	r1, r5
 800b60e:	ec53 2b17 	vmov	r2, r3, d7
 800b612:	eeb0 8a47 	vmov.f32	s16, s14
 800b616:	eef0 8a67 	vmov.f32	s17, s15
 800b61a:	4682      	mov	sl, r0
 800b61c:	f7f4 fe34 	bl	8000288 <__aeabi_dsub>
 800b620:	4652      	mov	r2, sl
 800b622:	4606      	mov	r6, r0
 800b624:	460f      	mov	r7, r1
 800b626:	462b      	mov	r3, r5
 800b628:	ec51 0b18 	vmov	r0, r1, d8
 800b62c:	f7f4 fe2e 	bl	800028c <__adddf3>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	2000      	movs	r0, #0
 800b636:	49bd      	ldr	r1, [pc, #756]	; (800b92c <__ieee754_pow+0x754>)
 800b638:	f7f5 f908 	bl	800084c <__aeabi_ddiv>
 800b63c:	ec41 0b19 	vmov	d9, r0, r1
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	4630      	mov	r0, r6
 800b646:	4639      	mov	r1, r7
 800b648:	f7f4 ffd6 	bl	80005f8 <__aeabi_dmul>
 800b64c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b650:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b654:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b658:	2300      	movs	r3, #0
 800b65a:	9304      	str	r3, [sp, #16]
 800b65c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b660:	46ab      	mov	fp, r5
 800b662:	106d      	asrs	r5, r5, #1
 800b664:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b668:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b66c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b670:	2200      	movs	r2, #0
 800b672:	4640      	mov	r0, r8
 800b674:	4649      	mov	r1, r9
 800b676:	4614      	mov	r4, r2
 800b678:	461d      	mov	r5, r3
 800b67a:	f7f4 ffbd 	bl	80005f8 <__aeabi_dmul>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	f7f4 fdff 	bl	8000288 <__aeabi_dsub>
 800b68a:	ec53 2b18 	vmov	r2, r3, d8
 800b68e:	4606      	mov	r6, r0
 800b690:	460f      	mov	r7, r1
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 fdf7 	bl	8000288 <__aeabi_dsub>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4650      	mov	r0, sl
 800b6a0:	4659      	mov	r1, fp
 800b6a2:	f7f4 fdf1 	bl	8000288 <__aeabi_dsub>
 800b6a6:	4642      	mov	r2, r8
 800b6a8:	464b      	mov	r3, r9
 800b6aa:	f7f4 ffa5 	bl	80005f8 <__aeabi_dmul>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	f7f4 fde7 	bl	8000288 <__aeabi_dsub>
 800b6ba:	ec53 2b19 	vmov	r2, r3, d9
 800b6be:	f7f4 ff9b 	bl	80005f8 <__aeabi_dmul>
 800b6c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6c6:	ec41 0b18 	vmov	d8, r0, r1
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f7f4 ff93 	bl	80005f8 <__aeabi_dmul>
 800b6d2:	a37d      	add	r3, pc, #500	; (adr r3, 800b8c8 <__ieee754_pow+0x6f0>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	4604      	mov	r4, r0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	f7f4 ff8c 	bl	80005f8 <__aeabi_dmul>
 800b6e0:	a37b      	add	r3, pc, #492	; (adr r3, 800b8d0 <__ieee754_pow+0x6f8>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fdd1 	bl	800028c <__adddf3>
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	f7f4 ff83 	bl	80005f8 <__aeabi_dmul>
 800b6f2:	a379      	add	r3, pc, #484	; (adr r3, 800b8d8 <__ieee754_pow+0x700>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f7f4 fdc8 	bl	800028c <__adddf3>
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	462b      	mov	r3, r5
 800b700:	f7f4 ff7a 	bl	80005f8 <__aeabi_dmul>
 800b704:	a376      	add	r3, pc, #472	; (adr r3, 800b8e0 <__ieee754_pow+0x708>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	f7f4 fdbf 	bl	800028c <__adddf3>
 800b70e:	4622      	mov	r2, r4
 800b710:	462b      	mov	r3, r5
 800b712:	f7f4 ff71 	bl	80005f8 <__aeabi_dmul>
 800b716:	a374      	add	r3, pc, #464	; (adr r3, 800b8e8 <__ieee754_pow+0x710>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f7f4 fdb6 	bl	800028c <__adddf3>
 800b720:	4622      	mov	r2, r4
 800b722:	462b      	mov	r3, r5
 800b724:	f7f4 ff68 	bl	80005f8 <__aeabi_dmul>
 800b728:	a371      	add	r3, pc, #452	; (adr r3, 800b8f0 <__ieee754_pow+0x718>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 fdad 	bl	800028c <__adddf3>
 800b732:	4622      	mov	r2, r4
 800b734:	4606      	mov	r6, r0
 800b736:	460f      	mov	r7, r1
 800b738:	462b      	mov	r3, r5
 800b73a:	4620      	mov	r0, r4
 800b73c:	4629      	mov	r1, r5
 800b73e:	f7f4 ff5b 	bl	80005f8 <__aeabi_dmul>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	f7f4 ff55 	bl	80005f8 <__aeabi_dmul>
 800b74e:	4642      	mov	r2, r8
 800b750:	4604      	mov	r4, r0
 800b752:	460d      	mov	r5, r1
 800b754:	464b      	mov	r3, r9
 800b756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b75a:	f7f4 fd97 	bl	800028c <__adddf3>
 800b75e:	ec53 2b18 	vmov	r2, r3, d8
 800b762:	f7f4 ff49 	bl	80005f8 <__aeabi_dmul>
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	f7f4 fd8f 	bl	800028c <__adddf3>
 800b76e:	4642      	mov	r2, r8
 800b770:	4682      	mov	sl, r0
 800b772:	468b      	mov	fp, r1
 800b774:	464b      	mov	r3, r9
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f4 ff3d 	bl	80005f8 <__aeabi_dmul>
 800b77e:	4b6c      	ldr	r3, [pc, #432]	; (800b930 <__ieee754_pow+0x758>)
 800b780:	2200      	movs	r2, #0
 800b782:	4606      	mov	r6, r0
 800b784:	460f      	mov	r7, r1
 800b786:	f7f4 fd81 	bl	800028c <__adddf3>
 800b78a:	4652      	mov	r2, sl
 800b78c:	465b      	mov	r3, fp
 800b78e:	f7f4 fd7d 	bl	800028c <__adddf3>
 800b792:	9c04      	ldr	r4, [sp, #16]
 800b794:	460d      	mov	r5, r1
 800b796:	4622      	mov	r2, r4
 800b798:	460b      	mov	r3, r1
 800b79a:	4640      	mov	r0, r8
 800b79c:	4649      	mov	r1, r9
 800b79e:	f7f4 ff2b 	bl	80005f8 <__aeabi_dmul>
 800b7a2:	4b63      	ldr	r3, [pc, #396]	; (800b930 <__ieee754_pow+0x758>)
 800b7a4:	4680      	mov	r8, r0
 800b7a6:	4689      	mov	r9, r1
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	f7f4 fd6b 	bl	8000288 <__aeabi_dsub>
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	f7f4 fd67 	bl	8000288 <__aeabi_dsub>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4650      	mov	r0, sl
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	f7f4 fd61 	bl	8000288 <__aeabi_dsub>
 800b7c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7ca:	f7f4 ff15 	bl	80005f8 <__aeabi_dmul>
 800b7ce:	4622      	mov	r2, r4
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	460f      	mov	r7, r1
 800b7d4:	462b      	mov	r3, r5
 800b7d6:	ec51 0b18 	vmov	r0, r1, d8
 800b7da:	f7f4 ff0d 	bl	80005f8 <__aeabi_dmul>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f4 fd51 	bl	800028c <__adddf3>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	460f      	mov	r7, r1
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	4649      	mov	r1, r9
 800b7f6:	f7f4 fd49 	bl	800028c <__adddf3>
 800b7fa:	9c04      	ldr	r4, [sp, #16]
 800b7fc:	a33e      	add	r3, pc, #248	; (adr r3, 800b8f8 <__ieee754_pow+0x720>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	4620      	mov	r0, r4
 800b804:	460d      	mov	r5, r1
 800b806:	f7f4 fef7 	bl	80005f8 <__aeabi_dmul>
 800b80a:	4642      	mov	r2, r8
 800b80c:	ec41 0b18 	vmov	d8, r0, r1
 800b810:	464b      	mov	r3, r9
 800b812:	4620      	mov	r0, r4
 800b814:	4629      	mov	r1, r5
 800b816:	f7f4 fd37 	bl	8000288 <__aeabi_dsub>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	4630      	mov	r0, r6
 800b820:	4639      	mov	r1, r7
 800b822:	f7f4 fd31 	bl	8000288 <__aeabi_dsub>
 800b826:	a336      	add	r3, pc, #216	; (adr r3, 800b900 <__ieee754_pow+0x728>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f7f4 fee4 	bl	80005f8 <__aeabi_dmul>
 800b830:	a335      	add	r3, pc, #212	; (adr r3, 800b908 <__ieee754_pow+0x730>)
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	4606      	mov	r6, r0
 800b838:	460f      	mov	r7, r1
 800b83a:	4620      	mov	r0, r4
 800b83c:	4629      	mov	r1, r5
 800b83e:	f7f4 fedb 	bl	80005f8 <__aeabi_dmul>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4630      	mov	r0, r6
 800b848:	4639      	mov	r1, r7
 800b84a:	f7f4 fd1f 	bl	800028c <__adddf3>
 800b84e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b850:	4b38      	ldr	r3, [pc, #224]	; (800b934 <__ieee754_pow+0x75c>)
 800b852:	4413      	add	r3, r2
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f7f4 fd18 	bl	800028c <__adddf3>
 800b85c:	4682      	mov	sl, r0
 800b85e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b860:	468b      	mov	fp, r1
 800b862:	f7f4 fe5f 	bl	8000524 <__aeabi_i2d>
 800b866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b868:	4b33      	ldr	r3, [pc, #204]	; (800b938 <__ieee754_pow+0x760>)
 800b86a:	4413      	add	r3, r2
 800b86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b870:	4606      	mov	r6, r0
 800b872:	460f      	mov	r7, r1
 800b874:	4652      	mov	r2, sl
 800b876:	465b      	mov	r3, fp
 800b878:	ec51 0b18 	vmov	r0, r1, d8
 800b87c:	f7f4 fd06 	bl	800028c <__adddf3>
 800b880:	4642      	mov	r2, r8
 800b882:	464b      	mov	r3, r9
 800b884:	f7f4 fd02 	bl	800028c <__adddf3>
 800b888:	4632      	mov	r2, r6
 800b88a:	463b      	mov	r3, r7
 800b88c:	f7f4 fcfe 	bl	800028c <__adddf3>
 800b890:	9c04      	ldr	r4, [sp, #16]
 800b892:	4632      	mov	r2, r6
 800b894:	463b      	mov	r3, r7
 800b896:	4620      	mov	r0, r4
 800b898:	460d      	mov	r5, r1
 800b89a:	f7f4 fcf5 	bl	8000288 <__aeabi_dsub>
 800b89e:	4642      	mov	r2, r8
 800b8a0:	464b      	mov	r3, r9
 800b8a2:	f7f4 fcf1 	bl	8000288 <__aeabi_dsub>
 800b8a6:	ec53 2b18 	vmov	r2, r3, d8
 800b8aa:	f7f4 fced 	bl	8000288 <__aeabi_dsub>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4650      	mov	r0, sl
 800b8b4:	4659      	mov	r1, fp
 800b8b6:	e606      	b.n	800b4c6 <__ieee754_pow+0x2ee>
 800b8b8:	2401      	movs	r4, #1
 800b8ba:	e6a0      	b.n	800b5fe <__ieee754_pow+0x426>
 800b8bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b910 <__ieee754_pow+0x738>
 800b8c0:	e60d      	b.n	800b4de <__ieee754_pow+0x306>
 800b8c2:	bf00      	nop
 800b8c4:	f3af 8000 	nop.w
 800b8c8:	4a454eef 	.word	0x4a454eef
 800b8cc:	3fca7e28 	.word	0x3fca7e28
 800b8d0:	93c9db65 	.word	0x93c9db65
 800b8d4:	3fcd864a 	.word	0x3fcd864a
 800b8d8:	a91d4101 	.word	0xa91d4101
 800b8dc:	3fd17460 	.word	0x3fd17460
 800b8e0:	518f264d 	.word	0x518f264d
 800b8e4:	3fd55555 	.word	0x3fd55555
 800b8e8:	db6fabff 	.word	0xdb6fabff
 800b8ec:	3fdb6db6 	.word	0x3fdb6db6
 800b8f0:	33333303 	.word	0x33333303
 800b8f4:	3fe33333 	.word	0x3fe33333
 800b8f8:	e0000000 	.word	0xe0000000
 800b8fc:	3feec709 	.word	0x3feec709
 800b900:	dc3a03fd 	.word	0xdc3a03fd
 800b904:	3feec709 	.word	0x3feec709
 800b908:	145b01f5 	.word	0x145b01f5
 800b90c:	be3e2fe0 	.word	0xbe3e2fe0
 800b910:	00000000 	.word	0x00000000
 800b914:	3ff00000 	.word	0x3ff00000
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	43400000 	.word	0x43400000
 800b920:	0003988e 	.word	0x0003988e
 800b924:	000bb679 	.word	0x000bb679
 800b928:	0800ee18 	.word	0x0800ee18
 800b92c:	3ff00000 	.word	0x3ff00000
 800b930:	40080000 	.word	0x40080000
 800b934:	0800ee38 	.word	0x0800ee38
 800b938:	0800ee28 	.word	0x0800ee28
 800b93c:	a3b5      	add	r3, pc, #724	; (adr r3, 800bc14 <__ieee754_pow+0xa3c>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	4640      	mov	r0, r8
 800b944:	4649      	mov	r1, r9
 800b946:	f7f4 fca1 	bl	800028c <__adddf3>
 800b94a:	4622      	mov	r2, r4
 800b94c:	ec41 0b1a 	vmov	d10, r0, r1
 800b950:	462b      	mov	r3, r5
 800b952:	4630      	mov	r0, r6
 800b954:	4639      	mov	r1, r7
 800b956:	f7f4 fc97 	bl	8000288 <__aeabi_dsub>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	ec51 0b1a 	vmov	r0, r1, d10
 800b962:	f7f5 f8d9 	bl	8000b18 <__aeabi_dcmpgt>
 800b966:	2800      	cmp	r0, #0
 800b968:	f47f adf8 	bne.w	800b55c <__ieee754_pow+0x384>
 800b96c:	4aa4      	ldr	r2, [pc, #656]	; (800bc00 <__ieee754_pow+0xa28>)
 800b96e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b972:	4293      	cmp	r3, r2
 800b974:	f340 810b 	ble.w	800bb8e <__ieee754_pow+0x9b6>
 800b978:	151b      	asrs	r3, r3, #20
 800b97a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b97e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b982:	fa4a f303 	asr.w	r3, sl, r3
 800b986:	445b      	add	r3, fp
 800b988:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b98c:	4e9d      	ldr	r6, [pc, #628]	; (800bc04 <__ieee754_pow+0xa2c>)
 800b98e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b992:	4116      	asrs	r6, r2
 800b994:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b998:	2000      	movs	r0, #0
 800b99a:	ea23 0106 	bic.w	r1, r3, r6
 800b99e:	f1c2 0214 	rsb	r2, r2, #20
 800b9a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b9a6:	fa4a fa02 	asr.w	sl, sl, r2
 800b9aa:	f1bb 0f00 	cmp.w	fp, #0
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	bfb8      	it	lt
 800b9b8:	f1ca 0a00 	rsblt	sl, sl, #0
 800b9bc:	f7f4 fc64 	bl	8000288 <__aeabi_dsub>
 800b9c0:	ec41 0b19 	vmov	d9, r0, r1
 800b9c4:	4642      	mov	r2, r8
 800b9c6:	464b      	mov	r3, r9
 800b9c8:	ec51 0b19 	vmov	r0, r1, d9
 800b9cc:	f7f4 fc5e 	bl	800028c <__adddf3>
 800b9d0:	2400      	movs	r4, #0
 800b9d2:	a379      	add	r3, pc, #484	; (adr r3, 800bbb8 <__ieee754_pow+0x9e0>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	4620      	mov	r0, r4
 800b9da:	460d      	mov	r5, r1
 800b9dc:	f7f4 fe0c 	bl	80005f8 <__aeabi_dmul>
 800b9e0:	ec53 2b19 	vmov	r2, r3, d9
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	460f      	mov	r7, r1
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	f7f4 fc4c 	bl	8000288 <__aeabi_dsub>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	f7f4 fc46 	bl	8000288 <__aeabi_dsub>
 800b9fc:	a370      	add	r3, pc, #448	; (adr r3, 800bbc0 <__ieee754_pow+0x9e8>)
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	f7f4 fdf9 	bl	80005f8 <__aeabi_dmul>
 800ba06:	a370      	add	r3, pc, #448	; (adr r3, 800bbc8 <__ieee754_pow+0x9f0>)
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	4689      	mov	r9, r1
 800ba10:	4620      	mov	r0, r4
 800ba12:	4629      	mov	r1, r5
 800ba14:	f7f4 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4649      	mov	r1, r9
 800ba20:	f7f4 fc34 	bl	800028c <__adddf3>
 800ba24:	4604      	mov	r4, r0
 800ba26:	460d      	mov	r5, r1
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	4639      	mov	r1, r7
 800ba30:	f7f4 fc2c 	bl	800028c <__adddf3>
 800ba34:	4632      	mov	r2, r6
 800ba36:	463b      	mov	r3, r7
 800ba38:	4680      	mov	r8, r0
 800ba3a:	4689      	mov	r9, r1
 800ba3c:	f7f4 fc24 	bl	8000288 <__aeabi_dsub>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	4620      	mov	r0, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	f7f4 fc1e 	bl	8000288 <__aeabi_dsub>
 800ba4c:	4642      	mov	r2, r8
 800ba4e:	4606      	mov	r6, r0
 800ba50:	460f      	mov	r7, r1
 800ba52:	464b      	mov	r3, r9
 800ba54:	4640      	mov	r0, r8
 800ba56:	4649      	mov	r1, r9
 800ba58:	f7f4 fdce 	bl	80005f8 <__aeabi_dmul>
 800ba5c:	a35c      	add	r3, pc, #368	; (adr r3, 800bbd0 <__ieee754_pow+0x9f8>)
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	4604      	mov	r4, r0
 800ba64:	460d      	mov	r5, r1
 800ba66:	f7f4 fdc7 	bl	80005f8 <__aeabi_dmul>
 800ba6a:	a35b      	add	r3, pc, #364	; (adr r3, 800bbd8 <__ieee754_pow+0xa00>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	f7f4 fc0a 	bl	8000288 <__aeabi_dsub>
 800ba74:	4622      	mov	r2, r4
 800ba76:	462b      	mov	r3, r5
 800ba78:	f7f4 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ba7c:	a358      	add	r3, pc, #352	; (adr r3, 800bbe0 <__ieee754_pow+0xa08>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	f7f4 fc03 	bl	800028c <__adddf3>
 800ba86:	4622      	mov	r2, r4
 800ba88:	462b      	mov	r3, r5
 800ba8a:	f7f4 fdb5 	bl	80005f8 <__aeabi_dmul>
 800ba8e:	a356      	add	r3, pc, #344	; (adr r3, 800bbe8 <__ieee754_pow+0xa10>)
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	f7f4 fbf8 	bl	8000288 <__aeabi_dsub>
 800ba98:	4622      	mov	r2, r4
 800ba9a:	462b      	mov	r3, r5
 800ba9c:	f7f4 fdac 	bl	80005f8 <__aeabi_dmul>
 800baa0:	a353      	add	r3, pc, #332	; (adr r3, 800bbf0 <__ieee754_pow+0xa18>)
 800baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa6:	f7f4 fbf1 	bl	800028c <__adddf3>
 800baaa:	4622      	mov	r2, r4
 800baac:	462b      	mov	r3, r5
 800baae:	f7f4 fda3 	bl	80005f8 <__aeabi_dmul>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	4640      	mov	r0, r8
 800bab8:	4649      	mov	r1, r9
 800baba:	f7f4 fbe5 	bl	8000288 <__aeabi_dsub>
 800babe:	4604      	mov	r4, r0
 800bac0:	460d      	mov	r5, r1
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4640      	mov	r0, r8
 800bac8:	4649      	mov	r1, r9
 800baca:	f7f4 fd95 	bl	80005f8 <__aeabi_dmul>
 800bace:	2200      	movs	r2, #0
 800bad0:	ec41 0b19 	vmov	d9, r0, r1
 800bad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bad8:	4620      	mov	r0, r4
 800bada:	4629      	mov	r1, r5
 800badc:	f7f4 fbd4 	bl	8000288 <__aeabi_dsub>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	ec51 0b19 	vmov	r0, r1, d9
 800bae8:	f7f4 feb0 	bl	800084c <__aeabi_ddiv>
 800baec:	4632      	mov	r2, r6
 800baee:	4604      	mov	r4, r0
 800baf0:	460d      	mov	r5, r1
 800baf2:	463b      	mov	r3, r7
 800baf4:	4640      	mov	r0, r8
 800baf6:	4649      	mov	r1, r9
 800baf8:	f7f4 fd7e 	bl	80005f8 <__aeabi_dmul>
 800bafc:	4632      	mov	r2, r6
 800bafe:	463b      	mov	r3, r7
 800bb00:	f7f4 fbc4 	bl	800028c <__adddf3>
 800bb04:	4602      	mov	r2, r0
 800bb06:	460b      	mov	r3, r1
 800bb08:	4620      	mov	r0, r4
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	f7f4 fbbc 	bl	8000288 <__aeabi_dsub>
 800bb10:	4642      	mov	r2, r8
 800bb12:	464b      	mov	r3, r9
 800bb14:	f7f4 fbb8 	bl	8000288 <__aeabi_dsub>
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	493a      	ldr	r1, [pc, #232]	; (800bc08 <__ieee754_pow+0xa30>)
 800bb1e:	2000      	movs	r0, #0
 800bb20:	f7f4 fbb2 	bl	8000288 <__aeabi_dsub>
 800bb24:	e9cd 0100 	strd	r0, r1, [sp]
 800bb28:	9b01      	ldr	r3, [sp, #4]
 800bb2a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bb2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb32:	da2f      	bge.n	800bb94 <__ieee754_pow+0x9bc>
 800bb34:	4650      	mov	r0, sl
 800bb36:	ed9d 0b00 	vldr	d0, [sp]
 800bb3a:	f000 f9cd 	bl	800bed8 <scalbn>
 800bb3e:	ec51 0b10 	vmov	r0, r1, d0
 800bb42:	ec53 2b18 	vmov	r2, r3, d8
 800bb46:	f7ff bbe0 	b.w	800b30a <__ieee754_pow+0x132>
 800bb4a:	4b30      	ldr	r3, [pc, #192]	; (800bc0c <__ieee754_pow+0xa34>)
 800bb4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bb50:	429e      	cmp	r6, r3
 800bb52:	f77f af0b 	ble.w	800b96c <__ieee754_pow+0x794>
 800bb56:	4b2e      	ldr	r3, [pc, #184]	; (800bc10 <__ieee754_pow+0xa38>)
 800bb58:	440b      	add	r3, r1
 800bb5a:	4303      	orrs	r3, r0
 800bb5c:	d00b      	beq.n	800bb76 <__ieee754_pow+0x99e>
 800bb5e:	a326      	add	r3, pc, #152	; (adr r3, 800bbf8 <__ieee754_pow+0xa20>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	ec51 0b18 	vmov	r0, r1, d8
 800bb68:	f7f4 fd46 	bl	80005f8 <__aeabi_dmul>
 800bb6c:	a322      	add	r3, pc, #136	; (adr r3, 800bbf8 <__ieee754_pow+0xa20>)
 800bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb72:	f7ff bbca 	b.w	800b30a <__ieee754_pow+0x132>
 800bb76:	4622      	mov	r2, r4
 800bb78:	462b      	mov	r3, r5
 800bb7a:	f7f4 fb85 	bl	8000288 <__aeabi_dsub>
 800bb7e:	4642      	mov	r2, r8
 800bb80:	464b      	mov	r3, r9
 800bb82:	f7f4 ffbf 	bl	8000b04 <__aeabi_dcmpge>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	f43f aef0 	beq.w	800b96c <__ieee754_pow+0x794>
 800bb8c:	e7e7      	b.n	800bb5e <__ieee754_pow+0x986>
 800bb8e:	f04f 0a00 	mov.w	sl, #0
 800bb92:	e717      	b.n	800b9c4 <__ieee754_pow+0x7ec>
 800bb94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	e7d2      	b.n	800bb42 <__ieee754_pow+0x96a>
 800bb9c:	491a      	ldr	r1, [pc, #104]	; (800bc08 <__ieee754_pow+0xa30>)
 800bb9e:	2000      	movs	r0, #0
 800bba0:	f7ff bb9e 	b.w	800b2e0 <__ieee754_pow+0x108>
 800bba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bba8:	f7ff bb9a 	b.w	800b2e0 <__ieee754_pow+0x108>
 800bbac:	9000      	str	r0, [sp, #0]
 800bbae:	f7ff bb76 	b.w	800b29e <__ieee754_pow+0xc6>
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	f7ff bb60 	b.w	800b278 <__ieee754_pow+0xa0>
 800bbb8:	00000000 	.word	0x00000000
 800bbbc:	3fe62e43 	.word	0x3fe62e43
 800bbc0:	fefa39ef 	.word	0xfefa39ef
 800bbc4:	3fe62e42 	.word	0x3fe62e42
 800bbc8:	0ca86c39 	.word	0x0ca86c39
 800bbcc:	be205c61 	.word	0xbe205c61
 800bbd0:	72bea4d0 	.word	0x72bea4d0
 800bbd4:	3e663769 	.word	0x3e663769
 800bbd8:	c5d26bf1 	.word	0xc5d26bf1
 800bbdc:	3ebbbd41 	.word	0x3ebbbd41
 800bbe0:	af25de2c 	.word	0xaf25de2c
 800bbe4:	3f11566a 	.word	0x3f11566a
 800bbe8:	16bebd93 	.word	0x16bebd93
 800bbec:	3f66c16c 	.word	0x3f66c16c
 800bbf0:	5555553e 	.word	0x5555553e
 800bbf4:	3fc55555 	.word	0x3fc55555
 800bbf8:	c2f8f359 	.word	0xc2f8f359
 800bbfc:	01a56e1f 	.word	0x01a56e1f
 800bc00:	3fe00000 	.word	0x3fe00000
 800bc04:	000fffff 	.word	0x000fffff
 800bc08:	3ff00000 	.word	0x3ff00000
 800bc0c:	4090cbff 	.word	0x4090cbff
 800bc10:	3f6f3400 	.word	0x3f6f3400
 800bc14:	652b82fe 	.word	0x652b82fe
 800bc18:	3c971547 	.word	0x3c971547

0800bc1c <__ieee754_sqrt>:
 800bc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc20:	ec55 4b10 	vmov	r4, r5, d0
 800bc24:	4e56      	ldr	r6, [pc, #344]	; (800bd80 <__ieee754_sqrt+0x164>)
 800bc26:	43ae      	bics	r6, r5
 800bc28:	ee10 0a10 	vmov	r0, s0
 800bc2c:	ee10 3a10 	vmov	r3, s0
 800bc30:	4629      	mov	r1, r5
 800bc32:	462a      	mov	r2, r5
 800bc34:	d110      	bne.n	800bc58 <__ieee754_sqrt+0x3c>
 800bc36:	ee10 2a10 	vmov	r2, s0
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	f7f4 fcdc 	bl	80005f8 <__aeabi_dmul>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	4620      	mov	r0, r4
 800bc46:	4629      	mov	r1, r5
 800bc48:	f7f4 fb20 	bl	800028c <__adddf3>
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	460d      	mov	r5, r1
 800bc50:	ec45 4b10 	vmov	d0, r4, r5
 800bc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc58:	2d00      	cmp	r5, #0
 800bc5a:	dc10      	bgt.n	800bc7e <__ieee754_sqrt+0x62>
 800bc5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc60:	4330      	orrs	r0, r6
 800bc62:	d0f5      	beq.n	800bc50 <__ieee754_sqrt+0x34>
 800bc64:	b15d      	cbz	r5, 800bc7e <__ieee754_sqrt+0x62>
 800bc66:	ee10 2a10 	vmov	r2, s0
 800bc6a:	462b      	mov	r3, r5
 800bc6c:	ee10 0a10 	vmov	r0, s0
 800bc70:	f7f4 fb0a 	bl	8000288 <__aeabi_dsub>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	f7f4 fde8 	bl	800084c <__aeabi_ddiv>
 800bc7c:	e7e6      	b.n	800bc4c <__ieee754_sqrt+0x30>
 800bc7e:	1509      	asrs	r1, r1, #20
 800bc80:	d076      	beq.n	800bd70 <__ieee754_sqrt+0x154>
 800bc82:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bc86:	07ce      	lsls	r6, r1, #31
 800bc88:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bc8c:	bf5e      	ittt	pl
 800bc8e:	0fda      	lsrpl	r2, r3, #31
 800bc90:	005b      	lslpl	r3, r3, #1
 800bc92:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bc96:	0fda      	lsrs	r2, r3, #31
 800bc98:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bc9c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bca0:	2000      	movs	r0, #0
 800bca2:	106d      	asrs	r5, r5, #1
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	f04f 0e16 	mov.w	lr, #22
 800bcaa:	4684      	mov	ip, r0
 800bcac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcb0:	eb0c 0401 	add.w	r4, ip, r1
 800bcb4:	4294      	cmp	r4, r2
 800bcb6:	bfde      	ittt	le
 800bcb8:	1b12      	suble	r2, r2, r4
 800bcba:	eb04 0c01 	addle.w	ip, r4, r1
 800bcbe:	1840      	addle	r0, r0, r1
 800bcc0:	0052      	lsls	r2, r2, #1
 800bcc2:	f1be 0e01 	subs.w	lr, lr, #1
 800bcc6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bcca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bcce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bcd2:	d1ed      	bne.n	800bcb0 <__ieee754_sqrt+0x94>
 800bcd4:	4671      	mov	r1, lr
 800bcd6:	2720      	movs	r7, #32
 800bcd8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bcdc:	4562      	cmp	r2, ip
 800bcde:	eb04 060e 	add.w	r6, r4, lr
 800bce2:	dc02      	bgt.n	800bcea <__ieee754_sqrt+0xce>
 800bce4:	d113      	bne.n	800bd0e <__ieee754_sqrt+0xf2>
 800bce6:	429e      	cmp	r6, r3
 800bce8:	d811      	bhi.n	800bd0e <__ieee754_sqrt+0xf2>
 800bcea:	2e00      	cmp	r6, #0
 800bcec:	eb06 0e04 	add.w	lr, r6, r4
 800bcf0:	da43      	bge.n	800bd7a <__ieee754_sqrt+0x15e>
 800bcf2:	f1be 0f00 	cmp.w	lr, #0
 800bcf6:	db40      	blt.n	800bd7a <__ieee754_sqrt+0x15e>
 800bcf8:	f10c 0801 	add.w	r8, ip, #1
 800bcfc:	eba2 020c 	sub.w	r2, r2, ip
 800bd00:	429e      	cmp	r6, r3
 800bd02:	bf88      	it	hi
 800bd04:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bd08:	1b9b      	subs	r3, r3, r6
 800bd0a:	4421      	add	r1, r4
 800bd0c:	46c4      	mov	ip, r8
 800bd0e:	0052      	lsls	r2, r2, #1
 800bd10:	3f01      	subs	r7, #1
 800bd12:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bd16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bd1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd1e:	d1dd      	bne.n	800bcdc <__ieee754_sqrt+0xc0>
 800bd20:	4313      	orrs	r3, r2
 800bd22:	d006      	beq.n	800bd32 <__ieee754_sqrt+0x116>
 800bd24:	1c4c      	adds	r4, r1, #1
 800bd26:	bf13      	iteet	ne
 800bd28:	3101      	addne	r1, #1
 800bd2a:	3001      	addeq	r0, #1
 800bd2c:	4639      	moveq	r1, r7
 800bd2e:	f021 0101 	bicne.w	r1, r1, #1
 800bd32:	1043      	asrs	r3, r0, #1
 800bd34:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bd38:	0849      	lsrs	r1, r1, #1
 800bd3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bd3e:	07c2      	lsls	r2, r0, #31
 800bd40:	bf48      	it	mi
 800bd42:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bd46:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	463d      	mov	r5, r7
 800bd4e:	e77f      	b.n	800bc50 <__ieee754_sqrt+0x34>
 800bd50:	0ada      	lsrs	r2, r3, #11
 800bd52:	3815      	subs	r0, #21
 800bd54:	055b      	lsls	r3, r3, #21
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	d0fa      	beq.n	800bd50 <__ieee754_sqrt+0x134>
 800bd5a:	02d7      	lsls	r7, r2, #11
 800bd5c:	d50a      	bpl.n	800bd74 <__ieee754_sqrt+0x158>
 800bd5e:	f1c1 0420 	rsb	r4, r1, #32
 800bd62:	fa23 f404 	lsr.w	r4, r3, r4
 800bd66:	1e4d      	subs	r5, r1, #1
 800bd68:	408b      	lsls	r3, r1
 800bd6a:	4322      	orrs	r2, r4
 800bd6c:	1b41      	subs	r1, r0, r5
 800bd6e:	e788      	b.n	800bc82 <__ieee754_sqrt+0x66>
 800bd70:	4608      	mov	r0, r1
 800bd72:	e7f0      	b.n	800bd56 <__ieee754_sqrt+0x13a>
 800bd74:	0052      	lsls	r2, r2, #1
 800bd76:	3101      	adds	r1, #1
 800bd78:	e7ef      	b.n	800bd5a <__ieee754_sqrt+0x13e>
 800bd7a:	46e0      	mov	r8, ip
 800bd7c:	e7be      	b.n	800bcfc <__ieee754_sqrt+0xe0>
 800bd7e:	bf00      	nop
 800bd80:	7ff00000 	.word	0x7ff00000

0800bd84 <fabs>:
 800bd84:	ec51 0b10 	vmov	r0, r1, d0
 800bd88:	ee10 2a10 	vmov	r2, s0
 800bd8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd90:	ec43 2b10 	vmov	d0, r2, r3
 800bd94:	4770      	bx	lr

0800bd96 <finite>:
 800bd96:	b082      	sub	sp, #8
 800bd98:	ed8d 0b00 	vstr	d0, [sp]
 800bd9c:	9801      	ldr	r0, [sp, #4]
 800bd9e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bda2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bda6:	0fc0      	lsrs	r0, r0, #31
 800bda8:	b002      	add	sp, #8
 800bdaa:	4770      	bx	lr
 800bdac:	0000      	movs	r0, r0
	...

0800bdb0 <nan>:
 800bdb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bdb8 <nan+0x8>
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	00000000 	.word	0x00000000
 800bdbc:	7ff80000 	.word	0x7ff80000

0800bdc0 <rint>:
 800bdc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdc2:	ec51 0b10 	vmov	r0, r1, d0
 800bdc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bdca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800bdce:	2e13      	cmp	r6, #19
 800bdd0:	ee10 4a10 	vmov	r4, s0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800bdda:	dc58      	bgt.n	800be8e <rint+0xce>
 800bddc:	2e00      	cmp	r6, #0
 800bdde:	da2b      	bge.n	800be38 <rint+0x78>
 800bde0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bde4:	4302      	orrs	r2, r0
 800bde6:	d023      	beq.n	800be30 <rint+0x70>
 800bde8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800bdec:	4302      	orrs	r2, r0
 800bdee:	4254      	negs	r4, r2
 800bdf0:	4314      	orrs	r4, r2
 800bdf2:	0c4b      	lsrs	r3, r1, #17
 800bdf4:	0b24      	lsrs	r4, r4, #12
 800bdf6:	045b      	lsls	r3, r3, #17
 800bdf8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800bdfc:	ea44 0103 	orr.w	r1, r4, r3
 800be00:	4b32      	ldr	r3, [pc, #200]	; (800becc <rint+0x10c>)
 800be02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800be06:	e9d3 6700 	ldrd	r6, r7, [r3]
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	4630      	mov	r0, r6
 800be10:	4639      	mov	r1, r7
 800be12:	f7f4 fa3b 	bl	800028c <__adddf3>
 800be16:	e9cd 0100 	strd	r0, r1, [sp]
 800be1a:	463b      	mov	r3, r7
 800be1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be20:	4632      	mov	r2, r6
 800be22:	f7f4 fa31 	bl	8000288 <__aeabi_dsub>
 800be26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be2a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800be2e:	4639      	mov	r1, r7
 800be30:	ec41 0b10 	vmov	d0, r0, r1
 800be34:	b003      	add	sp, #12
 800be36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be38:	4a25      	ldr	r2, [pc, #148]	; (800bed0 <rint+0x110>)
 800be3a:	4132      	asrs	r2, r6
 800be3c:	ea01 0702 	and.w	r7, r1, r2
 800be40:	4307      	orrs	r7, r0
 800be42:	d0f5      	beq.n	800be30 <rint+0x70>
 800be44:	0851      	lsrs	r1, r2, #1
 800be46:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800be4a:	4314      	orrs	r4, r2
 800be4c:	d00c      	beq.n	800be68 <rint+0xa8>
 800be4e:	ea23 0201 	bic.w	r2, r3, r1
 800be52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800be56:	2e13      	cmp	r6, #19
 800be58:	fa43 f606 	asr.w	r6, r3, r6
 800be5c:	bf0c      	ite	eq
 800be5e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800be62:	2400      	movne	r4, #0
 800be64:	ea42 0306 	orr.w	r3, r2, r6
 800be68:	4918      	ldr	r1, [pc, #96]	; (800becc <rint+0x10c>)
 800be6a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800be6e:	4622      	mov	r2, r4
 800be70:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be74:	4620      	mov	r0, r4
 800be76:	4629      	mov	r1, r5
 800be78:	f7f4 fa08 	bl	800028c <__adddf3>
 800be7c:	e9cd 0100 	strd	r0, r1, [sp]
 800be80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be84:	4622      	mov	r2, r4
 800be86:	462b      	mov	r3, r5
 800be88:	f7f4 f9fe 	bl	8000288 <__aeabi_dsub>
 800be8c:	e7d0      	b.n	800be30 <rint+0x70>
 800be8e:	2e33      	cmp	r6, #51	; 0x33
 800be90:	dd07      	ble.n	800bea2 <rint+0xe2>
 800be92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800be96:	d1cb      	bne.n	800be30 <rint+0x70>
 800be98:	ee10 2a10 	vmov	r2, s0
 800be9c:	f7f4 f9f6 	bl	800028c <__adddf3>
 800bea0:	e7c6      	b.n	800be30 <rint+0x70>
 800bea2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bea6:	f04f 36ff 	mov.w	r6, #4294967295
 800beaa:	40d6      	lsrs	r6, r2
 800beac:	4230      	tst	r0, r6
 800beae:	d0bf      	beq.n	800be30 <rint+0x70>
 800beb0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800beb4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800beb8:	bf1f      	itttt	ne
 800beba:	ea24 0101 	bicne.w	r1, r4, r1
 800bebe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800bec2:	fa44 f202 	asrne.w	r2, r4, r2
 800bec6:	ea41 0402 	orrne.w	r4, r1, r2
 800beca:	e7cd      	b.n	800be68 <rint+0xa8>
 800becc:	0800ee48 	.word	0x0800ee48
 800bed0:	000fffff 	.word	0x000fffff
 800bed4:	00000000 	.word	0x00000000

0800bed8 <scalbn>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	ec55 4b10 	vmov	r4, r5, d0
 800bede:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bee2:	4606      	mov	r6, r0
 800bee4:	462b      	mov	r3, r5
 800bee6:	b99a      	cbnz	r2, 800bf10 <scalbn+0x38>
 800bee8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800beec:	4323      	orrs	r3, r4
 800beee:	d036      	beq.n	800bf5e <scalbn+0x86>
 800bef0:	4b39      	ldr	r3, [pc, #228]	; (800bfd8 <scalbn+0x100>)
 800bef2:	4629      	mov	r1, r5
 800bef4:	ee10 0a10 	vmov	r0, s0
 800bef8:	2200      	movs	r2, #0
 800befa:	f7f4 fb7d 	bl	80005f8 <__aeabi_dmul>
 800befe:	4b37      	ldr	r3, [pc, #220]	; (800bfdc <scalbn+0x104>)
 800bf00:	429e      	cmp	r6, r3
 800bf02:	4604      	mov	r4, r0
 800bf04:	460d      	mov	r5, r1
 800bf06:	da10      	bge.n	800bf2a <scalbn+0x52>
 800bf08:	a32b      	add	r3, pc, #172	; (adr r3, 800bfb8 <scalbn+0xe0>)
 800bf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0e:	e03a      	b.n	800bf86 <scalbn+0xae>
 800bf10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bf14:	428a      	cmp	r2, r1
 800bf16:	d10c      	bne.n	800bf32 <scalbn+0x5a>
 800bf18:	ee10 2a10 	vmov	r2, s0
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	4629      	mov	r1, r5
 800bf20:	f7f4 f9b4 	bl	800028c <__adddf3>
 800bf24:	4604      	mov	r4, r0
 800bf26:	460d      	mov	r5, r1
 800bf28:	e019      	b.n	800bf5e <scalbn+0x86>
 800bf2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf2e:	460b      	mov	r3, r1
 800bf30:	3a36      	subs	r2, #54	; 0x36
 800bf32:	4432      	add	r2, r6
 800bf34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bf38:	428a      	cmp	r2, r1
 800bf3a:	dd08      	ble.n	800bf4e <scalbn+0x76>
 800bf3c:	2d00      	cmp	r5, #0
 800bf3e:	a120      	add	r1, pc, #128	; (adr r1, 800bfc0 <scalbn+0xe8>)
 800bf40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf44:	da1c      	bge.n	800bf80 <scalbn+0xa8>
 800bf46:	a120      	add	r1, pc, #128	; (adr r1, 800bfc8 <scalbn+0xf0>)
 800bf48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf4c:	e018      	b.n	800bf80 <scalbn+0xa8>
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	dd08      	ble.n	800bf64 <scalbn+0x8c>
 800bf52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf5e:	ec45 4b10 	vmov	d0, r4, r5
 800bf62:	bd70      	pop	{r4, r5, r6, pc}
 800bf64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bf68:	da19      	bge.n	800bf9e <scalbn+0xc6>
 800bf6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bf6e:	429e      	cmp	r6, r3
 800bf70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bf74:	dd0a      	ble.n	800bf8c <scalbn+0xb4>
 800bf76:	a112      	add	r1, pc, #72	; (adr r1, 800bfc0 <scalbn+0xe8>)
 800bf78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1e2      	bne.n	800bf46 <scalbn+0x6e>
 800bf80:	a30f      	add	r3, pc, #60	; (adr r3, 800bfc0 <scalbn+0xe8>)
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	f7f4 fb37 	bl	80005f8 <__aeabi_dmul>
 800bf8a:	e7cb      	b.n	800bf24 <scalbn+0x4c>
 800bf8c:	a10a      	add	r1, pc, #40	; (adr r1, 800bfb8 <scalbn+0xe0>)
 800bf8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0b8      	beq.n	800bf08 <scalbn+0x30>
 800bf96:	a10e      	add	r1, pc, #56	; (adr r1, 800bfd0 <scalbn+0xf8>)
 800bf98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf9c:	e7b4      	b.n	800bf08 <scalbn+0x30>
 800bf9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bfa2:	3236      	adds	r2, #54	; 0x36
 800bfa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bfa8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bfac:	4620      	mov	r0, r4
 800bfae:	4b0c      	ldr	r3, [pc, #48]	; (800bfe0 <scalbn+0x108>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	e7e8      	b.n	800bf86 <scalbn+0xae>
 800bfb4:	f3af 8000 	nop.w
 800bfb8:	c2f8f359 	.word	0xc2f8f359
 800bfbc:	01a56e1f 	.word	0x01a56e1f
 800bfc0:	8800759c 	.word	0x8800759c
 800bfc4:	7e37e43c 	.word	0x7e37e43c
 800bfc8:	8800759c 	.word	0x8800759c
 800bfcc:	fe37e43c 	.word	0xfe37e43c
 800bfd0:	c2f8f359 	.word	0xc2f8f359
 800bfd4:	81a56e1f 	.word	0x81a56e1f
 800bfd8:	43500000 	.word	0x43500000
 800bfdc:	ffff3cb0 	.word	0xffff3cb0
 800bfe0:	3c900000 	.word	0x3c900000

0800bfe4 <__errno>:
 800bfe4:	4b01      	ldr	r3, [pc, #4]	; (800bfec <__errno+0x8>)
 800bfe6:	6818      	ldr	r0, [r3, #0]
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	20000194 	.word	0x20000194

0800bff0 <__libc_init_array>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	4d0d      	ldr	r5, [pc, #52]	; (800c028 <__libc_init_array+0x38>)
 800bff4:	4c0d      	ldr	r4, [pc, #52]	; (800c02c <__libc_init_array+0x3c>)
 800bff6:	1b64      	subs	r4, r4, r5
 800bff8:	10a4      	asrs	r4, r4, #2
 800bffa:	2600      	movs	r6, #0
 800bffc:	42a6      	cmp	r6, r4
 800bffe:	d109      	bne.n	800c014 <__libc_init_array+0x24>
 800c000:	4d0b      	ldr	r5, [pc, #44]	; (800c030 <__libc_init_array+0x40>)
 800c002:	4c0c      	ldr	r4, [pc, #48]	; (800c034 <__libc_init_array+0x44>)
 800c004:	f002 fec2 	bl	800ed8c <_init>
 800c008:	1b64      	subs	r4, r4, r5
 800c00a:	10a4      	asrs	r4, r4, #2
 800c00c:	2600      	movs	r6, #0
 800c00e:	42a6      	cmp	r6, r4
 800c010:	d105      	bne.n	800c01e <__libc_init_array+0x2e>
 800c012:	bd70      	pop	{r4, r5, r6, pc}
 800c014:	f855 3b04 	ldr.w	r3, [r5], #4
 800c018:	4798      	blx	r3
 800c01a:	3601      	adds	r6, #1
 800c01c:	e7ee      	b.n	800bffc <__libc_init_array+0xc>
 800c01e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c022:	4798      	blx	r3
 800c024:	3601      	adds	r6, #1
 800c026:	e7f2      	b.n	800c00e <__libc_init_array+0x1e>
 800c028:	0800f244 	.word	0x0800f244
 800c02c:	0800f244 	.word	0x0800f244
 800c030:	0800f244 	.word	0x0800f244
 800c034:	0800f248 	.word	0x0800f248

0800c038 <memset>:
 800c038:	4402      	add	r2, r0
 800c03a:	4603      	mov	r3, r0
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d100      	bne.n	800c042 <memset+0xa>
 800c040:	4770      	bx	lr
 800c042:	f803 1b01 	strb.w	r1, [r3], #1
 800c046:	e7f9      	b.n	800c03c <memset+0x4>

0800c048 <__cvt>:
 800c048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c04c:	ec55 4b10 	vmov	r4, r5, d0
 800c050:	2d00      	cmp	r5, #0
 800c052:	460e      	mov	r6, r1
 800c054:	4619      	mov	r1, r3
 800c056:	462b      	mov	r3, r5
 800c058:	bfbb      	ittet	lt
 800c05a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c05e:	461d      	movlt	r5, r3
 800c060:	2300      	movge	r3, #0
 800c062:	232d      	movlt	r3, #45	; 0x2d
 800c064:	700b      	strb	r3, [r1, #0]
 800c066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c068:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c06c:	4691      	mov	r9, r2
 800c06e:	f023 0820 	bic.w	r8, r3, #32
 800c072:	bfbc      	itt	lt
 800c074:	4622      	movlt	r2, r4
 800c076:	4614      	movlt	r4, r2
 800c078:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c07c:	d005      	beq.n	800c08a <__cvt+0x42>
 800c07e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c082:	d100      	bne.n	800c086 <__cvt+0x3e>
 800c084:	3601      	adds	r6, #1
 800c086:	2102      	movs	r1, #2
 800c088:	e000      	b.n	800c08c <__cvt+0x44>
 800c08a:	2103      	movs	r1, #3
 800c08c:	ab03      	add	r3, sp, #12
 800c08e:	9301      	str	r3, [sp, #4]
 800c090:	ab02      	add	r3, sp, #8
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	ec45 4b10 	vmov	d0, r4, r5
 800c098:	4653      	mov	r3, sl
 800c09a:	4632      	mov	r2, r6
 800c09c:	f000 fcf8 	bl	800ca90 <_dtoa_r>
 800c0a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	d102      	bne.n	800c0ae <__cvt+0x66>
 800c0a8:	f019 0f01 	tst.w	r9, #1
 800c0ac:	d022      	beq.n	800c0f4 <__cvt+0xac>
 800c0ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0b2:	eb07 0906 	add.w	r9, r7, r6
 800c0b6:	d110      	bne.n	800c0da <__cvt+0x92>
 800c0b8:	783b      	ldrb	r3, [r7, #0]
 800c0ba:	2b30      	cmp	r3, #48	; 0x30
 800c0bc:	d10a      	bne.n	800c0d4 <__cvt+0x8c>
 800c0be:	2200      	movs	r2, #0
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7f4 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0ca:	b918      	cbnz	r0, 800c0d4 <__cvt+0x8c>
 800c0cc:	f1c6 0601 	rsb	r6, r6, #1
 800c0d0:	f8ca 6000 	str.w	r6, [sl]
 800c0d4:	f8da 3000 	ldr.w	r3, [sl]
 800c0d8:	4499      	add	r9, r3
 800c0da:	2200      	movs	r2, #0
 800c0dc:	2300      	movs	r3, #0
 800c0de:	4620      	mov	r0, r4
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	f7f4 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0e6:	b108      	cbz	r0, 800c0ec <__cvt+0xa4>
 800c0e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c0ec:	2230      	movs	r2, #48	; 0x30
 800c0ee:	9b03      	ldr	r3, [sp, #12]
 800c0f0:	454b      	cmp	r3, r9
 800c0f2:	d307      	bcc.n	800c104 <__cvt+0xbc>
 800c0f4:	9b03      	ldr	r3, [sp, #12]
 800c0f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0f8:	1bdb      	subs	r3, r3, r7
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	6013      	str	r3, [r2, #0]
 800c0fe:	b004      	add	sp, #16
 800c100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c104:	1c59      	adds	r1, r3, #1
 800c106:	9103      	str	r1, [sp, #12]
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	e7f0      	b.n	800c0ee <__cvt+0xa6>

0800c10c <__exponent>:
 800c10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c10e:	4603      	mov	r3, r0
 800c110:	2900      	cmp	r1, #0
 800c112:	bfb8      	it	lt
 800c114:	4249      	neglt	r1, r1
 800c116:	f803 2b02 	strb.w	r2, [r3], #2
 800c11a:	bfb4      	ite	lt
 800c11c:	222d      	movlt	r2, #45	; 0x2d
 800c11e:	222b      	movge	r2, #43	; 0x2b
 800c120:	2909      	cmp	r1, #9
 800c122:	7042      	strb	r2, [r0, #1]
 800c124:	dd2a      	ble.n	800c17c <__exponent+0x70>
 800c126:	f10d 0407 	add.w	r4, sp, #7
 800c12a:	46a4      	mov	ip, r4
 800c12c:	270a      	movs	r7, #10
 800c12e:	46a6      	mov	lr, r4
 800c130:	460a      	mov	r2, r1
 800c132:	fb91 f6f7 	sdiv	r6, r1, r7
 800c136:	fb07 1516 	mls	r5, r7, r6, r1
 800c13a:	3530      	adds	r5, #48	; 0x30
 800c13c:	2a63      	cmp	r2, #99	; 0x63
 800c13e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c142:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c146:	4631      	mov	r1, r6
 800c148:	dcf1      	bgt.n	800c12e <__exponent+0x22>
 800c14a:	3130      	adds	r1, #48	; 0x30
 800c14c:	f1ae 0502 	sub.w	r5, lr, #2
 800c150:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c154:	1c44      	adds	r4, r0, #1
 800c156:	4629      	mov	r1, r5
 800c158:	4561      	cmp	r1, ip
 800c15a:	d30a      	bcc.n	800c172 <__exponent+0x66>
 800c15c:	f10d 0209 	add.w	r2, sp, #9
 800c160:	eba2 020e 	sub.w	r2, r2, lr
 800c164:	4565      	cmp	r5, ip
 800c166:	bf88      	it	hi
 800c168:	2200      	movhi	r2, #0
 800c16a:	4413      	add	r3, r2
 800c16c:	1a18      	subs	r0, r3, r0
 800c16e:	b003      	add	sp, #12
 800c170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c172:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c176:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c17a:	e7ed      	b.n	800c158 <__exponent+0x4c>
 800c17c:	2330      	movs	r3, #48	; 0x30
 800c17e:	3130      	adds	r1, #48	; 0x30
 800c180:	7083      	strb	r3, [r0, #2]
 800c182:	70c1      	strb	r1, [r0, #3]
 800c184:	1d03      	adds	r3, r0, #4
 800c186:	e7f1      	b.n	800c16c <__exponent+0x60>

0800c188 <_printf_float>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	ed2d 8b02 	vpush	{d8}
 800c190:	b08d      	sub	sp, #52	; 0x34
 800c192:	460c      	mov	r4, r1
 800c194:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c198:	4616      	mov	r6, r2
 800c19a:	461f      	mov	r7, r3
 800c19c:	4605      	mov	r5, r0
 800c19e:	f001 fa63 	bl	800d668 <_localeconv_r>
 800c1a2:	f8d0 a000 	ldr.w	sl, [r0]
 800c1a6:	4650      	mov	r0, sl
 800c1a8:	f7f4 f812 	bl	80001d0 <strlen>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	9305      	str	r3, [sp, #20]
 800c1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c1b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c1bc:	3307      	adds	r3, #7
 800c1be:	f023 0307 	bic.w	r3, r3, #7
 800c1c2:	f103 0208 	add.w	r2, r3, #8
 800c1c6:	f8c8 2000 	str.w	r2, [r8]
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c1d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c1d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c1da:	9307      	str	r3, [sp, #28]
 800c1dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800c1e0:	ee08 0a10 	vmov	s16, r0
 800c1e4:	4b9f      	ldr	r3, [pc, #636]	; (800c464 <_printf_float+0x2dc>)
 800c1e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ee:	f7f4 fc9d 	bl	8000b2c <__aeabi_dcmpun>
 800c1f2:	bb88      	cbnz	r0, 800c258 <_printf_float+0xd0>
 800c1f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1f8:	4b9a      	ldr	r3, [pc, #616]	; (800c464 <_printf_float+0x2dc>)
 800c1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c1fe:	f7f4 fc77 	bl	8000af0 <__aeabi_dcmple>
 800c202:	bb48      	cbnz	r0, 800c258 <_printf_float+0xd0>
 800c204:	2200      	movs	r2, #0
 800c206:	2300      	movs	r3, #0
 800c208:	4640      	mov	r0, r8
 800c20a:	4649      	mov	r1, r9
 800c20c:	f7f4 fc66 	bl	8000adc <__aeabi_dcmplt>
 800c210:	b110      	cbz	r0, 800c218 <_printf_float+0x90>
 800c212:	232d      	movs	r3, #45	; 0x2d
 800c214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c218:	4b93      	ldr	r3, [pc, #588]	; (800c468 <_printf_float+0x2e0>)
 800c21a:	4894      	ldr	r0, [pc, #592]	; (800c46c <_printf_float+0x2e4>)
 800c21c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c220:	bf94      	ite	ls
 800c222:	4698      	movls	r8, r3
 800c224:	4680      	movhi	r8, r0
 800c226:	2303      	movs	r3, #3
 800c228:	6123      	str	r3, [r4, #16]
 800c22a:	9b05      	ldr	r3, [sp, #20]
 800c22c:	f023 0204 	bic.w	r2, r3, #4
 800c230:	6022      	str	r2, [r4, #0]
 800c232:	f04f 0900 	mov.w	r9, #0
 800c236:	9700      	str	r7, [sp, #0]
 800c238:	4633      	mov	r3, r6
 800c23a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c23c:	4621      	mov	r1, r4
 800c23e:	4628      	mov	r0, r5
 800c240:	f000 f9d8 	bl	800c5f4 <_printf_common>
 800c244:	3001      	adds	r0, #1
 800c246:	f040 8090 	bne.w	800c36a <_printf_float+0x1e2>
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	b00d      	add	sp, #52	; 0x34
 800c250:	ecbd 8b02 	vpop	{d8}
 800c254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c258:	4642      	mov	r2, r8
 800c25a:	464b      	mov	r3, r9
 800c25c:	4640      	mov	r0, r8
 800c25e:	4649      	mov	r1, r9
 800c260:	f7f4 fc64 	bl	8000b2c <__aeabi_dcmpun>
 800c264:	b140      	cbz	r0, 800c278 <_printf_float+0xf0>
 800c266:	464b      	mov	r3, r9
 800c268:	2b00      	cmp	r3, #0
 800c26a:	bfbc      	itt	lt
 800c26c:	232d      	movlt	r3, #45	; 0x2d
 800c26e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c272:	487f      	ldr	r0, [pc, #508]	; (800c470 <_printf_float+0x2e8>)
 800c274:	4b7f      	ldr	r3, [pc, #508]	; (800c474 <_printf_float+0x2ec>)
 800c276:	e7d1      	b.n	800c21c <_printf_float+0x94>
 800c278:	6863      	ldr	r3, [r4, #4]
 800c27a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c27e:	9206      	str	r2, [sp, #24]
 800c280:	1c5a      	adds	r2, r3, #1
 800c282:	d13f      	bne.n	800c304 <_printf_float+0x17c>
 800c284:	2306      	movs	r3, #6
 800c286:	6063      	str	r3, [r4, #4]
 800c288:	9b05      	ldr	r3, [sp, #20]
 800c28a:	6861      	ldr	r1, [r4, #4]
 800c28c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c290:	2300      	movs	r3, #0
 800c292:	9303      	str	r3, [sp, #12]
 800c294:	ab0a      	add	r3, sp, #40	; 0x28
 800c296:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c29a:	ab09      	add	r3, sp, #36	; 0x24
 800c29c:	ec49 8b10 	vmov	d0, r8, r9
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	6022      	str	r2, [r4, #0]
 800c2a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f7ff fecd 	bl	800c048 <__cvt>
 800c2ae:	9b06      	ldr	r3, [sp, #24]
 800c2b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2b2:	2b47      	cmp	r3, #71	; 0x47
 800c2b4:	4680      	mov	r8, r0
 800c2b6:	d108      	bne.n	800c2ca <_printf_float+0x142>
 800c2b8:	1cc8      	adds	r0, r1, #3
 800c2ba:	db02      	blt.n	800c2c2 <_printf_float+0x13a>
 800c2bc:	6863      	ldr	r3, [r4, #4]
 800c2be:	4299      	cmp	r1, r3
 800c2c0:	dd41      	ble.n	800c346 <_printf_float+0x1be>
 800c2c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800c2c6:	fa5f fb8b 	uxtb.w	fp, fp
 800c2ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c2ce:	d820      	bhi.n	800c312 <_printf_float+0x18a>
 800c2d0:	3901      	subs	r1, #1
 800c2d2:	465a      	mov	r2, fp
 800c2d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c2d8:	9109      	str	r1, [sp, #36]	; 0x24
 800c2da:	f7ff ff17 	bl	800c10c <__exponent>
 800c2de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2e0:	1813      	adds	r3, r2, r0
 800c2e2:	2a01      	cmp	r2, #1
 800c2e4:	4681      	mov	r9, r0
 800c2e6:	6123      	str	r3, [r4, #16]
 800c2e8:	dc02      	bgt.n	800c2f0 <_printf_float+0x168>
 800c2ea:	6822      	ldr	r2, [r4, #0]
 800c2ec:	07d2      	lsls	r2, r2, #31
 800c2ee:	d501      	bpl.n	800c2f4 <_printf_float+0x16c>
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	6123      	str	r3, [r4, #16]
 800c2f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d09c      	beq.n	800c236 <_printf_float+0xae>
 800c2fc:	232d      	movs	r3, #45	; 0x2d
 800c2fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c302:	e798      	b.n	800c236 <_printf_float+0xae>
 800c304:	9a06      	ldr	r2, [sp, #24]
 800c306:	2a47      	cmp	r2, #71	; 0x47
 800c308:	d1be      	bne.n	800c288 <_printf_float+0x100>
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1bc      	bne.n	800c288 <_printf_float+0x100>
 800c30e:	2301      	movs	r3, #1
 800c310:	e7b9      	b.n	800c286 <_printf_float+0xfe>
 800c312:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c316:	d118      	bne.n	800c34a <_printf_float+0x1c2>
 800c318:	2900      	cmp	r1, #0
 800c31a:	6863      	ldr	r3, [r4, #4]
 800c31c:	dd0b      	ble.n	800c336 <_printf_float+0x1ae>
 800c31e:	6121      	str	r1, [r4, #16]
 800c320:	b913      	cbnz	r3, 800c328 <_printf_float+0x1a0>
 800c322:	6822      	ldr	r2, [r4, #0]
 800c324:	07d0      	lsls	r0, r2, #31
 800c326:	d502      	bpl.n	800c32e <_printf_float+0x1a6>
 800c328:	3301      	adds	r3, #1
 800c32a:	440b      	add	r3, r1
 800c32c:	6123      	str	r3, [r4, #16]
 800c32e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c330:	f04f 0900 	mov.w	r9, #0
 800c334:	e7de      	b.n	800c2f4 <_printf_float+0x16c>
 800c336:	b913      	cbnz	r3, 800c33e <_printf_float+0x1b6>
 800c338:	6822      	ldr	r2, [r4, #0]
 800c33a:	07d2      	lsls	r2, r2, #31
 800c33c:	d501      	bpl.n	800c342 <_printf_float+0x1ba>
 800c33e:	3302      	adds	r3, #2
 800c340:	e7f4      	b.n	800c32c <_printf_float+0x1a4>
 800c342:	2301      	movs	r3, #1
 800c344:	e7f2      	b.n	800c32c <_printf_float+0x1a4>
 800c346:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c34c:	4299      	cmp	r1, r3
 800c34e:	db05      	blt.n	800c35c <_printf_float+0x1d4>
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	6121      	str	r1, [r4, #16]
 800c354:	07d8      	lsls	r0, r3, #31
 800c356:	d5ea      	bpl.n	800c32e <_printf_float+0x1a6>
 800c358:	1c4b      	adds	r3, r1, #1
 800c35a:	e7e7      	b.n	800c32c <_printf_float+0x1a4>
 800c35c:	2900      	cmp	r1, #0
 800c35e:	bfd4      	ite	le
 800c360:	f1c1 0202 	rsble	r2, r1, #2
 800c364:	2201      	movgt	r2, #1
 800c366:	4413      	add	r3, r2
 800c368:	e7e0      	b.n	800c32c <_printf_float+0x1a4>
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	055a      	lsls	r2, r3, #21
 800c36e:	d407      	bmi.n	800c380 <_printf_float+0x1f8>
 800c370:	6923      	ldr	r3, [r4, #16]
 800c372:	4642      	mov	r2, r8
 800c374:	4631      	mov	r1, r6
 800c376:	4628      	mov	r0, r5
 800c378:	47b8      	blx	r7
 800c37a:	3001      	adds	r0, #1
 800c37c:	d12c      	bne.n	800c3d8 <_printf_float+0x250>
 800c37e:	e764      	b.n	800c24a <_printf_float+0xc2>
 800c380:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c384:	f240 80e0 	bls.w	800c548 <_printf_float+0x3c0>
 800c388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c38c:	2200      	movs	r2, #0
 800c38e:	2300      	movs	r3, #0
 800c390:	f7f4 fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c394:	2800      	cmp	r0, #0
 800c396:	d034      	beq.n	800c402 <_printf_float+0x27a>
 800c398:	4a37      	ldr	r2, [pc, #220]	; (800c478 <_printf_float+0x2f0>)
 800c39a:	2301      	movs	r3, #1
 800c39c:	4631      	mov	r1, r6
 800c39e:	4628      	mov	r0, r5
 800c3a0:	47b8      	blx	r7
 800c3a2:	3001      	adds	r0, #1
 800c3a4:	f43f af51 	beq.w	800c24a <_printf_float+0xc2>
 800c3a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	db02      	blt.n	800c3b6 <_printf_float+0x22e>
 800c3b0:	6823      	ldr	r3, [r4, #0]
 800c3b2:	07d8      	lsls	r0, r3, #31
 800c3b4:	d510      	bpl.n	800c3d8 <_printf_float+0x250>
 800c3b6:	ee18 3a10 	vmov	r3, s16
 800c3ba:	4652      	mov	r2, sl
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4628      	mov	r0, r5
 800c3c0:	47b8      	blx	r7
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	f43f af41 	beq.w	800c24a <_printf_float+0xc2>
 800c3c8:	f04f 0800 	mov.w	r8, #0
 800c3cc:	f104 091a 	add.w	r9, r4, #26
 800c3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	4543      	cmp	r3, r8
 800c3d6:	dc09      	bgt.n	800c3ec <_printf_float+0x264>
 800c3d8:	6823      	ldr	r3, [r4, #0]
 800c3da:	079b      	lsls	r3, r3, #30
 800c3dc:	f100 8105 	bmi.w	800c5ea <_printf_float+0x462>
 800c3e0:	68e0      	ldr	r0, [r4, #12]
 800c3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e4:	4298      	cmp	r0, r3
 800c3e6:	bfb8      	it	lt
 800c3e8:	4618      	movlt	r0, r3
 800c3ea:	e730      	b.n	800c24e <_printf_float+0xc6>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	464a      	mov	r2, r9
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	47b8      	blx	r7
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	f43f af27 	beq.w	800c24a <_printf_float+0xc2>
 800c3fc:	f108 0801 	add.w	r8, r8, #1
 800c400:	e7e6      	b.n	800c3d0 <_printf_float+0x248>
 800c402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c404:	2b00      	cmp	r3, #0
 800c406:	dc39      	bgt.n	800c47c <_printf_float+0x2f4>
 800c408:	4a1b      	ldr	r2, [pc, #108]	; (800c478 <_printf_float+0x2f0>)
 800c40a:	2301      	movs	r3, #1
 800c40c:	4631      	mov	r1, r6
 800c40e:	4628      	mov	r0, r5
 800c410:	47b8      	blx	r7
 800c412:	3001      	adds	r0, #1
 800c414:	f43f af19 	beq.w	800c24a <_printf_float+0xc2>
 800c418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c41c:	4313      	orrs	r3, r2
 800c41e:	d102      	bne.n	800c426 <_printf_float+0x29e>
 800c420:	6823      	ldr	r3, [r4, #0]
 800c422:	07d9      	lsls	r1, r3, #31
 800c424:	d5d8      	bpl.n	800c3d8 <_printf_float+0x250>
 800c426:	ee18 3a10 	vmov	r3, s16
 800c42a:	4652      	mov	r2, sl
 800c42c:	4631      	mov	r1, r6
 800c42e:	4628      	mov	r0, r5
 800c430:	47b8      	blx	r7
 800c432:	3001      	adds	r0, #1
 800c434:	f43f af09 	beq.w	800c24a <_printf_float+0xc2>
 800c438:	f04f 0900 	mov.w	r9, #0
 800c43c:	f104 0a1a 	add.w	sl, r4, #26
 800c440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c442:	425b      	negs	r3, r3
 800c444:	454b      	cmp	r3, r9
 800c446:	dc01      	bgt.n	800c44c <_printf_float+0x2c4>
 800c448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c44a:	e792      	b.n	800c372 <_printf_float+0x1ea>
 800c44c:	2301      	movs	r3, #1
 800c44e:	4652      	mov	r2, sl
 800c450:	4631      	mov	r1, r6
 800c452:	4628      	mov	r0, r5
 800c454:	47b8      	blx	r7
 800c456:	3001      	adds	r0, #1
 800c458:	f43f aef7 	beq.w	800c24a <_printf_float+0xc2>
 800c45c:	f109 0901 	add.w	r9, r9, #1
 800c460:	e7ee      	b.n	800c440 <_printf_float+0x2b8>
 800c462:	bf00      	nop
 800c464:	7fefffff 	.word	0x7fefffff
 800c468:	0800ee5c 	.word	0x0800ee5c
 800c46c:	0800ee60 	.word	0x0800ee60
 800c470:	0800ee68 	.word	0x0800ee68
 800c474:	0800ee64 	.word	0x0800ee64
 800c478:	0800ee6c 	.word	0x0800ee6c
 800c47c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c47e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c480:	429a      	cmp	r2, r3
 800c482:	bfa8      	it	ge
 800c484:	461a      	movge	r2, r3
 800c486:	2a00      	cmp	r2, #0
 800c488:	4691      	mov	r9, r2
 800c48a:	dc37      	bgt.n	800c4fc <_printf_float+0x374>
 800c48c:	f04f 0b00 	mov.w	fp, #0
 800c490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c494:	f104 021a 	add.w	r2, r4, #26
 800c498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c49a:	9305      	str	r3, [sp, #20]
 800c49c:	eba3 0309 	sub.w	r3, r3, r9
 800c4a0:	455b      	cmp	r3, fp
 800c4a2:	dc33      	bgt.n	800c50c <_printf_float+0x384>
 800c4a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	db3b      	blt.n	800c524 <_printf_float+0x39c>
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	07da      	lsls	r2, r3, #31
 800c4b0:	d438      	bmi.n	800c524 <_printf_float+0x39c>
 800c4b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4b4:	9b05      	ldr	r3, [sp, #20]
 800c4b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	eba2 0901 	sub.w	r9, r2, r1
 800c4be:	4599      	cmp	r9, r3
 800c4c0:	bfa8      	it	ge
 800c4c2:	4699      	movge	r9, r3
 800c4c4:	f1b9 0f00 	cmp.w	r9, #0
 800c4c8:	dc35      	bgt.n	800c536 <_printf_float+0x3ae>
 800c4ca:	f04f 0800 	mov.w	r8, #0
 800c4ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4d2:	f104 0a1a 	add.w	sl, r4, #26
 800c4d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4da:	1a9b      	subs	r3, r3, r2
 800c4dc:	eba3 0309 	sub.w	r3, r3, r9
 800c4e0:	4543      	cmp	r3, r8
 800c4e2:	f77f af79 	ble.w	800c3d8 <_printf_float+0x250>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	4652      	mov	r2, sl
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	47b8      	blx	r7
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	f43f aeaa 	beq.w	800c24a <_printf_float+0xc2>
 800c4f6:	f108 0801 	add.w	r8, r8, #1
 800c4fa:	e7ec      	b.n	800c4d6 <_printf_float+0x34e>
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	4631      	mov	r1, r6
 800c500:	4642      	mov	r2, r8
 800c502:	4628      	mov	r0, r5
 800c504:	47b8      	blx	r7
 800c506:	3001      	adds	r0, #1
 800c508:	d1c0      	bne.n	800c48c <_printf_float+0x304>
 800c50a:	e69e      	b.n	800c24a <_printf_float+0xc2>
 800c50c:	2301      	movs	r3, #1
 800c50e:	4631      	mov	r1, r6
 800c510:	4628      	mov	r0, r5
 800c512:	9205      	str	r2, [sp, #20]
 800c514:	47b8      	blx	r7
 800c516:	3001      	adds	r0, #1
 800c518:	f43f ae97 	beq.w	800c24a <_printf_float+0xc2>
 800c51c:	9a05      	ldr	r2, [sp, #20]
 800c51e:	f10b 0b01 	add.w	fp, fp, #1
 800c522:	e7b9      	b.n	800c498 <_printf_float+0x310>
 800c524:	ee18 3a10 	vmov	r3, s16
 800c528:	4652      	mov	r2, sl
 800c52a:	4631      	mov	r1, r6
 800c52c:	4628      	mov	r0, r5
 800c52e:	47b8      	blx	r7
 800c530:	3001      	adds	r0, #1
 800c532:	d1be      	bne.n	800c4b2 <_printf_float+0x32a>
 800c534:	e689      	b.n	800c24a <_printf_float+0xc2>
 800c536:	9a05      	ldr	r2, [sp, #20]
 800c538:	464b      	mov	r3, r9
 800c53a:	4442      	add	r2, r8
 800c53c:	4631      	mov	r1, r6
 800c53e:	4628      	mov	r0, r5
 800c540:	47b8      	blx	r7
 800c542:	3001      	adds	r0, #1
 800c544:	d1c1      	bne.n	800c4ca <_printf_float+0x342>
 800c546:	e680      	b.n	800c24a <_printf_float+0xc2>
 800c548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c54a:	2a01      	cmp	r2, #1
 800c54c:	dc01      	bgt.n	800c552 <_printf_float+0x3ca>
 800c54e:	07db      	lsls	r3, r3, #31
 800c550:	d538      	bpl.n	800c5c4 <_printf_float+0x43c>
 800c552:	2301      	movs	r3, #1
 800c554:	4642      	mov	r2, r8
 800c556:	4631      	mov	r1, r6
 800c558:	4628      	mov	r0, r5
 800c55a:	47b8      	blx	r7
 800c55c:	3001      	adds	r0, #1
 800c55e:	f43f ae74 	beq.w	800c24a <_printf_float+0xc2>
 800c562:	ee18 3a10 	vmov	r3, s16
 800c566:	4652      	mov	r2, sl
 800c568:	4631      	mov	r1, r6
 800c56a:	4628      	mov	r0, r5
 800c56c:	47b8      	blx	r7
 800c56e:	3001      	adds	r0, #1
 800c570:	f43f ae6b 	beq.w	800c24a <_printf_float+0xc2>
 800c574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c578:	2200      	movs	r2, #0
 800c57a:	2300      	movs	r3, #0
 800c57c:	f7f4 faa4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c580:	b9d8      	cbnz	r0, 800c5ba <_printf_float+0x432>
 800c582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c584:	f108 0201 	add.w	r2, r8, #1
 800c588:	3b01      	subs	r3, #1
 800c58a:	4631      	mov	r1, r6
 800c58c:	4628      	mov	r0, r5
 800c58e:	47b8      	blx	r7
 800c590:	3001      	adds	r0, #1
 800c592:	d10e      	bne.n	800c5b2 <_printf_float+0x42a>
 800c594:	e659      	b.n	800c24a <_printf_float+0xc2>
 800c596:	2301      	movs	r3, #1
 800c598:	4652      	mov	r2, sl
 800c59a:	4631      	mov	r1, r6
 800c59c:	4628      	mov	r0, r5
 800c59e:	47b8      	blx	r7
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	f43f ae52 	beq.w	800c24a <_printf_float+0xc2>
 800c5a6:	f108 0801 	add.w	r8, r8, #1
 800c5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	4543      	cmp	r3, r8
 800c5b0:	dcf1      	bgt.n	800c596 <_printf_float+0x40e>
 800c5b2:	464b      	mov	r3, r9
 800c5b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c5b8:	e6dc      	b.n	800c374 <_printf_float+0x1ec>
 800c5ba:	f04f 0800 	mov.w	r8, #0
 800c5be:	f104 0a1a 	add.w	sl, r4, #26
 800c5c2:	e7f2      	b.n	800c5aa <_printf_float+0x422>
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	4642      	mov	r2, r8
 800c5c8:	e7df      	b.n	800c58a <_printf_float+0x402>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	464a      	mov	r2, r9
 800c5ce:	4631      	mov	r1, r6
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	47b8      	blx	r7
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	f43f ae38 	beq.w	800c24a <_printf_float+0xc2>
 800c5da:	f108 0801 	add.w	r8, r8, #1
 800c5de:	68e3      	ldr	r3, [r4, #12]
 800c5e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5e2:	1a5b      	subs	r3, r3, r1
 800c5e4:	4543      	cmp	r3, r8
 800c5e6:	dcf0      	bgt.n	800c5ca <_printf_float+0x442>
 800c5e8:	e6fa      	b.n	800c3e0 <_printf_float+0x258>
 800c5ea:	f04f 0800 	mov.w	r8, #0
 800c5ee:	f104 0919 	add.w	r9, r4, #25
 800c5f2:	e7f4      	b.n	800c5de <_printf_float+0x456>

0800c5f4 <_printf_common>:
 800c5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f8:	4616      	mov	r6, r2
 800c5fa:	4699      	mov	r9, r3
 800c5fc:	688a      	ldr	r2, [r1, #8]
 800c5fe:	690b      	ldr	r3, [r1, #16]
 800c600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c604:	4293      	cmp	r3, r2
 800c606:	bfb8      	it	lt
 800c608:	4613      	movlt	r3, r2
 800c60a:	6033      	str	r3, [r6, #0]
 800c60c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c610:	4607      	mov	r7, r0
 800c612:	460c      	mov	r4, r1
 800c614:	b10a      	cbz	r2, 800c61a <_printf_common+0x26>
 800c616:	3301      	adds	r3, #1
 800c618:	6033      	str	r3, [r6, #0]
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	0699      	lsls	r1, r3, #26
 800c61e:	bf42      	ittt	mi
 800c620:	6833      	ldrmi	r3, [r6, #0]
 800c622:	3302      	addmi	r3, #2
 800c624:	6033      	strmi	r3, [r6, #0]
 800c626:	6825      	ldr	r5, [r4, #0]
 800c628:	f015 0506 	ands.w	r5, r5, #6
 800c62c:	d106      	bne.n	800c63c <_printf_common+0x48>
 800c62e:	f104 0a19 	add.w	sl, r4, #25
 800c632:	68e3      	ldr	r3, [r4, #12]
 800c634:	6832      	ldr	r2, [r6, #0]
 800c636:	1a9b      	subs	r3, r3, r2
 800c638:	42ab      	cmp	r3, r5
 800c63a:	dc26      	bgt.n	800c68a <_printf_common+0x96>
 800c63c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c640:	1e13      	subs	r3, r2, #0
 800c642:	6822      	ldr	r2, [r4, #0]
 800c644:	bf18      	it	ne
 800c646:	2301      	movne	r3, #1
 800c648:	0692      	lsls	r2, r2, #26
 800c64a:	d42b      	bmi.n	800c6a4 <_printf_common+0xb0>
 800c64c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c650:	4649      	mov	r1, r9
 800c652:	4638      	mov	r0, r7
 800c654:	47c0      	blx	r8
 800c656:	3001      	adds	r0, #1
 800c658:	d01e      	beq.n	800c698 <_printf_common+0xa4>
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	68e5      	ldr	r5, [r4, #12]
 800c65e:	6832      	ldr	r2, [r6, #0]
 800c660:	f003 0306 	and.w	r3, r3, #6
 800c664:	2b04      	cmp	r3, #4
 800c666:	bf08      	it	eq
 800c668:	1aad      	subeq	r5, r5, r2
 800c66a:	68a3      	ldr	r3, [r4, #8]
 800c66c:	6922      	ldr	r2, [r4, #16]
 800c66e:	bf0c      	ite	eq
 800c670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c674:	2500      	movne	r5, #0
 800c676:	4293      	cmp	r3, r2
 800c678:	bfc4      	itt	gt
 800c67a:	1a9b      	subgt	r3, r3, r2
 800c67c:	18ed      	addgt	r5, r5, r3
 800c67e:	2600      	movs	r6, #0
 800c680:	341a      	adds	r4, #26
 800c682:	42b5      	cmp	r5, r6
 800c684:	d11a      	bne.n	800c6bc <_printf_common+0xc8>
 800c686:	2000      	movs	r0, #0
 800c688:	e008      	b.n	800c69c <_printf_common+0xa8>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4652      	mov	r2, sl
 800c68e:	4649      	mov	r1, r9
 800c690:	4638      	mov	r0, r7
 800c692:	47c0      	blx	r8
 800c694:	3001      	adds	r0, #1
 800c696:	d103      	bne.n	800c6a0 <_printf_common+0xac>
 800c698:	f04f 30ff 	mov.w	r0, #4294967295
 800c69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a0:	3501      	adds	r5, #1
 800c6a2:	e7c6      	b.n	800c632 <_printf_common+0x3e>
 800c6a4:	18e1      	adds	r1, r4, r3
 800c6a6:	1c5a      	adds	r2, r3, #1
 800c6a8:	2030      	movs	r0, #48	; 0x30
 800c6aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6ae:	4422      	add	r2, r4
 800c6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6b8:	3302      	adds	r3, #2
 800c6ba:	e7c7      	b.n	800c64c <_printf_common+0x58>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	4622      	mov	r2, r4
 800c6c0:	4649      	mov	r1, r9
 800c6c2:	4638      	mov	r0, r7
 800c6c4:	47c0      	blx	r8
 800c6c6:	3001      	adds	r0, #1
 800c6c8:	d0e6      	beq.n	800c698 <_printf_common+0xa4>
 800c6ca:	3601      	adds	r6, #1
 800c6cc:	e7d9      	b.n	800c682 <_printf_common+0x8e>
	...

0800c6d0 <_printf_i>:
 800c6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	4691      	mov	r9, r2
 800c6d8:	7e27      	ldrb	r7, [r4, #24]
 800c6da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c6dc:	2f78      	cmp	r7, #120	; 0x78
 800c6de:	4680      	mov	r8, r0
 800c6e0:	469a      	mov	sl, r3
 800c6e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6e6:	d807      	bhi.n	800c6f8 <_printf_i+0x28>
 800c6e8:	2f62      	cmp	r7, #98	; 0x62
 800c6ea:	d80a      	bhi.n	800c702 <_printf_i+0x32>
 800c6ec:	2f00      	cmp	r7, #0
 800c6ee:	f000 80d8 	beq.w	800c8a2 <_printf_i+0x1d2>
 800c6f2:	2f58      	cmp	r7, #88	; 0x58
 800c6f4:	f000 80a3 	beq.w	800c83e <_printf_i+0x16e>
 800c6f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c6fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c700:	e03a      	b.n	800c778 <_printf_i+0xa8>
 800c702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c706:	2b15      	cmp	r3, #21
 800c708:	d8f6      	bhi.n	800c6f8 <_printf_i+0x28>
 800c70a:	a001      	add	r0, pc, #4	; (adr r0, 800c710 <_printf_i+0x40>)
 800c70c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c710:	0800c769 	.word	0x0800c769
 800c714:	0800c77d 	.word	0x0800c77d
 800c718:	0800c6f9 	.word	0x0800c6f9
 800c71c:	0800c6f9 	.word	0x0800c6f9
 800c720:	0800c6f9 	.word	0x0800c6f9
 800c724:	0800c6f9 	.word	0x0800c6f9
 800c728:	0800c77d 	.word	0x0800c77d
 800c72c:	0800c6f9 	.word	0x0800c6f9
 800c730:	0800c6f9 	.word	0x0800c6f9
 800c734:	0800c6f9 	.word	0x0800c6f9
 800c738:	0800c6f9 	.word	0x0800c6f9
 800c73c:	0800c889 	.word	0x0800c889
 800c740:	0800c7ad 	.word	0x0800c7ad
 800c744:	0800c86b 	.word	0x0800c86b
 800c748:	0800c6f9 	.word	0x0800c6f9
 800c74c:	0800c6f9 	.word	0x0800c6f9
 800c750:	0800c8ab 	.word	0x0800c8ab
 800c754:	0800c6f9 	.word	0x0800c6f9
 800c758:	0800c7ad 	.word	0x0800c7ad
 800c75c:	0800c6f9 	.word	0x0800c6f9
 800c760:	0800c6f9 	.word	0x0800c6f9
 800c764:	0800c873 	.word	0x0800c873
 800c768:	680b      	ldr	r3, [r1, #0]
 800c76a:	1d1a      	adds	r2, r3, #4
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	600a      	str	r2, [r1, #0]
 800c770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c778:	2301      	movs	r3, #1
 800c77a:	e0a3      	b.n	800c8c4 <_printf_i+0x1f4>
 800c77c:	6825      	ldr	r5, [r4, #0]
 800c77e:	6808      	ldr	r0, [r1, #0]
 800c780:	062e      	lsls	r6, r5, #24
 800c782:	f100 0304 	add.w	r3, r0, #4
 800c786:	d50a      	bpl.n	800c79e <_printf_i+0xce>
 800c788:	6805      	ldr	r5, [r0, #0]
 800c78a:	600b      	str	r3, [r1, #0]
 800c78c:	2d00      	cmp	r5, #0
 800c78e:	da03      	bge.n	800c798 <_printf_i+0xc8>
 800c790:	232d      	movs	r3, #45	; 0x2d
 800c792:	426d      	negs	r5, r5
 800c794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c798:	485e      	ldr	r0, [pc, #376]	; (800c914 <_printf_i+0x244>)
 800c79a:	230a      	movs	r3, #10
 800c79c:	e019      	b.n	800c7d2 <_printf_i+0x102>
 800c79e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c7a2:	6805      	ldr	r5, [r0, #0]
 800c7a4:	600b      	str	r3, [r1, #0]
 800c7a6:	bf18      	it	ne
 800c7a8:	b22d      	sxthne	r5, r5
 800c7aa:	e7ef      	b.n	800c78c <_printf_i+0xbc>
 800c7ac:	680b      	ldr	r3, [r1, #0]
 800c7ae:	6825      	ldr	r5, [r4, #0]
 800c7b0:	1d18      	adds	r0, r3, #4
 800c7b2:	6008      	str	r0, [r1, #0]
 800c7b4:	0628      	lsls	r0, r5, #24
 800c7b6:	d501      	bpl.n	800c7bc <_printf_i+0xec>
 800c7b8:	681d      	ldr	r5, [r3, #0]
 800c7ba:	e002      	b.n	800c7c2 <_printf_i+0xf2>
 800c7bc:	0669      	lsls	r1, r5, #25
 800c7be:	d5fb      	bpl.n	800c7b8 <_printf_i+0xe8>
 800c7c0:	881d      	ldrh	r5, [r3, #0]
 800c7c2:	4854      	ldr	r0, [pc, #336]	; (800c914 <_printf_i+0x244>)
 800c7c4:	2f6f      	cmp	r7, #111	; 0x6f
 800c7c6:	bf0c      	ite	eq
 800c7c8:	2308      	moveq	r3, #8
 800c7ca:	230a      	movne	r3, #10
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7d2:	6866      	ldr	r6, [r4, #4]
 800c7d4:	60a6      	str	r6, [r4, #8]
 800c7d6:	2e00      	cmp	r6, #0
 800c7d8:	bfa2      	ittt	ge
 800c7da:	6821      	ldrge	r1, [r4, #0]
 800c7dc:	f021 0104 	bicge.w	r1, r1, #4
 800c7e0:	6021      	strge	r1, [r4, #0]
 800c7e2:	b90d      	cbnz	r5, 800c7e8 <_printf_i+0x118>
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	d04d      	beq.n	800c884 <_printf_i+0x1b4>
 800c7e8:	4616      	mov	r6, r2
 800c7ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800c7ee:	fb03 5711 	mls	r7, r3, r1, r5
 800c7f2:	5dc7      	ldrb	r7, [r0, r7]
 800c7f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c7f8:	462f      	mov	r7, r5
 800c7fa:	42bb      	cmp	r3, r7
 800c7fc:	460d      	mov	r5, r1
 800c7fe:	d9f4      	bls.n	800c7ea <_printf_i+0x11a>
 800c800:	2b08      	cmp	r3, #8
 800c802:	d10b      	bne.n	800c81c <_printf_i+0x14c>
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	07df      	lsls	r7, r3, #31
 800c808:	d508      	bpl.n	800c81c <_printf_i+0x14c>
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	6861      	ldr	r1, [r4, #4]
 800c80e:	4299      	cmp	r1, r3
 800c810:	bfde      	ittt	le
 800c812:	2330      	movle	r3, #48	; 0x30
 800c814:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c81c:	1b92      	subs	r2, r2, r6
 800c81e:	6122      	str	r2, [r4, #16]
 800c820:	f8cd a000 	str.w	sl, [sp]
 800c824:	464b      	mov	r3, r9
 800c826:	aa03      	add	r2, sp, #12
 800c828:	4621      	mov	r1, r4
 800c82a:	4640      	mov	r0, r8
 800c82c:	f7ff fee2 	bl	800c5f4 <_printf_common>
 800c830:	3001      	adds	r0, #1
 800c832:	d14c      	bne.n	800c8ce <_printf_i+0x1fe>
 800c834:	f04f 30ff 	mov.w	r0, #4294967295
 800c838:	b004      	add	sp, #16
 800c83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83e:	4835      	ldr	r0, [pc, #212]	; (800c914 <_printf_i+0x244>)
 800c840:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	680e      	ldr	r6, [r1, #0]
 800c848:	061f      	lsls	r7, r3, #24
 800c84a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c84e:	600e      	str	r6, [r1, #0]
 800c850:	d514      	bpl.n	800c87c <_printf_i+0x1ac>
 800c852:	07d9      	lsls	r1, r3, #31
 800c854:	bf44      	itt	mi
 800c856:	f043 0320 	orrmi.w	r3, r3, #32
 800c85a:	6023      	strmi	r3, [r4, #0]
 800c85c:	b91d      	cbnz	r5, 800c866 <_printf_i+0x196>
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	f023 0320 	bic.w	r3, r3, #32
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	2310      	movs	r3, #16
 800c868:	e7b0      	b.n	800c7cc <_printf_i+0xfc>
 800c86a:	6823      	ldr	r3, [r4, #0]
 800c86c:	f043 0320 	orr.w	r3, r3, #32
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	2378      	movs	r3, #120	; 0x78
 800c874:	4828      	ldr	r0, [pc, #160]	; (800c918 <_printf_i+0x248>)
 800c876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c87a:	e7e3      	b.n	800c844 <_printf_i+0x174>
 800c87c:	065e      	lsls	r6, r3, #25
 800c87e:	bf48      	it	mi
 800c880:	b2ad      	uxthmi	r5, r5
 800c882:	e7e6      	b.n	800c852 <_printf_i+0x182>
 800c884:	4616      	mov	r6, r2
 800c886:	e7bb      	b.n	800c800 <_printf_i+0x130>
 800c888:	680b      	ldr	r3, [r1, #0]
 800c88a:	6826      	ldr	r6, [r4, #0]
 800c88c:	6960      	ldr	r0, [r4, #20]
 800c88e:	1d1d      	adds	r5, r3, #4
 800c890:	600d      	str	r5, [r1, #0]
 800c892:	0635      	lsls	r5, r6, #24
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	d501      	bpl.n	800c89c <_printf_i+0x1cc>
 800c898:	6018      	str	r0, [r3, #0]
 800c89a:	e002      	b.n	800c8a2 <_printf_i+0x1d2>
 800c89c:	0671      	lsls	r1, r6, #25
 800c89e:	d5fb      	bpl.n	800c898 <_printf_i+0x1c8>
 800c8a0:	8018      	strh	r0, [r3, #0]
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	6123      	str	r3, [r4, #16]
 800c8a6:	4616      	mov	r6, r2
 800c8a8:	e7ba      	b.n	800c820 <_printf_i+0x150>
 800c8aa:	680b      	ldr	r3, [r1, #0]
 800c8ac:	1d1a      	adds	r2, r3, #4
 800c8ae:	600a      	str	r2, [r1, #0]
 800c8b0:	681e      	ldr	r6, [r3, #0]
 800c8b2:	6862      	ldr	r2, [r4, #4]
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f7f3 fc92 	bl	80001e0 <memchr>
 800c8bc:	b108      	cbz	r0, 800c8c2 <_printf_i+0x1f2>
 800c8be:	1b80      	subs	r0, r0, r6
 800c8c0:	6060      	str	r0, [r4, #4]
 800c8c2:	6863      	ldr	r3, [r4, #4]
 800c8c4:	6123      	str	r3, [r4, #16]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8cc:	e7a8      	b.n	800c820 <_printf_i+0x150>
 800c8ce:	6923      	ldr	r3, [r4, #16]
 800c8d0:	4632      	mov	r2, r6
 800c8d2:	4649      	mov	r1, r9
 800c8d4:	4640      	mov	r0, r8
 800c8d6:	47d0      	blx	sl
 800c8d8:	3001      	adds	r0, #1
 800c8da:	d0ab      	beq.n	800c834 <_printf_i+0x164>
 800c8dc:	6823      	ldr	r3, [r4, #0]
 800c8de:	079b      	lsls	r3, r3, #30
 800c8e0:	d413      	bmi.n	800c90a <_printf_i+0x23a>
 800c8e2:	68e0      	ldr	r0, [r4, #12]
 800c8e4:	9b03      	ldr	r3, [sp, #12]
 800c8e6:	4298      	cmp	r0, r3
 800c8e8:	bfb8      	it	lt
 800c8ea:	4618      	movlt	r0, r3
 800c8ec:	e7a4      	b.n	800c838 <_printf_i+0x168>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	4632      	mov	r2, r6
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	47d0      	blx	sl
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	d09b      	beq.n	800c834 <_printf_i+0x164>
 800c8fc:	3501      	adds	r5, #1
 800c8fe:	68e3      	ldr	r3, [r4, #12]
 800c900:	9903      	ldr	r1, [sp, #12]
 800c902:	1a5b      	subs	r3, r3, r1
 800c904:	42ab      	cmp	r3, r5
 800c906:	dcf2      	bgt.n	800c8ee <_printf_i+0x21e>
 800c908:	e7eb      	b.n	800c8e2 <_printf_i+0x212>
 800c90a:	2500      	movs	r5, #0
 800c90c:	f104 0619 	add.w	r6, r4, #25
 800c910:	e7f5      	b.n	800c8fe <_printf_i+0x22e>
 800c912:	bf00      	nop
 800c914:	0800ee6e 	.word	0x0800ee6e
 800c918:	0800ee7f 	.word	0x0800ee7f

0800c91c <siprintf>:
 800c91c:	b40e      	push	{r1, r2, r3}
 800c91e:	b500      	push	{lr}
 800c920:	b09c      	sub	sp, #112	; 0x70
 800c922:	ab1d      	add	r3, sp, #116	; 0x74
 800c924:	9002      	str	r0, [sp, #8]
 800c926:	9006      	str	r0, [sp, #24]
 800c928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c92c:	4809      	ldr	r0, [pc, #36]	; (800c954 <siprintf+0x38>)
 800c92e:	9107      	str	r1, [sp, #28]
 800c930:	9104      	str	r1, [sp, #16]
 800c932:	4909      	ldr	r1, [pc, #36]	; (800c958 <siprintf+0x3c>)
 800c934:	f853 2b04 	ldr.w	r2, [r3], #4
 800c938:	9105      	str	r1, [sp, #20]
 800c93a:	6800      	ldr	r0, [r0, #0]
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	a902      	add	r1, sp, #8
 800c940:	f001 fb40 	bl	800dfc4 <_svfiprintf_r>
 800c944:	9b02      	ldr	r3, [sp, #8]
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
 800c94a:	b01c      	add	sp, #112	; 0x70
 800c94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c950:	b003      	add	sp, #12
 800c952:	4770      	bx	lr
 800c954:	20000194 	.word	0x20000194
 800c958:	ffff0208 	.word	0xffff0208

0800c95c <strcat>:
 800c95c:	b510      	push	{r4, lr}
 800c95e:	4602      	mov	r2, r0
 800c960:	7814      	ldrb	r4, [r2, #0]
 800c962:	4613      	mov	r3, r2
 800c964:	3201      	adds	r2, #1
 800c966:	2c00      	cmp	r4, #0
 800c968:	d1fa      	bne.n	800c960 <strcat+0x4>
 800c96a:	3b01      	subs	r3, #1
 800c96c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c970:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c974:	2a00      	cmp	r2, #0
 800c976:	d1f9      	bne.n	800c96c <strcat+0x10>
 800c978:	bd10      	pop	{r4, pc}

0800c97a <quorem>:
 800c97a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97e:	6903      	ldr	r3, [r0, #16]
 800c980:	690c      	ldr	r4, [r1, #16]
 800c982:	42a3      	cmp	r3, r4
 800c984:	4607      	mov	r7, r0
 800c986:	f2c0 8081 	blt.w	800ca8c <quorem+0x112>
 800c98a:	3c01      	subs	r4, #1
 800c98c:	f101 0814 	add.w	r8, r1, #20
 800c990:	f100 0514 	add.w	r5, r0, #20
 800c994:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c998:	9301      	str	r3, [sp, #4]
 800c99a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c99e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c9aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9b2:	d331      	bcc.n	800ca18 <quorem+0x9e>
 800c9b4:	f04f 0e00 	mov.w	lr, #0
 800c9b8:	4640      	mov	r0, r8
 800c9ba:	46ac      	mov	ip, r5
 800c9bc:	46f2      	mov	sl, lr
 800c9be:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9c2:	b293      	uxth	r3, r2
 800c9c4:	fb06 e303 	mla	r3, r6, r3, lr
 800c9c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	ebaa 0303 	sub.w	r3, sl, r3
 800c9d2:	0c12      	lsrs	r2, r2, #16
 800c9d4:	f8dc a000 	ldr.w	sl, [ip]
 800c9d8:	fb06 e202 	mla	r2, r6, r2, lr
 800c9dc:	fa13 f38a 	uxtah	r3, r3, sl
 800c9e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9e4:	fa1f fa82 	uxth.w	sl, r2
 800c9e8:	f8dc 2000 	ldr.w	r2, [ip]
 800c9ec:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c9f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9fa:	4581      	cmp	r9, r0
 800c9fc:	f84c 3b04 	str.w	r3, [ip], #4
 800ca00:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca04:	d2db      	bcs.n	800c9be <quorem+0x44>
 800ca06:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca0a:	b92b      	cbnz	r3, 800ca18 <quorem+0x9e>
 800ca0c:	9b01      	ldr	r3, [sp, #4]
 800ca0e:	3b04      	subs	r3, #4
 800ca10:	429d      	cmp	r5, r3
 800ca12:	461a      	mov	r2, r3
 800ca14:	d32e      	bcc.n	800ca74 <quorem+0xfa>
 800ca16:	613c      	str	r4, [r7, #16]
 800ca18:	4638      	mov	r0, r7
 800ca1a:	f001 f8bd 	bl	800db98 <__mcmp>
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	db24      	blt.n	800ca6c <quorem+0xf2>
 800ca22:	3601      	adds	r6, #1
 800ca24:	4628      	mov	r0, r5
 800ca26:	f04f 0c00 	mov.w	ip, #0
 800ca2a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca2e:	f8d0 e000 	ldr.w	lr, [r0]
 800ca32:	b293      	uxth	r3, r2
 800ca34:	ebac 0303 	sub.w	r3, ip, r3
 800ca38:	0c12      	lsrs	r2, r2, #16
 800ca3a:	fa13 f38e 	uxtah	r3, r3, lr
 800ca3e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca4c:	45c1      	cmp	r9, r8
 800ca4e:	f840 3b04 	str.w	r3, [r0], #4
 800ca52:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca56:	d2e8      	bcs.n	800ca2a <quorem+0xb0>
 800ca58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca60:	b922      	cbnz	r2, 800ca6c <quorem+0xf2>
 800ca62:	3b04      	subs	r3, #4
 800ca64:	429d      	cmp	r5, r3
 800ca66:	461a      	mov	r2, r3
 800ca68:	d30a      	bcc.n	800ca80 <quorem+0x106>
 800ca6a:	613c      	str	r4, [r7, #16]
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	b003      	add	sp, #12
 800ca70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca74:	6812      	ldr	r2, [r2, #0]
 800ca76:	3b04      	subs	r3, #4
 800ca78:	2a00      	cmp	r2, #0
 800ca7a:	d1cc      	bne.n	800ca16 <quorem+0x9c>
 800ca7c:	3c01      	subs	r4, #1
 800ca7e:	e7c7      	b.n	800ca10 <quorem+0x96>
 800ca80:	6812      	ldr	r2, [r2, #0]
 800ca82:	3b04      	subs	r3, #4
 800ca84:	2a00      	cmp	r2, #0
 800ca86:	d1f0      	bne.n	800ca6a <quorem+0xf0>
 800ca88:	3c01      	subs	r4, #1
 800ca8a:	e7eb      	b.n	800ca64 <quorem+0xea>
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	e7ee      	b.n	800ca6e <quorem+0xf4>

0800ca90 <_dtoa_r>:
 800ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca94:	ed2d 8b02 	vpush	{d8}
 800ca98:	ec57 6b10 	vmov	r6, r7, d0
 800ca9c:	b095      	sub	sp, #84	; 0x54
 800ca9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800caa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800caa4:	9105      	str	r1, [sp, #20]
 800caa6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800caaa:	4604      	mov	r4, r0
 800caac:	9209      	str	r2, [sp, #36]	; 0x24
 800caae:	930f      	str	r3, [sp, #60]	; 0x3c
 800cab0:	b975      	cbnz	r5, 800cad0 <_dtoa_r+0x40>
 800cab2:	2010      	movs	r0, #16
 800cab4:	f000 fddc 	bl	800d670 <malloc>
 800cab8:	4602      	mov	r2, r0
 800caba:	6260      	str	r0, [r4, #36]	; 0x24
 800cabc:	b920      	cbnz	r0, 800cac8 <_dtoa_r+0x38>
 800cabe:	4bb2      	ldr	r3, [pc, #712]	; (800cd88 <_dtoa_r+0x2f8>)
 800cac0:	21ea      	movs	r1, #234	; 0xea
 800cac2:	48b2      	ldr	r0, [pc, #712]	; (800cd8c <_dtoa_r+0x2fc>)
 800cac4:	f001 fb8e 	bl	800e1e4 <__assert_func>
 800cac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cacc:	6005      	str	r5, [r0, #0]
 800cace:	60c5      	str	r5, [r0, #12]
 800cad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cad2:	6819      	ldr	r1, [r3, #0]
 800cad4:	b151      	cbz	r1, 800caec <_dtoa_r+0x5c>
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	604a      	str	r2, [r1, #4]
 800cada:	2301      	movs	r3, #1
 800cadc:	4093      	lsls	r3, r2
 800cade:	608b      	str	r3, [r1, #8]
 800cae0:	4620      	mov	r0, r4
 800cae2:	f000 fe1b 	bl	800d71c <_Bfree>
 800cae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	1e3b      	subs	r3, r7, #0
 800caee:	bfb9      	ittee	lt
 800caf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800caf4:	9303      	strlt	r3, [sp, #12]
 800caf6:	2300      	movge	r3, #0
 800caf8:	f8c8 3000 	strge.w	r3, [r8]
 800cafc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cb00:	4ba3      	ldr	r3, [pc, #652]	; (800cd90 <_dtoa_r+0x300>)
 800cb02:	bfbc      	itt	lt
 800cb04:	2201      	movlt	r2, #1
 800cb06:	f8c8 2000 	strlt.w	r2, [r8]
 800cb0a:	ea33 0309 	bics.w	r3, r3, r9
 800cb0e:	d11b      	bne.n	800cb48 <_dtoa_r+0xb8>
 800cb10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb12:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb1c:	4333      	orrs	r3, r6
 800cb1e:	f000 857a 	beq.w	800d616 <_dtoa_r+0xb86>
 800cb22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb24:	b963      	cbnz	r3, 800cb40 <_dtoa_r+0xb0>
 800cb26:	4b9b      	ldr	r3, [pc, #620]	; (800cd94 <_dtoa_r+0x304>)
 800cb28:	e024      	b.n	800cb74 <_dtoa_r+0xe4>
 800cb2a:	4b9b      	ldr	r3, [pc, #620]	; (800cd98 <_dtoa_r+0x308>)
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	3308      	adds	r3, #8
 800cb30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	9800      	ldr	r0, [sp, #0]
 800cb36:	b015      	add	sp, #84	; 0x54
 800cb38:	ecbd 8b02 	vpop	{d8}
 800cb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb40:	4b94      	ldr	r3, [pc, #592]	; (800cd94 <_dtoa_r+0x304>)
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	3303      	adds	r3, #3
 800cb46:	e7f3      	b.n	800cb30 <_dtoa_r+0xa0>
 800cb48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	ec51 0b17 	vmov	r0, r1, d7
 800cb52:	2300      	movs	r3, #0
 800cb54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cb58:	f7f3 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	b158      	cbz	r0, 800cb78 <_dtoa_r+0xe8>
 800cb60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb62:	2301      	movs	r3, #1
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 8551 	beq.w	800d610 <_dtoa_r+0xb80>
 800cb6e:	488b      	ldr	r0, [pc, #556]	; (800cd9c <_dtoa_r+0x30c>)
 800cb70:	6018      	str	r0, [r3, #0]
 800cb72:	1e43      	subs	r3, r0, #1
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	e7dd      	b.n	800cb34 <_dtoa_r+0xa4>
 800cb78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cb7c:	aa12      	add	r2, sp, #72	; 0x48
 800cb7e:	a913      	add	r1, sp, #76	; 0x4c
 800cb80:	4620      	mov	r0, r4
 800cb82:	f001 f8ad 	bl	800dce0 <__d2b>
 800cb86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb8a:	4683      	mov	fp, r0
 800cb8c:	2d00      	cmp	r5, #0
 800cb8e:	d07c      	beq.n	800cc8a <_dtoa_r+0x1fa>
 800cb90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cb96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cb9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cba2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cba6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cbaa:	4b7d      	ldr	r3, [pc, #500]	; (800cda0 <_dtoa_r+0x310>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	4630      	mov	r0, r6
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	f7f3 fb69 	bl	8000288 <__aeabi_dsub>
 800cbb6:	a36e      	add	r3, pc, #440	; (adr r3, 800cd70 <_dtoa_r+0x2e0>)
 800cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbc:	f7f3 fd1c 	bl	80005f8 <__aeabi_dmul>
 800cbc0:	a36d      	add	r3, pc, #436	; (adr r3, 800cd78 <_dtoa_r+0x2e8>)
 800cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc6:	f7f3 fb61 	bl	800028c <__adddf3>
 800cbca:	4606      	mov	r6, r0
 800cbcc:	4628      	mov	r0, r5
 800cbce:	460f      	mov	r7, r1
 800cbd0:	f7f3 fca8 	bl	8000524 <__aeabi_i2d>
 800cbd4:	a36a      	add	r3, pc, #424	; (adr r3, 800cd80 <_dtoa_r+0x2f0>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	f7f3 fd0d 	bl	80005f8 <__aeabi_dmul>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	f7f3 fb51 	bl	800028c <__adddf3>
 800cbea:	4606      	mov	r6, r0
 800cbec:	460f      	mov	r7, r1
 800cbee:	f7f3 ffb3 	bl	8000b58 <__aeabi_d2iz>
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	4682      	mov	sl, r0
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	4639      	mov	r1, r7
 800cbfc:	f7f3 ff6e 	bl	8000adc <__aeabi_dcmplt>
 800cc00:	b148      	cbz	r0, 800cc16 <_dtoa_r+0x186>
 800cc02:	4650      	mov	r0, sl
 800cc04:	f7f3 fc8e 	bl	8000524 <__aeabi_i2d>
 800cc08:	4632      	mov	r2, r6
 800cc0a:	463b      	mov	r3, r7
 800cc0c:	f7f3 ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc10:	b908      	cbnz	r0, 800cc16 <_dtoa_r+0x186>
 800cc12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc16:	f1ba 0f16 	cmp.w	sl, #22
 800cc1a:	d854      	bhi.n	800ccc6 <_dtoa_r+0x236>
 800cc1c:	4b61      	ldr	r3, [pc, #388]	; (800cda4 <_dtoa_r+0x314>)
 800cc1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc2a:	f7f3 ff57 	bl	8000adc <__aeabi_dcmplt>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d04b      	beq.n	800ccca <_dtoa_r+0x23a>
 800cc32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc36:	2300      	movs	r3, #0
 800cc38:	930e      	str	r3, [sp, #56]	; 0x38
 800cc3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc3c:	1b5d      	subs	r5, r3, r5
 800cc3e:	1e6b      	subs	r3, r5, #1
 800cc40:	9304      	str	r3, [sp, #16]
 800cc42:	bf43      	ittte	mi
 800cc44:	2300      	movmi	r3, #0
 800cc46:	f1c5 0801 	rsbmi	r8, r5, #1
 800cc4a:	9304      	strmi	r3, [sp, #16]
 800cc4c:	f04f 0800 	movpl.w	r8, #0
 800cc50:	f1ba 0f00 	cmp.w	sl, #0
 800cc54:	db3b      	blt.n	800ccce <_dtoa_r+0x23e>
 800cc56:	9b04      	ldr	r3, [sp, #16]
 800cc58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cc5c:	4453      	add	r3, sl
 800cc5e:	9304      	str	r3, [sp, #16]
 800cc60:	2300      	movs	r3, #0
 800cc62:	9306      	str	r3, [sp, #24]
 800cc64:	9b05      	ldr	r3, [sp, #20]
 800cc66:	2b09      	cmp	r3, #9
 800cc68:	d869      	bhi.n	800cd3e <_dtoa_r+0x2ae>
 800cc6a:	2b05      	cmp	r3, #5
 800cc6c:	bfc4      	itt	gt
 800cc6e:	3b04      	subgt	r3, #4
 800cc70:	9305      	strgt	r3, [sp, #20]
 800cc72:	9b05      	ldr	r3, [sp, #20]
 800cc74:	f1a3 0302 	sub.w	r3, r3, #2
 800cc78:	bfcc      	ite	gt
 800cc7a:	2500      	movgt	r5, #0
 800cc7c:	2501      	movle	r5, #1
 800cc7e:	2b03      	cmp	r3, #3
 800cc80:	d869      	bhi.n	800cd56 <_dtoa_r+0x2c6>
 800cc82:	e8df f003 	tbb	[pc, r3]
 800cc86:	4e2c      	.short	0x4e2c
 800cc88:	5a4c      	.short	0x5a4c
 800cc8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cc8e:	441d      	add	r5, r3
 800cc90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cc94:	2b20      	cmp	r3, #32
 800cc96:	bfc1      	itttt	gt
 800cc98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cca0:	fa09 f303 	lslgt.w	r3, r9, r3
 800cca4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cca8:	bfda      	itte	le
 800ccaa:	f1c3 0320 	rsble	r3, r3, #32
 800ccae:	fa06 f003 	lslle.w	r0, r6, r3
 800ccb2:	4318      	orrgt	r0, r3
 800ccb4:	f7f3 fc26 	bl	8000504 <__aeabi_ui2d>
 800ccb8:	2301      	movs	r3, #1
 800ccba:	4606      	mov	r6, r0
 800ccbc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ccc0:	3d01      	subs	r5, #1
 800ccc2:	9310      	str	r3, [sp, #64]	; 0x40
 800ccc4:	e771      	b.n	800cbaa <_dtoa_r+0x11a>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e7b6      	b.n	800cc38 <_dtoa_r+0x1a8>
 800ccca:	900e      	str	r0, [sp, #56]	; 0x38
 800cccc:	e7b5      	b.n	800cc3a <_dtoa_r+0x1aa>
 800ccce:	f1ca 0300 	rsb	r3, sl, #0
 800ccd2:	9306      	str	r3, [sp, #24]
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	eba8 080a 	sub.w	r8, r8, sl
 800ccda:	930d      	str	r3, [sp, #52]	; 0x34
 800ccdc:	e7c2      	b.n	800cc64 <_dtoa_r+0x1d4>
 800ccde:	2300      	movs	r3, #0
 800cce0:	9308      	str	r3, [sp, #32]
 800cce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	dc39      	bgt.n	800cd5c <_dtoa_r+0x2cc>
 800cce8:	f04f 0901 	mov.w	r9, #1
 800ccec:	f8cd 9004 	str.w	r9, [sp, #4]
 800ccf0:	464b      	mov	r3, r9
 800ccf2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ccf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	6042      	str	r2, [r0, #4]
 800ccfc:	2204      	movs	r2, #4
 800ccfe:	f102 0614 	add.w	r6, r2, #20
 800cd02:	429e      	cmp	r6, r3
 800cd04:	6841      	ldr	r1, [r0, #4]
 800cd06:	d92f      	bls.n	800cd68 <_dtoa_r+0x2d8>
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 fcc7 	bl	800d69c <_Balloc>
 800cd0e:	9000      	str	r0, [sp, #0]
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d14b      	bne.n	800cdac <_dtoa_r+0x31c>
 800cd14:	4b24      	ldr	r3, [pc, #144]	; (800cda8 <_dtoa_r+0x318>)
 800cd16:	4602      	mov	r2, r0
 800cd18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd1c:	e6d1      	b.n	800cac2 <_dtoa_r+0x32>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e7de      	b.n	800cce0 <_dtoa_r+0x250>
 800cd22:	2300      	movs	r3, #0
 800cd24:	9308      	str	r3, [sp, #32]
 800cd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd28:	eb0a 0903 	add.w	r9, sl, r3
 800cd2c:	f109 0301 	add.w	r3, r9, #1
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	bfb8      	it	lt
 800cd36:	2301      	movlt	r3, #1
 800cd38:	e7dd      	b.n	800ccf6 <_dtoa_r+0x266>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e7f2      	b.n	800cd24 <_dtoa_r+0x294>
 800cd3e:	2501      	movs	r5, #1
 800cd40:	2300      	movs	r3, #0
 800cd42:	9305      	str	r3, [sp, #20]
 800cd44:	9508      	str	r5, [sp, #32]
 800cd46:	f04f 39ff 	mov.w	r9, #4294967295
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd50:	2312      	movs	r3, #18
 800cd52:	9209      	str	r2, [sp, #36]	; 0x24
 800cd54:	e7cf      	b.n	800ccf6 <_dtoa_r+0x266>
 800cd56:	2301      	movs	r3, #1
 800cd58:	9308      	str	r3, [sp, #32]
 800cd5a:	e7f4      	b.n	800cd46 <_dtoa_r+0x2b6>
 800cd5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cd60:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd64:	464b      	mov	r3, r9
 800cd66:	e7c6      	b.n	800ccf6 <_dtoa_r+0x266>
 800cd68:	3101      	adds	r1, #1
 800cd6a:	6041      	str	r1, [r0, #4]
 800cd6c:	0052      	lsls	r2, r2, #1
 800cd6e:	e7c6      	b.n	800ccfe <_dtoa_r+0x26e>
 800cd70:	636f4361 	.word	0x636f4361
 800cd74:	3fd287a7 	.word	0x3fd287a7
 800cd78:	8b60c8b3 	.word	0x8b60c8b3
 800cd7c:	3fc68a28 	.word	0x3fc68a28
 800cd80:	509f79fb 	.word	0x509f79fb
 800cd84:	3fd34413 	.word	0x3fd34413
 800cd88:	0800ee9d 	.word	0x0800ee9d
 800cd8c:	0800eeb4 	.word	0x0800eeb4
 800cd90:	7ff00000 	.word	0x7ff00000
 800cd94:	0800ee99 	.word	0x0800ee99
 800cd98:	0800ee90 	.word	0x0800ee90
 800cd9c:	0800ee6d 	.word	0x0800ee6d
 800cda0:	3ff80000 	.word	0x3ff80000
 800cda4:	0800efb0 	.word	0x0800efb0
 800cda8:	0800ef13 	.word	0x0800ef13
 800cdac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdae:	9a00      	ldr	r2, [sp, #0]
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	9b01      	ldr	r3, [sp, #4]
 800cdb4:	2b0e      	cmp	r3, #14
 800cdb6:	f200 80ad 	bhi.w	800cf14 <_dtoa_r+0x484>
 800cdba:	2d00      	cmp	r5, #0
 800cdbc:	f000 80aa 	beq.w	800cf14 <_dtoa_r+0x484>
 800cdc0:	f1ba 0f00 	cmp.w	sl, #0
 800cdc4:	dd36      	ble.n	800ce34 <_dtoa_r+0x3a4>
 800cdc6:	4ac3      	ldr	r2, [pc, #780]	; (800d0d4 <_dtoa_r+0x644>)
 800cdc8:	f00a 030f 	and.w	r3, sl, #15
 800cdcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdd0:	ed93 7b00 	vldr	d7, [r3]
 800cdd4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cdd8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cddc:	eeb0 8a47 	vmov.f32	s16, s14
 800cde0:	eef0 8a67 	vmov.f32	s17, s15
 800cde4:	d016      	beq.n	800ce14 <_dtoa_r+0x384>
 800cde6:	4bbc      	ldr	r3, [pc, #752]	; (800d0d8 <_dtoa_r+0x648>)
 800cde8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cdec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdf0:	f7f3 fd2c 	bl	800084c <__aeabi_ddiv>
 800cdf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdf8:	f007 070f 	and.w	r7, r7, #15
 800cdfc:	2503      	movs	r5, #3
 800cdfe:	4eb6      	ldr	r6, [pc, #728]	; (800d0d8 <_dtoa_r+0x648>)
 800ce00:	b957      	cbnz	r7, 800ce18 <_dtoa_r+0x388>
 800ce02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce06:	ec53 2b18 	vmov	r2, r3, d8
 800ce0a:	f7f3 fd1f 	bl	800084c <__aeabi_ddiv>
 800ce0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce12:	e029      	b.n	800ce68 <_dtoa_r+0x3d8>
 800ce14:	2502      	movs	r5, #2
 800ce16:	e7f2      	b.n	800cdfe <_dtoa_r+0x36e>
 800ce18:	07f9      	lsls	r1, r7, #31
 800ce1a:	d508      	bpl.n	800ce2e <_dtoa_r+0x39e>
 800ce1c:	ec51 0b18 	vmov	r0, r1, d8
 800ce20:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce24:	f7f3 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ce28:	ec41 0b18 	vmov	d8, r0, r1
 800ce2c:	3501      	adds	r5, #1
 800ce2e:	107f      	asrs	r7, r7, #1
 800ce30:	3608      	adds	r6, #8
 800ce32:	e7e5      	b.n	800ce00 <_dtoa_r+0x370>
 800ce34:	f000 80a6 	beq.w	800cf84 <_dtoa_r+0x4f4>
 800ce38:	f1ca 0600 	rsb	r6, sl, #0
 800ce3c:	4ba5      	ldr	r3, [pc, #660]	; (800d0d4 <_dtoa_r+0x644>)
 800ce3e:	4fa6      	ldr	r7, [pc, #664]	; (800d0d8 <_dtoa_r+0x648>)
 800ce40:	f006 020f 	and.w	r2, r6, #15
 800ce44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce50:	f7f3 fbd2 	bl	80005f8 <__aeabi_dmul>
 800ce54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce58:	1136      	asrs	r6, r6, #4
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	2502      	movs	r5, #2
 800ce5e:	2e00      	cmp	r6, #0
 800ce60:	f040 8085 	bne.w	800cf6e <_dtoa_r+0x4de>
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1d2      	bne.n	800ce0e <_dtoa_r+0x37e>
 800ce68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f000 808c 	beq.w	800cf88 <_dtoa_r+0x4f8>
 800ce70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce74:	4b99      	ldr	r3, [pc, #612]	; (800d0dc <_dtoa_r+0x64c>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	4630      	mov	r0, r6
 800ce7a:	4639      	mov	r1, r7
 800ce7c:	f7f3 fe2e 	bl	8000adc <__aeabi_dcmplt>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	f000 8081 	beq.w	800cf88 <_dtoa_r+0x4f8>
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d07d      	beq.n	800cf88 <_dtoa_r+0x4f8>
 800ce8c:	f1b9 0f00 	cmp.w	r9, #0
 800ce90:	dd3c      	ble.n	800cf0c <_dtoa_r+0x47c>
 800ce92:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce96:	9307      	str	r3, [sp, #28]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	4b91      	ldr	r3, [pc, #580]	; (800d0e0 <_dtoa_r+0x650>)
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	4639      	mov	r1, r7
 800cea0:	f7f3 fbaa 	bl	80005f8 <__aeabi_dmul>
 800cea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cea8:	3501      	adds	r5, #1
 800ceaa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ceae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	f7f3 fb36 	bl	8000524 <__aeabi_i2d>
 800ceb8:	4632      	mov	r2, r6
 800ceba:	463b      	mov	r3, r7
 800cebc:	f7f3 fb9c 	bl	80005f8 <__aeabi_dmul>
 800cec0:	4b88      	ldr	r3, [pc, #544]	; (800d0e4 <_dtoa_r+0x654>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	f7f3 f9e2 	bl	800028c <__adddf3>
 800cec8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ced0:	9303      	str	r3, [sp, #12]
 800ced2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d15c      	bne.n	800cf92 <_dtoa_r+0x502>
 800ced8:	4b83      	ldr	r3, [pc, #524]	; (800d0e8 <_dtoa_r+0x658>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	4630      	mov	r0, r6
 800cede:	4639      	mov	r1, r7
 800cee0:	f7f3 f9d2 	bl	8000288 <__aeabi_dsub>
 800cee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cee8:	4606      	mov	r6, r0
 800ceea:	460f      	mov	r7, r1
 800ceec:	f7f3 fe14 	bl	8000b18 <__aeabi_dcmpgt>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	f040 8296 	bne.w	800d422 <_dtoa_r+0x992>
 800cef6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cefa:	4630      	mov	r0, r6
 800cefc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf00:	4639      	mov	r1, r7
 800cf02:	f7f3 fdeb 	bl	8000adc <__aeabi_dcmplt>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	f040 8288 	bne.w	800d41c <_dtoa_r+0x98c>
 800cf0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f2c0 8158 	blt.w	800d1cc <_dtoa_r+0x73c>
 800cf1c:	f1ba 0f0e 	cmp.w	sl, #14
 800cf20:	f300 8154 	bgt.w	800d1cc <_dtoa_r+0x73c>
 800cf24:	4b6b      	ldr	r3, [pc, #428]	; (800d0d4 <_dtoa_r+0x644>)
 800cf26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f280 80e3 	bge.w	800d0fc <_dtoa_r+0x66c>
 800cf36:	9b01      	ldr	r3, [sp, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f300 80df 	bgt.w	800d0fc <_dtoa_r+0x66c>
 800cf3e:	f040 826d 	bne.w	800d41c <_dtoa_r+0x98c>
 800cf42:	4b69      	ldr	r3, [pc, #420]	; (800d0e8 <_dtoa_r+0x658>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	4640      	mov	r0, r8
 800cf48:	4649      	mov	r1, r9
 800cf4a:	f7f3 fb55 	bl	80005f8 <__aeabi_dmul>
 800cf4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf52:	f7f3 fdd7 	bl	8000b04 <__aeabi_dcmpge>
 800cf56:	9e01      	ldr	r6, [sp, #4]
 800cf58:	4637      	mov	r7, r6
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	f040 8243 	bne.w	800d3e6 <_dtoa_r+0x956>
 800cf60:	9d00      	ldr	r5, [sp, #0]
 800cf62:	2331      	movs	r3, #49	; 0x31
 800cf64:	f805 3b01 	strb.w	r3, [r5], #1
 800cf68:	f10a 0a01 	add.w	sl, sl, #1
 800cf6c:	e23f      	b.n	800d3ee <_dtoa_r+0x95e>
 800cf6e:	07f2      	lsls	r2, r6, #31
 800cf70:	d505      	bpl.n	800cf7e <_dtoa_r+0x4ee>
 800cf72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf76:	f7f3 fb3f 	bl	80005f8 <__aeabi_dmul>
 800cf7a:	3501      	adds	r5, #1
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	1076      	asrs	r6, r6, #1
 800cf80:	3708      	adds	r7, #8
 800cf82:	e76c      	b.n	800ce5e <_dtoa_r+0x3ce>
 800cf84:	2502      	movs	r5, #2
 800cf86:	e76f      	b.n	800ce68 <_dtoa_r+0x3d8>
 800cf88:	9b01      	ldr	r3, [sp, #4]
 800cf8a:	f8cd a01c 	str.w	sl, [sp, #28]
 800cf8e:	930c      	str	r3, [sp, #48]	; 0x30
 800cf90:	e78d      	b.n	800ceae <_dtoa_r+0x41e>
 800cf92:	9900      	ldr	r1, [sp, #0]
 800cf94:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cf96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf98:	4b4e      	ldr	r3, [pc, #312]	; (800d0d4 <_dtoa_r+0x644>)
 800cf9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf9e:	4401      	add	r1, r0
 800cfa0:	9102      	str	r1, [sp, #8]
 800cfa2:	9908      	ldr	r1, [sp, #32]
 800cfa4:	eeb0 8a47 	vmov.f32	s16, s14
 800cfa8:	eef0 8a67 	vmov.f32	s17, s15
 800cfac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cfb4:	2900      	cmp	r1, #0
 800cfb6:	d045      	beq.n	800d044 <_dtoa_r+0x5b4>
 800cfb8:	494c      	ldr	r1, [pc, #304]	; (800d0ec <_dtoa_r+0x65c>)
 800cfba:	2000      	movs	r0, #0
 800cfbc:	f7f3 fc46 	bl	800084c <__aeabi_ddiv>
 800cfc0:	ec53 2b18 	vmov	r2, r3, d8
 800cfc4:	f7f3 f960 	bl	8000288 <__aeabi_dsub>
 800cfc8:	9d00      	ldr	r5, [sp, #0]
 800cfca:	ec41 0b18 	vmov	d8, r0, r1
 800cfce:	4639      	mov	r1, r7
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7f3 fdc1 	bl	8000b58 <__aeabi_d2iz>
 800cfd6:	900c      	str	r0, [sp, #48]	; 0x30
 800cfd8:	f7f3 faa4 	bl	8000524 <__aeabi_i2d>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	f7f3 f950 	bl	8000288 <__aeabi_dsub>
 800cfe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfea:	3330      	adds	r3, #48	; 0x30
 800cfec:	f805 3b01 	strb.w	r3, [r5], #1
 800cff0:	ec53 2b18 	vmov	r2, r3, d8
 800cff4:	4606      	mov	r6, r0
 800cff6:	460f      	mov	r7, r1
 800cff8:	f7f3 fd70 	bl	8000adc <__aeabi_dcmplt>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d165      	bne.n	800d0cc <_dtoa_r+0x63c>
 800d000:	4632      	mov	r2, r6
 800d002:	463b      	mov	r3, r7
 800d004:	4935      	ldr	r1, [pc, #212]	; (800d0dc <_dtoa_r+0x64c>)
 800d006:	2000      	movs	r0, #0
 800d008:	f7f3 f93e 	bl	8000288 <__aeabi_dsub>
 800d00c:	ec53 2b18 	vmov	r2, r3, d8
 800d010:	f7f3 fd64 	bl	8000adc <__aeabi_dcmplt>
 800d014:	2800      	cmp	r0, #0
 800d016:	f040 80b9 	bne.w	800d18c <_dtoa_r+0x6fc>
 800d01a:	9b02      	ldr	r3, [sp, #8]
 800d01c:	429d      	cmp	r5, r3
 800d01e:	f43f af75 	beq.w	800cf0c <_dtoa_r+0x47c>
 800d022:	4b2f      	ldr	r3, [pc, #188]	; (800d0e0 <_dtoa_r+0x650>)
 800d024:	ec51 0b18 	vmov	r0, r1, d8
 800d028:	2200      	movs	r2, #0
 800d02a:	f7f3 fae5 	bl	80005f8 <__aeabi_dmul>
 800d02e:	4b2c      	ldr	r3, [pc, #176]	; (800d0e0 <_dtoa_r+0x650>)
 800d030:	ec41 0b18 	vmov	d8, r0, r1
 800d034:	2200      	movs	r2, #0
 800d036:	4630      	mov	r0, r6
 800d038:	4639      	mov	r1, r7
 800d03a:	f7f3 fadd 	bl	80005f8 <__aeabi_dmul>
 800d03e:	4606      	mov	r6, r0
 800d040:	460f      	mov	r7, r1
 800d042:	e7c4      	b.n	800cfce <_dtoa_r+0x53e>
 800d044:	ec51 0b17 	vmov	r0, r1, d7
 800d048:	f7f3 fad6 	bl	80005f8 <__aeabi_dmul>
 800d04c:	9b02      	ldr	r3, [sp, #8]
 800d04e:	9d00      	ldr	r5, [sp, #0]
 800d050:	930c      	str	r3, [sp, #48]	; 0x30
 800d052:	ec41 0b18 	vmov	d8, r0, r1
 800d056:	4639      	mov	r1, r7
 800d058:	4630      	mov	r0, r6
 800d05a:	f7f3 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800d05e:	9011      	str	r0, [sp, #68]	; 0x44
 800d060:	f7f3 fa60 	bl	8000524 <__aeabi_i2d>
 800d064:	4602      	mov	r2, r0
 800d066:	460b      	mov	r3, r1
 800d068:	4630      	mov	r0, r6
 800d06a:	4639      	mov	r1, r7
 800d06c:	f7f3 f90c 	bl	8000288 <__aeabi_dsub>
 800d070:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d072:	3330      	adds	r3, #48	; 0x30
 800d074:	f805 3b01 	strb.w	r3, [r5], #1
 800d078:	9b02      	ldr	r3, [sp, #8]
 800d07a:	429d      	cmp	r5, r3
 800d07c:	4606      	mov	r6, r0
 800d07e:	460f      	mov	r7, r1
 800d080:	f04f 0200 	mov.w	r2, #0
 800d084:	d134      	bne.n	800d0f0 <_dtoa_r+0x660>
 800d086:	4b19      	ldr	r3, [pc, #100]	; (800d0ec <_dtoa_r+0x65c>)
 800d088:	ec51 0b18 	vmov	r0, r1, d8
 800d08c:	f7f3 f8fe 	bl	800028c <__adddf3>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	4630      	mov	r0, r6
 800d096:	4639      	mov	r1, r7
 800d098:	f7f3 fd3e 	bl	8000b18 <__aeabi_dcmpgt>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d175      	bne.n	800d18c <_dtoa_r+0x6fc>
 800d0a0:	ec53 2b18 	vmov	r2, r3, d8
 800d0a4:	4911      	ldr	r1, [pc, #68]	; (800d0ec <_dtoa_r+0x65c>)
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	f7f3 f8ee 	bl	8000288 <__aeabi_dsub>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	f7f3 fd12 	bl	8000adc <__aeabi_dcmplt>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	f43f af27 	beq.w	800cf0c <_dtoa_r+0x47c>
 800d0be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0c0:	1e6b      	subs	r3, r5, #1
 800d0c2:	930c      	str	r3, [sp, #48]	; 0x30
 800d0c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d0c8:	2b30      	cmp	r3, #48	; 0x30
 800d0ca:	d0f8      	beq.n	800d0be <_dtoa_r+0x62e>
 800d0cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d0d0:	e04a      	b.n	800d168 <_dtoa_r+0x6d8>
 800d0d2:	bf00      	nop
 800d0d4:	0800efb0 	.word	0x0800efb0
 800d0d8:	0800ef88 	.word	0x0800ef88
 800d0dc:	3ff00000 	.word	0x3ff00000
 800d0e0:	40240000 	.word	0x40240000
 800d0e4:	401c0000 	.word	0x401c0000
 800d0e8:	40140000 	.word	0x40140000
 800d0ec:	3fe00000 	.word	0x3fe00000
 800d0f0:	4baf      	ldr	r3, [pc, #700]	; (800d3b0 <_dtoa_r+0x920>)
 800d0f2:	f7f3 fa81 	bl	80005f8 <__aeabi_dmul>
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	460f      	mov	r7, r1
 800d0fa:	e7ac      	b.n	800d056 <_dtoa_r+0x5c6>
 800d0fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d100:	9d00      	ldr	r5, [sp, #0]
 800d102:	4642      	mov	r2, r8
 800d104:	464b      	mov	r3, r9
 800d106:	4630      	mov	r0, r6
 800d108:	4639      	mov	r1, r7
 800d10a:	f7f3 fb9f 	bl	800084c <__aeabi_ddiv>
 800d10e:	f7f3 fd23 	bl	8000b58 <__aeabi_d2iz>
 800d112:	9002      	str	r0, [sp, #8]
 800d114:	f7f3 fa06 	bl	8000524 <__aeabi_i2d>
 800d118:	4642      	mov	r2, r8
 800d11a:	464b      	mov	r3, r9
 800d11c:	f7f3 fa6c 	bl	80005f8 <__aeabi_dmul>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	4630      	mov	r0, r6
 800d126:	4639      	mov	r1, r7
 800d128:	f7f3 f8ae 	bl	8000288 <__aeabi_dsub>
 800d12c:	9e02      	ldr	r6, [sp, #8]
 800d12e:	9f01      	ldr	r7, [sp, #4]
 800d130:	3630      	adds	r6, #48	; 0x30
 800d132:	f805 6b01 	strb.w	r6, [r5], #1
 800d136:	9e00      	ldr	r6, [sp, #0]
 800d138:	1bae      	subs	r6, r5, r6
 800d13a:	42b7      	cmp	r7, r6
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	d137      	bne.n	800d1b2 <_dtoa_r+0x722>
 800d142:	f7f3 f8a3 	bl	800028c <__adddf3>
 800d146:	4642      	mov	r2, r8
 800d148:	464b      	mov	r3, r9
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	f7f3 fce3 	bl	8000b18 <__aeabi_dcmpgt>
 800d152:	b9c8      	cbnz	r0, 800d188 <_dtoa_r+0x6f8>
 800d154:	4642      	mov	r2, r8
 800d156:	464b      	mov	r3, r9
 800d158:	4630      	mov	r0, r6
 800d15a:	4639      	mov	r1, r7
 800d15c:	f7f3 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d160:	b110      	cbz	r0, 800d168 <_dtoa_r+0x6d8>
 800d162:	9b02      	ldr	r3, [sp, #8]
 800d164:	07d9      	lsls	r1, r3, #31
 800d166:	d40f      	bmi.n	800d188 <_dtoa_r+0x6f8>
 800d168:	4620      	mov	r0, r4
 800d16a:	4659      	mov	r1, fp
 800d16c:	f000 fad6 	bl	800d71c <_Bfree>
 800d170:	2300      	movs	r3, #0
 800d172:	702b      	strb	r3, [r5, #0]
 800d174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d176:	f10a 0001 	add.w	r0, sl, #1
 800d17a:	6018      	str	r0, [r3, #0]
 800d17c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f43f acd8 	beq.w	800cb34 <_dtoa_r+0xa4>
 800d184:	601d      	str	r5, [r3, #0]
 800d186:	e4d5      	b.n	800cb34 <_dtoa_r+0xa4>
 800d188:	f8cd a01c 	str.w	sl, [sp, #28]
 800d18c:	462b      	mov	r3, r5
 800d18e:	461d      	mov	r5, r3
 800d190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d194:	2a39      	cmp	r2, #57	; 0x39
 800d196:	d108      	bne.n	800d1aa <_dtoa_r+0x71a>
 800d198:	9a00      	ldr	r2, [sp, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d1f7      	bne.n	800d18e <_dtoa_r+0x6fe>
 800d19e:	9a07      	ldr	r2, [sp, #28]
 800d1a0:	9900      	ldr	r1, [sp, #0]
 800d1a2:	3201      	adds	r2, #1
 800d1a4:	9207      	str	r2, [sp, #28]
 800d1a6:	2230      	movs	r2, #48	; 0x30
 800d1a8:	700a      	strb	r2, [r1, #0]
 800d1aa:	781a      	ldrb	r2, [r3, #0]
 800d1ac:	3201      	adds	r2, #1
 800d1ae:	701a      	strb	r2, [r3, #0]
 800d1b0:	e78c      	b.n	800d0cc <_dtoa_r+0x63c>
 800d1b2:	4b7f      	ldr	r3, [pc, #508]	; (800d3b0 <_dtoa_r+0x920>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f7f3 fa1f 	bl	80005f8 <__aeabi_dmul>
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4606      	mov	r6, r0
 800d1c0:	460f      	mov	r7, r1
 800d1c2:	f7f3 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d09b      	beq.n	800d102 <_dtoa_r+0x672>
 800d1ca:	e7cd      	b.n	800d168 <_dtoa_r+0x6d8>
 800d1cc:	9a08      	ldr	r2, [sp, #32]
 800d1ce:	2a00      	cmp	r2, #0
 800d1d0:	f000 80c4 	beq.w	800d35c <_dtoa_r+0x8cc>
 800d1d4:	9a05      	ldr	r2, [sp, #20]
 800d1d6:	2a01      	cmp	r2, #1
 800d1d8:	f300 80a8 	bgt.w	800d32c <_dtoa_r+0x89c>
 800d1dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d1de:	2a00      	cmp	r2, #0
 800d1e0:	f000 80a0 	beq.w	800d324 <_dtoa_r+0x894>
 800d1e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d1e8:	9e06      	ldr	r6, [sp, #24]
 800d1ea:	4645      	mov	r5, r8
 800d1ec:	9a04      	ldr	r2, [sp, #16]
 800d1ee:	2101      	movs	r1, #1
 800d1f0:	441a      	add	r2, r3
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	4498      	add	r8, r3
 800d1f6:	9204      	str	r2, [sp, #16]
 800d1f8:	f000 fb4c 	bl	800d894 <__i2b>
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	2d00      	cmp	r5, #0
 800d200:	dd0b      	ble.n	800d21a <_dtoa_r+0x78a>
 800d202:	9b04      	ldr	r3, [sp, #16]
 800d204:	2b00      	cmp	r3, #0
 800d206:	dd08      	ble.n	800d21a <_dtoa_r+0x78a>
 800d208:	42ab      	cmp	r3, r5
 800d20a:	9a04      	ldr	r2, [sp, #16]
 800d20c:	bfa8      	it	ge
 800d20e:	462b      	movge	r3, r5
 800d210:	eba8 0803 	sub.w	r8, r8, r3
 800d214:	1aed      	subs	r5, r5, r3
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	9304      	str	r3, [sp, #16]
 800d21a:	9b06      	ldr	r3, [sp, #24]
 800d21c:	b1fb      	cbz	r3, 800d25e <_dtoa_r+0x7ce>
 800d21e:	9b08      	ldr	r3, [sp, #32]
 800d220:	2b00      	cmp	r3, #0
 800d222:	f000 809f 	beq.w	800d364 <_dtoa_r+0x8d4>
 800d226:	2e00      	cmp	r6, #0
 800d228:	dd11      	ble.n	800d24e <_dtoa_r+0x7be>
 800d22a:	4639      	mov	r1, r7
 800d22c:	4632      	mov	r2, r6
 800d22e:	4620      	mov	r0, r4
 800d230:	f000 fbec 	bl	800da0c <__pow5mult>
 800d234:	465a      	mov	r2, fp
 800d236:	4601      	mov	r1, r0
 800d238:	4607      	mov	r7, r0
 800d23a:	4620      	mov	r0, r4
 800d23c:	f000 fb40 	bl	800d8c0 <__multiply>
 800d240:	4659      	mov	r1, fp
 800d242:	9007      	str	r0, [sp, #28]
 800d244:	4620      	mov	r0, r4
 800d246:	f000 fa69 	bl	800d71c <_Bfree>
 800d24a:	9b07      	ldr	r3, [sp, #28]
 800d24c:	469b      	mov	fp, r3
 800d24e:	9b06      	ldr	r3, [sp, #24]
 800d250:	1b9a      	subs	r2, r3, r6
 800d252:	d004      	beq.n	800d25e <_dtoa_r+0x7ce>
 800d254:	4659      	mov	r1, fp
 800d256:	4620      	mov	r0, r4
 800d258:	f000 fbd8 	bl	800da0c <__pow5mult>
 800d25c:	4683      	mov	fp, r0
 800d25e:	2101      	movs	r1, #1
 800d260:	4620      	mov	r0, r4
 800d262:	f000 fb17 	bl	800d894 <__i2b>
 800d266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d268:	2b00      	cmp	r3, #0
 800d26a:	4606      	mov	r6, r0
 800d26c:	dd7c      	ble.n	800d368 <_dtoa_r+0x8d8>
 800d26e:	461a      	mov	r2, r3
 800d270:	4601      	mov	r1, r0
 800d272:	4620      	mov	r0, r4
 800d274:	f000 fbca 	bl	800da0c <__pow5mult>
 800d278:	9b05      	ldr	r3, [sp, #20]
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	4606      	mov	r6, r0
 800d27e:	dd76      	ble.n	800d36e <_dtoa_r+0x8de>
 800d280:	2300      	movs	r3, #0
 800d282:	9306      	str	r3, [sp, #24]
 800d284:	6933      	ldr	r3, [r6, #16]
 800d286:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d28a:	6918      	ldr	r0, [r3, #16]
 800d28c:	f000 fab2 	bl	800d7f4 <__hi0bits>
 800d290:	f1c0 0020 	rsb	r0, r0, #32
 800d294:	9b04      	ldr	r3, [sp, #16]
 800d296:	4418      	add	r0, r3
 800d298:	f010 001f 	ands.w	r0, r0, #31
 800d29c:	f000 8086 	beq.w	800d3ac <_dtoa_r+0x91c>
 800d2a0:	f1c0 0320 	rsb	r3, r0, #32
 800d2a4:	2b04      	cmp	r3, #4
 800d2a6:	dd7f      	ble.n	800d3a8 <_dtoa_r+0x918>
 800d2a8:	f1c0 001c 	rsb	r0, r0, #28
 800d2ac:	9b04      	ldr	r3, [sp, #16]
 800d2ae:	4403      	add	r3, r0
 800d2b0:	4480      	add	r8, r0
 800d2b2:	4405      	add	r5, r0
 800d2b4:	9304      	str	r3, [sp, #16]
 800d2b6:	f1b8 0f00 	cmp.w	r8, #0
 800d2ba:	dd05      	ble.n	800d2c8 <_dtoa_r+0x838>
 800d2bc:	4659      	mov	r1, fp
 800d2be:	4642      	mov	r2, r8
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f000 fbfd 	bl	800dac0 <__lshift>
 800d2c6:	4683      	mov	fp, r0
 800d2c8:	9b04      	ldr	r3, [sp, #16]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	dd05      	ble.n	800d2da <_dtoa_r+0x84a>
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f000 fbf4 	bl	800dac0 <__lshift>
 800d2d8:	4606      	mov	r6, r0
 800d2da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d069      	beq.n	800d3b4 <_dtoa_r+0x924>
 800d2e0:	4631      	mov	r1, r6
 800d2e2:	4658      	mov	r0, fp
 800d2e4:	f000 fc58 	bl	800db98 <__mcmp>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	da63      	bge.n	800d3b4 <_dtoa_r+0x924>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4659      	mov	r1, fp
 800d2f0:	220a      	movs	r2, #10
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f000 fa34 	bl	800d760 <__multadd>
 800d2f8:	9b08      	ldr	r3, [sp, #32]
 800d2fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2fe:	4683      	mov	fp, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 818f 	beq.w	800d624 <_dtoa_r+0xb94>
 800d306:	4639      	mov	r1, r7
 800d308:	2300      	movs	r3, #0
 800d30a:	220a      	movs	r2, #10
 800d30c:	4620      	mov	r0, r4
 800d30e:	f000 fa27 	bl	800d760 <__multadd>
 800d312:	f1b9 0f00 	cmp.w	r9, #0
 800d316:	4607      	mov	r7, r0
 800d318:	f300 808e 	bgt.w	800d438 <_dtoa_r+0x9a8>
 800d31c:	9b05      	ldr	r3, [sp, #20]
 800d31e:	2b02      	cmp	r3, #2
 800d320:	dc50      	bgt.n	800d3c4 <_dtoa_r+0x934>
 800d322:	e089      	b.n	800d438 <_dtoa_r+0x9a8>
 800d324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d326:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d32a:	e75d      	b.n	800d1e8 <_dtoa_r+0x758>
 800d32c:	9b01      	ldr	r3, [sp, #4]
 800d32e:	1e5e      	subs	r6, r3, #1
 800d330:	9b06      	ldr	r3, [sp, #24]
 800d332:	42b3      	cmp	r3, r6
 800d334:	bfbf      	itttt	lt
 800d336:	9b06      	ldrlt	r3, [sp, #24]
 800d338:	9606      	strlt	r6, [sp, #24]
 800d33a:	1af2      	sublt	r2, r6, r3
 800d33c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d33e:	bfb6      	itet	lt
 800d340:	189b      	addlt	r3, r3, r2
 800d342:	1b9e      	subge	r6, r3, r6
 800d344:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d346:	9b01      	ldr	r3, [sp, #4]
 800d348:	bfb8      	it	lt
 800d34a:	2600      	movlt	r6, #0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bfb5      	itete	lt
 800d350:	eba8 0503 	sublt.w	r5, r8, r3
 800d354:	9b01      	ldrge	r3, [sp, #4]
 800d356:	2300      	movlt	r3, #0
 800d358:	4645      	movge	r5, r8
 800d35a:	e747      	b.n	800d1ec <_dtoa_r+0x75c>
 800d35c:	9e06      	ldr	r6, [sp, #24]
 800d35e:	9f08      	ldr	r7, [sp, #32]
 800d360:	4645      	mov	r5, r8
 800d362:	e74c      	b.n	800d1fe <_dtoa_r+0x76e>
 800d364:	9a06      	ldr	r2, [sp, #24]
 800d366:	e775      	b.n	800d254 <_dtoa_r+0x7c4>
 800d368:	9b05      	ldr	r3, [sp, #20]
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	dc18      	bgt.n	800d3a0 <_dtoa_r+0x910>
 800d36e:	9b02      	ldr	r3, [sp, #8]
 800d370:	b9b3      	cbnz	r3, 800d3a0 <_dtoa_r+0x910>
 800d372:	9b03      	ldr	r3, [sp, #12]
 800d374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d378:	b9a3      	cbnz	r3, 800d3a4 <_dtoa_r+0x914>
 800d37a:	9b03      	ldr	r3, [sp, #12]
 800d37c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d380:	0d1b      	lsrs	r3, r3, #20
 800d382:	051b      	lsls	r3, r3, #20
 800d384:	b12b      	cbz	r3, 800d392 <_dtoa_r+0x902>
 800d386:	9b04      	ldr	r3, [sp, #16]
 800d388:	3301      	adds	r3, #1
 800d38a:	9304      	str	r3, [sp, #16]
 800d38c:	f108 0801 	add.w	r8, r8, #1
 800d390:	2301      	movs	r3, #1
 800d392:	9306      	str	r3, [sp, #24]
 800d394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d396:	2b00      	cmp	r3, #0
 800d398:	f47f af74 	bne.w	800d284 <_dtoa_r+0x7f4>
 800d39c:	2001      	movs	r0, #1
 800d39e:	e779      	b.n	800d294 <_dtoa_r+0x804>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	e7f6      	b.n	800d392 <_dtoa_r+0x902>
 800d3a4:	9b02      	ldr	r3, [sp, #8]
 800d3a6:	e7f4      	b.n	800d392 <_dtoa_r+0x902>
 800d3a8:	d085      	beq.n	800d2b6 <_dtoa_r+0x826>
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	301c      	adds	r0, #28
 800d3ae:	e77d      	b.n	800d2ac <_dtoa_r+0x81c>
 800d3b0:	40240000 	.word	0x40240000
 800d3b4:	9b01      	ldr	r3, [sp, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	dc38      	bgt.n	800d42c <_dtoa_r+0x99c>
 800d3ba:	9b05      	ldr	r3, [sp, #20]
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	dd35      	ble.n	800d42c <_dtoa_r+0x99c>
 800d3c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d3c4:	f1b9 0f00 	cmp.w	r9, #0
 800d3c8:	d10d      	bne.n	800d3e6 <_dtoa_r+0x956>
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	464b      	mov	r3, r9
 800d3ce:	2205      	movs	r2, #5
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f000 f9c5 	bl	800d760 <__multadd>
 800d3d6:	4601      	mov	r1, r0
 800d3d8:	4606      	mov	r6, r0
 800d3da:	4658      	mov	r0, fp
 800d3dc:	f000 fbdc 	bl	800db98 <__mcmp>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	f73f adbd 	bgt.w	800cf60 <_dtoa_r+0x4d0>
 800d3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e8:	9d00      	ldr	r5, [sp, #0]
 800d3ea:	ea6f 0a03 	mvn.w	sl, r3
 800d3ee:	f04f 0800 	mov.w	r8, #0
 800d3f2:	4631      	mov	r1, r6
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	f000 f991 	bl	800d71c <_Bfree>
 800d3fa:	2f00      	cmp	r7, #0
 800d3fc:	f43f aeb4 	beq.w	800d168 <_dtoa_r+0x6d8>
 800d400:	f1b8 0f00 	cmp.w	r8, #0
 800d404:	d005      	beq.n	800d412 <_dtoa_r+0x982>
 800d406:	45b8      	cmp	r8, r7
 800d408:	d003      	beq.n	800d412 <_dtoa_r+0x982>
 800d40a:	4641      	mov	r1, r8
 800d40c:	4620      	mov	r0, r4
 800d40e:	f000 f985 	bl	800d71c <_Bfree>
 800d412:	4639      	mov	r1, r7
 800d414:	4620      	mov	r0, r4
 800d416:	f000 f981 	bl	800d71c <_Bfree>
 800d41a:	e6a5      	b.n	800d168 <_dtoa_r+0x6d8>
 800d41c:	2600      	movs	r6, #0
 800d41e:	4637      	mov	r7, r6
 800d420:	e7e1      	b.n	800d3e6 <_dtoa_r+0x956>
 800d422:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d424:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d428:	4637      	mov	r7, r6
 800d42a:	e599      	b.n	800cf60 <_dtoa_r+0x4d0>
 800d42c:	9b08      	ldr	r3, [sp, #32]
 800d42e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	f000 80fd 	beq.w	800d632 <_dtoa_r+0xba2>
 800d438:	2d00      	cmp	r5, #0
 800d43a:	dd05      	ble.n	800d448 <_dtoa_r+0x9b8>
 800d43c:	4639      	mov	r1, r7
 800d43e:	462a      	mov	r2, r5
 800d440:	4620      	mov	r0, r4
 800d442:	f000 fb3d 	bl	800dac0 <__lshift>
 800d446:	4607      	mov	r7, r0
 800d448:	9b06      	ldr	r3, [sp, #24]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d05c      	beq.n	800d508 <_dtoa_r+0xa78>
 800d44e:	6879      	ldr	r1, [r7, #4]
 800d450:	4620      	mov	r0, r4
 800d452:	f000 f923 	bl	800d69c <_Balloc>
 800d456:	4605      	mov	r5, r0
 800d458:	b928      	cbnz	r0, 800d466 <_dtoa_r+0x9d6>
 800d45a:	4b80      	ldr	r3, [pc, #512]	; (800d65c <_dtoa_r+0xbcc>)
 800d45c:	4602      	mov	r2, r0
 800d45e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d462:	f7ff bb2e 	b.w	800cac2 <_dtoa_r+0x32>
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	3202      	adds	r2, #2
 800d46a:	0092      	lsls	r2, r2, #2
 800d46c:	f107 010c 	add.w	r1, r7, #12
 800d470:	300c      	adds	r0, #12
 800d472:	f000 f905 	bl	800d680 <memcpy>
 800d476:	2201      	movs	r2, #1
 800d478:	4629      	mov	r1, r5
 800d47a:	4620      	mov	r0, r4
 800d47c:	f000 fb20 	bl	800dac0 <__lshift>
 800d480:	9b00      	ldr	r3, [sp, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	9b00      	ldr	r3, [sp, #0]
 800d488:	444b      	add	r3, r9
 800d48a:	9307      	str	r3, [sp, #28]
 800d48c:	9b02      	ldr	r3, [sp, #8]
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	46b8      	mov	r8, r7
 800d494:	9306      	str	r3, [sp, #24]
 800d496:	4607      	mov	r7, r0
 800d498:	9b01      	ldr	r3, [sp, #4]
 800d49a:	4631      	mov	r1, r6
 800d49c:	3b01      	subs	r3, #1
 800d49e:	4658      	mov	r0, fp
 800d4a0:	9302      	str	r3, [sp, #8]
 800d4a2:	f7ff fa6a 	bl	800c97a <quorem>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	3330      	adds	r3, #48	; 0x30
 800d4aa:	9004      	str	r0, [sp, #16]
 800d4ac:	4641      	mov	r1, r8
 800d4ae:	4658      	mov	r0, fp
 800d4b0:	9308      	str	r3, [sp, #32]
 800d4b2:	f000 fb71 	bl	800db98 <__mcmp>
 800d4b6:	463a      	mov	r2, r7
 800d4b8:	4681      	mov	r9, r0
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f000 fb87 	bl	800dbd0 <__mdiff>
 800d4c2:	68c2      	ldr	r2, [r0, #12]
 800d4c4:	9b08      	ldr	r3, [sp, #32]
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	bb02      	cbnz	r2, 800d50c <_dtoa_r+0xa7c>
 800d4ca:	4601      	mov	r1, r0
 800d4cc:	4658      	mov	r0, fp
 800d4ce:	f000 fb63 	bl	800db98 <__mcmp>
 800d4d2:	9b08      	ldr	r3, [sp, #32]
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	4620      	mov	r0, r4
 800d4da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d4de:	f000 f91d 	bl	800d71c <_Bfree>
 800d4e2:	9b05      	ldr	r3, [sp, #20]
 800d4e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4e6:	9d01      	ldr	r5, [sp, #4]
 800d4e8:	ea43 0102 	orr.w	r1, r3, r2
 800d4ec:	9b06      	ldr	r3, [sp, #24]
 800d4ee:	430b      	orrs	r3, r1
 800d4f0:	9b08      	ldr	r3, [sp, #32]
 800d4f2:	d10d      	bne.n	800d510 <_dtoa_r+0xa80>
 800d4f4:	2b39      	cmp	r3, #57	; 0x39
 800d4f6:	d029      	beq.n	800d54c <_dtoa_r+0xabc>
 800d4f8:	f1b9 0f00 	cmp.w	r9, #0
 800d4fc:	dd01      	ble.n	800d502 <_dtoa_r+0xa72>
 800d4fe:	9b04      	ldr	r3, [sp, #16]
 800d500:	3331      	adds	r3, #49	; 0x31
 800d502:	9a02      	ldr	r2, [sp, #8]
 800d504:	7013      	strb	r3, [r2, #0]
 800d506:	e774      	b.n	800d3f2 <_dtoa_r+0x962>
 800d508:	4638      	mov	r0, r7
 800d50a:	e7b9      	b.n	800d480 <_dtoa_r+0x9f0>
 800d50c:	2201      	movs	r2, #1
 800d50e:	e7e2      	b.n	800d4d6 <_dtoa_r+0xa46>
 800d510:	f1b9 0f00 	cmp.w	r9, #0
 800d514:	db06      	blt.n	800d524 <_dtoa_r+0xa94>
 800d516:	9905      	ldr	r1, [sp, #20]
 800d518:	ea41 0909 	orr.w	r9, r1, r9
 800d51c:	9906      	ldr	r1, [sp, #24]
 800d51e:	ea59 0101 	orrs.w	r1, r9, r1
 800d522:	d120      	bne.n	800d566 <_dtoa_r+0xad6>
 800d524:	2a00      	cmp	r2, #0
 800d526:	ddec      	ble.n	800d502 <_dtoa_r+0xa72>
 800d528:	4659      	mov	r1, fp
 800d52a:	2201      	movs	r2, #1
 800d52c:	4620      	mov	r0, r4
 800d52e:	9301      	str	r3, [sp, #4]
 800d530:	f000 fac6 	bl	800dac0 <__lshift>
 800d534:	4631      	mov	r1, r6
 800d536:	4683      	mov	fp, r0
 800d538:	f000 fb2e 	bl	800db98 <__mcmp>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	9b01      	ldr	r3, [sp, #4]
 800d540:	dc02      	bgt.n	800d548 <_dtoa_r+0xab8>
 800d542:	d1de      	bne.n	800d502 <_dtoa_r+0xa72>
 800d544:	07da      	lsls	r2, r3, #31
 800d546:	d5dc      	bpl.n	800d502 <_dtoa_r+0xa72>
 800d548:	2b39      	cmp	r3, #57	; 0x39
 800d54a:	d1d8      	bne.n	800d4fe <_dtoa_r+0xa6e>
 800d54c:	9a02      	ldr	r2, [sp, #8]
 800d54e:	2339      	movs	r3, #57	; 0x39
 800d550:	7013      	strb	r3, [r2, #0]
 800d552:	462b      	mov	r3, r5
 800d554:	461d      	mov	r5, r3
 800d556:	3b01      	subs	r3, #1
 800d558:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d55c:	2a39      	cmp	r2, #57	; 0x39
 800d55e:	d050      	beq.n	800d602 <_dtoa_r+0xb72>
 800d560:	3201      	adds	r2, #1
 800d562:	701a      	strb	r2, [r3, #0]
 800d564:	e745      	b.n	800d3f2 <_dtoa_r+0x962>
 800d566:	2a00      	cmp	r2, #0
 800d568:	dd03      	ble.n	800d572 <_dtoa_r+0xae2>
 800d56a:	2b39      	cmp	r3, #57	; 0x39
 800d56c:	d0ee      	beq.n	800d54c <_dtoa_r+0xabc>
 800d56e:	3301      	adds	r3, #1
 800d570:	e7c7      	b.n	800d502 <_dtoa_r+0xa72>
 800d572:	9a01      	ldr	r2, [sp, #4]
 800d574:	9907      	ldr	r1, [sp, #28]
 800d576:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d57a:	428a      	cmp	r2, r1
 800d57c:	d02a      	beq.n	800d5d4 <_dtoa_r+0xb44>
 800d57e:	4659      	mov	r1, fp
 800d580:	2300      	movs	r3, #0
 800d582:	220a      	movs	r2, #10
 800d584:	4620      	mov	r0, r4
 800d586:	f000 f8eb 	bl	800d760 <__multadd>
 800d58a:	45b8      	cmp	r8, r7
 800d58c:	4683      	mov	fp, r0
 800d58e:	f04f 0300 	mov.w	r3, #0
 800d592:	f04f 020a 	mov.w	r2, #10
 800d596:	4641      	mov	r1, r8
 800d598:	4620      	mov	r0, r4
 800d59a:	d107      	bne.n	800d5ac <_dtoa_r+0xb1c>
 800d59c:	f000 f8e0 	bl	800d760 <__multadd>
 800d5a0:	4680      	mov	r8, r0
 800d5a2:	4607      	mov	r7, r0
 800d5a4:	9b01      	ldr	r3, [sp, #4]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	9301      	str	r3, [sp, #4]
 800d5aa:	e775      	b.n	800d498 <_dtoa_r+0xa08>
 800d5ac:	f000 f8d8 	bl	800d760 <__multadd>
 800d5b0:	4639      	mov	r1, r7
 800d5b2:	4680      	mov	r8, r0
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	220a      	movs	r2, #10
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 f8d1 	bl	800d760 <__multadd>
 800d5be:	4607      	mov	r7, r0
 800d5c0:	e7f0      	b.n	800d5a4 <_dtoa_r+0xb14>
 800d5c2:	f1b9 0f00 	cmp.w	r9, #0
 800d5c6:	9a00      	ldr	r2, [sp, #0]
 800d5c8:	bfcc      	ite	gt
 800d5ca:	464d      	movgt	r5, r9
 800d5cc:	2501      	movle	r5, #1
 800d5ce:	4415      	add	r5, r2
 800d5d0:	f04f 0800 	mov.w	r8, #0
 800d5d4:	4659      	mov	r1, fp
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	4620      	mov	r0, r4
 800d5da:	9301      	str	r3, [sp, #4]
 800d5dc:	f000 fa70 	bl	800dac0 <__lshift>
 800d5e0:	4631      	mov	r1, r6
 800d5e2:	4683      	mov	fp, r0
 800d5e4:	f000 fad8 	bl	800db98 <__mcmp>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	dcb2      	bgt.n	800d552 <_dtoa_r+0xac2>
 800d5ec:	d102      	bne.n	800d5f4 <_dtoa_r+0xb64>
 800d5ee:	9b01      	ldr	r3, [sp, #4]
 800d5f0:	07db      	lsls	r3, r3, #31
 800d5f2:	d4ae      	bmi.n	800d552 <_dtoa_r+0xac2>
 800d5f4:	462b      	mov	r3, r5
 800d5f6:	461d      	mov	r5, r3
 800d5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5fc:	2a30      	cmp	r2, #48	; 0x30
 800d5fe:	d0fa      	beq.n	800d5f6 <_dtoa_r+0xb66>
 800d600:	e6f7      	b.n	800d3f2 <_dtoa_r+0x962>
 800d602:	9a00      	ldr	r2, [sp, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d1a5      	bne.n	800d554 <_dtoa_r+0xac4>
 800d608:	f10a 0a01 	add.w	sl, sl, #1
 800d60c:	2331      	movs	r3, #49	; 0x31
 800d60e:	e779      	b.n	800d504 <_dtoa_r+0xa74>
 800d610:	4b13      	ldr	r3, [pc, #76]	; (800d660 <_dtoa_r+0xbd0>)
 800d612:	f7ff baaf 	b.w	800cb74 <_dtoa_r+0xe4>
 800d616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f47f aa86 	bne.w	800cb2a <_dtoa_r+0x9a>
 800d61e:	4b11      	ldr	r3, [pc, #68]	; (800d664 <_dtoa_r+0xbd4>)
 800d620:	f7ff baa8 	b.w	800cb74 <_dtoa_r+0xe4>
 800d624:	f1b9 0f00 	cmp.w	r9, #0
 800d628:	dc03      	bgt.n	800d632 <_dtoa_r+0xba2>
 800d62a:	9b05      	ldr	r3, [sp, #20]
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	f73f aec9 	bgt.w	800d3c4 <_dtoa_r+0x934>
 800d632:	9d00      	ldr	r5, [sp, #0]
 800d634:	4631      	mov	r1, r6
 800d636:	4658      	mov	r0, fp
 800d638:	f7ff f99f 	bl	800c97a <quorem>
 800d63c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d640:	f805 3b01 	strb.w	r3, [r5], #1
 800d644:	9a00      	ldr	r2, [sp, #0]
 800d646:	1aaa      	subs	r2, r5, r2
 800d648:	4591      	cmp	r9, r2
 800d64a:	ddba      	ble.n	800d5c2 <_dtoa_r+0xb32>
 800d64c:	4659      	mov	r1, fp
 800d64e:	2300      	movs	r3, #0
 800d650:	220a      	movs	r2, #10
 800d652:	4620      	mov	r0, r4
 800d654:	f000 f884 	bl	800d760 <__multadd>
 800d658:	4683      	mov	fp, r0
 800d65a:	e7eb      	b.n	800d634 <_dtoa_r+0xba4>
 800d65c:	0800ef13 	.word	0x0800ef13
 800d660:	0800ee6c 	.word	0x0800ee6c
 800d664:	0800ee90 	.word	0x0800ee90

0800d668 <_localeconv_r>:
 800d668:	4800      	ldr	r0, [pc, #0]	; (800d66c <_localeconv_r+0x4>)
 800d66a:	4770      	bx	lr
 800d66c:	200002e8 	.word	0x200002e8

0800d670 <malloc>:
 800d670:	4b02      	ldr	r3, [pc, #8]	; (800d67c <malloc+0xc>)
 800d672:	4601      	mov	r1, r0
 800d674:	6818      	ldr	r0, [r3, #0]
 800d676:	f000 bbef 	b.w	800de58 <_malloc_r>
 800d67a:	bf00      	nop
 800d67c:	20000194 	.word	0x20000194

0800d680 <memcpy>:
 800d680:	440a      	add	r2, r1
 800d682:	4291      	cmp	r1, r2
 800d684:	f100 33ff 	add.w	r3, r0, #4294967295
 800d688:	d100      	bne.n	800d68c <memcpy+0xc>
 800d68a:	4770      	bx	lr
 800d68c:	b510      	push	{r4, lr}
 800d68e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d692:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d696:	4291      	cmp	r1, r2
 800d698:	d1f9      	bne.n	800d68e <memcpy+0xe>
 800d69a:	bd10      	pop	{r4, pc}

0800d69c <_Balloc>:
 800d69c:	b570      	push	{r4, r5, r6, lr}
 800d69e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	460d      	mov	r5, r1
 800d6a4:	b976      	cbnz	r6, 800d6c4 <_Balloc+0x28>
 800d6a6:	2010      	movs	r0, #16
 800d6a8:	f7ff ffe2 	bl	800d670 <malloc>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	6260      	str	r0, [r4, #36]	; 0x24
 800d6b0:	b920      	cbnz	r0, 800d6bc <_Balloc+0x20>
 800d6b2:	4b18      	ldr	r3, [pc, #96]	; (800d714 <_Balloc+0x78>)
 800d6b4:	4818      	ldr	r0, [pc, #96]	; (800d718 <_Balloc+0x7c>)
 800d6b6:	2166      	movs	r1, #102	; 0x66
 800d6b8:	f000 fd94 	bl	800e1e4 <__assert_func>
 800d6bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6c0:	6006      	str	r6, [r0, #0]
 800d6c2:	60c6      	str	r6, [r0, #12]
 800d6c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6c6:	68f3      	ldr	r3, [r6, #12]
 800d6c8:	b183      	cbz	r3, 800d6ec <_Balloc+0x50>
 800d6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6d2:	b9b8      	cbnz	r0, 800d704 <_Balloc+0x68>
 800d6d4:	2101      	movs	r1, #1
 800d6d6:	fa01 f605 	lsl.w	r6, r1, r5
 800d6da:	1d72      	adds	r2, r6, #5
 800d6dc:	0092      	lsls	r2, r2, #2
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f000 fb5a 	bl	800dd98 <_calloc_r>
 800d6e4:	b160      	cbz	r0, 800d700 <_Balloc+0x64>
 800d6e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6ea:	e00e      	b.n	800d70a <_Balloc+0x6e>
 800d6ec:	2221      	movs	r2, #33	; 0x21
 800d6ee:	2104      	movs	r1, #4
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f000 fb51 	bl	800dd98 <_calloc_r>
 800d6f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6f8:	60f0      	str	r0, [r6, #12]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e4      	bne.n	800d6ca <_Balloc+0x2e>
 800d700:	2000      	movs	r0, #0
 800d702:	bd70      	pop	{r4, r5, r6, pc}
 800d704:	6802      	ldr	r2, [r0, #0]
 800d706:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d70a:	2300      	movs	r3, #0
 800d70c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d710:	e7f7      	b.n	800d702 <_Balloc+0x66>
 800d712:	bf00      	nop
 800d714:	0800ee9d 	.word	0x0800ee9d
 800d718:	0800ef24 	.word	0x0800ef24

0800d71c <_Bfree>:
 800d71c:	b570      	push	{r4, r5, r6, lr}
 800d71e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d720:	4605      	mov	r5, r0
 800d722:	460c      	mov	r4, r1
 800d724:	b976      	cbnz	r6, 800d744 <_Bfree+0x28>
 800d726:	2010      	movs	r0, #16
 800d728:	f7ff ffa2 	bl	800d670 <malloc>
 800d72c:	4602      	mov	r2, r0
 800d72e:	6268      	str	r0, [r5, #36]	; 0x24
 800d730:	b920      	cbnz	r0, 800d73c <_Bfree+0x20>
 800d732:	4b09      	ldr	r3, [pc, #36]	; (800d758 <_Bfree+0x3c>)
 800d734:	4809      	ldr	r0, [pc, #36]	; (800d75c <_Bfree+0x40>)
 800d736:	218a      	movs	r1, #138	; 0x8a
 800d738:	f000 fd54 	bl	800e1e4 <__assert_func>
 800d73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d740:	6006      	str	r6, [r0, #0]
 800d742:	60c6      	str	r6, [r0, #12]
 800d744:	b13c      	cbz	r4, 800d756 <_Bfree+0x3a>
 800d746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d748:	6862      	ldr	r2, [r4, #4]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d750:	6021      	str	r1, [r4, #0]
 800d752:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d756:	bd70      	pop	{r4, r5, r6, pc}
 800d758:	0800ee9d 	.word	0x0800ee9d
 800d75c:	0800ef24 	.word	0x0800ef24

0800d760 <__multadd>:
 800d760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d764:	690e      	ldr	r6, [r1, #16]
 800d766:	4607      	mov	r7, r0
 800d768:	4698      	mov	r8, r3
 800d76a:	460c      	mov	r4, r1
 800d76c:	f101 0014 	add.w	r0, r1, #20
 800d770:	2300      	movs	r3, #0
 800d772:	6805      	ldr	r5, [r0, #0]
 800d774:	b2a9      	uxth	r1, r5
 800d776:	fb02 8101 	mla	r1, r2, r1, r8
 800d77a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d77e:	0c2d      	lsrs	r5, r5, #16
 800d780:	fb02 c505 	mla	r5, r2, r5, ip
 800d784:	b289      	uxth	r1, r1
 800d786:	3301      	adds	r3, #1
 800d788:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d78c:	429e      	cmp	r6, r3
 800d78e:	f840 1b04 	str.w	r1, [r0], #4
 800d792:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d796:	dcec      	bgt.n	800d772 <__multadd+0x12>
 800d798:	f1b8 0f00 	cmp.w	r8, #0
 800d79c:	d022      	beq.n	800d7e4 <__multadd+0x84>
 800d79e:	68a3      	ldr	r3, [r4, #8]
 800d7a0:	42b3      	cmp	r3, r6
 800d7a2:	dc19      	bgt.n	800d7d8 <__multadd+0x78>
 800d7a4:	6861      	ldr	r1, [r4, #4]
 800d7a6:	4638      	mov	r0, r7
 800d7a8:	3101      	adds	r1, #1
 800d7aa:	f7ff ff77 	bl	800d69c <_Balloc>
 800d7ae:	4605      	mov	r5, r0
 800d7b0:	b928      	cbnz	r0, 800d7be <__multadd+0x5e>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	4b0d      	ldr	r3, [pc, #52]	; (800d7ec <__multadd+0x8c>)
 800d7b6:	480e      	ldr	r0, [pc, #56]	; (800d7f0 <__multadd+0x90>)
 800d7b8:	21b5      	movs	r1, #181	; 0xb5
 800d7ba:	f000 fd13 	bl	800e1e4 <__assert_func>
 800d7be:	6922      	ldr	r2, [r4, #16]
 800d7c0:	3202      	adds	r2, #2
 800d7c2:	f104 010c 	add.w	r1, r4, #12
 800d7c6:	0092      	lsls	r2, r2, #2
 800d7c8:	300c      	adds	r0, #12
 800d7ca:	f7ff ff59 	bl	800d680 <memcpy>
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	f7ff ffa3 	bl	800d71c <_Bfree>
 800d7d6:	462c      	mov	r4, r5
 800d7d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d7dc:	3601      	adds	r6, #1
 800d7de:	f8c3 8014 	str.w	r8, [r3, #20]
 800d7e2:	6126      	str	r6, [r4, #16]
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ea:	bf00      	nop
 800d7ec:	0800ef13 	.word	0x0800ef13
 800d7f0:	0800ef24 	.word	0x0800ef24

0800d7f4 <__hi0bits>:
 800d7f4:	0c03      	lsrs	r3, r0, #16
 800d7f6:	041b      	lsls	r3, r3, #16
 800d7f8:	b9d3      	cbnz	r3, 800d830 <__hi0bits+0x3c>
 800d7fa:	0400      	lsls	r0, r0, #16
 800d7fc:	2310      	movs	r3, #16
 800d7fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d802:	bf04      	itt	eq
 800d804:	0200      	lsleq	r0, r0, #8
 800d806:	3308      	addeq	r3, #8
 800d808:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d80c:	bf04      	itt	eq
 800d80e:	0100      	lsleq	r0, r0, #4
 800d810:	3304      	addeq	r3, #4
 800d812:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d816:	bf04      	itt	eq
 800d818:	0080      	lsleq	r0, r0, #2
 800d81a:	3302      	addeq	r3, #2
 800d81c:	2800      	cmp	r0, #0
 800d81e:	db05      	blt.n	800d82c <__hi0bits+0x38>
 800d820:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d824:	f103 0301 	add.w	r3, r3, #1
 800d828:	bf08      	it	eq
 800d82a:	2320      	moveq	r3, #32
 800d82c:	4618      	mov	r0, r3
 800d82e:	4770      	bx	lr
 800d830:	2300      	movs	r3, #0
 800d832:	e7e4      	b.n	800d7fe <__hi0bits+0xa>

0800d834 <__lo0bits>:
 800d834:	6803      	ldr	r3, [r0, #0]
 800d836:	f013 0207 	ands.w	r2, r3, #7
 800d83a:	4601      	mov	r1, r0
 800d83c:	d00b      	beq.n	800d856 <__lo0bits+0x22>
 800d83e:	07da      	lsls	r2, r3, #31
 800d840:	d424      	bmi.n	800d88c <__lo0bits+0x58>
 800d842:	0798      	lsls	r0, r3, #30
 800d844:	bf49      	itett	mi
 800d846:	085b      	lsrmi	r3, r3, #1
 800d848:	089b      	lsrpl	r3, r3, #2
 800d84a:	2001      	movmi	r0, #1
 800d84c:	600b      	strmi	r3, [r1, #0]
 800d84e:	bf5c      	itt	pl
 800d850:	600b      	strpl	r3, [r1, #0]
 800d852:	2002      	movpl	r0, #2
 800d854:	4770      	bx	lr
 800d856:	b298      	uxth	r0, r3
 800d858:	b9b0      	cbnz	r0, 800d888 <__lo0bits+0x54>
 800d85a:	0c1b      	lsrs	r3, r3, #16
 800d85c:	2010      	movs	r0, #16
 800d85e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d862:	bf04      	itt	eq
 800d864:	0a1b      	lsreq	r3, r3, #8
 800d866:	3008      	addeq	r0, #8
 800d868:	071a      	lsls	r2, r3, #28
 800d86a:	bf04      	itt	eq
 800d86c:	091b      	lsreq	r3, r3, #4
 800d86e:	3004      	addeq	r0, #4
 800d870:	079a      	lsls	r2, r3, #30
 800d872:	bf04      	itt	eq
 800d874:	089b      	lsreq	r3, r3, #2
 800d876:	3002      	addeq	r0, #2
 800d878:	07da      	lsls	r2, r3, #31
 800d87a:	d403      	bmi.n	800d884 <__lo0bits+0x50>
 800d87c:	085b      	lsrs	r3, r3, #1
 800d87e:	f100 0001 	add.w	r0, r0, #1
 800d882:	d005      	beq.n	800d890 <__lo0bits+0x5c>
 800d884:	600b      	str	r3, [r1, #0]
 800d886:	4770      	bx	lr
 800d888:	4610      	mov	r0, r2
 800d88a:	e7e8      	b.n	800d85e <__lo0bits+0x2a>
 800d88c:	2000      	movs	r0, #0
 800d88e:	4770      	bx	lr
 800d890:	2020      	movs	r0, #32
 800d892:	4770      	bx	lr

0800d894 <__i2b>:
 800d894:	b510      	push	{r4, lr}
 800d896:	460c      	mov	r4, r1
 800d898:	2101      	movs	r1, #1
 800d89a:	f7ff feff 	bl	800d69c <_Balloc>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	b928      	cbnz	r0, 800d8ae <__i2b+0x1a>
 800d8a2:	4b05      	ldr	r3, [pc, #20]	; (800d8b8 <__i2b+0x24>)
 800d8a4:	4805      	ldr	r0, [pc, #20]	; (800d8bc <__i2b+0x28>)
 800d8a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d8aa:	f000 fc9b 	bl	800e1e4 <__assert_func>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	6144      	str	r4, [r0, #20]
 800d8b2:	6103      	str	r3, [r0, #16]
 800d8b4:	bd10      	pop	{r4, pc}
 800d8b6:	bf00      	nop
 800d8b8:	0800ef13 	.word	0x0800ef13
 800d8bc:	0800ef24 	.word	0x0800ef24

0800d8c0 <__multiply>:
 800d8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c4:	4614      	mov	r4, r2
 800d8c6:	690a      	ldr	r2, [r1, #16]
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	bfb8      	it	lt
 800d8ce:	460b      	movlt	r3, r1
 800d8d0:	460d      	mov	r5, r1
 800d8d2:	bfbc      	itt	lt
 800d8d4:	4625      	movlt	r5, r4
 800d8d6:	461c      	movlt	r4, r3
 800d8d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d8dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d8e0:	68ab      	ldr	r3, [r5, #8]
 800d8e2:	6869      	ldr	r1, [r5, #4]
 800d8e4:	eb0a 0709 	add.w	r7, sl, r9
 800d8e8:	42bb      	cmp	r3, r7
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	bfb8      	it	lt
 800d8ee:	3101      	addlt	r1, #1
 800d8f0:	f7ff fed4 	bl	800d69c <_Balloc>
 800d8f4:	b930      	cbnz	r0, 800d904 <__multiply+0x44>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	4b42      	ldr	r3, [pc, #264]	; (800da04 <__multiply+0x144>)
 800d8fa:	4843      	ldr	r0, [pc, #268]	; (800da08 <__multiply+0x148>)
 800d8fc:	f240 115d 	movw	r1, #349	; 0x15d
 800d900:	f000 fc70 	bl	800e1e4 <__assert_func>
 800d904:	f100 0614 	add.w	r6, r0, #20
 800d908:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d90c:	4633      	mov	r3, r6
 800d90e:	2200      	movs	r2, #0
 800d910:	4543      	cmp	r3, r8
 800d912:	d31e      	bcc.n	800d952 <__multiply+0x92>
 800d914:	f105 0c14 	add.w	ip, r5, #20
 800d918:	f104 0314 	add.w	r3, r4, #20
 800d91c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d920:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d924:	9202      	str	r2, [sp, #8]
 800d926:	ebac 0205 	sub.w	r2, ip, r5
 800d92a:	3a15      	subs	r2, #21
 800d92c:	f022 0203 	bic.w	r2, r2, #3
 800d930:	3204      	adds	r2, #4
 800d932:	f105 0115 	add.w	r1, r5, #21
 800d936:	458c      	cmp	ip, r1
 800d938:	bf38      	it	cc
 800d93a:	2204      	movcc	r2, #4
 800d93c:	9201      	str	r2, [sp, #4]
 800d93e:	9a02      	ldr	r2, [sp, #8]
 800d940:	9303      	str	r3, [sp, #12]
 800d942:	429a      	cmp	r2, r3
 800d944:	d808      	bhi.n	800d958 <__multiply+0x98>
 800d946:	2f00      	cmp	r7, #0
 800d948:	dc55      	bgt.n	800d9f6 <__multiply+0x136>
 800d94a:	6107      	str	r7, [r0, #16]
 800d94c:	b005      	add	sp, #20
 800d94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d952:	f843 2b04 	str.w	r2, [r3], #4
 800d956:	e7db      	b.n	800d910 <__multiply+0x50>
 800d958:	f8b3 a000 	ldrh.w	sl, [r3]
 800d95c:	f1ba 0f00 	cmp.w	sl, #0
 800d960:	d020      	beq.n	800d9a4 <__multiply+0xe4>
 800d962:	f105 0e14 	add.w	lr, r5, #20
 800d966:	46b1      	mov	r9, r6
 800d968:	2200      	movs	r2, #0
 800d96a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d96e:	f8d9 b000 	ldr.w	fp, [r9]
 800d972:	b2a1      	uxth	r1, r4
 800d974:	fa1f fb8b 	uxth.w	fp, fp
 800d978:	fb0a b101 	mla	r1, sl, r1, fp
 800d97c:	4411      	add	r1, r2
 800d97e:	f8d9 2000 	ldr.w	r2, [r9]
 800d982:	0c24      	lsrs	r4, r4, #16
 800d984:	0c12      	lsrs	r2, r2, #16
 800d986:	fb0a 2404 	mla	r4, sl, r4, r2
 800d98a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d98e:	b289      	uxth	r1, r1
 800d990:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d994:	45f4      	cmp	ip, lr
 800d996:	f849 1b04 	str.w	r1, [r9], #4
 800d99a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d99e:	d8e4      	bhi.n	800d96a <__multiply+0xaa>
 800d9a0:	9901      	ldr	r1, [sp, #4]
 800d9a2:	5072      	str	r2, [r6, r1]
 800d9a4:	9a03      	ldr	r2, [sp, #12]
 800d9a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d9aa:	3304      	adds	r3, #4
 800d9ac:	f1b9 0f00 	cmp.w	r9, #0
 800d9b0:	d01f      	beq.n	800d9f2 <__multiply+0x132>
 800d9b2:	6834      	ldr	r4, [r6, #0]
 800d9b4:	f105 0114 	add.w	r1, r5, #20
 800d9b8:	46b6      	mov	lr, r6
 800d9ba:	f04f 0a00 	mov.w	sl, #0
 800d9be:	880a      	ldrh	r2, [r1, #0]
 800d9c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d9c4:	fb09 b202 	mla	r2, r9, r2, fp
 800d9c8:	4492      	add	sl, r2
 800d9ca:	b2a4      	uxth	r4, r4
 800d9cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d9d0:	f84e 4b04 	str.w	r4, [lr], #4
 800d9d4:	f851 4b04 	ldr.w	r4, [r1], #4
 800d9d8:	f8be 2000 	ldrh.w	r2, [lr]
 800d9dc:	0c24      	lsrs	r4, r4, #16
 800d9de:	fb09 2404 	mla	r4, r9, r4, r2
 800d9e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d9e6:	458c      	cmp	ip, r1
 800d9e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d9ec:	d8e7      	bhi.n	800d9be <__multiply+0xfe>
 800d9ee:	9a01      	ldr	r2, [sp, #4]
 800d9f0:	50b4      	str	r4, [r6, r2]
 800d9f2:	3604      	adds	r6, #4
 800d9f4:	e7a3      	b.n	800d93e <__multiply+0x7e>
 800d9f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1a5      	bne.n	800d94a <__multiply+0x8a>
 800d9fe:	3f01      	subs	r7, #1
 800da00:	e7a1      	b.n	800d946 <__multiply+0x86>
 800da02:	bf00      	nop
 800da04:	0800ef13 	.word	0x0800ef13
 800da08:	0800ef24 	.word	0x0800ef24

0800da0c <__pow5mult>:
 800da0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da10:	4615      	mov	r5, r2
 800da12:	f012 0203 	ands.w	r2, r2, #3
 800da16:	4606      	mov	r6, r0
 800da18:	460f      	mov	r7, r1
 800da1a:	d007      	beq.n	800da2c <__pow5mult+0x20>
 800da1c:	4c25      	ldr	r4, [pc, #148]	; (800dab4 <__pow5mult+0xa8>)
 800da1e:	3a01      	subs	r2, #1
 800da20:	2300      	movs	r3, #0
 800da22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da26:	f7ff fe9b 	bl	800d760 <__multadd>
 800da2a:	4607      	mov	r7, r0
 800da2c:	10ad      	asrs	r5, r5, #2
 800da2e:	d03d      	beq.n	800daac <__pow5mult+0xa0>
 800da30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da32:	b97c      	cbnz	r4, 800da54 <__pow5mult+0x48>
 800da34:	2010      	movs	r0, #16
 800da36:	f7ff fe1b 	bl	800d670 <malloc>
 800da3a:	4602      	mov	r2, r0
 800da3c:	6270      	str	r0, [r6, #36]	; 0x24
 800da3e:	b928      	cbnz	r0, 800da4c <__pow5mult+0x40>
 800da40:	4b1d      	ldr	r3, [pc, #116]	; (800dab8 <__pow5mult+0xac>)
 800da42:	481e      	ldr	r0, [pc, #120]	; (800dabc <__pow5mult+0xb0>)
 800da44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da48:	f000 fbcc 	bl	800e1e4 <__assert_func>
 800da4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da50:	6004      	str	r4, [r0, #0]
 800da52:	60c4      	str	r4, [r0, #12]
 800da54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da5c:	b94c      	cbnz	r4, 800da72 <__pow5mult+0x66>
 800da5e:	f240 2171 	movw	r1, #625	; 0x271
 800da62:	4630      	mov	r0, r6
 800da64:	f7ff ff16 	bl	800d894 <__i2b>
 800da68:	2300      	movs	r3, #0
 800da6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800da6e:	4604      	mov	r4, r0
 800da70:	6003      	str	r3, [r0, #0]
 800da72:	f04f 0900 	mov.w	r9, #0
 800da76:	07eb      	lsls	r3, r5, #31
 800da78:	d50a      	bpl.n	800da90 <__pow5mult+0x84>
 800da7a:	4639      	mov	r1, r7
 800da7c:	4622      	mov	r2, r4
 800da7e:	4630      	mov	r0, r6
 800da80:	f7ff ff1e 	bl	800d8c0 <__multiply>
 800da84:	4639      	mov	r1, r7
 800da86:	4680      	mov	r8, r0
 800da88:	4630      	mov	r0, r6
 800da8a:	f7ff fe47 	bl	800d71c <_Bfree>
 800da8e:	4647      	mov	r7, r8
 800da90:	106d      	asrs	r5, r5, #1
 800da92:	d00b      	beq.n	800daac <__pow5mult+0xa0>
 800da94:	6820      	ldr	r0, [r4, #0]
 800da96:	b938      	cbnz	r0, 800daa8 <__pow5mult+0x9c>
 800da98:	4622      	mov	r2, r4
 800da9a:	4621      	mov	r1, r4
 800da9c:	4630      	mov	r0, r6
 800da9e:	f7ff ff0f 	bl	800d8c0 <__multiply>
 800daa2:	6020      	str	r0, [r4, #0]
 800daa4:	f8c0 9000 	str.w	r9, [r0]
 800daa8:	4604      	mov	r4, r0
 800daaa:	e7e4      	b.n	800da76 <__pow5mult+0x6a>
 800daac:	4638      	mov	r0, r7
 800daae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dab2:	bf00      	nop
 800dab4:	0800f078 	.word	0x0800f078
 800dab8:	0800ee9d 	.word	0x0800ee9d
 800dabc:	0800ef24 	.word	0x0800ef24

0800dac0 <__lshift>:
 800dac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dac4:	460c      	mov	r4, r1
 800dac6:	6849      	ldr	r1, [r1, #4]
 800dac8:	6923      	ldr	r3, [r4, #16]
 800daca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dace:	68a3      	ldr	r3, [r4, #8]
 800dad0:	4607      	mov	r7, r0
 800dad2:	4691      	mov	r9, r2
 800dad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dad8:	f108 0601 	add.w	r6, r8, #1
 800dadc:	42b3      	cmp	r3, r6
 800dade:	db0b      	blt.n	800daf8 <__lshift+0x38>
 800dae0:	4638      	mov	r0, r7
 800dae2:	f7ff fddb 	bl	800d69c <_Balloc>
 800dae6:	4605      	mov	r5, r0
 800dae8:	b948      	cbnz	r0, 800dafe <__lshift+0x3e>
 800daea:	4602      	mov	r2, r0
 800daec:	4b28      	ldr	r3, [pc, #160]	; (800db90 <__lshift+0xd0>)
 800daee:	4829      	ldr	r0, [pc, #164]	; (800db94 <__lshift+0xd4>)
 800daf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800daf4:	f000 fb76 	bl	800e1e4 <__assert_func>
 800daf8:	3101      	adds	r1, #1
 800dafa:	005b      	lsls	r3, r3, #1
 800dafc:	e7ee      	b.n	800dadc <__lshift+0x1c>
 800dafe:	2300      	movs	r3, #0
 800db00:	f100 0114 	add.w	r1, r0, #20
 800db04:	f100 0210 	add.w	r2, r0, #16
 800db08:	4618      	mov	r0, r3
 800db0a:	4553      	cmp	r3, sl
 800db0c:	db33      	blt.n	800db76 <__lshift+0xb6>
 800db0e:	6920      	ldr	r0, [r4, #16]
 800db10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db14:	f104 0314 	add.w	r3, r4, #20
 800db18:	f019 091f 	ands.w	r9, r9, #31
 800db1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db24:	d02b      	beq.n	800db7e <__lshift+0xbe>
 800db26:	f1c9 0e20 	rsb	lr, r9, #32
 800db2a:	468a      	mov	sl, r1
 800db2c:	2200      	movs	r2, #0
 800db2e:	6818      	ldr	r0, [r3, #0]
 800db30:	fa00 f009 	lsl.w	r0, r0, r9
 800db34:	4302      	orrs	r2, r0
 800db36:	f84a 2b04 	str.w	r2, [sl], #4
 800db3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db3e:	459c      	cmp	ip, r3
 800db40:	fa22 f20e 	lsr.w	r2, r2, lr
 800db44:	d8f3      	bhi.n	800db2e <__lshift+0x6e>
 800db46:	ebac 0304 	sub.w	r3, ip, r4
 800db4a:	3b15      	subs	r3, #21
 800db4c:	f023 0303 	bic.w	r3, r3, #3
 800db50:	3304      	adds	r3, #4
 800db52:	f104 0015 	add.w	r0, r4, #21
 800db56:	4584      	cmp	ip, r0
 800db58:	bf38      	it	cc
 800db5a:	2304      	movcc	r3, #4
 800db5c:	50ca      	str	r2, [r1, r3]
 800db5e:	b10a      	cbz	r2, 800db64 <__lshift+0xa4>
 800db60:	f108 0602 	add.w	r6, r8, #2
 800db64:	3e01      	subs	r6, #1
 800db66:	4638      	mov	r0, r7
 800db68:	612e      	str	r6, [r5, #16]
 800db6a:	4621      	mov	r1, r4
 800db6c:	f7ff fdd6 	bl	800d71c <_Bfree>
 800db70:	4628      	mov	r0, r5
 800db72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db76:	f842 0f04 	str.w	r0, [r2, #4]!
 800db7a:	3301      	adds	r3, #1
 800db7c:	e7c5      	b.n	800db0a <__lshift+0x4a>
 800db7e:	3904      	subs	r1, #4
 800db80:	f853 2b04 	ldr.w	r2, [r3], #4
 800db84:	f841 2f04 	str.w	r2, [r1, #4]!
 800db88:	459c      	cmp	ip, r3
 800db8a:	d8f9      	bhi.n	800db80 <__lshift+0xc0>
 800db8c:	e7ea      	b.n	800db64 <__lshift+0xa4>
 800db8e:	bf00      	nop
 800db90:	0800ef13 	.word	0x0800ef13
 800db94:	0800ef24 	.word	0x0800ef24

0800db98 <__mcmp>:
 800db98:	b530      	push	{r4, r5, lr}
 800db9a:	6902      	ldr	r2, [r0, #16]
 800db9c:	690c      	ldr	r4, [r1, #16]
 800db9e:	1b12      	subs	r2, r2, r4
 800dba0:	d10e      	bne.n	800dbc0 <__mcmp+0x28>
 800dba2:	f100 0314 	add.w	r3, r0, #20
 800dba6:	3114      	adds	r1, #20
 800dba8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dbac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dbb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dbb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dbb8:	42a5      	cmp	r5, r4
 800dbba:	d003      	beq.n	800dbc4 <__mcmp+0x2c>
 800dbbc:	d305      	bcc.n	800dbca <__mcmp+0x32>
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	bd30      	pop	{r4, r5, pc}
 800dbc4:	4283      	cmp	r3, r0
 800dbc6:	d3f3      	bcc.n	800dbb0 <__mcmp+0x18>
 800dbc8:	e7fa      	b.n	800dbc0 <__mcmp+0x28>
 800dbca:	f04f 32ff 	mov.w	r2, #4294967295
 800dbce:	e7f7      	b.n	800dbc0 <__mcmp+0x28>

0800dbd0 <__mdiff>:
 800dbd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd4:	460c      	mov	r4, r1
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	4611      	mov	r1, r2
 800dbda:	4620      	mov	r0, r4
 800dbdc:	4617      	mov	r7, r2
 800dbde:	f7ff ffdb 	bl	800db98 <__mcmp>
 800dbe2:	1e05      	subs	r5, r0, #0
 800dbe4:	d110      	bne.n	800dc08 <__mdiff+0x38>
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f7ff fd57 	bl	800d69c <_Balloc>
 800dbee:	b930      	cbnz	r0, 800dbfe <__mdiff+0x2e>
 800dbf0:	4b39      	ldr	r3, [pc, #228]	; (800dcd8 <__mdiff+0x108>)
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	f240 2132 	movw	r1, #562	; 0x232
 800dbf8:	4838      	ldr	r0, [pc, #224]	; (800dcdc <__mdiff+0x10c>)
 800dbfa:	f000 faf3 	bl	800e1e4 <__assert_func>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc08:	bfa4      	itt	ge
 800dc0a:	463b      	movge	r3, r7
 800dc0c:	4627      	movge	r7, r4
 800dc0e:	4630      	mov	r0, r6
 800dc10:	6879      	ldr	r1, [r7, #4]
 800dc12:	bfa6      	itte	ge
 800dc14:	461c      	movge	r4, r3
 800dc16:	2500      	movge	r5, #0
 800dc18:	2501      	movlt	r5, #1
 800dc1a:	f7ff fd3f 	bl	800d69c <_Balloc>
 800dc1e:	b920      	cbnz	r0, 800dc2a <__mdiff+0x5a>
 800dc20:	4b2d      	ldr	r3, [pc, #180]	; (800dcd8 <__mdiff+0x108>)
 800dc22:	4602      	mov	r2, r0
 800dc24:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc28:	e7e6      	b.n	800dbf8 <__mdiff+0x28>
 800dc2a:	693e      	ldr	r6, [r7, #16]
 800dc2c:	60c5      	str	r5, [r0, #12]
 800dc2e:	6925      	ldr	r5, [r4, #16]
 800dc30:	f107 0114 	add.w	r1, r7, #20
 800dc34:	f104 0914 	add.w	r9, r4, #20
 800dc38:	f100 0e14 	add.w	lr, r0, #20
 800dc3c:	f107 0210 	add.w	r2, r7, #16
 800dc40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dc44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dc48:	46f2      	mov	sl, lr
 800dc4a:	2700      	movs	r7, #0
 800dc4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc54:	fa1f f883 	uxth.w	r8, r3
 800dc58:	fa17 f78b 	uxtah	r7, r7, fp
 800dc5c:	0c1b      	lsrs	r3, r3, #16
 800dc5e:	eba7 0808 	sub.w	r8, r7, r8
 800dc62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc6a:	fa1f f888 	uxth.w	r8, r8
 800dc6e:	141f      	asrs	r7, r3, #16
 800dc70:	454d      	cmp	r5, r9
 800dc72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc76:	f84a 3b04 	str.w	r3, [sl], #4
 800dc7a:	d8e7      	bhi.n	800dc4c <__mdiff+0x7c>
 800dc7c:	1b2b      	subs	r3, r5, r4
 800dc7e:	3b15      	subs	r3, #21
 800dc80:	f023 0303 	bic.w	r3, r3, #3
 800dc84:	3304      	adds	r3, #4
 800dc86:	3415      	adds	r4, #21
 800dc88:	42a5      	cmp	r5, r4
 800dc8a:	bf38      	it	cc
 800dc8c:	2304      	movcc	r3, #4
 800dc8e:	4419      	add	r1, r3
 800dc90:	4473      	add	r3, lr
 800dc92:	469e      	mov	lr, r3
 800dc94:	460d      	mov	r5, r1
 800dc96:	4565      	cmp	r5, ip
 800dc98:	d30e      	bcc.n	800dcb8 <__mdiff+0xe8>
 800dc9a:	f10c 0203 	add.w	r2, ip, #3
 800dc9e:	1a52      	subs	r2, r2, r1
 800dca0:	f022 0203 	bic.w	r2, r2, #3
 800dca4:	3903      	subs	r1, #3
 800dca6:	458c      	cmp	ip, r1
 800dca8:	bf38      	it	cc
 800dcaa:	2200      	movcc	r2, #0
 800dcac:	441a      	add	r2, r3
 800dcae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dcb2:	b17b      	cbz	r3, 800dcd4 <__mdiff+0x104>
 800dcb4:	6106      	str	r6, [r0, #16]
 800dcb6:	e7a5      	b.n	800dc04 <__mdiff+0x34>
 800dcb8:	f855 8b04 	ldr.w	r8, [r5], #4
 800dcbc:	fa17 f488 	uxtah	r4, r7, r8
 800dcc0:	1422      	asrs	r2, r4, #16
 800dcc2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dcc6:	b2a4      	uxth	r4, r4
 800dcc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dccc:	f84e 4b04 	str.w	r4, [lr], #4
 800dcd0:	1417      	asrs	r7, r2, #16
 800dcd2:	e7e0      	b.n	800dc96 <__mdiff+0xc6>
 800dcd4:	3e01      	subs	r6, #1
 800dcd6:	e7ea      	b.n	800dcae <__mdiff+0xde>
 800dcd8:	0800ef13 	.word	0x0800ef13
 800dcdc:	0800ef24 	.word	0x0800ef24

0800dce0 <__d2b>:
 800dce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dce4:	4689      	mov	r9, r1
 800dce6:	2101      	movs	r1, #1
 800dce8:	ec57 6b10 	vmov	r6, r7, d0
 800dcec:	4690      	mov	r8, r2
 800dcee:	f7ff fcd5 	bl	800d69c <_Balloc>
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	b930      	cbnz	r0, 800dd04 <__d2b+0x24>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	4b25      	ldr	r3, [pc, #148]	; (800dd90 <__d2b+0xb0>)
 800dcfa:	4826      	ldr	r0, [pc, #152]	; (800dd94 <__d2b+0xb4>)
 800dcfc:	f240 310a 	movw	r1, #778	; 0x30a
 800dd00:	f000 fa70 	bl	800e1e4 <__assert_func>
 800dd04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd0c:	bb35      	cbnz	r5, 800dd5c <__d2b+0x7c>
 800dd0e:	2e00      	cmp	r6, #0
 800dd10:	9301      	str	r3, [sp, #4]
 800dd12:	d028      	beq.n	800dd66 <__d2b+0x86>
 800dd14:	4668      	mov	r0, sp
 800dd16:	9600      	str	r6, [sp, #0]
 800dd18:	f7ff fd8c 	bl	800d834 <__lo0bits>
 800dd1c:	9900      	ldr	r1, [sp, #0]
 800dd1e:	b300      	cbz	r0, 800dd62 <__d2b+0x82>
 800dd20:	9a01      	ldr	r2, [sp, #4]
 800dd22:	f1c0 0320 	rsb	r3, r0, #32
 800dd26:	fa02 f303 	lsl.w	r3, r2, r3
 800dd2a:	430b      	orrs	r3, r1
 800dd2c:	40c2      	lsrs	r2, r0
 800dd2e:	6163      	str	r3, [r4, #20]
 800dd30:	9201      	str	r2, [sp, #4]
 800dd32:	9b01      	ldr	r3, [sp, #4]
 800dd34:	61a3      	str	r3, [r4, #24]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	bf14      	ite	ne
 800dd3a:	2202      	movne	r2, #2
 800dd3c:	2201      	moveq	r2, #1
 800dd3e:	6122      	str	r2, [r4, #16]
 800dd40:	b1d5      	cbz	r5, 800dd78 <__d2b+0x98>
 800dd42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd46:	4405      	add	r5, r0
 800dd48:	f8c9 5000 	str.w	r5, [r9]
 800dd4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd50:	f8c8 0000 	str.w	r0, [r8]
 800dd54:	4620      	mov	r0, r4
 800dd56:	b003      	add	sp, #12
 800dd58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd60:	e7d5      	b.n	800dd0e <__d2b+0x2e>
 800dd62:	6161      	str	r1, [r4, #20]
 800dd64:	e7e5      	b.n	800dd32 <__d2b+0x52>
 800dd66:	a801      	add	r0, sp, #4
 800dd68:	f7ff fd64 	bl	800d834 <__lo0bits>
 800dd6c:	9b01      	ldr	r3, [sp, #4]
 800dd6e:	6163      	str	r3, [r4, #20]
 800dd70:	2201      	movs	r2, #1
 800dd72:	6122      	str	r2, [r4, #16]
 800dd74:	3020      	adds	r0, #32
 800dd76:	e7e3      	b.n	800dd40 <__d2b+0x60>
 800dd78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd80:	f8c9 0000 	str.w	r0, [r9]
 800dd84:	6918      	ldr	r0, [r3, #16]
 800dd86:	f7ff fd35 	bl	800d7f4 <__hi0bits>
 800dd8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd8e:	e7df      	b.n	800dd50 <__d2b+0x70>
 800dd90:	0800ef13 	.word	0x0800ef13
 800dd94:	0800ef24 	.word	0x0800ef24

0800dd98 <_calloc_r>:
 800dd98:	b513      	push	{r0, r1, r4, lr}
 800dd9a:	434a      	muls	r2, r1
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	9201      	str	r2, [sp, #4]
 800dda0:	f000 f85a 	bl	800de58 <_malloc_r>
 800dda4:	4604      	mov	r4, r0
 800dda6:	b118      	cbz	r0, 800ddb0 <_calloc_r+0x18>
 800dda8:	9a01      	ldr	r2, [sp, #4]
 800ddaa:	2100      	movs	r1, #0
 800ddac:	f7fe f944 	bl	800c038 <memset>
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	b002      	add	sp, #8
 800ddb4:	bd10      	pop	{r4, pc}
	...

0800ddb8 <_free_r>:
 800ddb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddba:	2900      	cmp	r1, #0
 800ddbc:	d048      	beq.n	800de50 <_free_r+0x98>
 800ddbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddc2:	9001      	str	r0, [sp, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f1a1 0404 	sub.w	r4, r1, #4
 800ddca:	bfb8      	it	lt
 800ddcc:	18e4      	addlt	r4, r4, r3
 800ddce:	f000 fa65 	bl	800e29c <__malloc_lock>
 800ddd2:	4a20      	ldr	r2, [pc, #128]	; (800de54 <_free_r+0x9c>)
 800ddd4:	9801      	ldr	r0, [sp, #4]
 800ddd6:	6813      	ldr	r3, [r2, #0]
 800ddd8:	4615      	mov	r5, r2
 800ddda:	b933      	cbnz	r3, 800ddea <_free_r+0x32>
 800dddc:	6063      	str	r3, [r4, #4]
 800ddde:	6014      	str	r4, [r2, #0]
 800dde0:	b003      	add	sp, #12
 800dde2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dde6:	f000 ba5f 	b.w	800e2a8 <__malloc_unlock>
 800ddea:	42a3      	cmp	r3, r4
 800ddec:	d90b      	bls.n	800de06 <_free_r+0x4e>
 800ddee:	6821      	ldr	r1, [r4, #0]
 800ddf0:	1862      	adds	r2, r4, r1
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	bf04      	itt	eq
 800ddf6:	681a      	ldreq	r2, [r3, #0]
 800ddf8:	685b      	ldreq	r3, [r3, #4]
 800ddfa:	6063      	str	r3, [r4, #4]
 800ddfc:	bf04      	itt	eq
 800ddfe:	1852      	addeq	r2, r2, r1
 800de00:	6022      	streq	r2, [r4, #0]
 800de02:	602c      	str	r4, [r5, #0]
 800de04:	e7ec      	b.n	800dde0 <_free_r+0x28>
 800de06:	461a      	mov	r2, r3
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	b10b      	cbz	r3, 800de10 <_free_r+0x58>
 800de0c:	42a3      	cmp	r3, r4
 800de0e:	d9fa      	bls.n	800de06 <_free_r+0x4e>
 800de10:	6811      	ldr	r1, [r2, #0]
 800de12:	1855      	adds	r5, r2, r1
 800de14:	42a5      	cmp	r5, r4
 800de16:	d10b      	bne.n	800de30 <_free_r+0x78>
 800de18:	6824      	ldr	r4, [r4, #0]
 800de1a:	4421      	add	r1, r4
 800de1c:	1854      	adds	r4, r2, r1
 800de1e:	42a3      	cmp	r3, r4
 800de20:	6011      	str	r1, [r2, #0]
 800de22:	d1dd      	bne.n	800dde0 <_free_r+0x28>
 800de24:	681c      	ldr	r4, [r3, #0]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	6053      	str	r3, [r2, #4]
 800de2a:	4421      	add	r1, r4
 800de2c:	6011      	str	r1, [r2, #0]
 800de2e:	e7d7      	b.n	800dde0 <_free_r+0x28>
 800de30:	d902      	bls.n	800de38 <_free_r+0x80>
 800de32:	230c      	movs	r3, #12
 800de34:	6003      	str	r3, [r0, #0]
 800de36:	e7d3      	b.n	800dde0 <_free_r+0x28>
 800de38:	6825      	ldr	r5, [r4, #0]
 800de3a:	1961      	adds	r1, r4, r5
 800de3c:	428b      	cmp	r3, r1
 800de3e:	bf04      	itt	eq
 800de40:	6819      	ldreq	r1, [r3, #0]
 800de42:	685b      	ldreq	r3, [r3, #4]
 800de44:	6063      	str	r3, [r4, #4]
 800de46:	bf04      	itt	eq
 800de48:	1949      	addeq	r1, r1, r5
 800de4a:	6021      	streq	r1, [r4, #0]
 800de4c:	6054      	str	r4, [r2, #4]
 800de4e:	e7c7      	b.n	800dde0 <_free_r+0x28>
 800de50:	b003      	add	sp, #12
 800de52:	bd30      	pop	{r4, r5, pc}
 800de54:	200006d4 	.word	0x200006d4

0800de58 <_malloc_r>:
 800de58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5a:	1ccd      	adds	r5, r1, #3
 800de5c:	f025 0503 	bic.w	r5, r5, #3
 800de60:	3508      	adds	r5, #8
 800de62:	2d0c      	cmp	r5, #12
 800de64:	bf38      	it	cc
 800de66:	250c      	movcc	r5, #12
 800de68:	2d00      	cmp	r5, #0
 800de6a:	4606      	mov	r6, r0
 800de6c:	db01      	blt.n	800de72 <_malloc_r+0x1a>
 800de6e:	42a9      	cmp	r1, r5
 800de70:	d903      	bls.n	800de7a <_malloc_r+0x22>
 800de72:	230c      	movs	r3, #12
 800de74:	6033      	str	r3, [r6, #0]
 800de76:	2000      	movs	r0, #0
 800de78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de7a:	f000 fa0f 	bl	800e29c <__malloc_lock>
 800de7e:	4921      	ldr	r1, [pc, #132]	; (800df04 <_malloc_r+0xac>)
 800de80:	680a      	ldr	r2, [r1, #0]
 800de82:	4614      	mov	r4, r2
 800de84:	b99c      	cbnz	r4, 800deae <_malloc_r+0x56>
 800de86:	4f20      	ldr	r7, [pc, #128]	; (800df08 <_malloc_r+0xb0>)
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	b923      	cbnz	r3, 800de96 <_malloc_r+0x3e>
 800de8c:	4621      	mov	r1, r4
 800de8e:	4630      	mov	r0, r6
 800de90:	f000 f998 	bl	800e1c4 <_sbrk_r>
 800de94:	6038      	str	r0, [r7, #0]
 800de96:	4629      	mov	r1, r5
 800de98:	4630      	mov	r0, r6
 800de9a:	f000 f993 	bl	800e1c4 <_sbrk_r>
 800de9e:	1c43      	adds	r3, r0, #1
 800dea0:	d123      	bne.n	800deea <_malloc_r+0x92>
 800dea2:	230c      	movs	r3, #12
 800dea4:	6033      	str	r3, [r6, #0]
 800dea6:	4630      	mov	r0, r6
 800dea8:	f000 f9fe 	bl	800e2a8 <__malloc_unlock>
 800deac:	e7e3      	b.n	800de76 <_malloc_r+0x1e>
 800deae:	6823      	ldr	r3, [r4, #0]
 800deb0:	1b5b      	subs	r3, r3, r5
 800deb2:	d417      	bmi.n	800dee4 <_malloc_r+0x8c>
 800deb4:	2b0b      	cmp	r3, #11
 800deb6:	d903      	bls.n	800dec0 <_malloc_r+0x68>
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	441c      	add	r4, r3
 800debc:	6025      	str	r5, [r4, #0]
 800debe:	e004      	b.n	800deca <_malloc_r+0x72>
 800dec0:	6863      	ldr	r3, [r4, #4]
 800dec2:	42a2      	cmp	r2, r4
 800dec4:	bf0c      	ite	eq
 800dec6:	600b      	streq	r3, [r1, #0]
 800dec8:	6053      	strne	r3, [r2, #4]
 800deca:	4630      	mov	r0, r6
 800decc:	f000 f9ec 	bl	800e2a8 <__malloc_unlock>
 800ded0:	f104 000b 	add.w	r0, r4, #11
 800ded4:	1d23      	adds	r3, r4, #4
 800ded6:	f020 0007 	bic.w	r0, r0, #7
 800deda:	1ac2      	subs	r2, r0, r3
 800dedc:	d0cc      	beq.n	800de78 <_malloc_r+0x20>
 800dede:	1a1b      	subs	r3, r3, r0
 800dee0:	50a3      	str	r3, [r4, r2]
 800dee2:	e7c9      	b.n	800de78 <_malloc_r+0x20>
 800dee4:	4622      	mov	r2, r4
 800dee6:	6864      	ldr	r4, [r4, #4]
 800dee8:	e7cc      	b.n	800de84 <_malloc_r+0x2c>
 800deea:	1cc4      	adds	r4, r0, #3
 800deec:	f024 0403 	bic.w	r4, r4, #3
 800def0:	42a0      	cmp	r0, r4
 800def2:	d0e3      	beq.n	800debc <_malloc_r+0x64>
 800def4:	1a21      	subs	r1, r4, r0
 800def6:	4630      	mov	r0, r6
 800def8:	f000 f964 	bl	800e1c4 <_sbrk_r>
 800defc:	3001      	adds	r0, #1
 800defe:	d1dd      	bne.n	800debc <_malloc_r+0x64>
 800df00:	e7cf      	b.n	800dea2 <_malloc_r+0x4a>
 800df02:	bf00      	nop
 800df04:	200006d4 	.word	0x200006d4
 800df08:	200006d8 	.word	0x200006d8

0800df0c <__ssputs_r>:
 800df0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df10:	688e      	ldr	r6, [r1, #8]
 800df12:	429e      	cmp	r6, r3
 800df14:	4682      	mov	sl, r0
 800df16:	460c      	mov	r4, r1
 800df18:	4690      	mov	r8, r2
 800df1a:	461f      	mov	r7, r3
 800df1c:	d838      	bhi.n	800df90 <__ssputs_r+0x84>
 800df1e:	898a      	ldrh	r2, [r1, #12]
 800df20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df24:	d032      	beq.n	800df8c <__ssputs_r+0x80>
 800df26:	6825      	ldr	r5, [r4, #0]
 800df28:	6909      	ldr	r1, [r1, #16]
 800df2a:	eba5 0901 	sub.w	r9, r5, r1
 800df2e:	6965      	ldr	r5, [r4, #20]
 800df30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df38:	3301      	adds	r3, #1
 800df3a:	444b      	add	r3, r9
 800df3c:	106d      	asrs	r5, r5, #1
 800df3e:	429d      	cmp	r5, r3
 800df40:	bf38      	it	cc
 800df42:	461d      	movcc	r5, r3
 800df44:	0553      	lsls	r3, r2, #21
 800df46:	d531      	bpl.n	800dfac <__ssputs_r+0xa0>
 800df48:	4629      	mov	r1, r5
 800df4a:	f7ff ff85 	bl	800de58 <_malloc_r>
 800df4e:	4606      	mov	r6, r0
 800df50:	b950      	cbnz	r0, 800df68 <__ssputs_r+0x5c>
 800df52:	230c      	movs	r3, #12
 800df54:	f8ca 3000 	str.w	r3, [sl]
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df5e:	81a3      	strh	r3, [r4, #12]
 800df60:	f04f 30ff 	mov.w	r0, #4294967295
 800df64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df68:	6921      	ldr	r1, [r4, #16]
 800df6a:	464a      	mov	r2, r9
 800df6c:	f7ff fb88 	bl	800d680 <memcpy>
 800df70:	89a3      	ldrh	r3, [r4, #12]
 800df72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df7a:	81a3      	strh	r3, [r4, #12]
 800df7c:	6126      	str	r6, [r4, #16]
 800df7e:	6165      	str	r5, [r4, #20]
 800df80:	444e      	add	r6, r9
 800df82:	eba5 0509 	sub.w	r5, r5, r9
 800df86:	6026      	str	r6, [r4, #0]
 800df88:	60a5      	str	r5, [r4, #8]
 800df8a:	463e      	mov	r6, r7
 800df8c:	42be      	cmp	r6, r7
 800df8e:	d900      	bls.n	800df92 <__ssputs_r+0x86>
 800df90:	463e      	mov	r6, r7
 800df92:	4632      	mov	r2, r6
 800df94:	6820      	ldr	r0, [r4, #0]
 800df96:	4641      	mov	r1, r8
 800df98:	f000 f966 	bl	800e268 <memmove>
 800df9c:	68a3      	ldr	r3, [r4, #8]
 800df9e:	6822      	ldr	r2, [r4, #0]
 800dfa0:	1b9b      	subs	r3, r3, r6
 800dfa2:	4432      	add	r2, r6
 800dfa4:	60a3      	str	r3, [r4, #8]
 800dfa6:	6022      	str	r2, [r4, #0]
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	e7db      	b.n	800df64 <__ssputs_r+0x58>
 800dfac:	462a      	mov	r2, r5
 800dfae:	f000 f981 	bl	800e2b4 <_realloc_r>
 800dfb2:	4606      	mov	r6, r0
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d1e1      	bne.n	800df7c <__ssputs_r+0x70>
 800dfb8:	6921      	ldr	r1, [r4, #16]
 800dfba:	4650      	mov	r0, sl
 800dfbc:	f7ff fefc 	bl	800ddb8 <_free_r>
 800dfc0:	e7c7      	b.n	800df52 <__ssputs_r+0x46>
	...

0800dfc4 <_svfiprintf_r>:
 800dfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc8:	4698      	mov	r8, r3
 800dfca:	898b      	ldrh	r3, [r1, #12]
 800dfcc:	061b      	lsls	r3, r3, #24
 800dfce:	b09d      	sub	sp, #116	; 0x74
 800dfd0:	4607      	mov	r7, r0
 800dfd2:	460d      	mov	r5, r1
 800dfd4:	4614      	mov	r4, r2
 800dfd6:	d50e      	bpl.n	800dff6 <_svfiprintf_r+0x32>
 800dfd8:	690b      	ldr	r3, [r1, #16]
 800dfda:	b963      	cbnz	r3, 800dff6 <_svfiprintf_r+0x32>
 800dfdc:	2140      	movs	r1, #64	; 0x40
 800dfde:	f7ff ff3b 	bl	800de58 <_malloc_r>
 800dfe2:	6028      	str	r0, [r5, #0]
 800dfe4:	6128      	str	r0, [r5, #16]
 800dfe6:	b920      	cbnz	r0, 800dff2 <_svfiprintf_r+0x2e>
 800dfe8:	230c      	movs	r3, #12
 800dfea:	603b      	str	r3, [r7, #0]
 800dfec:	f04f 30ff 	mov.w	r0, #4294967295
 800dff0:	e0d1      	b.n	800e196 <_svfiprintf_r+0x1d2>
 800dff2:	2340      	movs	r3, #64	; 0x40
 800dff4:	616b      	str	r3, [r5, #20]
 800dff6:	2300      	movs	r3, #0
 800dff8:	9309      	str	r3, [sp, #36]	; 0x24
 800dffa:	2320      	movs	r3, #32
 800dffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e000:	f8cd 800c 	str.w	r8, [sp, #12]
 800e004:	2330      	movs	r3, #48	; 0x30
 800e006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e1b0 <_svfiprintf_r+0x1ec>
 800e00a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e00e:	f04f 0901 	mov.w	r9, #1
 800e012:	4623      	mov	r3, r4
 800e014:	469a      	mov	sl, r3
 800e016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e01a:	b10a      	cbz	r2, 800e020 <_svfiprintf_r+0x5c>
 800e01c:	2a25      	cmp	r2, #37	; 0x25
 800e01e:	d1f9      	bne.n	800e014 <_svfiprintf_r+0x50>
 800e020:	ebba 0b04 	subs.w	fp, sl, r4
 800e024:	d00b      	beq.n	800e03e <_svfiprintf_r+0x7a>
 800e026:	465b      	mov	r3, fp
 800e028:	4622      	mov	r2, r4
 800e02a:	4629      	mov	r1, r5
 800e02c:	4638      	mov	r0, r7
 800e02e:	f7ff ff6d 	bl	800df0c <__ssputs_r>
 800e032:	3001      	adds	r0, #1
 800e034:	f000 80aa 	beq.w	800e18c <_svfiprintf_r+0x1c8>
 800e038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e03a:	445a      	add	r2, fp
 800e03c:	9209      	str	r2, [sp, #36]	; 0x24
 800e03e:	f89a 3000 	ldrb.w	r3, [sl]
 800e042:	2b00      	cmp	r3, #0
 800e044:	f000 80a2 	beq.w	800e18c <_svfiprintf_r+0x1c8>
 800e048:	2300      	movs	r3, #0
 800e04a:	f04f 32ff 	mov.w	r2, #4294967295
 800e04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e052:	f10a 0a01 	add.w	sl, sl, #1
 800e056:	9304      	str	r3, [sp, #16]
 800e058:	9307      	str	r3, [sp, #28]
 800e05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e05e:	931a      	str	r3, [sp, #104]	; 0x68
 800e060:	4654      	mov	r4, sl
 800e062:	2205      	movs	r2, #5
 800e064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e068:	4851      	ldr	r0, [pc, #324]	; (800e1b0 <_svfiprintf_r+0x1ec>)
 800e06a:	f7f2 f8b9 	bl	80001e0 <memchr>
 800e06e:	9a04      	ldr	r2, [sp, #16]
 800e070:	b9d8      	cbnz	r0, 800e0aa <_svfiprintf_r+0xe6>
 800e072:	06d0      	lsls	r0, r2, #27
 800e074:	bf44      	itt	mi
 800e076:	2320      	movmi	r3, #32
 800e078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e07c:	0711      	lsls	r1, r2, #28
 800e07e:	bf44      	itt	mi
 800e080:	232b      	movmi	r3, #43	; 0x2b
 800e082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e086:	f89a 3000 	ldrb.w	r3, [sl]
 800e08a:	2b2a      	cmp	r3, #42	; 0x2a
 800e08c:	d015      	beq.n	800e0ba <_svfiprintf_r+0xf6>
 800e08e:	9a07      	ldr	r2, [sp, #28]
 800e090:	4654      	mov	r4, sl
 800e092:	2000      	movs	r0, #0
 800e094:	f04f 0c0a 	mov.w	ip, #10
 800e098:	4621      	mov	r1, r4
 800e09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e09e:	3b30      	subs	r3, #48	; 0x30
 800e0a0:	2b09      	cmp	r3, #9
 800e0a2:	d94e      	bls.n	800e142 <_svfiprintf_r+0x17e>
 800e0a4:	b1b0      	cbz	r0, 800e0d4 <_svfiprintf_r+0x110>
 800e0a6:	9207      	str	r2, [sp, #28]
 800e0a8:	e014      	b.n	800e0d4 <_svfiprintf_r+0x110>
 800e0aa:	eba0 0308 	sub.w	r3, r0, r8
 800e0ae:	fa09 f303 	lsl.w	r3, r9, r3
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	9304      	str	r3, [sp, #16]
 800e0b6:	46a2      	mov	sl, r4
 800e0b8:	e7d2      	b.n	800e060 <_svfiprintf_r+0x9c>
 800e0ba:	9b03      	ldr	r3, [sp, #12]
 800e0bc:	1d19      	adds	r1, r3, #4
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	9103      	str	r1, [sp, #12]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	bfbb      	ittet	lt
 800e0c6:	425b      	neglt	r3, r3
 800e0c8:	f042 0202 	orrlt.w	r2, r2, #2
 800e0cc:	9307      	strge	r3, [sp, #28]
 800e0ce:	9307      	strlt	r3, [sp, #28]
 800e0d0:	bfb8      	it	lt
 800e0d2:	9204      	strlt	r2, [sp, #16]
 800e0d4:	7823      	ldrb	r3, [r4, #0]
 800e0d6:	2b2e      	cmp	r3, #46	; 0x2e
 800e0d8:	d10c      	bne.n	800e0f4 <_svfiprintf_r+0x130>
 800e0da:	7863      	ldrb	r3, [r4, #1]
 800e0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e0de:	d135      	bne.n	800e14c <_svfiprintf_r+0x188>
 800e0e0:	9b03      	ldr	r3, [sp, #12]
 800e0e2:	1d1a      	adds	r2, r3, #4
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	9203      	str	r2, [sp, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	bfb8      	it	lt
 800e0ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0f0:	3402      	adds	r4, #2
 800e0f2:	9305      	str	r3, [sp, #20]
 800e0f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e1c0 <_svfiprintf_r+0x1fc>
 800e0f8:	7821      	ldrb	r1, [r4, #0]
 800e0fa:	2203      	movs	r2, #3
 800e0fc:	4650      	mov	r0, sl
 800e0fe:	f7f2 f86f 	bl	80001e0 <memchr>
 800e102:	b140      	cbz	r0, 800e116 <_svfiprintf_r+0x152>
 800e104:	2340      	movs	r3, #64	; 0x40
 800e106:	eba0 000a 	sub.w	r0, r0, sl
 800e10a:	fa03 f000 	lsl.w	r0, r3, r0
 800e10e:	9b04      	ldr	r3, [sp, #16]
 800e110:	4303      	orrs	r3, r0
 800e112:	3401      	adds	r4, #1
 800e114:	9304      	str	r3, [sp, #16]
 800e116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e11a:	4826      	ldr	r0, [pc, #152]	; (800e1b4 <_svfiprintf_r+0x1f0>)
 800e11c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e120:	2206      	movs	r2, #6
 800e122:	f7f2 f85d 	bl	80001e0 <memchr>
 800e126:	2800      	cmp	r0, #0
 800e128:	d038      	beq.n	800e19c <_svfiprintf_r+0x1d8>
 800e12a:	4b23      	ldr	r3, [pc, #140]	; (800e1b8 <_svfiprintf_r+0x1f4>)
 800e12c:	bb1b      	cbnz	r3, 800e176 <_svfiprintf_r+0x1b2>
 800e12e:	9b03      	ldr	r3, [sp, #12]
 800e130:	3307      	adds	r3, #7
 800e132:	f023 0307 	bic.w	r3, r3, #7
 800e136:	3308      	adds	r3, #8
 800e138:	9303      	str	r3, [sp, #12]
 800e13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e13c:	4433      	add	r3, r6
 800e13e:	9309      	str	r3, [sp, #36]	; 0x24
 800e140:	e767      	b.n	800e012 <_svfiprintf_r+0x4e>
 800e142:	fb0c 3202 	mla	r2, ip, r2, r3
 800e146:	460c      	mov	r4, r1
 800e148:	2001      	movs	r0, #1
 800e14a:	e7a5      	b.n	800e098 <_svfiprintf_r+0xd4>
 800e14c:	2300      	movs	r3, #0
 800e14e:	3401      	adds	r4, #1
 800e150:	9305      	str	r3, [sp, #20]
 800e152:	4619      	mov	r1, r3
 800e154:	f04f 0c0a 	mov.w	ip, #10
 800e158:	4620      	mov	r0, r4
 800e15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e15e:	3a30      	subs	r2, #48	; 0x30
 800e160:	2a09      	cmp	r2, #9
 800e162:	d903      	bls.n	800e16c <_svfiprintf_r+0x1a8>
 800e164:	2b00      	cmp	r3, #0
 800e166:	d0c5      	beq.n	800e0f4 <_svfiprintf_r+0x130>
 800e168:	9105      	str	r1, [sp, #20]
 800e16a:	e7c3      	b.n	800e0f4 <_svfiprintf_r+0x130>
 800e16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e170:	4604      	mov	r4, r0
 800e172:	2301      	movs	r3, #1
 800e174:	e7f0      	b.n	800e158 <_svfiprintf_r+0x194>
 800e176:	ab03      	add	r3, sp, #12
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	462a      	mov	r2, r5
 800e17c:	4b0f      	ldr	r3, [pc, #60]	; (800e1bc <_svfiprintf_r+0x1f8>)
 800e17e:	a904      	add	r1, sp, #16
 800e180:	4638      	mov	r0, r7
 800e182:	f7fe f801 	bl	800c188 <_printf_float>
 800e186:	1c42      	adds	r2, r0, #1
 800e188:	4606      	mov	r6, r0
 800e18a:	d1d6      	bne.n	800e13a <_svfiprintf_r+0x176>
 800e18c:	89ab      	ldrh	r3, [r5, #12]
 800e18e:	065b      	lsls	r3, r3, #25
 800e190:	f53f af2c 	bmi.w	800dfec <_svfiprintf_r+0x28>
 800e194:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e196:	b01d      	add	sp, #116	; 0x74
 800e198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19c:	ab03      	add	r3, sp, #12
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	462a      	mov	r2, r5
 800e1a2:	4b06      	ldr	r3, [pc, #24]	; (800e1bc <_svfiprintf_r+0x1f8>)
 800e1a4:	a904      	add	r1, sp, #16
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	f7fe fa92 	bl	800c6d0 <_printf_i>
 800e1ac:	e7eb      	b.n	800e186 <_svfiprintf_r+0x1c2>
 800e1ae:	bf00      	nop
 800e1b0:	0800f084 	.word	0x0800f084
 800e1b4:	0800f08e 	.word	0x0800f08e
 800e1b8:	0800c189 	.word	0x0800c189
 800e1bc:	0800df0d 	.word	0x0800df0d
 800e1c0:	0800f08a 	.word	0x0800f08a

0800e1c4 <_sbrk_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4d06      	ldr	r5, [pc, #24]	; (800e1e0 <_sbrk_r+0x1c>)
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	4608      	mov	r0, r1
 800e1ce:	602b      	str	r3, [r5, #0]
 800e1d0:	f7f4 f9be 	bl	8002550 <_sbrk>
 800e1d4:	1c43      	adds	r3, r0, #1
 800e1d6:	d102      	bne.n	800e1de <_sbrk_r+0x1a>
 800e1d8:	682b      	ldr	r3, [r5, #0]
 800e1da:	b103      	cbz	r3, 800e1de <_sbrk_r+0x1a>
 800e1dc:	6023      	str	r3, [r4, #0]
 800e1de:	bd38      	pop	{r3, r4, r5, pc}
 800e1e0:	2000224c 	.word	0x2000224c

0800e1e4 <__assert_func>:
 800e1e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1e6:	4614      	mov	r4, r2
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	4b09      	ldr	r3, [pc, #36]	; (800e210 <__assert_func+0x2c>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	68d8      	ldr	r0, [r3, #12]
 800e1f2:	b14c      	cbz	r4, 800e208 <__assert_func+0x24>
 800e1f4:	4b07      	ldr	r3, [pc, #28]	; (800e214 <__assert_func+0x30>)
 800e1f6:	9100      	str	r1, [sp, #0]
 800e1f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1fc:	4906      	ldr	r1, [pc, #24]	; (800e218 <__assert_func+0x34>)
 800e1fe:	462b      	mov	r3, r5
 800e200:	f000 f80e 	bl	800e220 <fiprintf>
 800e204:	f000 faa4 	bl	800e750 <abort>
 800e208:	4b04      	ldr	r3, [pc, #16]	; (800e21c <__assert_func+0x38>)
 800e20a:	461c      	mov	r4, r3
 800e20c:	e7f3      	b.n	800e1f6 <__assert_func+0x12>
 800e20e:	bf00      	nop
 800e210:	20000194 	.word	0x20000194
 800e214:	0800f095 	.word	0x0800f095
 800e218:	0800f0a2 	.word	0x0800f0a2
 800e21c:	0800f0d0 	.word	0x0800f0d0

0800e220 <fiprintf>:
 800e220:	b40e      	push	{r1, r2, r3}
 800e222:	b503      	push	{r0, r1, lr}
 800e224:	4601      	mov	r1, r0
 800e226:	ab03      	add	r3, sp, #12
 800e228:	4805      	ldr	r0, [pc, #20]	; (800e240 <fiprintf+0x20>)
 800e22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e22e:	6800      	ldr	r0, [r0, #0]
 800e230:	9301      	str	r3, [sp, #4]
 800e232:	f000 f88f 	bl	800e354 <_vfiprintf_r>
 800e236:	b002      	add	sp, #8
 800e238:	f85d eb04 	ldr.w	lr, [sp], #4
 800e23c:	b003      	add	sp, #12
 800e23e:	4770      	bx	lr
 800e240:	20000194 	.word	0x20000194

0800e244 <__ascii_mbtowc>:
 800e244:	b082      	sub	sp, #8
 800e246:	b901      	cbnz	r1, 800e24a <__ascii_mbtowc+0x6>
 800e248:	a901      	add	r1, sp, #4
 800e24a:	b142      	cbz	r2, 800e25e <__ascii_mbtowc+0x1a>
 800e24c:	b14b      	cbz	r3, 800e262 <__ascii_mbtowc+0x1e>
 800e24e:	7813      	ldrb	r3, [r2, #0]
 800e250:	600b      	str	r3, [r1, #0]
 800e252:	7812      	ldrb	r2, [r2, #0]
 800e254:	1e10      	subs	r0, r2, #0
 800e256:	bf18      	it	ne
 800e258:	2001      	movne	r0, #1
 800e25a:	b002      	add	sp, #8
 800e25c:	4770      	bx	lr
 800e25e:	4610      	mov	r0, r2
 800e260:	e7fb      	b.n	800e25a <__ascii_mbtowc+0x16>
 800e262:	f06f 0001 	mvn.w	r0, #1
 800e266:	e7f8      	b.n	800e25a <__ascii_mbtowc+0x16>

0800e268 <memmove>:
 800e268:	4288      	cmp	r0, r1
 800e26a:	b510      	push	{r4, lr}
 800e26c:	eb01 0402 	add.w	r4, r1, r2
 800e270:	d902      	bls.n	800e278 <memmove+0x10>
 800e272:	4284      	cmp	r4, r0
 800e274:	4623      	mov	r3, r4
 800e276:	d807      	bhi.n	800e288 <memmove+0x20>
 800e278:	1e43      	subs	r3, r0, #1
 800e27a:	42a1      	cmp	r1, r4
 800e27c:	d008      	beq.n	800e290 <memmove+0x28>
 800e27e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e282:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e286:	e7f8      	b.n	800e27a <memmove+0x12>
 800e288:	4402      	add	r2, r0
 800e28a:	4601      	mov	r1, r0
 800e28c:	428a      	cmp	r2, r1
 800e28e:	d100      	bne.n	800e292 <memmove+0x2a>
 800e290:	bd10      	pop	{r4, pc}
 800e292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e29a:	e7f7      	b.n	800e28c <memmove+0x24>

0800e29c <__malloc_lock>:
 800e29c:	4801      	ldr	r0, [pc, #4]	; (800e2a4 <__malloc_lock+0x8>)
 800e29e:	f000 bc17 	b.w	800ead0 <__retarget_lock_acquire_recursive>
 800e2a2:	bf00      	nop
 800e2a4:	20002254 	.word	0x20002254

0800e2a8 <__malloc_unlock>:
 800e2a8:	4801      	ldr	r0, [pc, #4]	; (800e2b0 <__malloc_unlock+0x8>)
 800e2aa:	f000 bc12 	b.w	800ead2 <__retarget_lock_release_recursive>
 800e2ae:	bf00      	nop
 800e2b0:	20002254 	.word	0x20002254

0800e2b4 <_realloc_r>:
 800e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b6:	4607      	mov	r7, r0
 800e2b8:	4614      	mov	r4, r2
 800e2ba:	460e      	mov	r6, r1
 800e2bc:	b921      	cbnz	r1, 800e2c8 <_realloc_r+0x14>
 800e2be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2c2:	4611      	mov	r1, r2
 800e2c4:	f7ff bdc8 	b.w	800de58 <_malloc_r>
 800e2c8:	b922      	cbnz	r2, 800e2d4 <_realloc_r+0x20>
 800e2ca:	f7ff fd75 	bl	800ddb8 <_free_r>
 800e2ce:	4625      	mov	r5, r4
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2d4:	f000 fc62 	bl	800eb9c <_malloc_usable_size_r>
 800e2d8:	42a0      	cmp	r0, r4
 800e2da:	d20f      	bcs.n	800e2fc <_realloc_r+0x48>
 800e2dc:	4621      	mov	r1, r4
 800e2de:	4638      	mov	r0, r7
 800e2e0:	f7ff fdba 	bl	800de58 <_malloc_r>
 800e2e4:	4605      	mov	r5, r0
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d0f2      	beq.n	800e2d0 <_realloc_r+0x1c>
 800e2ea:	4631      	mov	r1, r6
 800e2ec:	4622      	mov	r2, r4
 800e2ee:	f7ff f9c7 	bl	800d680 <memcpy>
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	f7ff fd5f 	bl	800ddb8 <_free_r>
 800e2fa:	e7e9      	b.n	800e2d0 <_realloc_r+0x1c>
 800e2fc:	4635      	mov	r5, r6
 800e2fe:	e7e7      	b.n	800e2d0 <_realloc_r+0x1c>

0800e300 <__sfputc_r>:
 800e300:	6893      	ldr	r3, [r2, #8]
 800e302:	3b01      	subs	r3, #1
 800e304:	2b00      	cmp	r3, #0
 800e306:	b410      	push	{r4}
 800e308:	6093      	str	r3, [r2, #8]
 800e30a:	da08      	bge.n	800e31e <__sfputc_r+0x1e>
 800e30c:	6994      	ldr	r4, [r2, #24]
 800e30e:	42a3      	cmp	r3, r4
 800e310:	db01      	blt.n	800e316 <__sfputc_r+0x16>
 800e312:	290a      	cmp	r1, #10
 800e314:	d103      	bne.n	800e31e <__sfputc_r+0x1e>
 800e316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e31a:	f000 b94b 	b.w	800e5b4 <__swbuf_r>
 800e31e:	6813      	ldr	r3, [r2, #0]
 800e320:	1c58      	adds	r0, r3, #1
 800e322:	6010      	str	r0, [r2, #0]
 800e324:	7019      	strb	r1, [r3, #0]
 800e326:	4608      	mov	r0, r1
 800e328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e32c:	4770      	bx	lr

0800e32e <__sfputs_r>:
 800e32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e330:	4606      	mov	r6, r0
 800e332:	460f      	mov	r7, r1
 800e334:	4614      	mov	r4, r2
 800e336:	18d5      	adds	r5, r2, r3
 800e338:	42ac      	cmp	r4, r5
 800e33a:	d101      	bne.n	800e340 <__sfputs_r+0x12>
 800e33c:	2000      	movs	r0, #0
 800e33e:	e007      	b.n	800e350 <__sfputs_r+0x22>
 800e340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e344:	463a      	mov	r2, r7
 800e346:	4630      	mov	r0, r6
 800e348:	f7ff ffda 	bl	800e300 <__sfputc_r>
 800e34c:	1c43      	adds	r3, r0, #1
 800e34e:	d1f3      	bne.n	800e338 <__sfputs_r+0xa>
 800e350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e354 <_vfiprintf_r>:
 800e354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e358:	460d      	mov	r5, r1
 800e35a:	b09d      	sub	sp, #116	; 0x74
 800e35c:	4614      	mov	r4, r2
 800e35e:	4698      	mov	r8, r3
 800e360:	4606      	mov	r6, r0
 800e362:	b118      	cbz	r0, 800e36c <_vfiprintf_r+0x18>
 800e364:	6983      	ldr	r3, [r0, #24]
 800e366:	b90b      	cbnz	r3, 800e36c <_vfiprintf_r+0x18>
 800e368:	f000 fb14 	bl	800e994 <__sinit>
 800e36c:	4b89      	ldr	r3, [pc, #548]	; (800e594 <_vfiprintf_r+0x240>)
 800e36e:	429d      	cmp	r5, r3
 800e370:	d11b      	bne.n	800e3aa <_vfiprintf_r+0x56>
 800e372:	6875      	ldr	r5, [r6, #4]
 800e374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e376:	07d9      	lsls	r1, r3, #31
 800e378:	d405      	bmi.n	800e386 <_vfiprintf_r+0x32>
 800e37a:	89ab      	ldrh	r3, [r5, #12]
 800e37c:	059a      	lsls	r2, r3, #22
 800e37e:	d402      	bmi.n	800e386 <_vfiprintf_r+0x32>
 800e380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e382:	f000 fba5 	bl	800ead0 <__retarget_lock_acquire_recursive>
 800e386:	89ab      	ldrh	r3, [r5, #12]
 800e388:	071b      	lsls	r3, r3, #28
 800e38a:	d501      	bpl.n	800e390 <_vfiprintf_r+0x3c>
 800e38c:	692b      	ldr	r3, [r5, #16]
 800e38e:	b9eb      	cbnz	r3, 800e3cc <_vfiprintf_r+0x78>
 800e390:	4629      	mov	r1, r5
 800e392:	4630      	mov	r0, r6
 800e394:	f000 f96e 	bl	800e674 <__swsetup_r>
 800e398:	b1c0      	cbz	r0, 800e3cc <_vfiprintf_r+0x78>
 800e39a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e39c:	07dc      	lsls	r4, r3, #31
 800e39e:	d50e      	bpl.n	800e3be <_vfiprintf_r+0x6a>
 800e3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a4:	b01d      	add	sp, #116	; 0x74
 800e3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3aa:	4b7b      	ldr	r3, [pc, #492]	; (800e598 <_vfiprintf_r+0x244>)
 800e3ac:	429d      	cmp	r5, r3
 800e3ae:	d101      	bne.n	800e3b4 <_vfiprintf_r+0x60>
 800e3b0:	68b5      	ldr	r5, [r6, #8]
 800e3b2:	e7df      	b.n	800e374 <_vfiprintf_r+0x20>
 800e3b4:	4b79      	ldr	r3, [pc, #484]	; (800e59c <_vfiprintf_r+0x248>)
 800e3b6:	429d      	cmp	r5, r3
 800e3b8:	bf08      	it	eq
 800e3ba:	68f5      	ldreq	r5, [r6, #12]
 800e3bc:	e7da      	b.n	800e374 <_vfiprintf_r+0x20>
 800e3be:	89ab      	ldrh	r3, [r5, #12]
 800e3c0:	0598      	lsls	r0, r3, #22
 800e3c2:	d4ed      	bmi.n	800e3a0 <_vfiprintf_r+0x4c>
 800e3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3c6:	f000 fb84 	bl	800ead2 <__retarget_lock_release_recursive>
 800e3ca:	e7e9      	b.n	800e3a0 <_vfiprintf_r+0x4c>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d0:	2320      	movs	r3, #32
 800e3d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3da:	2330      	movs	r3, #48	; 0x30
 800e3dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e5a0 <_vfiprintf_r+0x24c>
 800e3e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3e4:	f04f 0901 	mov.w	r9, #1
 800e3e8:	4623      	mov	r3, r4
 800e3ea:	469a      	mov	sl, r3
 800e3ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3f0:	b10a      	cbz	r2, 800e3f6 <_vfiprintf_r+0xa2>
 800e3f2:	2a25      	cmp	r2, #37	; 0x25
 800e3f4:	d1f9      	bne.n	800e3ea <_vfiprintf_r+0x96>
 800e3f6:	ebba 0b04 	subs.w	fp, sl, r4
 800e3fa:	d00b      	beq.n	800e414 <_vfiprintf_r+0xc0>
 800e3fc:	465b      	mov	r3, fp
 800e3fe:	4622      	mov	r2, r4
 800e400:	4629      	mov	r1, r5
 800e402:	4630      	mov	r0, r6
 800e404:	f7ff ff93 	bl	800e32e <__sfputs_r>
 800e408:	3001      	adds	r0, #1
 800e40a:	f000 80aa 	beq.w	800e562 <_vfiprintf_r+0x20e>
 800e40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e410:	445a      	add	r2, fp
 800e412:	9209      	str	r2, [sp, #36]	; 0x24
 800e414:	f89a 3000 	ldrb.w	r3, [sl]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f000 80a2 	beq.w	800e562 <_vfiprintf_r+0x20e>
 800e41e:	2300      	movs	r3, #0
 800e420:	f04f 32ff 	mov.w	r2, #4294967295
 800e424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e428:	f10a 0a01 	add.w	sl, sl, #1
 800e42c:	9304      	str	r3, [sp, #16]
 800e42e:	9307      	str	r3, [sp, #28]
 800e430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e434:	931a      	str	r3, [sp, #104]	; 0x68
 800e436:	4654      	mov	r4, sl
 800e438:	2205      	movs	r2, #5
 800e43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e43e:	4858      	ldr	r0, [pc, #352]	; (800e5a0 <_vfiprintf_r+0x24c>)
 800e440:	f7f1 fece 	bl	80001e0 <memchr>
 800e444:	9a04      	ldr	r2, [sp, #16]
 800e446:	b9d8      	cbnz	r0, 800e480 <_vfiprintf_r+0x12c>
 800e448:	06d1      	lsls	r1, r2, #27
 800e44a:	bf44      	itt	mi
 800e44c:	2320      	movmi	r3, #32
 800e44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e452:	0713      	lsls	r3, r2, #28
 800e454:	bf44      	itt	mi
 800e456:	232b      	movmi	r3, #43	; 0x2b
 800e458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e45c:	f89a 3000 	ldrb.w	r3, [sl]
 800e460:	2b2a      	cmp	r3, #42	; 0x2a
 800e462:	d015      	beq.n	800e490 <_vfiprintf_r+0x13c>
 800e464:	9a07      	ldr	r2, [sp, #28]
 800e466:	4654      	mov	r4, sl
 800e468:	2000      	movs	r0, #0
 800e46a:	f04f 0c0a 	mov.w	ip, #10
 800e46e:	4621      	mov	r1, r4
 800e470:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e474:	3b30      	subs	r3, #48	; 0x30
 800e476:	2b09      	cmp	r3, #9
 800e478:	d94e      	bls.n	800e518 <_vfiprintf_r+0x1c4>
 800e47a:	b1b0      	cbz	r0, 800e4aa <_vfiprintf_r+0x156>
 800e47c:	9207      	str	r2, [sp, #28]
 800e47e:	e014      	b.n	800e4aa <_vfiprintf_r+0x156>
 800e480:	eba0 0308 	sub.w	r3, r0, r8
 800e484:	fa09 f303 	lsl.w	r3, r9, r3
 800e488:	4313      	orrs	r3, r2
 800e48a:	9304      	str	r3, [sp, #16]
 800e48c:	46a2      	mov	sl, r4
 800e48e:	e7d2      	b.n	800e436 <_vfiprintf_r+0xe2>
 800e490:	9b03      	ldr	r3, [sp, #12]
 800e492:	1d19      	adds	r1, r3, #4
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	9103      	str	r1, [sp, #12]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	bfbb      	ittet	lt
 800e49c:	425b      	neglt	r3, r3
 800e49e:	f042 0202 	orrlt.w	r2, r2, #2
 800e4a2:	9307      	strge	r3, [sp, #28]
 800e4a4:	9307      	strlt	r3, [sp, #28]
 800e4a6:	bfb8      	it	lt
 800e4a8:	9204      	strlt	r2, [sp, #16]
 800e4aa:	7823      	ldrb	r3, [r4, #0]
 800e4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800e4ae:	d10c      	bne.n	800e4ca <_vfiprintf_r+0x176>
 800e4b0:	7863      	ldrb	r3, [r4, #1]
 800e4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800e4b4:	d135      	bne.n	800e522 <_vfiprintf_r+0x1ce>
 800e4b6:	9b03      	ldr	r3, [sp, #12]
 800e4b8:	1d1a      	adds	r2, r3, #4
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	9203      	str	r2, [sp, #12]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	bfb8      	it	lt
 800e4c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4c6:	3402      	adds	r4, #2
 800e4c8:	9305      	str	r3, [sp, #20]
 800e4ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e5b0 <_vfiprintf_r+0x25c>
 800e4ce:	7821      	ldrb	r1, [r4, #0]
 800e4d0:	2203      	movs	r2, #3
 800e4d2:	4650      	mov	r0, sl
 800e4d4:	f7f1 fe84 	bl	80001e0 <memchr>
 800e4d8:	b140      	cbz	r0, 800e4ec <_vfiprintf_r+0x198>
 800e4da:	2340      	movs	r3, #64	; 0x40
 800e4dc:	eba0 000a 	sub.w	r0, r0, sl
 800e4e0:	fa03 f000 	lsl.w	r0, r3, r0
 800e4e4:	9b04      	ldr	r3, [sp, #16]
 800e4e6:	4303      	orrs	r3, r0
 800e4e8:	3401      	adds	r4, #1
 800e4ea:	9304      	str	r3, [sp, #16]
 800e4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f0:	482c      	ldr	r0, [pc, #176]	; (800e5a4 <_vfiprintf_r+0x250>)
 800e4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4f6:	2206      	movs	r2, #6
 800e4f8:	f7f1 fe72 	bl	80001e0 <memchr>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d03f      	beq.n	800e580 <_vfiprintf_r+0x22c>
 800e500:	4b29      	ldr	r3, [pc, #164]	; (800e5a8 <_vfiprintf_r+0x254>)
 800e502:	bb1b      	cbnz	r3, 800e54c <_vfiprintf_r+0x1f8>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	3307      	adds	r3, #7
 800e508:	f023 0307 	bic.w	r3, r3, #7
 800e50c:	3308      	adds	r3, #8
 800e50e:	9303      	str	r3, [sp, #12]
 800e510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e512:	443b      	add	r3, r7
 800e514:	9309      	str	r3, [sp, #36]	; 0x24
 800e516:	e767      	b.n	800e3e8 <_vfiprintf_r+0x94>
 800e518:	fb0c 3202 	mla	r2, ip, r2, r3
 800e51c:	460c      	mov	r4, r1
 800e51e:	2001      	movs	r0, #1
 800e520:	e7a5      	b.n	800e46e <_vfiprintf_r+0x11a>
 800e522:	2300      	movs	r3, #0
 800e524:	3401      	adds	r4, #1
 800e526:	9305      	str	r3, [sp, #20]
 800e528:	4619      	mov	r1, r3
 800e52a:	f04f 0c0a 	mov.w	ip, #10
 800e52e:	4620      	mov	r0, r4
 800e530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e534:	3a30      	subs	r2, #48	; 0x30
 800e536:	2a09      	cmp	r2, #9
 800e538:	d903      	bls.n	800e542 <_vfiprintf_r+0x1ee>
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d0c5      	beq.n	800e4ca <_vfiprintf_r+0x176>
 800e53e:	9105      	str	r1, [sp, #20]
 800e540:	e7c3      	b.n	800e4ca <_vfiprintf_r+0x176>
 800e542:	fb0c 2101 	mla	r1, ip, r1, r2
 800e546:	4604      	mov	r4, r0
 800e548:	2301      	movs	r3, #1
 800e54a:	e7f0      	b.n	800e52e <_vfiprintf_r+0x1da>
 800e54c:	ab03      	add	r3, sp, #12
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	462a      	mov	r2, r5
 800e552:	4b16      	ldr	r3, [pc, #88]	; (800e5ac <_vfiprintf_r+0x258>)
 800e554:	a904      	add	r1, sp, #16
 800e556:	4630      	mov	r0, r6
 800e558:	f7fd fe16 	bl	800c188 <_printf_float>
 800e55c:	4607      	mov	r7, r0
 800e55e:	1c78      	adds	r0, r7, #1
 800e560:	d1d6      	bne.n	800e510 <_vfiprintf_r+0x1bc>
 800e562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e564:	07d9      	lsls	r1, r3, #31
 800e566:	d405      	bmi.n	800e574 <_vfiprintf_r+0x220>
 800e568:	89ab      	ldrh	r3, [r5, #12]
 800e56a:	059a      	lsls	r2, r3, #22
 800e56c:	d402      	bmi.n	800e574 <_vfiprintf_r+0x220>
 800e56e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e570:	f000 faaf 	bl	800ead2 <__retarget_lock_release_recursive>
 800e574:	89ab      	ldrh	r3, [r5, #12]
 800e576:	065b      	lsls	r3, r3, #25
 800e578:	f53f af12 	bmi.w	800e3a0 <_vfiprintf_r+0x4c>
 800e57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e57e:	e711      	b.n	800e3a4 <_vfiprintf_r+0x50>
 800e580:	ab03      	add	r3, sp, #12
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	462a      	mov	r2, r5
 800e586:	4b09      	ldr	r3, [pc, #36]	; (800e5ac <_vfiprintf_r+0x258>)
 800e588:	a904      	add	r1, sp, #16
 800e58a:	4630      	mov	r0, r6
 800e58c:	f7fe f8a0 	bl	800c6d0 <_printf_i>
 800e590:	e7e4      	b.n	800e55c <_vfiprintf_r+0x208>
 800e592:	bf00      	nop
 800e594:	0800f1fc 	.word	0x0800f1fc
 800e598:	0800f21c 	.word	0x0800f21c
 800e59c:	0800f1dc 	.word	0x0800f1dc
 800e5a0:	0800f084 	.word	0x0800f084
 800e5a4:	0800f08e 	.word	0x0800f08e
 800e5a8:	0800c189 	.word	0x0800c189
 800e5ac:	0800e32f 	.word	0x0800e32f
 800e5b0:	0800f08a 	.word	0x0800f08a

0800e5b4 <__swbuf_r>:
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b6:	460e      	mov	r6, r1
 800e5b8:	4614      	mov	r4, r2
 800e5ba:	4605      	mov	r5, r0
 800e5bc:	b118      	cbz	r0, 800e5c6 <__swbuf_r+0x12>
 800e5be:	6983      	ldr	r3, [r0, #24]
 800e5c0:	b90b      	cbnz	r3, 800e5c6 <__swbuf_r+0x12>
 800e5c2:	f000 f9e7 	bl	800e994 <__sinit>
 800e5c6:	4b21      	ldr	r3, [pc, #132]	; (800e64c <__swbuf_r+0x98>)
 800e5c8:	429c      	cmp	r4, r3
 800e5ca:	d12b      	bne.n	800e624 <__swbuf_r+0x70>
 800e5cc:	686c      	ldr	r4, [r5, #4]
 800e5ce:	69a3      	ldr	r3, [r4, #24]
 800e5d0:	60a3      	str	r3, [r4, #8]
 800e5d2:	89a3      	ldrh	r3, [r4, #12]
 800e5d4:	071a      	lsls	r2, r3, #28
 800e5d6:	d52f      	bpl.n	800e638 <__swbuf_r+0x84>
 800e5d8:	6923      	ldr	r3, [r4, #16]
 800e5da:	b36b      	cbz	r3, 800e638 <__swbuf_r+0x84>
 800e5dc:	6923      	ldr	r3, [r4, #16]
 800e5de:	6820      	ldr	r0, [r4, #0]
 800e5e0:	1ac0      	subs	r0, r0, r3
 800e5e2:	6963      	ldr	r3, [r4, #20]
 800e5e4:	b2f6      	uxtb	r6, r6
 800e5e6:	4283      	cmp	r3, r0
 800e5e8:	4637      	mov	r7, r6
 800e5ea:	dc04      	bgt.n	800e5f6 <__swbuf_r+0x42>
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	f000 f93c 	bl	800e86c <_fflush_r>
 800e5f4:	bb30      	cbnz	r0, 800e644 <__swbuf_r+0x90>
 800e5f6:	68a3      	ldr	r3, [r4, #8]
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	60a3      	str	r3, [r4, #8]
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	6022      	str	r2, [r4, #0]
 800e602:	701e      	strb	r6, [r3, #0]
 800e604:	6963      	ldr	r3, [r4, #20]
 800e606:	3001      	adds	r0, #1
 800e608:	4283      	cmp	r3, r0
 800e60a:	d004      	beq.n	800e616 <__swbuf_r+0x62>
 800e60c:	89a3      	ldrh	r3, [r4, #12]
 800e60e:	07db      	lsls	r3, r3, #31
 800e610:	d506      	bpl.n	800e620 <__swbuf_r+0x6c>
 800e612:	2e0a      	cmp	r6, #10
 800e614:	d104      	bne.n	800e620 <__swbuf_r+0x6c>
 800e616:	4621      	mov	r1, r4
 800e618:	4628      	mov	r0, r5
 800e61a:	f000 f927 	bl	800e86c <_fflush_r>
 800e61e:	b988      	cbnz	r0, 800e644 <__swbuf_r+0x90>
 800e620:	4638      	mov	r0, r7
 800e622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e624:	4b0a      	ldr	r3, [pc, #40]	; (800e650 <__swbuf_r+0x9c>)
 800e626:	429c      	cmp	r4, r3
 800e628:	d101      	bne.n	800e62e <__swbuf_r+0x7a>
 800e62a:	68ac      	ldr	r4, [r5, #8]
 800e62c:	e7cf      	b.n	800e5ce <__swbuf_r+0x1a>
 800e62e:	4b09      	ldr	r3, [pc, #36]	; (800e654 <__swbuf_r+0xa0>)
 800e630:	429c      	cmp	r4, r3
 800e632:	bf08      	it	eq
 800e634:	68ec      	ldreq	r4, [r5, #12]
 800e636:	e7ca      	b.n	800e5ce <__swbuf_r+0x1a>
 800e638:	4621      	mov	r1, r4
 800e63a:	4628      	mov	r0, r5
 800e63c:	f000 f81a 	bl	800e674 <__swsetup_r>
 800e640:	2800      	cmp	r0, #0
 800e642:	d0cb      	beq.n	800e5dc <__swbuf_r+0x28>
 800e644:	f04f 37ff 	mov.w	r7, #4294967295
 800e648:	e7ea      	b.n	800e620 <__swbuf_r+0x6c>
 800e64a:	bf00      	nop
 800e64c:	0800f1fc 	.word	0x0800f1fc
 800e650:	0800f21c 	.word	0x0800f21c
 800e654:	0800f1dc 	.word	0x0800f1dc

0800e658 <__ascii_wctomb>:
 800e658:	b149      	cbz	r1, 800e66e <__ascii_wctomb+0x16>
 800e65a:	2aff      	cmp	r2, #255	; 0xff
 800e65c:	bf85      	ittet	hi
 800e65e:	238a      	movhi	r3, #138	; 0x8a
 800e660:	6003      	strhi	r3, [r0, #0]
 800e662:	700a      	strbls	r2, [r1, #0]
 800e664:	f04f 30ff 	movhi.w	r0, #4294967295
 800e668:	bf98      	it	ls
 800e66a:	2001      	movls	r0, #1
 800e66c:	4770      	bx	lr
 800e66e:	4608      	mov	r0, r1
 800e670:	4770      	bx	lr
	...

0800e674 <__swsetup_r>:
 800e674:	4b32      	ldr	r3, [pc, #200]	; (800e740 <__swsetup_r+0xcc>)
 800e676:	b570      	push	{r4, r5, r6, lr}
 800e678:	681d      	ldr	r5, [r3, #0]
 800e67a:	4606      	mov	r6, r0
 800e67c:	460c      	mov	r4, r1
 800e67e:	b125      	cbz	r5, 800e68a <__swsetup_r+0x16>
 800e680:	69ab      	ldr	r3, [r5, #24]
 800e682:	b913      	cbnz	r3, 800e68a <__swsetup_r+0x16>
 800e684:	4628      	mov	r0, r5
 800e686:	f000 f985 	bl	800e994 <__sinit>
 800e68a:	4b2e      	ldr	r3, [pc, #184]	; (800e744 <__swsetup_r+0xd0>)
 800e68c:	429c      	cmp	r4, r3
 800e68e:	d10f      	bne.n	800e6b0 <__swsetup_r+0x3c>
 800e690:	686c      	ldr	r4, [r5, #4]
 800e692:	89a3      	ldrh	r3, [r4, #12]
 800e694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e698:	0719      	lsls	r1, r3, #28
 800e69a:	d42c      	bmi.n	800e6f6 <__swsetup_r+0x82>
 800e69c:	06dd      	lsls	r5, r3, #27
 800e69e:	d411      	bmi.n	800e6c4 <__swsetup_r+0x50>
 800e6a0:	2309      	movs	r3, #9
 800e6a2:	6033      	str	r3, [r6, #0]
 800e6a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6a8:	81a3      	strh	r3, [r4, #12]
 800e6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ae:	e03e      	b.n	800e72e <__swsetup_r+0xba>
 800e6b0:	4b25      	ldr	r3, [pc, #148]	; (800e748 <__swsetup_r+0xd4>)
 800e6b2:	429c      	cmp	r4, r3
 800e6b4:	d101      	bne.n	800e6ba <__swsetup_r+0x46>
 800e6b6:	68ac      	ldr	r4, [r5, #8]
 800e6b8:	e7eb      	b.n	800e692 <__swsetup_r+0x1e>
 800e6ba:	4b24      	ldr	r3, [pc, #144]	; (800e74c <__swsetup_r+0xd8>)
 800e6bc:	429c      	cmp	r4, r3
 800e6be:	bf08      	it	eq
 800e6c0:	68ec      	ldreq	r4, [r5, #12]
 800e6c2:	e7e6      	b.n	800e692 <__swsetup_r+0x1e>
 800e6c4:	0758      	lsls	r0, r3, #29
 800e6c6:	d512      	bpl.n	800e6ee <__swsetup_r+0x7a>
 800e6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6ca:	b141      	cbz	r1, 800e6de <__swsetup_r+0x6a>
 800e6cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6d0:	4299      	cmp	r1, r3
 800e6d2:	d002      	beq.n	800e6da <__swsetup_r+0x66>
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f7ff fb6f 	bl	800ddb8 <_free_r>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	6363      	str	r3, [r4, #52]	; 0x34
 800e6de:	89a3      	ldrh	r3, [r4, #12]
 800e6e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6e4:	81a3      	strh	r3, [r4, #12]
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	6063      	str	r3, [r4, #4]
 800e6ea:	6923      	ldr	r3, [r4, #16]
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	f043 0308 	orr.w	r3, r3, #8
 800e6f4:	81a3      	strh	r3, [r4, #12]
 800e6f6:	6923      	ldr	r3, [r4, #16]
 800e6f8:	b94b      	cbnz	r3, 800e70e <__swsetup_r+0x9a>
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e704:	d003      	beq.n	800e70e <__swsetup_r+0x9a>
 800e706:	4621      	mov	r1, r4
 800e708:	4630      	mov	r0, r6
 800e70a:	f000 fa07 	bl	800eb1c <__smakebuf_r>
 800e70e:	89a0      	ldrh	r0, [r4, #12]
 800e710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e714:	f010 0301 	ands.w	r3, r0, #1
 800e718:	d00a      	beq.n	800e730 <__swsetup_r+0xbc>
 800e71a:	2300      	movs	r3, #0
 800e71c:	60a3      	str	r3, [r4, #8]
 800e71e:	6963      	ldr	r3, [r4, #20]
 800e720:	425b      	negs	r3, r3
 800e722:	61a3      	str	r3, [r4, #24]
 800e724:	6923      	ldr	r3, [r4, #16]
 800e726:	b943      	cbnz	r3, 800e73a <__swsetup_r+0xc6>
 800e728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e72c:	d1ba      	bne.n	800e6a4 <__swsetup_r+0x30>
 800e72e:	bd70      	pop	{r4, r5, r6, pc}
 800e730:	0781      	lsls	r1, r0, #30
 800e732:	bf58      	it	pl
 800e734:	6963      	ldrpl	r3, [r4, #20]
 800e736:	60a3      	str	r3, [r4, #8]
 800e738:	e7f4      	b.n	800e724 <__swsetup_r+0xb0>
 800e73a:	2000      	movs	r0, #0
 800e73c:	e7f7      	b.n	800e72e <__swsetup_r+0xba>
 800e73e:	bf00      	nop
 800e740:	20000194 	.word	0x20000194
 800e744:	0800f1fc 	.word	0x0800f1fc
 800e748:	0800f21c 	.word	0x0800f21c
 800e74c:	0800f1dc 	.word	0x0800f1dc

0800e750 <abort>:
 800e750:	b508      	push	{r3, lr}
 800e752:	2006      	movs	r0, #6
 800e754:	f000 fa52 	bl	800ebfc <raise>
 800e758:	2001      	movs	r0, #1
 800e75a:	f7f3 fe81 	bl	8002460 <_exit>
	...

0800e760 <__sflush_r>:
 800e760:	898a      	ldrh	r2, [r1, #12]
 800e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	4605      	mov	r5, r0
 800e768:	0710      	lsls	r0, r2, #28
 800e76a:	460c      	mov	r4, r1
 800e76c:	d458      	bmi.n	800e820 <__sflush_r+0xc0>
 800e76e:	684b      	ldr	r3, [r1, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	dc05      	bgt.n	800e780 <__sflush_r+0x20>
 800e774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e776:	2b00      	cmp	r3, #0
 800e778:	dc02      	bgt.n	800e780 <__sflush_r+0x20>
 800e77a:	2000      	movs	r0, #0
 800e77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e782:	2e00      	cmp	r6, #0
 800e784:	d0f9      	beq.n	800e77a <__sflush_r+0x1a>
 800e786:	2300      	movs	r3, #0
 800e788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e78c:	682f      	ldr	r7, [r5, #0]
 800e78e:	602b      	str	r3, [r5, #0]
 800e790:	d032      	beq.n	800e7f8 <__sflush_r+0x98>
 800e792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e794:	89a3      	ldrh	r3, [r4, #12]
 800e796:	075a      	lsls	r2, r3, #29
 800e798:	d505      	bpl.n	800e7a6 <__sflush_r+0x46>
 800e79a:	6863      	ldr	r3, [r4, #4]
 800e79c:	1ac0      	subs	r0, r0, r3
 800e79e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7a0:	b10b      	cbz	r3, 800e7a6 <__sflush_r+0x46>
 800e7a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7a4:	1ac0      	subs	r0, r0, r3
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7ac:	6a21      	ldr	r1, [r4, #32]
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	47b0      	blx	r6
 800e7b2:	1c43      	adds	r3, r0, #1
 800e7b4:	89a3      	ldrh	r3, [r4, #12]
 800e7b6:	d106      	bne.n	800e7c6 <__sflush_r+0x66>
 800e7b8:	6829      	ldr	r1, [r5, #0]
 800e7ba:	291d      	cmp	r1, #29
 800e7bc:	d82c      	bhi.n	800e818 <__sflush_r+0xb8>
 800e7be:	4a2a      	ldr	r2, [pc, #168]	; (800e868 <__sflush_r+0x108>)
 800e7c0:	40ca      	lsrs	r2, r1
 800e7c2:	07d6      	lsls	r6, r2, #31
 800e7c4:	d528      	bpl.n	800e818 <__sflush_r+0xb8>
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	6062      	str	r2, [r4, #4]
 800e7ca:	04d9      	lsls	r1, r3, #19
 800e7cc:	6922      	ldr	r2, [r4, #16]
 800e7ce:	6022      	str	r2, [r4, #0]
 800e7d0:	d504      	bpl.n	800e7dc <__sflush_r+0x7c>
 800e7d2:	1c42      	adds	r2, r0, #1
 800e7d4:	d101      	bne.n	800e7da <__sflush_r+0x7a>
 800e7d6:	682b      	ldr	r3, [r5, #0]
 800e7d8:	b903      	cbnz	r3, 800e7dc <__sflush_r+0x7c>
 800e7da:	6560      	str	r0, [r4, #84]	; 0x54
 800e7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7de:	602f      	str	r7, [r5, #0]
 800e7e0:	2900      	cmp	r1, #0
 800e7e2:	d0ca      	beq.n	800e77a <__sflush_r+0x1a>
 800e7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7e8:	4299      	cmp	r1, r3
 800e7ea:	d002      	beq.n	800e7f2 <__sflush_r+0x92>
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	f7ff fae3 	bl	800ddb8 <_free_r>
 800e7f2:	2000      	movs	r0, #0
 800e7f4:	6360      	str	r0, [r4, #52]	; 0x34
 800e7f6:	e7c1      	b.n	800e77c <__sflush_r+0x1c>
 800e7f8:	6a21      	ldr	r1, [r4, #32]
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	47b0      	blx	r6
 800e800:	1c41      	adds	r1, r0, #1
 800e802:	d1c7      	bne.n	800e794 <__sflush_r+0x34>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d0c4      	beq.n	800e794 <__sflush_r+0x34>
 800e80a:	2b1d      	cmp	r3, #29
 800e80c:	d001      	beq.n	800e812 <__sflush_r+0xb2>
 800e80e:	2b16      	cmp	r3, #22
 800e810:	d101      	bne.n	800e816 <__sflush_r+0xb6>
 800e812:	602f      	str	r7, [r5, #0]
 800e814:	e7b1      	b.n	800e77a <__sflush_r+0x1a>
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e81c:	81a3      	strh	r3, [r4, #12]
 800e81e:	e7ad      	b.n	800e77c <__sflush_r+0x1c>
 800e820:	690f      	ldr	r7, [r1, #16]
 800e822:	2f00      	cmp	r7, #0
 800e824:	d0a9      	beq.n	800e77a <__sflush_r+0x1a>
 800e826:	0793      	lsls	r3, r2, #30
 800e828:	680e      	ldr	r6, [r1, #0]
 800e82a:	bf08      	it	eq
 800e82c:	694b      	ldreq	r3, [r1, #20]
 800e82e:	600f      	str	r7, [r1, #0]
 800e830:	bf18      	it	ne
 800e832:	2300      	movne	r3, #0
 800e834:	eba6 0807 	sub.w	r8, r6, r7
 800e838:	608b      	str	r3, [r1, #8]
 800e83a:	f1b8 0f00 	cmp.w	r8, #0
 800e83e:	dd9c      	ble.n	800e77a <__sflush_r+0x1a>
 800e840:	6a21      	ldr	r1, [r4, #32]
 800e842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e844:	4643      	mov	r3, r8
 800e846:	463a      	mov	r2, r7
 800e848:	4628      	mov	r0, r5
 800e84a:	47b0      	blx	r6
 800e84c:	2800      	cmp	r0, #0
 800e84e:	dc06      	bgt.n	800e85e <__sflush_r+0xfe>
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e856:	81a3      	strh	r3, [r4, #12]
 800e858:	f04f 30ff 	mov.w	r0, #4294967295
 800e85c:	e78e      	b.n	800e77c <__sflush_r+0x1c>
 800e85e:	4407      	add	r7, r0
 800e860:	eba8 0800 	sub.w	r8, r8, r0
 800e864:	e7e9      	b.n	800e83a <__sflush_r+0xda>
 800e866:	bf00      	nop
 800e868:	20400001 	.word	0x20400001

0800e86c <_fflush_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	690b      	ldr	r3, [r1, #16]
 800e870:	4605      	mov	r5, r0
 800e872:	460c      	mov	r4, r1
 800e874:	b913      	cbnz	r3, 800e87c <_fflush_r+0x10>
 800e876:	2500      	movs	r5, #0
 800e878:	4628      	mov	r0, r5
 800e87a:	bd38      	pop	{r3, r4, r5, pc}
 800e87c:	b118      	cbz	r0, 800e886 <_fflush_r+0x1a>
 800e87e:	6983      	ldr	r3, [r0, #24]
 800e880:	b90b      	cbnz	r3, 800e886 <_fflush_r+0x1a>
 800e882:	f000 f887 	bl	800e994 <__sinit>
 800e886:	4b14      	ldr	r3, [pc, #80]	; (800e8d8 <_fflush_r+0x6c>)
 800e888:	429c      	cmp	r4, r3
 800e88a:	d11b      	bne.n	800e8c4 <_fflush_r+0x58>
 800e88c:	686c      	ldr	r4, [r5, #4]
 800e88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d0ef      	beq.n	800e876 <_fflush_r+0xa>
 800e896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e898:	07d0      	lsls	r0, r2, #31
 800e89a:	d404      	bmi.n	800e8a6 <_fflush_r+0x3a>
 800e89c:	0599      	lsls	r1, r3, #22
 800e89e:	d402      	bmi.n	800e8a6 <_fflush_r+0x3a>
 800e8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8a2:	f000 f915 	bl	800ead0 <__retarget_lock_acquire_recursive>
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	f7ff ff59 	bl	800e760 <__sflush_r>
 800e8ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8b0:	07da      	lsls	r2, r3, #31
 800e8b2:	4605      	mov	r5, r0
 800e8b4:	d4e0      	bmi.n	800e878 <_fflush_r+0xc>
 800e8b6:	89a3      	ldrh	r3, [r4, #12]
 800e8b8:	059b      	lsls	r3, r3, #22
 800e8ba:	d4dd      	bmi.n	800e878 <_fflush_r+0xc>
 800e8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8be:	f000 f908 	bl	800ead2 <__retarget_lock_release_recursive>
 800e8c2:	e7d9      	b.n	800e878 <_fflush_r+0xc>
 800e8c4:	4b05      	ldr	r3, [pc, #20]	; (800e8dc <_fflush_r+0x70>)
 800e8c6:	429c      	cmp	r4, r3
 800e8c8:	d101      	bne.n	800e8ce <_fflush_r+0x62>
 800e8ca:	68ac      	ldr	r4, [r5, #8]
 800e8cc:	e7df      	b.n	800e88e <_fflush_r+0x22>
 800e8ce:	4b04      	ldr	r3, [pc, #16]	; (800e8e0 <_fflush_r+0x74>)
 800e8d0:	429c      	cmp	r4, r3
 800e8d2:	bf08      	it	eq
 800e8d4:	68ec      	ldreq	r4, [r5, #12]
 800e8d6:	e7da      	b.n	800e88e <_fflush_r+0x22>
 800e8d8:	0800f1fc 	.word	0x0800f1fc
 800e8dc:	0800f21c 	.word	0x0800f21c
 800e8e0:	0800f1dc 	.word	0x0800f1dc

0800e8e4 <std>:
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	b510      	push	{r4, lr}
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	e9c0 3300 	strd	r3, r3, [r0]
 800e8ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8f2:	6083      	str	r3, [r0, #8]
 800e8f4:	8181      	strh	r1, [r0, #12]
 800e8f6:	6643      	str	r3, [r0, #100]	; 0x64
 800e8f8:	81c2      	strh	r2, [r0, #14]
 800e8fa:	6183      	str	r3, [r0, #24]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	2208      	movs	r2, #8
 800e900:	305c      	adds	r0, #92	; 0x5c
 800e902:	f7fd fb99 	bl	800c038 <memset>
 800e906:	4b05      	ldr	r3, [pc, #20]	; (800e91c <std+0x38>)
 800e908:	6263      	str	r3, [r4, #36]	; 0x24
 800e90a:	4b05      	ldr	r3, [pc, #20]	; (800e920 <std+0x3c>)
 800e90c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e90e:	4b05      	ldr	r3, [pc, #20]	; (800e924 <std+0x40>)
 800e910:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e912:	4b05      	ldr	r3, [pc, #20]	; (800e928 <std+0x44>)
 800e914:	6224      	str	r4, [r4, #32]
 800e916:	6323      	str	r3, [r4, #48]	; 0x30
 800e918:	bd10      	pop	{r4, pc}
 800e91a:	bf00      	nop
 800e91c:	0800ec35 	.word	0x0800ec35
 800e920:	0800ec57 	.word	0x0800ec57
 800e924:	0800ec8f 	.word	0x0800ec8f
 800e928:	0800ecb3 	.word	0x0800ecb3

0800e92c <_cleanup_r>:
 800e92c:	4901      	ldr	r1, [pc, #4]	; (800e934 <_cleanup_r+0x8>)
 800e92e:	f000 b8af 	b.w	800ea90 <_fwalk_reent>
 800e932:	bf00      	nop
 800e934:	0800e86d 	.word	0x0800e86d

0800e938 <__sfmoreglue>:
 800e938:	b570      	push	{r4, r5, r6, lr}
 800e93a:	1e4a      	subs	r2, r1, #1
 800e93c:	2568      	movs	r5, #104	; 0x68
 800e93e:	4355      	muls	r5, r2
 800e940:	460e      	mov	r6, r1
 800e942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e946:	f7ff fa87 	bl	800de58 <_malloc_r>
 800e94a:	4604      	mov	r4, r0
 800e94c:	b140      	cbz	r0, 800e960 <__sfmoreglue+0x28>
 800e94e:	2100      	movs	r1, #0
 800e950:	e9c0 1600 	strd	r1, r6, [r0]
 800e954:	300c      	adds	r0, #12
 800e956:	60a0      	str	r0, [r4, #8]
 800e958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e95c:	f7fd fb6c 	bl	800c038 <memset>
 800e960:	4620      	mov	r0, r4
 800e962:	bd70      	pop	{r4, r5, r6, pc}

0800e964 <__sfp_lock_acquire>:
 800e964:	4801      	ldr	r0, [pc, #4]	; (800e96c <__sfp_lock_acquire+0x8>)
 800e966:	f000 b8b3 	b.w	800ead0 <__retarget_lock_acquire_recursive>
 800e96a:	bf00      	nop
 800e96c:	20002258 	.word	0x20002258

0800e970 <__sfp_lock_release>:
 800e970:	4801      	ldr	r0, [pc, #4]	; (800e978 <__sfp_lock_release+0x8>)
 800e972:	f000 b8ae 	b.w	800ead2 <__retarget_lock_release_recursive>
 800e976:	bf00      	nop
 800e978:	20002258 	.word	0x20002258

0800e97c <__sinit_lock_acquire>:
 800e97c:	4801      	ldr	r0, [pc, #4]	; (800e984 <__sinit_lock_acquire+0x8>)
 800e97e:	f000 b8a7 	b.w	800ead0 <__retarget_lock_acquire_recursive>
 800e982:	bf00      	nop
 800e984:	20002253 	.word	0x20002253

0800e988 <__sinit_lock_release>:
 800e988:	4801      	ldr	r0, [pc, #4]	; (800e990 <__sinit_lock_release+0x8>)
 800e98a:	f000 b8a2 	b.w	800ead2 <__retarget_lock_release_recursive>
 800e98e:	bf00      	nop
 800e990:	20002253 	.word	0x20002253

0800e994 <__sinit>:
 800e994:	b510      	push	{r4, lr}
 800e996:	4604      	mov	r4, r0
 800e998:	f7ff fff0 	bl	800e97c <__sinit_lock_acquire>
 800e99c:	69a3      	ldr	r3, [r4, #24]
 800e99e:	b11b      	cbz	r3, 800e9a8 <__sinit+0x14>
 800e9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9a4:	f7ff bff0 	b.w	800e988 <__sinit_lock_release>
 800e9a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e9ac:	6523      	str	r3, [r4, #80]	; 0x50
 800e9ae:	4b13      	ldr	r3, [pc, #76]	; (800e9fc <__sinit+0x68>)
 800e9b0:	4a13      	ldr	r2, [pc, #76]	; (800ea00 <__sinit+0x6c>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e9b6:	42a3      	cmp	r3, r4
 800e9b8:	bf04      	itt	eq
 800e9ba:	2301      	moveq	r3, #1
 800e9bc:	61a3      	streq	r3, [r4, #24]
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f000 f820 	bl	800ea04 <__sfp>
 800e9c4:	6060      	str	r0, [r4, #4]
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f000 f81c 	bl	800ea04 <__sfp>
 800e9cc:	60a0      	str	r0, [r4, #8]
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f000 f818 	bl	800ea04 <__sfp>
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	60e0      	str	r0, [r4, #12]
 800e9d8:	2104      	movs	r1, #4
 800e9da:	6860      	ldr	r0, [r4, #4]
 800e9dc:	f7ff ff82 	bl	800e8e4 <std>
 800e9e0:	68a0      	ldr	r0, [r4, #8]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	2109      	movs	r1, #9
 800e9e6:	f7ff ff7d 	bl	800e8e4 <std>
 800e9ea:	68e0      	ldr	r0, [r4, #12]
 800e9ec:	2202      	movs	r2, #2
 800e9ee:	2112      	movs	r1, #18
 800e9f0:	f7ff ff78 	bl	800e8e4 <std>
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	61a3      	str	r3, [r4, #24]
 800e9f8:	e7d2      	b.n	800e9a0 <__sinit+0xc>
 800e9fa:	bf00      	nop
 800e9fc:	0800ee58 	.word	0x0800ee58
 800ea00:	0800e92d 	.word	0x0800e92d

0800ea04 <__sfp>:
 800ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea06:	4607      	mov	r7, r0
 800ea08:	f7ff ffac 	bl	800e964 <__sfp_lock_acquire>
 800ea0c:	4b1e      	ldr	r3, [pc, #120]	; (800ea88 <__sfp+0x84>)
 800ea0e:	681e      	ldr	r6, [r3, #0]
 800ea10:	69b3      	ldr	r3, [r6, #24]
 800ea12:	b913      	cbnz	r3, 800ea1a <__sfp+0x16>
 800ea14:	4630      	mov	r0, r6
 800ea16:	f7ff ffbd 	bl	800e994 <__sinit>
 800ea1a:	3648      	adds	r6, #72	; 0x48
 800ea1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea20:	3b01      	subs	r3, #1
 800ea22:	d503      	bpl.n	800ea2c <__sfp+0x28>
 800ea24:	6833      	ldr	r3, [r6, #0]
 800ea26:	b30b      	cbz	r3, 800ea6c <__sfp+0x68>
 800ea28:	6836      	ldr	r6, [r6, #0]
 800ea2a:	e7f7      	b.n	800ea1c <__sfp+0x18>
 800ea2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea30:	b9d5      	cbnz	r5, 800ea68 <__sfp+0x64>
 800ea32:	4b16      	ldr	r3, [pc, #88]	; (800ea8c <__sfp+0x88>)
 800ea34:	60e3      	str	r3, [r4, #12]
 800ea36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea3a:	6665      	str	r5, [r4, #100]	; 0x64
 800ea3c:	f000 f847 	bl	800eace <__retarget_lock_init_recursive>
 800ea40:	f7ff ff96 	bl	800e970 <__sfp_lock_release>
 800ea44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea4c:	6025      	str	r5, [r4, #0]
 800ea4e:	61a5      	str	r5, [r4, #24]
 800ea50:	2208      	movs	r2, #8
 800ea52:	4629      	mov	r1, r5
 800ea54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea58:	f7fd faee 	bl	800c038 <memset>
 800ea5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea64:	4620      	mov	r0, r4
 800ea66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea68:	3468      	adds	r4, #104	; 0x68
 800ea6a:	e7d9      	b.n	800ea20 <__sfp+0x1c>
 800ea6c:	2104      	movs	r1, #4
 800ea6e:	4638      	mov	r0, r7
 800ea70:	f7ff ff62 	bl	800e938 <__sfmoreglue>
 800ea74:	4604      	mov	r4, r0
 800ea76:	6030      	str	r0, [r6, #0]
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	d1d5      	bne.n	800ea28 <__sfp+0x24>
 800ea7c:	f7ff ff78 	bl	800e970 <__sfp_lock_release>
 800ea80:	230c      	movs	r3, #12
 800ea82:	603b      	str	r3, [r7, #0]
 800ea84:	e7ee      	b.n	800ea64 <__sfp+0x60>
 800ea86:	bf00      	nop
 800ea88:	0800ee58 	.word	0x0800ee58
 800ea8c:	ffff0001 	.word	0xffff0001

0800ea90 <_fwalk_reent>:
 800ea90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea94:	4606      	mov	r6, r0
 800ea96:	4688      	mov	r8, r1
 800ea98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea9c:	2700      	movs	r7, #0
 800ea9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eaa2:	f1b9 0901 	subs.w	r9, r9, #1
 800eaa6:	d505      	bpl.n	800eab4 <_fwalk_reent+0x24>
 800eaa8:	6824      	ldr	r4, [r4, #0]
 800eaaa:	2c00      	cmp	r4, #0
 800eaac:	d1f7      	bne.n	800ea9e <_fwalk_reent+0xe>
 800eaae:	4638      	mov	r0, r7
 800eab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eab4:	89ab      	ldrh	r3, [r5, #12]
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d907      	bls.n	800eaca <_fwalk_reent+0x3a>
 800eaba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eabe:	3301      	adds	r3, #1
 800eac0:	d003      	beq.n	800eaca <_fwalk_reent+0x3a>
 800eac2:	4629      	mov	r1, r5
 800eac4:	4630      	mov	r0, r6
 800eac6:	47c0      	blx	r8
 800eac8:	4307      	orrs	r7, r0
 800eaca:	3568      	adds	r5, #104	; 0x68
 800eacc:	e7e9      	b.n	800eaa2 <_fwalk_reent+0x12>

0800eace <__retarget_lock_init_recursive>:
 800eace:	4770      	bx	lr

0800ead0 <__retarget_lock_acquire_recursive>:
 800ead0:	4770      	bx	lr

0800ead2 <__retarget_lock_release_recursive>:
 800ead2:	4770      	bx	lr

0800ead4 <__swhatbuf_r>:
 800ead4:	b570      	push	{r4, r5, r6, lr}
 800ead6:	460e      	mov	r6, r1
 800ead8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eadc:	2900      	cmp	r1, #0
 800eade:	b096      	sub	sp, #88	; 0x58
 800eae0:	4614      	mov	r4, r2
 800eae2:	461d      	mov	r5, r3
 800eae4:	da07      	bge.n	800eaf6 <__swhatbuf_r+0x22>
 800eae6:	2300      	movs	r3, #0
 800eae8:	602b      	str	r3, [r5, #0]
 800eaea:	89b3      	ldrh	r3, [r6, #12]
 800eaec:	061a      	lsls	r2, r3, #24
 800eaee:	d410      	bmi.n	800eb12 <__swhatbuf_r+0x3e>
 800eaf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaf4:	e00e      	b.n	800eb14 <__swhatbuf_r+0x40>
 800eaf6:	466a      	mov	r2, sp
 800eaf8:	f000 f902 	bl	800ed00 <_fstat_r>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	dbf2      	blt.n	800eae6 <__swhatbuf_r+0x12>
 800eb00:	9a01      	ldr	r2, [sp, #4]
 800eb02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb0a:	425a      	negs	r2, r3
 800eb0c:	415a      	adcs	r2, r3
 800eb0e:	602a      	str	r2, [r5, #0]
 800eb10:	e7ee      	b.n	800eaf0 <__swhatbuf_r+0x1c>
 800eb12:	2340      	movs	r3, #64	; 0x40
 800eb14:	2000      	movs	r0, #0
 800eb16:	6023      	str	r3, [r4, #0]
 800eb18:	b016      	add	sp, #88	; 0x58
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}

0800eb1c <__smakebuf_r>:
 800eb1c:	898b      	ldrh	r3, [r1, #12]
 800eb1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb20:	079d      	lsls	r5, r3, #30
 800eb22:	4606      	mov	r6, r0
 800eb24:	460c      	mov	r4, r1
 800eb26:	d507      	bpl.n	800eb38 <__smakebuf_r+0x1c>
 800eb28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb2c:	6023      	str	r3, [r4, #0]
 800eb2e:	6123      	str	r3, [r4, #16]
 800eb30:	2301      	movs	r3, #1
 800eb32:	6163      	str	r3, [r4, #20]
 800eb34:	b002      	add	sp, #8
 800eb36:	bd70      	pop	{r4, r5, r6, pc}
 800eb38:	ab01      	add	r3, sp, #4
 800eb3a:	466a      	mov	r2, sp
 800eb3c:	f7ff ffca 	bl	800ead4 <__swhatbuf_r>
 800eb40:	9900      	ldr	r1, [sp, #0]
 800eb42:	4605      	mov	r5, r0
 800eb44:	4630      	mov	r0, r6
 800eb46:	f7ff f987 	bl	800de58 <_malloc_r>
 800eb4a:	b948      	cbnz	r0, 800eb60 <__smakebuf_r+0x44>
 800eb4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb50:	059a      	lsls	r2, r3, #22
 800eb52:	d4ef      	bmi.n	800eb34 <__smakebuf_r+0x18>
 800eb54:	f023 0303 	bic.w	r3, r3, #3
 800eb58:	f043 0302 	orr.w	r3, r3, #2
 800eb5c:	81a3      	strh	r3, [r4, #12]
 800eb5e:	e7e3      	b.n	800eb28 <__smakebuf_r+0xc>
 800eb60:	4b0d      	ldr	r3, [pc, #52]	; (800eb98 <__smakebuf_r+0x7c>)
 800eb62:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb64:	89a3      	ldrh	r3, [r4, #12]
 800eb66:	6020      	str	r0, [r4, #0]
 800eb68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb6c:	81a3      	strh	r3, [r4, #12]
 800eb6e:	9b00      	ldr	r3, [sp, #0]
 800eb70:	6163      	str	r3, [r4, #20]
 800eb72:	9b01      	ldr	r3, [sp, #4]
 800eb74:	6120      	str	r0, [r4, #16]
 800eb76:	b15b      	cbz	r3, 800eb90 <__smakebuf_r+0x74>
 800eb78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f000 f8d1 	bl	800ed24 <_isatty_r>
 800eb82:	b128      	cbz	r0, 800eb90 <__smakebuf_r+0x74>
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	f023 0303 	bic.w	r3, r3, #3
 800eb8a:	f043 0301 	orr.w	r3, r3, #1
 800eb8e:	81a3      	strh	r3, [r4, #12]
 800eb90:	89a0      	ldrh	r0, [r4, #12]
 800eb92:	4305      	orrs	r5, r0
 800eb94:	81a5      	strh	r5, [r4, #12]
 800eb96:	e7cd      	b.n	800eb34 <__smakebuf_r+0x18>
 800eb98:	0800e92d 	.word	0x0800e92d

0800eb9c <_malloc_usable_size_r>:
 800eb9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eba0:	1f18      	subs	r0, r3, #4
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	bfbc      	itt	lt
 800eba6:	580b      	ldrlt	r3, [r1, r0]
 800eba8:	18c0      	addlt	r0, r0, r3
 800ebaa:	4770      	bx	lr

0800ebac <_raise_r>:
 800ebac:	291f      	cmp	r1, #31
 800ebae:	b538      	push	{r3, r4, r5, lr}
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	460d      	mov	r5, r1
 800ebb4:	d904      	bls.n	800ebc0 <_raise_r+0x14>
 800ebb6:	2316      	movs	r3, #22
 800ebb8:	6003      	str	r3, [r0, #0]
 800ebba:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}
 800ebc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ebc2:	b112      	cbz	r2, 800ebca <_raise_r+0x1e>
 800ebc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebc8:	b94b      	cbnz	r3, 800ebde <_raise_r+0x32>
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f000 f830 	bl	800ec30 <_getpid_r>
 800ebd0:	462a      	mov	r2, r5
 800ebd2:	4601      	mov	r1, r0
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebda:	f000 b817 	b.w	800ec0c <_kill_r>
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d00a      	beq.n	800ebf8 <_raise_r+0x4c>
 800ebe2:	1c59      	adds	r1, r3, #1
 800ebe4:	d103      	bne.n	800ebee <_raise_r+0x42>
 800ebe6:	2316      	movs	r3, #22
 800ebe8:	6003      	str	r3, [r0, #0]
 800ebea:	2001      	movs	r0, #1
 800ebec:	e7e7      	b.n	800ebbe <_raise_r+0x12>
 800ebee:	2400      	movs	r4, #0
 800ebf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	4798      	blx	r3
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	e7e0      	b.n	800ebbe <_raise_r+0x12>

0800ebfc <raise>:
 800ebfc:	4b02      	ldr	r3, [pc, #8]	; (800ec08 <raise+0xc>)
 800ebfe:	4601      	mov	r1, r0
 800ec00:	6818      	ldr	r0, [r3, #0]
 800ec02:	f7ff bfd3 	b.w	800ebac <_raise_r>
 800ec06:	bf00      	nop
 800ec08:	20000194 	.word	0x20000194

0800ec0c <_kill_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	4d07      	ldr	r5, [pc, #28]	; (800ec2c <_kill_r+0x20>)
 800ec10:	2300      	movs	r3, #0
 800ec12:	4604      	mov	r4, r0
 800ec14:	4608      	mov	r0, r1
 800ec16:	4611      	mov	r1, r2
 800ec18:	602b      	str	r3, [r5, #0]
 800ec1a:	f7f3 fc11 	bl	8002440 <_kill>
 800ec1e:	1c43      	adds	r3, r0, #1
 800ec20:	d102      	bne.n	800ec28 <_kill_r+0x1c>
 800ec22:	682b      	ldr	r3, [r5, #0]
 800ec24:	b103      	cbz	r3, 800ec28 <_kill_r+0x1c>
 800ec26:	6023      	str	r3, [r4, #0]
 800ec28:	bd38      	pop	{r3, r4, r5, pc}
 800ec2a:	bf00      	nop
 800ec2c:	2000224c 	.word	0x2000224c

0800ec30 <_getpid_r>:
 800ec30:	f7f3 bbfe 	b.w	8002430 <_getpid>

0800ec34 <__sread>:
 800ec34:	b510      	push	{r4, lr}
 800ec36:	460c      	mov	r4, r1
 800ec38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec3c:	f000 f894 	bl	800ed68 <_read_r>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	bfab      	itete	ge
 800ec44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec46:	89a3      	ldrhlt	r3, [r4, #12]
 800ec48:	181b      	addge	r3, r3, r0
 800ec4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec4e:	bfac      	ite	ge
 800ec50:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec52:	81a3      	strhlt	r3, [r4, #12]
 800ec54:	bd10      	pop	{r4, pc}

0800ec56 <__swrite>:
 800ec56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5a:	461f      	mov	r7, r3
 800ec5c:	898b      	ldrh	r3, [r1, #12]
 800ec5e:	05db      	lsls	r3, r3, #23
 800ec60:	4605      	mov	r5, r0
 800ec62:	460c      	mov	r4, r1
 800ec64:	4616      	mov	r6, r2
 800ec66:	d505      	bpl.n	800ec74 <__swrite+0x1e>
 800ec68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec6c:	2302      	movs	r3, #2
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f000 f868 	bl	800ed44 <_lseek_r>
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec7e:	81a3      	strh	r3, [r4, #12]
 800ec80:	4632      	mov	r2, r6
 800ec82:	463b      	mov	r3, r7
 800ec84:	4628      	mov	r0, r5
 800ec86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8a:	f000 b817 	b.w	800ecbc <_write_r>

0800ec8e <__sseek>:
 800ec8e:	b510      	push	{r4, lr}
 800ec90:	460c      	mov	r4, r1
 800ec92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec96:	f000 f855 	bl	800ed44 <_lseek_r>
 800ec9a:	1c43      	adds	r3, r0, #1
 800ec9c:	89a3      	ldrh	r3, [r4, #12]
 800ec9e:	bf15      	itete	ne
 800eca0:	6560      	strne	r0, [r4, #84]	; 0x54
 800eca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecaa:	81a3      	strheq	r3, [r4, #12]
 800ecac:	bf18      	it	ne
 800ecae:	81a3      	strhne	r3, [r4, #12]
 800ecb0:	bd10      	pop	{r4, pc}

0800ecb2 <__sclose>:
 800ecb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb6:	f000 b813 	b.w	800ece0 <_close_r>
	...

0800ecbc <_write_r>:
 800ecbc:	b538      	push	{r3, r4, r5, lr}
 800ecbe:	4d07      	ldr	r5, [pc, #28]	; (800ecdc <_write_r+0x20>)
 800ecc0:	4604      	mov	r4, r0
 800ecc2:	4608      	mov	r0, r1
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	602a      	str	r2, [r5, #0]
 800ecca:	461a      	mov	r2, r3
 800eccc:	f7f3 fbef 	bl	80024ae <_write>
 800ecd0:	1c43      	adds	r3, r0, #1
 800ecd2:	d102      	bne.n	800ecda <_write_r+0x1e>
 800ecd4:	682b      	ldr	r3, [r5, #0]
 800ecd6:	b103      	cbz	r3, 800ecda <_write_r+0x1e>
 800ecd8:	6023      	str	r3, [r4, #0]
 800ecda:	bd38      	pop	{r3, r4, r5, pc}
 800ecdc:	2000224c 	.word	0x2000224c

0800ece0 <_close_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4d06      	ldr	r5, [pc, #24]	; (800ecfc <_close_r+0x1c>)
 800ece4:	2300      	movs	r3, #0
 800ece6:	4604      	mov	r4, r0
 800ece8:	4608      	mov	r0, r1
 800ecea:	602b      	str	r3, [r5, #0]
 800ecec:	f7f3 fbfb 	bl	80024e6 <_close>
 800ecf0:	1c43      	adds	r3, r0, #1
 800ecf2:	d102      	bne.n	800ecfa <_close_r+0x1a>
 800ecf4:	682b      	ldr	r3, [r5, #0]
 800ecf6:	b103      	cbz	r3, 800ecfa <_close_r+0x1a>
 800ecf8:	6023      	str	r3, [r4, #0]
 800ecfa:	bd38      	pop	{r3, r4, r5, pc}
 800ecfc:	2000224c 	.word	0x2000224c

0800ed00 <_fstat_r>:
 800ed00:	b538      	push	{r3, r4, r5, lr}
 800ed02:	4d07      	ldr	r5, [pc, #28]	; (800ed20 <_fstat_r+0x20>)
 800ed04:	2300      	movs	r3, #0
 800ed06:	4604      	mov	r4, r0
 800ed08:	4608      	mov	r0, r1
 800ed0a:	4611      	mov	r1, r2
 800ed0c:	602b      	str	r3, [r5, #0]
 800ed0e:	f7f3 fbf6 	bl	80024fe <_fstat>
 800ed12:	1c43      	adds	r3, r0, #1
 800ed14:	d102      	bne.n	800ed1c <_fstat_r+0x1c>
 800ed16:	682b      	ldr	r3, [r5, #0]
 800ed18:	b103      	cbz	r3, 800ed1c <_fstat_r+0x1c>
 800ed1a:	6023      	str	r3, [r4, #0]
 800ed1c:	bd38      	pop	{r3, r4, r5, pc}
 800ed1e:	bf00      	nop
 800ed20:	2000224c 	.word	0x2000224c

0800ed24 <_isatty_r>:
 800ed24:	b538      	push	{r3, r4, r5, lr}
 800ed26:	4d06      	ldr	r5, [pc, #24]	; (800ed40 <_isatty_r+0x1c>)
 800ed28:	2300      	movs	r3, #0
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	4608      	mov	r0, r1
 800ed2e:	602b      	str	r3, [r5, #0]
 800ed30:	f7f3 fbf5 	bl	800251e <_isatty>
 800ed34:	1c43      	adds	r3, r0, #1
 800ed36:	d102      	bne.n	800ed3e <_isatty_r+0x1a>
 800ed38:	682b      	ldr	r3, [r5, #0]
 800ed3a:	b103      	cbz	r3, 800ed3e <_isatty_r+0x1a>
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	bd38      	pop	{r3, r4, r5, pc}
 800ed40:	2000224c 	.word	0x2000224c

0800ed44 <_lseek_r>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4d07      	ldr	r5, [pc, #28]	; (800ed64 <_lseek_r+0x20>)
 800ed48:	4604      	mov	r4, r0
 800ed4a:	4608      	mov	r0, r1
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	2200      	movs	r2, #0
 800ed50:	602a      	str	r2, [r5, #0]
 800ed52:	461a      	mov	r2, r3
 800ed54:	f7f3 fbee 	bl	8002534 <_lseek>
 800ed58:	1c43      	adds	r3, r0, #1
 800ed5a:	d102      	bne.n	800ed62 <_lseek_r+0x1e>
 800ed5c:	682b      	ldr	r3, [r5, #0]
 800ed5e:	b103      	cbz	r3, 800ed62 <_lseek_r+0x1e>
 800ed60:	6023      	str	r3, [r4, #0]
 800ed62:	bd38      	pop	{r3, r4, r5, pc}
 800ed64:	2000224c 	.word	0x2000224c

0800ed68 <_read_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d07      	ldr	r5, [pc, #28]	; (800ed88 <_read_r+0x20>)
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	4608      	mov	r0, r1
 800ed70:	4611      	mov	r1, r2
 800ed72:	2200      	movs	r2, #0
 800ed74:	602a      	str	r2, [r5, #0]
 800ed76:	461a      	mov	r2, r3
 800ed78:	f7f3 fb7c 	bl	8002474 <_read>
 800ed7c:	1c43      	adds	r3, r0, #1
 800ed7e:	d102      	bne.n	800ed86 <_read_r+0x1e>
 800ed80:	682b      	ldr	r3, [r5, #0]
 800ed82:	b103      	cbz	r3, 800ed86 <_read_r+0x1e>
 800ed84:	6023      	str	r3, [r4, #0]
 800ed86:	bd38      	pop	{r3, r4, r5, pc}
 800ed88:	2000224c 	.word	0x2000224c

0800ed8c <_init>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	bf00      	nop
 800ed90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed92:	bc08      	pop	{r3}
 800ed94:	469e      	mov	lr, r3
 800ed96:	4770      	bx	lr

0800ed98 <_fini>:
 800ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed9a:	bf00      	nop
 800ed9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed9e:	bc08      	pop	{r3}
 800eda0:	469e      	mov	lr, r3
 800eda2:	4770      	bx	lr
