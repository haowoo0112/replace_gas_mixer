
M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000ec14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800eda8  0800eda8  0001eda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f23c  0800f23c  00020364  2**0
                  CONTENTS
  4 .ARM          00000008  0800f23c  0800f23c  0001f23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f244  0800f244  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f244  0800f244  0001f244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f248  0800f248  0001f248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800f24c  00020000  2**2
=======
  1 .text         0000ec7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800ee10  0800ee10  0001ee10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2e4  0800f2e4  00020360  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2e4  0800f2e4  0001f2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2ec  0800f2ec  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2ec  0800f2ec  0001f2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2f0  0800f2f0  0001f2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800f2f4  00020000  2**2
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020364  2**0
                  CONTENTS
 10 .bss          00001ef4  20000368  20000368  00020368  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000225c  2000225c  00020368  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 13 .debug_info   00029074  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004afa  00000000  00000000  00049408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  0004df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f0  00000000  00000000  0004f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296b5  00000000  00000000  00051068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002092d  00000000  00000000  0007a71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d80f7  00000000  00000000  0009b04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00173141  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f88  00000000  00000000  00173194  2**2
=======
 13 .debug_info   00029051  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b09  00000000  00000000  000493e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  0004def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f0  00000000  00000000  0004f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296b5  00000000  00000000  00051050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020903  00000000  00000000  0007a705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d80ee  00000000  00000000  0009b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001730f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f98  00000000  00000000  0017314c  2**2
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000368 	.word	0x20000368
 80001ac:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001b0:	0800ed8c 	.word	0x0800ed8c
=======
 80001b0:	0800edf4 	.word	0x0800edf4
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	0800ed8c 	.word	0x0800ed8c
=======
 80001c8:	20000364 	.word	0x20000364
 80001cc:	0800edf4 	.word	0x0800edf4
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000f44:	f001 fd84 	bl	8002a50 <HAL_Init>
=======
 8000f44:	f001 fdb8 	bl	8002ab8 <HAL_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f82e 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 fa8a 	bl	8001464 <MX_GPIO_Init>
  MX_UART4_Init();
 8000f50:	f000 f9b6 	bl	80012c0 <MX_UART4_Init>
  MX_USB_DEVICE_Init();
<<<<<<< HEAD
 8000f54:	f009 fb76 	bl	800a644 <MX_USB_DEVICE_Init>
=======
 8000f54:	f009 fbaa 	bl	800a6ac <MX_USB_DEVICE_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  MX_USART3_UART_Init();
 8000f58:	f000 fa5a 	bl	8001410 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f5c:	f000 f890 	bl	8001080 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f60:	f000 f8bc 	bl	80010dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f64:	f000 fa00 	bl	8001368 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f68:	f000 fa28 	bl	80013bc <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000f6c:	f000 f972 	bl	8001254 <MX_TIM7_Init>
  MX_UART5_Init();
 8000f70:	f000 f9d0 	bl	8001314 <MX_UART5_Init>
  MX_TIM1_Init();
 8000f74:	f000 f8ea 	bl	800114c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <main+0x64>)
<<<<<<< HEAD
 8000f7c:	f005 fa8a 	bl	8006494 <HAL_TIMEx_PWMN_Start>
=======
 8000f7c:	f005 fabe 	bl	80064fc <HAL_TIMEx_PWMN_Start>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    __HAL_TIM_SET_AUTORELOAD(&htim1, 999);
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <main+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <main+0x64>)
 8000f8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f90:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,49);
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <main+0x64>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2231      	movs	r2, #49	; 0x31
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
  main_2_init();
 8000f9a:	f000 fdc9 	bl	8001b30 <main_2_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    main_2_loop();
 8000f9e:	f000 fdd9 	bl	8001b54 <main_2_loop>
 8000fa2:	e7fc      	b.n	8000f9e <main+0x5e>
 8000fa4:	20000800 	.word	0x20000800

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000fb8:	f00b f83e 	bl	800c038 <memset>
=======
 8000fb8:	f00b f872 	bl	800c0a0 <memset>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <SystemClock_Config+0xd0>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a28      	ldr	r2, [pc, #160]	; (8001078 <SystemClock_Config+0xd0>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <SystemClock_Config+0xd0>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <SystemClock_Config+0xd4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a22      	ldr	r2, [pc, #136]	; (800107c <SystemClock_Config+0xd4>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <SystemClock_Config+0xd4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001018:	2319      	movs	r3, #25
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800101c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001026:	2307      	movs	r3, #7
 8001028:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001030:	f003 ffe6 	bl	8005000 <HAL_RCC_OscConfig>
=======
 8001030:	f004 f81a 	bl	8005068 <HAL_RCC_OscConfig>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800103a:	f000 faa3 	bl	8001584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2105      	movs	r1, #5
 800105c:	4618      	mov	r0, r3
<<<<<<< HEAD
 800105e:	f004 fa47 	bl	80054f0 <HAL_RCC_ClockConfig>
=======
 800105e:	f004 fa7b 	bl	8005558 <HAL_RCC_ClockConfig>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001068:	f000 fa8c 	bl	8001584 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
<<<<<<< HEAD
 800106c:	f004 fb26 	bl	80056bc <HAL_RCC_EnableCSS>
=======
 800106c:	f004 fb5a 	bl	8005724 <HAL_RCC_EnableCSS>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
}
 8001070:	bf00      	nop
 8001072:	3750      	adds	r7, #80	; 0x50
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <MX_I2C1_Init+0x54>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_I2C1_Init+0x50>)
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_I2C1_Init+0x58>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_I2C1_Init+0x50>)
 800109e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_I2C1_Init+0x50>)
<<<<<<< HEAD
 80010be:	f002 f8b7 	bl	8003230 <HAL_I2C_Init>
=======
 80010be:	f002 f8eb 	bl	8003298 <HAL_I2C_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c8:	f000 fa5c 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000720 	.word	0x20000720
 80010d4:	40005400 	.word	0x40005400
 80010d8:	000186a0 	.word	0x000186a0

080010dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_SPI1_Init+0x68>)
 80010e2:	4a19      	ldr	r2, [pc, #100]	; (8001148 <MX_SPI1_Init+0x6c>)
 80010e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_SPI1_Init+0x68>)
 80010e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_SPI1_Init+0x68>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_SPI1_Init+0x68>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_SPI1_Init+0x68>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_SPI1_Init+0x68>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_SPI1_Init+0x68>)
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_SPI1_Init+0x68>)
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_SPI1_Init+0x68>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_SPI1_Init+0x68>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_SPI1_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_SPI1_Init+0x68>)
 800112a:	220a      	movs	r2, #10
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_SPI1_Init+0x68>)
<<<<<<< HEAD
 8001130:	f004 fbd5 	bl	80058de <HAL_SPI_Init>
=======
 8001130:	f004 fc09 	bl	8005946 <HAL_SPI_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800113a:	f000 fa23 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000088c 	.word	0x2000088c
 8001148:	40013000 	.word	0x40013000

0800114c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b092      	sub	sp, #72	; 0x48
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2220      	movs	r2, #32
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001178:	f00a ff5e 	bl	800c038 <memset>
=======
 8001178:	f00a ff92 	bl	800c0a0 <memset>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <MX_TIM1_Init+0x100>)
 800117e:	4a34      	ldr	r2, [pc, #208]	; (8001250 <MX_TIM1_Init+0x104>)
 8001180:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <MX_TIM1_Init+0x100>)
 8001184:	22a7      	movs	r2, #167	; 0xa7
 8001186:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <MX_TIM1_Init+0x100>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <MX_TIM1_Init+0x100>)
 8001190:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001194:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <MX_TIM1_Init+0x100>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <MX_TIM1_Init+0x100>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <MX_TIM1_Init+0x100>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <MX_TIM1_Init+0x100>)
<<<<<<< HEAD
 80011aa:	f004 fce1 	bl	8005b70 <HAL_TIM_PWM_Init>
=======
 80011aa:	f004 fd15 	bl	8005bd8 <HAL_TIM_PWM_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80011b4:	f000 f9e6 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011c4:	4619      	mov	r1, r3
 80011c6:	4821      	ldr	r0, [pc, #132]	; (800124c <MX_TIM1_Init+0x100>)
<<<<<<< HEAD
 80011c8:	f005 fa1e 	bl	8006608 <HAL_TIMEx_MasterConfigSynchronization>
=======
 80011c8:	f005 fa52 	bl	8006670 <HAL_TIMEx_MasterConfigSynchronization>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80011d2:	f000 f9d7 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d6:	2360      	movs	r3, #96	; 0x60
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4814      	ldr	r0, [pc, #80]	; (800124c <MX_TIM1_Init+0x100>)
<<<<<<< HEAD
 80011fc:	f004 fe10 	bl	8005e20 <HAL_TIM_PWM_ConfigChannel>
=======
 80011fc:	f004 fe44 	bl	8005e88 <HAL_TIM_PWM_ConfigChannel>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001206:	f000 f9bd 	bl	8001584 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <MX_TIM1_Init+0x100>)
<<<<<<< HEAD
 800122e:	f005 fa67 	bl	8006700 <HAL_TIMEx_ConfigBreakDeadTime>
=======
 800122e:	f005 fa9b 	bl	8006768 <HAL_TIMEx_ConfigBreakDeadTime>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001238:	f000 f9a4 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <MX_TIM1_Init+0x100>)
<<<<<<< HEAD
 800123e:	f000 fefb 	bl	8002038 <HAL_TIM_MspPostInit>
=======
 800123e:	f000 fedd 	bl	8001ffc <HAL_TIM_MspPostInit>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

}
 8001242:	bf00      	nop
 8001244:	3748      	adds	r7, #72	; 0x48
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000800 	.word	0x20000800
 8001250:	40010000 	.word	0x40010000

08001254 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_TIM7_Init+0x64>)
 8001264:	4a15      	ldr	r2, [pc, #84]	; (80012bc <MX_TIM7_Init+0x68>)
 8001266:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2099;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_TIM7_Init+0x64>)
 800126a:	f640 0233 	movw	r2, #2099	; 0x833
 800126e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_TIM7_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_TIM7_Init+0x64>)
 8001278:	f240 32e7 	movw	r2, #999	; 0x3e7
 800127c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_TIM7_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM7_Init+0x64>)
<<<<<<< HEAD
 8001286:	f004 fbb3 	bl	80059f0 <HAL_TIM_Base_Init>
=======
 8001286:	f004 fbe7 	bl	8005a58 <HAL_TIM_Base_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001290:	f000 f978 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM7_Init+0x64>)
<<<<<<< HEAD
 80012a2:	f005 f9b1 	bl	8006608 <HAL_TIMEx_MasterConfigSynchronization>
=======
 80012a2:	f005 f9e5 	bl	8006670 <HAL_TIMEx_MasterConfigSynchronization>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80012ac:	f000 f96a 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000928 	.word	0x20000928
 80012bc:	40001400 	.word	0x40001400

080012c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_UART4_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_UART4_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_UART4_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_UART4_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_UART4_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_UART4_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_UART4_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_UART4_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_UART4_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_UART4_Init+0x4c>)
<<<<<<< HEAD
 80012f8:	f005 fa8d 	bl	8006816 <HAL_UART_Init>
=======
 80012f8:	f005 fac1 	bl	800687e <HAL_UART_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 f93f 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000848 	.word	0x20000848
 8001310:	40004c00 	.word	0x40004c00

08001314 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_UART5_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_UART5_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_UART5_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_UART5_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_UART5_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_UART5_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_UART5_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_UART5_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_UART5_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_UART5_Init+0x4c>)
<<<<<<< HEAD
 800134c:	f005 fa63 	bl	8006816 <HAL_UART_Init>
=======
 800134c:	f005 fa97 	bl	800687e <HAL_UART_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001356:	f000 f915 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000778 	.word	0x20000778
 8001364:	40005000 	.word	0x40005000

08001368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART1_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
<<<<<<< HEAD
 80013a0:	f005 fa39 	bl	8006816 <HAL_UART_Init>
=======
 80013a0:	f005 fa6d 	bl	800687e <HAL_UART_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f8eb 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200007bc 	.word	0x200007bc
 80013b8:	40011000 	.word	0x40011000

080013bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_USART2_UART_Init+0x50>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_USART2_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_USART2_UART_Init+0x4c>)
<<<<<<< HEAD
 80013f4:	f005 fa0f 	bl	8006816 <HAL_UART_Init>
=======
 80013f4:	f005 fa43 	bl	800687e <HAL_UART_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013fe:	f000 f8c1 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200008e4 	.word	0x200008e4
 800140c:	40004400 	.word	0x40004400

08001410 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART3_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800141c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001420:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART3_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART3_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART3_UART_Init+0x4c>)
<<<<<<< HEAD
 8001448:	f005 f9e5 	bl	8006816 <HAL_UART_Init>
=======
 8001448:	f005 fa19 	bl	800687e <HAL_UART_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f000 f897 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200006dc 	.word	0x200006dc
 8001460:	40004800 	.word	0x40004800

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <MX_GPIO_Init+0x114>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a3d      	ldr	r2, [pc, #244]	; (8001578 <MX_GPIO_Init+0x114>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <MX_GPIO_Init+0x114>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <MX_GPIO_Init+0x114>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a36      	ldr	r2, [pc, #216]	; (8001578 <MX_GPIO_Init+0x114>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <MX_GPIO_Init+0x114>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <MX_GPIO_Init+0x114>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <MX_GPIO_Init+0x114>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <MX_GPIO_Init+0x114>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <MX_GPIO_Init+0x114>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a28      	ldr	r2, [pc, #160]	; (8001578 <MX_GPIO_Init+0x114>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <MX_GPIO_Init+0x114>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MX_GPIO_Init+0x114>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a21      	ldr	r2, [pc, #132]	; (8001578 <MX_GPIO_Init+0x114>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_GPIO_Init+0x114>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_GPIO_Init+0x114>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a1a      	ldr	r2, [pc, #104]	; (8001578 <MX_GPIO_Init+0x114>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_GPIO_Init+0x114>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	21b4      	movs	r1, #180	; 0xb4
 8001526:	4815      	ldr	r0, [pc, #84]	; (800157c <MX_GPIO_Init+0x118>)
<<<<<<< HEAD
 8001528:	f001 fe68 	bl	80031fc <HAL_GPIO_WritePin>
=======
 8001528:	f001 fe9c 	bl	8003264 <HAL_GPIO_WritePin>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_GPIO_Init+0x11c>)
<<<<<<< HEAD
 8001532:	f001 fe63 	bl	80031fc <HAL_GPIO_WritePin>
=======
 8001532:	f001 fe97 	bl	8003264 <HAL_GPIO_WritePin>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /*Configure GPIO pins : PE2 PE4 PE5 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001536:	23b4      	movs	r3, #180	; 0xb4
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <MX_GPIO_Init+0x118>)
<<<<<<< HEAD
 800154e:	f001 fcb9 	bl	8002ec4 <HAL_GPIO_Init>
=======
 800154e:	f001 fced 	bl	8002f2c <HAL_GPIO_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_GPIO_Init+0x11c>)
<<<<<<< HEAD
 800156a:	f001 fcab 	bl	8002ec4 <HAL_GPIO_Init>
=======
 800156a:	f001 fcdf 	bl	8002f2c <HAL_GPIO_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

}
 800156e:	bf00      	nop
 8001570:	3730      	adds	r7, #48	; 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40021000 	.word	0x40021000
 8001580:	40020000 	.word	0x40020000

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	e7fe      	b.n	800158c <Error_Handler+0x8>
	...

08001590 <_Z12get_pressurev>:
int valve_on=40; //7.5: 50
int flag=0;
int err=0;
int flag_co2 = 0;

float get_pressure(){
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af02      	add	r7, sp, #8
	int OUTPUT_MIN = 1638;
 8001596:	f240 6366 	movw	r3, #1638	; 0x666
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
	int OUTPUT_MAX = 14746;
 800159c:	f643 139a 	movw	r3, #14746	; 0x399a
 80015a0:	623b      	str	r3, [r7, #32]
	float PRESSURE_MIN = -15.0;
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <_Z12get_pressurev+0x118>)
 80015a4:	61fb      	str	r3, [r7, #28]
	float PRESSURE_MAX = +15.0;
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <_Z12get_pressurev+0x11c>)
 80015a8:	61bb      	str	r3, [r7, #24]

	uint8_t S = 5; // pressure gauge: status
 80015aa:	2305      	movs	r3, #5
 80015ac:	75fb      	strb	r3, [r7, #23]
	float T = -28.1; // pressure gauge: temperature
 80015ae:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <_Z12get_pressurev+0x120>)
 80015b0:	613b      	str	r3, [r7, #16]
	uint8_t pData[4];
	// info needed
	float P = -28.0; // pressure gauge: pressure (mBar)
 80015b2:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <_Z12get_pressurev+0x124>)
 80015b4:	60fb      	str	r3, [r7, #12]

	// pressure gauge
	HAL_I2C_Master_Receive(&hi2c1, 0x28 << 1, pData, 4, 2);
 80015b6:	1d3a      	adds	r2, r7, #4
 80015b8:	2302      	movs	r3, #2
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2304      	movs	r3, #4
 80015be:	2150      	movs	r1, #80	; 0x50
 80015c0:	483d      	ldr	r0, [pc, #244]	; (80016b8 <_Z12get_pressurev+0x128>)
<<<<<<< HEAD
 80015c2:	f001 ff79 	bl	80034b8 <HAL_I2C_Master_Receive>
=======
 80015c2:	f001 ffad 	bl	8003520 <HAL_I2C_Master_Receive>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
	S = pData[0] >> 6;
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	119b      	asrs	r3, r3, #6
 80015ca:	75fb      	strb	r3, [r7, #23]
	uint16_t tmp = (((uint16_t)pData[0] & 0x3f) << 8) | pData[1];
 80015cc:	793b      	ldrb	r3, [r7, #4]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	797b      	ldrb	r3, [r7, #5]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b21b      	sxth	r3, r3
 80015e0:	817b      	strh	r3, [r7, #10]
	P = (tmp - OUTPUT_MIN) * (PRESSURE_MAX - PRESSURE_MIN) / (OUTPUT_MAX - OUTPUT_MIN) + (PRESSURE_MIN);
 80015e2:	897a      	ldrh	r2, [r7, #10]
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f0:	edd7 6a06 	vldr	s13, [r7, #24]
 80015f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001600:	6a3a      	ldr	r2, [r7, #32]
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001612:	ed97 7a07 	vldr	s14, [r7, #28]
 8001616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161a:	edc7 7a03 	vstr	s15, [r7, #12]
	tmp = (((uint16_t)pData[2] << 8) + (pData[3] & 0xe0)) >> 5;
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	021a      	lsls	r2, r3, #8
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001628:	4413      	add	r3, r2
 800162a:	115b      	asrs	r3, r3, #5
 800162c:	817b      	strh	r3, [r7, #10]
	T = (tmp * 0.0977) - 50;
 800162e:	897b      	ldrh	r3, [r7, #10]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff77 	bl	8000524 <__aeabi_i2d>
 8001636:	a318      	add	r3, pc, #96	; (adr r3, 8001698 <_Z12get_pressurev+0x108>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7fe ffdc 	bl	80005f8 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <_Z12get_pressurev+0x12c>)
 800164e:	f7fe fe1b 	bl	8000288 <__aeabi_dsub>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff faa5 	bl	8000ba8 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	613b      	str	r3, [r7, #16]
	P *= 68.94757;
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7fe ff70 	bl	8000548 <__aeabi_f2d>
 8001668:	a30d      	add	r3, pc, #52	; (adr r3, 80016a0 <_Z12get_pressurev+0x110>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe ffc3 	bl	80005f8 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fa95 	bl	8000ba8 <__aeabi_d2f>
 800167e:	4603      	mov	r3, r0
 8001680:	60fb      	str	r3, [r7, #12]

	UNUSED(S);
	UNUSED(T);

	return P;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	ee07 3a90 	vmov	s15, r3
}
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	f3af 8000 	nop.w
 8001698:	00d1b717 	.word	0x00d1b717
 800169c:	3fb902de 	.word	0x3fb902de
 80016a0:	fca42aed 	.word	0xfca42aed
 80016a4:	40513ca4 	.word	0x40513ca4
 80016a8:	c1700000 	.word	0xc1700000
 80016ac:	41700000 	.word	0x41700000
 80016b0:	c1e0cccd 	.word	0xc1e0cccd
 80016b4:	c1e00000 	.word	0xc1e00000
 80016b8:	20000720 	.word	0x20000720
 80016bc:	40490000 	.word	0x40490000

080016c0 <_Z15set_vacuum_pumpb>:
	} else {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
	}
}

void set_vacuum_pump(bool en){
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	int i;
	if(en){
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <_Z15set_vacuum_pumpb+0x1c>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,499);
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <_Z15set_vacuum_pumpb+0x30>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
//		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);

	}
}
 80016da:	e003      	b.n	80016e4 <_Z15set_vacuum_pumpb+0x24>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <_Z15set_vacuum_pumpb+0x30>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000800 	.word	0x20000800
 80016f4:	00000000 	.word	0x00000000

080016f8 <_Z11gas_controlv>:
	bool f_air_flag;//force_air_flag_once
	bool adjust_valve;//valve_on_ctrl
	bool steady;//statistics
	bool air_flag;//pump_flag
};
void gas_control(){
 80016f8:	b5b0      	push	{r4, r5, r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
	float p_upper = 580.0;
 80016fe:	4bae      	ldr	r3, [pc, #696]	; (80019b8 <_Z11gas_controlv+0x2c0>)
 8001700:	60fb      	str	r3, [r7, #12]
	float p_lower = 460.0;
 8001702:	4bae      	ldr	r3, [pc, #696]	; (80019bc <_Z11gas_controlv+0x2c4>)
 8001704:	60bb      	str	r3, [r7, #8]
	float sec = 0;
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	607b      	str	r3, [r7, #4]

	static float last_co2 = 0;
	float difference = 0;
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
	static int target_change_times = 1;
	static float timer = 0;

	static control_flag ctrl_f = {false,false,false,false,false,false};

	P = get_pressure();
 8001712:	f7ff ff3d 	bl	8001590 <_Z12get_pressurev>
 8001716:	eef0 7a40 	vmov.f32	s15, s0
 800171a:	4ba9      	ldr	r3, [pc, #676]	; (80019c0 <_Z11gas_controlv+0x2c8>)
 800171c:	edc3 7a00 	vstr	s15, [r3]
	pressure = P;
 8001720:	4ba7      	ldr	r3, [pc, #668]	; (80019c0 <_Z11gas_controlv+0x2c8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4aa7      	ldr	r2, [pc, #668]	; (80019c4 <_Z11gas_controlv+0x2cc>)
 8001726:	6013      	str	r3, [r2, #0]
	timer++;
 8001728:	4ba7      	ldr	r3, [pc, #668]	; (80019c8 <_Z11gas_controlv+0x2d0>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001736:	4ba4      	ldr	r3, [pc, #656]	; (80019c8 <_Z11gas_controlv+0x2d0>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
	sec = timer/40; 
 800173c:	4ba2      	ldr	r3, [pc, #648]	; (80019c8 <_Z11gas_controlv+0x2d0>)
 800173e:	ed93 7a00 	vldr	s14, [r3]
 8001742:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80019cc <_Z11gas_controlv+0x2d4>
 8001746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174a:	edc7 7a01 	vstr	s15, [r7, #4]
	if(sec<3)
 800174e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001752:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d505      	bpl.n	800176c <_Z11gas_controlv+0x74>
	{
		target = 5;
 8001760:	4b9b      	ldr	r3, [pc, #620]	; (80019d0 <_Z11gas_controlv+0x2d8>)
 8001762:	4a9c      	ldr	r2, [pc, #624]	; (80019d4 <_Z11gas_controlv+0x2dc>)
 8001764:	601a      	str	r2, [r3, #0]
		valve_on = 30;
 8001766:	4b9c      	ldr	r3, [pc, #624]	; (80019d8 <_Z11gas_controlv+0x2e0>)
 8001768:	221e      	movs	r2, #30
 800176a:	601a      	str	r2, [r3, #0]
	}
	if( sec > 1800 * target_change_times)
 800176c:	4b9b      	ldr	r3, [pc, #620]	; (80019dc <_Z11gas_controlv+0x2e4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001780:	ed97 7a01 	vldr	s14, [r7, #4]
 8001784:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	dd1f      	ble.n	80017ce <_Z11gas_controlv+0xd6>
	{
		target_change_times++;
 800178e:	4b93      	ldr	r3, [pc, #588]	; (80019dc <_Z11gas_controlv+0x2e4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	4a91      	ldr	r2, [pc, #580]	; (80019dc <_Z11gas_controlv+0x2e4>)
 8001796:	6013      	str	r3, [r2, #0]
		target = target+1.0;
 8001798:	4b8d      	ldr	r3, [pc, #564]	; (80019d0 <_Z11gas_controlv+0x2d8>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a6:	4b8a      	ldr	r3, [pc, #552]	; (80019d0 <_Z11gas_controlv+0x2d8>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
		if(target <= 10)//waiting for new equipment to tune variables
 80017ac:	4b88      	ldr	r3, [pc, #544]	; (80019d0 <_Z11gas_controlv+0x2d8>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d803      	bhi.n	80017c8 <_Z11gas_controlv+0xd0>
		{
			valve_on = 30;
 80017c0:	4b85      	ldr	r3, [pc, #532]	; (80019d8 <_Z11gas_controlv+0x2e0>)
 80017c2:	221e      	movs	r2, #30
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e002      	b.n	80017ce <_Z11gas_controlv+0xd6>
		}
		else{
			valve_on = 60;
 80017c8:	4b83      	ldr	r3, [pc, #524]	; (80019d8 <_Z11gas_controlv+0x2e0>)
 80017ca:	223c      	movs	r2, #60	; 0x3c
 80017cc:	601a      	str	r2, [r3, #0]
		}
	}


	if(P < p_lower)
 80017ce:	4b7c      	ldr	r3, [pc, #496]	; (80019c0 <_Z11gas_controlv+0x2c8>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80017d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	dd6a      	ble.n	80018b8 <_Z11gas_controlv+0x1c0>
	{
		ctrl_f.f_air_flag = false;
 80017e2:	4b7f      	ldr	r3, [pc, #508]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	709a      	strb	r2, [r3, #2]
		if(CO2_L < target - 0.2 && !ctrl_f.co2_on){
 80017e8:	4b7e      	ldr	r3, [pc, #504]	; (80019e4 <_Z11gas_controlv+0x2ec>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe feab 	bl	8000548 <__aeabi_f2d>
 80017f2:	4604      	mov	r4, r0
 80017f4:	460d      	mov	r5, r1
 80017f6:	4b76      	ldr	r3, [pc, #472]	; (80019d0 <_Z11gas_controlv+0x2d8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fea4 	bl	8000548 <__aeabi_f2d>
 8001800:	a36b      	add	r3, pc, #428	; (adr r3, 80019b0 <_Z11gas_controlv+0x2b8>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fd3f 	bl	8000288 <__aeabi_dsub>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7ff f963 	bl	8000adc <__aeabi_dcmplt>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00d      	beq.n	8001838 <_Z11gas_controlv+0x140>
 800181c:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	f083 0301 	eor.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <_Z11gas_controlv+0x140>
			counter = 0;
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <_Z11gas_controlv+0x2f0>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
			ctrl_f.co2_on = true;
 8001830:	4b6b      	ldr	r3, [pc, #428]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e079      	b.n	800192c <_Z11gas_controlv+0x234>
		}
		else if (CO2_L > target+0.2 && !ctrl_f.co2_on){
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <_Z11gas_controlv+0x2ec>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe83 	bl	8000548 <__aeabi_f2d>
 8001842:	4604      	mov	r4, r0
 8001844:	460d      	mov	r5, r1
 8001846:	4b62      	ldr	r3, [pc, #392]	; (80019d0 <_Z11gas_controlv+0x2d8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe7c 	bl	8000548 <__aeabi_f2d>
 8001850:	a357      	add	r3, pc, #348	; (adr r3, 80019b0 <_Z11gas_controlv+0x2b8>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fd19 	bl	800028c <__adddf3>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4620      	mov	r0, r4
 8001860:	4629      	mov	r1, r5
 8001862:	f7ff f959 	bl	8000b18 <__aeabi_dcmpgt>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d017      	beq.n	800189c <_Z11gas_controlv+0x1a4>
 800186c:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d010      	beq.n	800189c <_Z11gas_controlv+0x1a4>
			ctrl_f.adjust_valve = true;
 800187a:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 800187c:	2201      	movs	r2, #1
 800187e:	70da      	strb	r2, [r3, #3]
			counter = valve_on/3*2;
 8001880:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <_Z11gas_controlv+0x2e0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a59      	ldr	r2, [pc, #356]	; (80019ec <_Z11gas_controlv+0x2f4>)
 8001886:	fb82 1203 	smull	r1, r2, r2, r3
 800188a:	17db      	asrs	r3, r3, #31
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4a55      	ldr	r2, [pc, #340]	; (80019e8 <_Z11gas_controlv+0x2f0>)
 8001892:	6013      	str	r3, [r2, #0]
			ctrl_f.co2_on=true;
 8001894:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	e047      	b.n	800192c <_Z11gas_controlv+0x234>
		}
		else if(!ctrl_f.co2_on) {
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	f083 0301 	eor.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d040      	beq.n	800192c <_Z11gas_controlv+0x234>
			counter = 0;
<<<<<<< HEAD
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <_Z11gas_controlv+0x20c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
			ctrl.co2_on =true;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <_Z11gas_controlv+0x204>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	e080      	b.n	80019ca <_Z11gas_controlv+0x2d2>
 80018c8:	9999999a 	.word	0x9999999a
 80018cc:	3fc99999 	.word	0x3fc99999
 80018d0:	44110000 	.word	0x44110000
 80018d4:	43e60000 	.word	0x43e60000
 80018d8:	2000038c 	.word	0x2000038c
 80018dc:	20000774 	.word	0x20000774
 80018e0:	200003a0 	.word	0x200003a0
 80018e4:	42200000 	.word	0x42200000
 80018e8:	20000004 	.word	0x20000004
 80018ec:	40a00000 	.word	0x40a00000
 80018f0:	20000008 	.word	0x20000008
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	2000039c 	.word	0x2000039c
 80018fc:	200003a4 	.word	0x200003a4
 8001900:	20000390 	.word	0x20000390
 8001904:	20000394 	.word	0x20000394
 8001908:	55555556 	.word	0x55555556
		}
	}
	else
	{
		if(CO2_L < target && !ctrl.co2_on && ctrl.f_co2_flag)
 800190c:	4ba6      	ldr	r3, [pc, #664]	; (8001ba8 <_Z11gas_controlv+0x4b0>)
 800190e:	ed93 7a00 	vldr	s14, [r3]
 8001912:	4ba6      	ldr	r3, [pc, #664]	; (8001bac <_Z11gas_controlv+0x4b4>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	d519      	bpl.n	8001956 <_Z11gas_controlv+0x25e>
 8001922:	4ba3      	ldr	r3, [pc, #652]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	f083 0301 	eor.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d012      	beq.n	8001956 <_Z11gas_controlv+0x25e>
 8001930:	4b9f      	ldr	r3, [pc, #636]	; (8001bb0 <_Z11gas_controlv+0x4b8>)
 8001932:	799b      	ldrb	r3, [r3, #6]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00e      	beq.n	8001956 <_Z11gas_controlv+0x25e>
=======
 80018aa:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <_Z11gas_controlv+0x2f0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
			ctrl_f.co2_on =true;
 80018b0:	4b4b      	ldr	r3, [pc, #300]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	e039      	b.n	800192c <_Z11gas_controlv+0x234>
		// 	ctrl_f.co2_on = true;
		// 	ctrl_f.air_flag = false;
		// 	if(CO2_L < target-0.5)
		// 		valve_on++;
		// }
		if(CO2_L > target + 0.2 && !ctrl_f.f_air_on && !ctrl_f.f_air_flag)
 80018b8:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <_Z11gas_controlv+0x2ec>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe43 	bl	8000548 <__aeabi_f2d>
 80018c2:	4604      	mov	r4, r0
 80018c4:	460d      	mov	r5, r1
 80018c6:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <_Z11gas_controlv+0x2d8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe3c 	bl	8000548 <__aeabi_f2d>
 80018d0:	a337      	add	r3, pc, #220	; (adr r3, 80019b0 <_Z11gas_controlv+0x2b8>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fcd9 	bl	800028c <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4620      	mov	r0, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	f7ff f919 	bl	8000b18 <__aeabi_dcmpgt>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d01f      	beq.n	800192c <_Z11gas_controlv+0x234>
 80018ec:	4b3c      	ldr	r3, [pc, #240]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 80018ee:	785b      	ldrb	r3, [r3, #1]
 80018f0:	f083 0301 	eor.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d018      	beq.n	800192c <_Z11gas_controlv+0x234>
 80018fa:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 80018fc:	789b      	ldrb	r3, [r3, #2]
 80018fe:	f083 0301 	eor.w	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d011      	beq.n	800192c <_Z11gas_controlv+0x234>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
		{
			//todo: make sure pump won't start on repeatly
			ctrl_f.f_air_on = true;
 8001908:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 800190a:	2201      	movs	r2, #1
 800190c:	705a      	strb	r2, [r3, #1]
			ctrl_f.f_air_flag = true;
 800190e:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 8001910:	2201      	movs	r2, #1
 8001912:	709a      	strb	r2, [r3, #2]
			if(ctrl_f.adjust_valve == true)
 8001914:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 8001916:	78db      	ldrb	r3, [r3, #3]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d107      	bne.n	800192c <_Z11gas_controlv+0x234>
			{
				valve_on--;
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <_Z11gas_controlv+0x2e0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3b01      	subs	r3, #1
 8001922:	4a2d      	ldr	r2, [pc, #180]	; (80019d8 <_Z11gas_controlv+0x2e0>)
 8001924:	6013      	str	r3, [r2, #0]
				ctrl_f.adjust_valve = false;
 8001926:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 8001928:	2200      	movs	r2, #0
 800192a:	70da      	strb	r2, [r3, #3]
			}
		}
	}

	if (P > p_upper){
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <_Z11gas_controlv+0x2c8>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ed97 7a03 	vldr	s14, [r7, #12]
 8001936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	d505      	bpl.n	800194c <_Z11gas_controlv+0x254>
		ctrl_f.air_flag = false;
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 8001942:	2200      	movs	r2, #0
 8001944:	715a      	strb	r2, [r3, #5]
		ctrl_f.steady = false;
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 8001948:	2200      	movs	r2, #0
 800194a:	711a      	strb	r2, [r3, #4]
	}
	if(P> p_upper+50 || CO2_L < target){
 800194c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001950:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80019f0 <_Z11gas_controlv+0x2f8>
 8001954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <_Z11gas_controlv+0x2c8>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d40a      	bmi.n	800197e <_Z11gas_controlv+0x286>
 8001968:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <_Z11gas_controlv+0x2ec>)
 800196a:	ed93 7a00 	vldr	s14, [r3]
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <_Z11gas_controlv+0x2d8>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	d502      	bpl.n	8001984 <_Z11gas_controlv+0x28c>
		ctrl_f.f_air_on=false;
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 8001980:	2200      	movs	r2, #0
 8001982:	705a      	strb	r2, [r3, #1]
	}

	if(ctrl_f.co2_on){
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <_Z11gas_controlv+0x2e8>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d04f      	beq.n	8001a2c <_Z11gas_controlv+0x334>
		if(counter < valve_on){
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <_Z11gas_controlv+0x2f0>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <_Z11gas_controlv+0x2e0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	da2f      	bge.n	80019f8 <_Z11gas_controlv+0x300>
			counter ++;
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <_Z11gas_controlv+0x2f0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_Z11gas_controlv+0x2f0>)
 80019a0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
<<<<<<< HEAD
 8001a80:	2201      	movs	r2, #1
 8001a82:	2120      	movs	r1, #32
 8001a84:	4851      	ldr	r0, [pc, #324]	; (8001bcc <_Z11gas_controlv+0x4d4>)
 8001a86:	f001 fbb9 	bl	80031fc <HAL_GPIO_WritePin>
 8001a8a:	e01e      	b.n	8001aca <_Z11gas_controlv+0x3d2>
		}
		else{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2120      	movs	r1, #32
 8001a90:	484e      	ldr	r0, [pc, #312]	; (8001bcc <_Z11gas_controlv+0x4d4>)
 8001a92:	f001 fbb3 	bl	80031fc <HAL_GPIO_WritePin>
=======
 80019a2:	2201      	movs	r2, #1
 80019a4:	2120      	movs	r1, #32
 80019a6:	4813      	ldr	r0, [pc, #76]	; (80019f4 <_Z11gas_controlv+0x2fc>)
 80019a8:	f001 fc5c 	bl	8003264 <HAL_GPIO_WritePin>
 80019ac:	e043      	b.n	8001a36 <_Z11gas_controlv+0x33e>
 80019ae:	bf00      	nop
 80019b0:	9999999a 	.word	0x9999999a
 80019b4:	3fc99999 	.word	0x3fc99999
 80019b8:	44110000 	.word	0x44110000
 80019bc:	43e60000 	.word	0x43e60000
 80019c0:	20000384 	.word	0x20000384
 80019c4:	20000770 	.word	0x20000770
 80019c8:	20000398 	.word	0x20000398
 80019cc:	42200000 	.word	0x42200000
 80019d0:	20000000 	.word	0x20000000
 80019d4:	40a00000 	.word	0x40a00000
 80019d8:	20000004 	.word	0x20000004
 80019dc:	20000008 	.word	0x20000008
 80019e0:	2000039c 	.word	0x2000039c
 80019e4:	20000388 	.word	0x20000388
 80019e8:	2000038c 	.word	0x2000038c
 80019ec:	55555556 	.word	0x55555556
 80019f0:	42480000 	.word	0x42480000
 80019f4:	40021000 	.word	0x40021000
		}
		else{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2120      	movs	r1, #32
 80019fc:	4844      	ldr	r0, [pc, #272]	; (8001b10 <_Z11gas_controlv+0x418>)
 80019fe:	f001 fc31 	bl	8003264 <HAL_GPIO_WritePin>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
			if(P < p_lower + 40)
 8001a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a06:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001b14 <_Z11gas_controlv+0x41c>
 8001a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a0e:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <_Z11gas_controlv+0x420>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	dd02      	ble.n	8001a24 <_Z11gas_controlv+0x32c>
				ctrl_f.air_flag = true;
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <_Z11gas_controlv+0x424>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	715a      	strb	r2, [r3, #5]
			ctrl_f.co2_on = false;
 8001a24:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <_Z11gas_controlv+0x424>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	e004      	b.n	8001a36 <_Z11gas_controlv+0x33e>
		}
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
<<<<<<< HEAD
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2120      	movs	r1, #32
 8001ac4:	4841      	ldr	r0, [pc, #260]	; (8001bcc <_Z11gas_controlv+0x4d4>)
 8001ac6:	f001 fb99 	bl	80031fc <HAL_GPIO_WritePin>
=======
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2120      	movs	r1, #32
 8001a30:	4837      	ldr	r0, [pc, #220]	; (8001b10 <_Z11gas_controlv+0x418>)
 8001a32:	f001 fc17 	bl	8003264 <HAL_GPIO_WritePin>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
	}

	if(ctrl_f.air_flag || ctrl_f.f_air_on)
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <_Z11gas_controlv+0x424>)
 8001a38:	795b      	ldrb	r3, [r3, #5]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d103      	bne.n	8001a46 <_Z11gas_controlv+0x34e>
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <_Z11gas_controlv+0x424>)
 8001a40:	785b      	ldrb	r3, [r3, #1]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d050      	beq.n	8001ae8 <_Z11gas_controlv+0x3f0>
	{
		set_vacuum_pump(true);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fe3a 	bl	80016c0 <_Z15set_vacuum_pumpb>
		if(!ctrl_f.steady)
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <_Z11gas_controlv+0x424>)
 8001a4e:	791b      	ldrb	r3, [r3, #4]
 8001a50:	f083 0301 	eor.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d04a      	beq.n	8001af0 <_Z11gas_controlv+0x3f8>
		{
			difference  =  last_co2 - CO2_L;
 8001a5a:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <_Z11gas_controlv+0x428>)
 8001a5c:	ed93 7a00 	vldr	s14, [r3]
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <_Z11gas_controlv+0x42c>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6a:	edc7 7a00 	vstr	s15, [r7]
			if(difference < 0.1 && difference > -0.1 && CO2_L < target-0.2)
 8001a6e:	6838      	ldr	r0, [r7, #0]
 8001a70:	f7fe fd6a 	bl	8000548 <__aeabi_f2d>
 8001a74:	a320      	add	r3, pc, #128	; (adr r3, 8001af8 <_Z11gas_controlv+0x400>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7ff f82f 	bl	8000adc <__aeabi_dcmplt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d029      	beq.n	8001ad8 <_Z11gas_controlv+0x3e0>
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f7fe fd5f 	bl	8000548 <__aeabi_f2d>
 8001a8a:	a31d      	add	r3, pc, #116	; (adr r3, 8001b00 <_Z11gas_controlv+0x408>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7ff f842 	bl	8000b18 <__aeabi_dcmpgt>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01e      	beq.n	8001ad8 <_Z11gas_controlv+0x3e0>
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <_Z11gas_controlv+0x42c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd52 	bl	8000548 <__aeabi_f2d>
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	460d      	mov	r5, r1
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <_Z11gas_controlv+0x430>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd4b 	bl	8000548 <__aeabi_f2d>
 8001ab2:	a315      	add	r3, pc, #84	; (adr r3, 8001b08 <_Z11gas_controlv+0x410>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fbe6 	bl	8000288 <__aeabi_dsub>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7ff f80a 	bl	8000adc <__aeabi_dcmplt>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <_Z11gas_controlv+0x3e0>
			{	
				valve_on++ ;
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <_Z11gas_controlv+0x434>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <_Z11gas_controlv+0x434>)
 8001ad6:	6013      	str	r3, [r2, #0]
			}
			ctrl_f.steady = true;
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <_Z11gas_controlv+0x424>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	711a      	strb	r2, [r3, #4]
			last_co2 = CO2_L;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <_Z11gas_controlv+0x42c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	; (8001b20 <_Z11gas_controlv+0x428>)
 8001ae4:	6013      	str	r3, [r2, #0]
		if(!ctrl_f.steady)
 8001ae6:	e003      	b.n	8001af0 <_Z11gas_controlv+0x3f8>
		}
	}
	else
		set_vacuum_pump(false);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fde9 	bl	80016c0 <_Z15set_vacuum_pumpb>

}
<<<<<<< HEAD
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8c:	f3af 8000 	nop.w
 8001b90:	9999999a 	.word	0x9999999a
 8001b94:	3fc99999 	.word	0x3fc99999
 8001b98:	9999999a 	.word	0x9999999a
 8001b9c:	3fb99999 	.word	0x3fb99999
 8001ba0:	9999999a 	.word	0x9999999a
 8001ba4:	bfb99999 	.word	0xbfb99999
 8001ba8:	20000390 	.word	0x20000390
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	200003a4 	.word	0x200003a4
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	55555556 	.word	0x55555556
 8001bbc:	20000394 	.word	0x20000394
 8001bc0:	2000038c 	.word	0x2000038c
 8001bc4:	2000039c 	.word	0x2000039c
 8001bc8:	42480000 	.word	0x42480000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	42200000 	.word	0x42200000
 8001bd4:	20000398 	.word	0x20000398
=======
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bdb0      	pop	{r4, r5, r7, pc}
 8001af8:	9999999a 	.word	0x9999999a
 8001afc:	3fb99999 	.word	0x3fb99999
 8001b00:	9999999a 	.word	0x9999999a
 8001b04:	bfb99999 	.word	0xbfb99999
 8001b08:	9999999a 	.word	0x9999999a
 8001b0c:	3fc99999 	.word	0x3fc99999
 8001b10:	40021000 	.word	0x40021000
 8001b14:	42200000 	.word	0x42200000
 8001b18:	20000384 	.word	0x20000384
 8001b1c:	2000039c 	.word	0x2000039c
 8001b20:	20000394 	.word	0x20000394
 8001b24:	20000388 	.word	0x20000388
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

08001b30 <main_2_init>:
uint8_t GM[100] = {};
uint32_t global_count = 0;
uint8_t DO[500] = {};


void main_2_init(void){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	/* modules initialization */
	// gas_mixer.init();
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
<<<<<<< HEAD
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <main_2_init+0x1c>)
 8001be2:	f001 fb0b 	bl	80031fc <HAL_GPIO_WritePin>
=======
 8001b34:	2201      	movs	r2, #1
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <main_2_init+0x1c>)
 8001b3a:	f001 fb93 	bl	8003264 <HAL_GPIO_WritePin>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
	//doph.init();
	//linear_motor.init();

	/* timer 7 */
	HAL_TIM_Base_Start_IT(&htim7);
<<<<<<< HEAD
 8001be6:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <main_2_init+0x20>)
 8001be8:	f003 ff52 	bl	8005a90 <HAL_TIM_Base_Start_IT>
	EXPLOR_read();
 8001bec:	f000 fd10 	bl	8002610 <EXPLOR_read>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	20000928 	.word	0x20000928
=======
 8001b3e:	4804      	ldr	r0, [pc, #16]	; (8001b50 <main_2_init+0x20>)
 8001b40:	f003 ffda 	bl	8005af8 <HAL_TIM_Base_Start_IT>
	EXPLOR_read();
 8001b44:	f000 fd42 	bl	80025cc <EXPLOR_read>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	20000924 	.word	0x20000924
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

08001b54 <main_2_loop>:

void main_2_loop(void){
<<<<<<< HEAD
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0fe      	sub	sp, #504	; 0x1f8
 8001c00:	af00      	add	r7, sp, #0
=======
 8001b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b58:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8001b5c:	af0a      	add	r7, sp, #40	; 0x28
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
	mother_routine_update_to_PC(tick, 250);
	mother_routine_handle_PC();
	*/

	/* periodic process */
	if(tim7_EN){
<<<<<<< HEAD
 8001c02:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <main_2_loop+0x1d0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80d9 	beq.w	8001dc0 <main_2_loop+0x1c4>
		gas_control();
 8001c0e:	f7ff fd73 	bl	80016f8 <_Z11gas_controlv>
		user_main();
 8001c12:	f000 fce5 	bl	80025e0 <user_main>
		CO2_L = r/100;
 8001c16:	4b6e      	ldr	r3, [pc, #440]	; (8001dd0 <main_2_loop+0x1d4>)
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001dd4 <main_2_loop+0x1d8>
 8001c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c24:	4b6c      	ldr	r3, [pc, #432]	; (8001dd8 <main_2_loop+0x1dc>)
 8001c26:	edc3 7a00 	vstr	s15, [r3]
		count++;
 8001c2a:	4b6c      	ldr	r3, [pc, #432]	; (8001ddc <main_2_loop+0x1e0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	4a6a      	ldr	r2, [pc, #424]	; (8001ddc <main_2_loop+0x1e0>)
 8001c32:	6013      	str	r3, [r2, #0]
		if(count%40==0)
 8001c34:	4b69      	ldr	r3, [pc, #420]	; (8001ddc <main_2_loop+0x1e0>)
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	4b69      	ldr	r3, [pc, #420]	; (8001de0 <main_2_loop+0x1e4>)
 8001c3a:	fb83 2301 	smull	r2, r3, r3, r1
 8001c3e:	111a      	asrs	r2, r3, #4
 8001c40:	17cb      	asrs	r3, r1, #31
 8001c42:	1ad2      	subs	r2, r2, r3
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1aca      	subs	r2, r1, r3
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d10c      	bne.n	8001c6c <main_2_loop+0x70>
		{
			time++;
 8001c52:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <main_2_loop+0x1e8>)
 8001c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b62      	ldr	r3, [pc, #392]	; (8001de8 <main_2_loop+0x1ec>)
 8001c5e:	f7fe fb15 	bl	800028c <__adddf3>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	495f      	ldr	r1, [pc, #380]	; (8001de4 <main_2_loop+0x1e8>)
 8001c68:	e9c1 2300 	strd	r2, r3, [r1]
=======
 8001b5e:	4b87      	ldr	r3, [pc, #540]	; (8001d7c <main_2_loop+0x228>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8102 	beq.w	8001d6e <main_2_loop+0x21a>
		gas_control();
 8001b6a:	f7ff fdc5 	bl	80016f8 <_Z11gas_controlv>
		user_main();
 8001b6e:	f000 fd19 	bl	80025a4 <user_main>
		CO2_L = r/100;
 8001b72:	4b83      	ldr	r3, [pc, #524]	; (8001d80 <main_2_loop+0x22c>)
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	eddf 6a82 	vldr	s13, [pc, #520]	; 8001d84 <main_2_loop+0x230>
 8001b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b80:	4b81      	ldr	r3, [pc, #516]	; (8001d88 <main_2_loop+0x234>)
 8001b82:	edc3 7a00 	vstr	s15, [r3]
		count++;
 8001b86:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <main_2_loop+0x238>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4a7f      	ldr	r2, [pc, #508]	; (8001d8c <main_2_loop+0x238>)
 8001b8e:	6013      	str	r3, [r2, #0]
		if(count%40==0)
 8001b90:	4b7e      	ldr	r3, [pc, #504]	; (8001d8c <main_2_loop+0x238>)
 8001b92:	6819      	ldr	r1, [r3, #0]
 8001b94:	4b7e      	ldr	r3, [pc, #504]	; (8001d90 <main_2_loop+0x23c>)
 8001b96:	fb83 2301 	smull	r2, r3, r3, r1
 8001b9a:	111a      	asrs	r2, r3, #4
 8001b9c:	17cb      	asrs	r3, r1, #31
 8001b9e:	1ad2      	subs	r2, r2, r3
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	1aca      	subs	r2, r1, r3
 8001baa:	2a00      	cmp	r2, #0
 8001bac:	d10c      	bne.n	8001bc8 <main_2_loop+0x74>
		{
			time++;
 8001bae:	4b79      	ldr	r3, [pc, #484]	; (8001d94 <main_2_loop+0x240>)
 8001bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <main_2_loop+0x244>)
 8001bba:	f7fe fb67 	bl	800028c <__adddf3>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4974      	ldr	r1, [pc, #464]	; (8001d94 <main_2_loop+0x240>)
 8001bc4:	e9c1 2300 	strd	r2, r3, [r1]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
		}
		//doph.loop();

		if(flag_p == 1)
<<<<<<< HEAD
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <main_2_loop+0x1f0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d114      	bne.n	8001c9e <main_2_loop+0xa2>
		{
			count_pon++;
 8001c74:	4b5e      	ldr	r3, [pc, #376]	; (8001df0 <main_2_loop+0x1f4>)
 8001c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <main_2_loop+0x1ec>)
 8001c80:	f7fe fb04 	bl	800028c <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4959      	ldr	r1, [pc, #356]	; (8001df0 <main_2_loop+0x1f4>)
 8001c8a:	e9c1 2300 	strd	r2, r3, [r1]
			count_poff = 0;
 8001c8e:	4959      	ldr	r1, [pc, #356]	; (8001df4 <main_2_loop+0x1f8>)
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9c1 2300 	strd	r2, r3, [r1]
 8001c9c:	e017      	b.n	8001cce <main_2_loop+0xd2>
		}
		else if(flag_p == 2)
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <main_2_loop+0x1f0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d113      	bne.n	8001cce <main_2_loop+0xd2>
		{
			count_poff++;
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <main_2_loop+0x1f8>)
 8001ca8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	4b4d      	ldr	r3, [pc, #308]	; (8001de8 <main_2_loop+0x1ec>)
 8001cb2:	f7fe faeb 	bl	800028c <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	494e      	ldr	r1, [pc, #312]	; (8001df4 <main_2_loop+0x1f8>)
 8001cbc:	e9c1 2300 	strd	r2, r3, [r1]
			count_pon = 0;
 8001cc0:	494b      	ldr	r1, [pc, #300]	; (8001df0 <main_2_loop+0x1f4>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(flag_v == 1)
 8001cce:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <main_2_loop+0x1fc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d114      	bne.n	8001d00 <main_2_loop+0x104>
		{
			count_von++;
 8001cd6:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <main_2_loop+0x200>)
 8001cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <main_2_loop+0x1ec>)
 8001ce2:	f7fe fad3 	bl	800028c <__adddf3>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4944      	ldr	r1, [pc, #272]	; (8001dfc <main_2_loop+0x200>)
 8001cec:	e9c1 2300 	strd	r2, r3, [r1]
			count_voff=0;
 8001cf0:	4943      	ldr	r1, [pc, #268]	; (8001e00 <main_2_loop+0x204>)
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9c1 2300 	strd	r2, r3, [r1]
 8001cfe:	e017      	b.n	8001d30 <main_2_loop+0x134>
		}
		else if(flag_v == 2)
 8001d00:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <main_2_loop+0x1fc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d113      	bne.n	8001d30 <main_2_loop+0x134>
		{
			count_voff++;
 8001d08:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <main_2_loop+0x204>)
 8001d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <main_2_loop+0x1ec>)
 8001d14:	f7fe faba 	bl	800028c <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4938      	ldr	r1, [pc, #224]	; (8001e00 <main_2_loop+0x204>)
 8001d1e:	e9c1 2300 	strd	r2, r3, [r1]
			count_von = 0;
 8001d22:	4936      	ldr	r1, [pc, #216]	; (8001dfc <main_2_loop+0x200>)
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	e9c1 2300 	strd	r2, r3, [r1]
=======
 8001bc8:	4b74      	ldr	r3, [pc, #464]	; (8001d9c <main_2_loop+0x248>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d114      	bne.n	8001bfa <main_2_loop+0xa6>
		{
			count_pon++;
 8001bd0:	4b73      	ldr	r3, [pc, #460]	; (8001da0 <main_2_loop+0x24c>)
 8001bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4b6f      	ldr	r3, [pc, #444]	; (8001d98 <main_2_loop+0x244>)
 8001bdc:	f7fe fb56 	bl	800028c <__adddf3>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	496e      	ldr	r1, [pc, #440]	; (8001da0 <main_2_loop+0x24c>)
 8001be6:	e9c1 2300 	strd	r2, r3, [r1]
			count_poff = 0;
 8001bea:	496e      	ldr	r1, [pc, #440]	; (8001da4 <main_2_loop+0x250>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	e9c1 2300 	strd	r2, r3, [r1]
 8001bf8:	e017      	b.n	8001c2a <main_2_loop+0xd6>
		}
		else if(flag_p == 2)
 8001bfa:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <main_2_loop+0x248>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d113      	bne.n	8001c2a <main_2_loop+0xd6>
		{
			count_poff++;
 8001c02:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <main_2_loop+0x250>)
 8001c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b62      	ldr	r3, [pc, #392]	; (8001d98 <main_2_loop+0x244>)
 8001c0e:	f7fe fb3d 	bl	800028c <__adddf3>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4963      	ldr	r1, [pc, #396]	; (8001da4 <main_2_loop+0x250>)
 8001c18:	e9c1 2300 	strd	r2, r3, [r1]
			count_pon = 0;
 8001c1c:	4960      	ldr	r1, [pc, #384]	; (8001da0 <main_2_loop+0x24c>)
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(flag_v == 1)
 8001c2a:	4b5f      	ldr	r3, [pc, #380]	; (8001da8 <main_2_loop+0x254>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d114      	bne.n	8001c5c <main_2_loop+0x108>
		{
			count_von++;
 8001c32:	4b5e      	ldr	r3, [pc, #376]	; (8001dac <main_2_loop+0x258>)
 8001c34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <main_2_loop+0x244>)
 8001c3e:	f7fe fb25 	bl	800028c <__adddf3>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4959      	ldr	r1, [pc, #356]	; (8001dac <main_2_loop+0x258>)
 8001c48:	e9c1 2300 	strd	r2, r3, [r1]
			count_voff=0;
 8001c4c:	4958      	ldr	r1, [pc, #352]	; (8001db0 <main_2_loop+0x25c>)
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9c1 2300 	strd	r2, r3, [r1]
 8001c5a:	e017      	b.n	8001c8c <main_2_loop+0x138>
		}
		else if(flag_v == 2)
 8001c5c:	4b52      	ldr	r3, [pc, #328]	; (8001da8 <main_2_loop+0x254>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d113      	bne.n	8001c8c <main_2_loop+0x138>
		{
			count_voff++;
 8001c64:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <main_2_loop+0x25c>)
 8001c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <main_2_loop+0x244>)
 8001c70:	f7fe fb0c 	bl	800028c <__adddf3>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	494d      	ldr	r1, [pc, #308]	; (8001db0 <main_2_loop+0x25c>)
 8001c7a:	e9c1 2300 	strd	r2, r3, [r1]
			count_von = 0;
 8001c7e:	494b      	ldr	r1, [pc, #300]	; (8001dac <main_2_loop+0x258>)
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9c1 2300 	strd	r2, r3, [r1]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
		 * CDC_RD:
		 * 1. time tick
		 * 2. gas mixer
		 * 3. gas source control
		 */
		char foo[400] = "";
<<<<<<< HEAD
 8001d30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f00a f979 	bl	800c038 <memset>
		char bar[100] = "";
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2260      	movs	r2, #96	; 0x60
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f00a f970 	bl	800c038 <memset>
=======
 8001c8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	3304      	adds	r3, #4
 8001c96:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00a f9ff 	bl	800c0a0 <memset>
		char bar[100] = "";
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	3304      	adds	r3, #4
 8001cac:	2260      	movs	r2, #96	; 0x60
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00a f9f5 	bl	800c0a0 <memset>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

	//	strcat(foo, (char*)GM);

		// sprintf(bar, "[P]%.2f,[V]%.2f,p_on:%.2f,p_off:%.2f,v_on:%.2f,v_off:%.2f\r\n", P, V,float(count_pon*25/1000),float(count_poff*25/1000),float(count_von*25/1000),float(count_voff*25/1000));
		// strcat(foo, bar);
		if(count%20==0)
<<<<<<< HEAD
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <main_2_loop+0x1e0>)
 8001d5a:	6819      	ldr	r1, [r3, #0]
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <main_2_loop+0x1e4>)
 8001d5e:	fb83 2301 	smull	r2, r3, r3, r1
 8001d62:	10da      	asrs	r2, r3, #3
 8001d64:	17cb      	asrs	r3, r1, #31
 8001d66:	1ad2      	subs	r2, r2, r3
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	1aca      	subs	r2, r1, r3
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d121      	bne.n	8001dba <main_2_loop+0x1be>
		{
//			sprintf(bar,"P:%.2f,CO2:%.2f,valve_on:%d,counter:%d,err:%d,time:%.2f,target:%.2f\r\n",P,CO2_L,valve_on,counter,err,time,target);
			sprintf(bar,"CO2:%.2f\r\n",CO2_L);
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <main_2_loop+0x1dc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fbe4 	bl	8000548 <__aeabi_f2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	1d38      	adds	r0, r7, #4
 8001d86:	491f      	ldr	r1, [pc, #124]	; (8001e04 <main_2_loop+0x208>)
 8001d88:	f00a fdc8 	bl	800c91c <siprintf>
			strcat(foo,bar);
 8001d8c:	1d3a      	adds	r2, r7, #4
 8001d8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00a fde1 	bl	800c95c <strcat>
			HAL_Delay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f000 feca 	bl	8002b34 <HAL_Delay>
			CDC_Transmit_FS((uint8_t*)foo, strlen(foo));
 8001da0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fa13 	bl	80001d0 <strlen>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f008 fd03 	bl	800a7c0 <CDC_Transmit_FS>
=======
 8001cb6:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <main_2_loop+0x238>)
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <main_2_loop+0x23c>)
 8001cbc:	fb83 2301 	smull	r2, r3, r3, r1
 8001cc0:	10da      	asrs	r2, r3, #3
 8001cc2:	17cb      	asrs	r3, r1, #31
 8001cc4:	1ad2      	subs	r2, r2, r3
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	1aca      	subs	r2, r1, r3
 8001cd0:	2a00      	cmp	r2, #0
 8001cd2:	d149      	bne.n	8001d68 <main_2_loop+0x214>
		{
			sprintf(bar,"P:%.2f,CO2:%.2f,valve_on:%d,counter:%d,err:%d,time:%.2f,target:%.2f\r\n",P,CO2_L,valve_on,counter,err,time,target);
 8001cd4:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <main_2_loop+0x260>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc35 	bl	8000548 <__aeabi_f2d>
 8001cde:	4682      	mov	sl, r0
 8001ce0:	468b      	mov	fp, r1
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <main_2_loop+0x234>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc2e 	bl	8000548 <__aeabi_f2d>
 8001cec:	4680      	mov	r8, r0
 8001cee:	4689      	mov	r9, r1
 8001cf0:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <main_2_loop+0x264>)
 8001cf2:	681e      	ldr	r6, [r3, #0]
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <main_2_loop+0x268>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <main_2_loop+0x26c>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	603a      	str	r2, [r7, #0]
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <main_2_loop+0x240>)
 8001d02:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d06:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <main_2_loop+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc1c 	bl	8000548 <__aeabi_f2d>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	f107 000c 	add.w	r0, r7, #12
 8001d18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d1c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	9204      	str	r2, [sp, #16]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	9303      	str	r3, [sp, #12]
 8001d28:	9602      	str	r6, [sp, #8]
 8001d2a:	e9cd 8900 	strd	r8, r9, [sp]
 8001d2e:	4652      	mov	r2, sl
 8001d30:	465b      	mov	r3, fp
 8001d32:	4925      	ldr	r1, [pc, #148]	; (8001dc8 <main_2_loop+0x274>)
 8001d34:	f00a fe26 	bl	800c984 <siprintf>
			strcat(foo,bar);
 8001d38:	f107 020c 	add.w	r2, r7, #12
 8001d3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00a fe3e 	bl	800c9c4 <strcat>
			HAL_Delay(1);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f000 ff27 	bl	8002b9c <HAL_Delay>
			CDC_Transmit_FS((uint8_t*)foo, strlen(foo));
 8001d4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fa3c 	bl	80001d0 <strlen>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f008 fd60 	bl	800a828 <CDC_Transmit_FS>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
		}


		tim7_EN = false;
<<<<<<< HEAD
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <main_2_loop+0x1d0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
=======
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <main_2_loop+0x228>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
//			CDC_Transmit_FS(op, 97 + 6);
			HAL_Delay(2);
		}
		*/
	}
}
<<<<<<< HEAD
 8001dc0:	bf00      	nop
 8001dc2:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003ab 	.word	0x200003ab
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	42c80000 	.word	0x42c80000
 8001dd8:	20000390 	.word	0x20000390
 8001ddc:	200003d0 	.word	0x200003d0
 8001de0:	66666667 	.word	0x66666667
 8001de4:	200003d8 	.word	0x200003d8
 8001de8:	3ff00000 	.word	0x3ff00000
 8001dec:	20000384 	.word	0x20000384
 8001df0:	200003b0 	.word	0x200003b0
 8001df4:	200003b8 	.word	0x200003b8
 8001df8:	20000388 	.word	0x20000388
 8001dfc:	200003c0 	.word	0x200003c0
 8001e00:	200003c8 	.word	0x200003c8
 8001e04:	0800eda8 	.word	0x0800eda8

08001e08 <HAL_TIM_PeriodElapsedCallback>:
=======
 8001d6e:	bf00      	nop
 8001d70:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8001d74:	46bd      	mov	sp, r7
 8001d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200003a2 	.word	0x200003a2
 8001d80:	2000076c 	.word	0x2000076c
 8001d84:	42c80000 	.word	0x42c80000
 8001d88:	20000388 	.word	0x20000388
 8001d8c:	200003c8 	.word	0x200003c8
 8001d90:	66666667 	.word	0x66666667
 8001d94:	200003d0 	.word	0x200003d0
 8001d98:	3ff00000 	.word	0x3ff00000
 8001d9c:	2000037c 	.word	0x2000037c
 8001da0:	200003a8 	.word	0x200003a8
 8001da4:	200003b0 	.word	0x200003b0
 8001da8:	20000380 	.word	0x20000380
 8001dac:	200003b8 	.word	0x200003b8
 8001db0:	200003c0 	.word	0x200003c0
 8001db4:	20000384 	.word	0x20000384
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	2000038c 	.word	0x2000038c
 8001dc0:	20000390 	.word	0x20000390
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	0800ee10 	.word	0x0800ee10

08001dcc <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
<<<<<<< HEAD
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	if(htim == &htim7){
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d102      	bne.n	8001e1e <HAL_TIM_PeriodElapsedCallback+0x16>
		tim7_EN = true;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
	}
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000928 	.word	0x20000928
 8001e30:	200003ab 	.word	0x200003ab

08001e34 <HAL_MspInit>:
=======
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	if(htim == &htim7){
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d102      	bne.n	8001de2 <HAL_TIM_PeriodElapsedCallback+0x16>
		tim7_EN = true;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
	}
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000924 	.word	0x20000924
 8001df4:	200003a2 	.word	0x200003a2

08001df8 <HAL_MspInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
=======
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
=======
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_I2C_MspInit>:
=======
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_I2C_MspInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_I2C_MspInit+0x84>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12c      	bne.n	8001f00 <HAL_I2C_MspInit+0x7c>
=======
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_I2C_MspInit+0x84>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d12c      	bne.n	8001ec4 <HAL_I2C_MspInit+0x7c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
=======
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 8001ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	480c      	ldr	r0, [pc, #48]	; (8001f10 <HAL_I2C_MspInit+0x8c>)
 8001ee0:	f000 fff0 	bl	8002ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001eee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_I2C_MspInit+0x88>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
=======
 8001e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8c:	2312      	movs	r3, #18
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <HAL_I2C_MspInit+0x8c>)
 8001ea4:	f001 f842 	bl	8002f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_I2C_MspInit+0x88>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40005400 	.word	0x40005400
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020400 	.word	0x40020400

08001f14 <HAL_SPI_MspInit>:
=======
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40005400 	.word	0x40005400
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020400 	.word	0x40020400

08001ed8 <HAL_SPI_MspInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_SPI_MspInit+0x84>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12b      	bne.n	8001f8e <HAL_SPI_MspInit+0x7a>
=======
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_SPI_MspInit+0x84>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d12b      	bne.n	8001f52 <HAL_SPI_MspInit+0x7a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_SPI_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
=======
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
<<<<<<< HEAD
 8001f6e:	2318      	movs	r3, #24
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_SPI_MspInit+0x8c>)
 8001f8a:	f000 ff9b 	bl	8002ec4 <HAL_GPIO_Init>
=======
 8001f32:	2318      	movs	r3, #24
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f42:	2305      	movs	r3, #5
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <HAL_SPI_MspInit+0x8c>)
 8001f4e:	f000 ffed 	bl	8002f2c <HAL_GPIO_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40013000 	.word	0x40013000
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020400 	.word	0x40020400

08001fa4 <HAL_TIM_PWM_MspInit>:
=======
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40013000 	.word	0x40013000
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020400 	.word	0x40020400

08001f68 <HAL_TIM_PWM_MspInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
<<<<<<< HEAD
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_TIM_PWM_MspInit+0x2e>
=======
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10d      	bne.n	8001f96 <HAL_TIM_PWM_MspInit+0x2e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
=======
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_TIM_PWM_MspInit+0x40>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <HAL_TIM_PWM_MspInit+0x40>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <HAL_TIM_PWM_MspInit+0x40>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_TIM_Base_MspInit>:
=======
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_TIM_Base_MspInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <HAL_TIM_Base_MspInit+0x48>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d115      	bne.n	8002026 <HAL_TIM_Base_MspInit+0x3e>
=======
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_TIM_Base_MspInit+0x48>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d115      	bne.n	8001fea <HAL_TIM_Base_MspInit+0x3e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
<<<<<<< HEAD
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_TIM_Base_MspInit+0x4c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <HAL_TIM_Base_MspInit+0x4c>)
 8002004:	f043 0320 	orr.w	r3, r3, #32
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_TIM_Base_MspInit+0x4c>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	2037      	movs	r0, #55	; 0x37
 800201c:	f000 fe89 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002020:	2037      	movs	r0, #55	; 0x37
 8002022:	f000 fea2 	bl	8002d6a <HAL_NVIC_EnableIRQ>
=======
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_TIM_Base_MspInit+0x4c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <HAL_TIM_Base_MspInit+0x4c>)
 8001fc8:	f043 0320 	orr.w	r3, r3, #32
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_TIM_Base_MspInit+0x4c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2037      	movs	r0, #55	; 0x37
 8001fe0:	f000 fedb 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001fe4:	2037      	movs	r0, #55	; 0x37
 8001fe6:	f000 fef4 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40001400 	.word	0x40001400
 8002034:	40023800 	.word	0x40023800

08002038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <HAL_TIM_MspPostInit+0x68>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d11e      	bne.n	8002098 <HAL_TIM_MspPostInit+0x60>
=======
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40001400 	.word	0x40001400
 8001ff8:	40023800 	.word	0x40023800

08001ffc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_TIM_MspPostInit+0x68>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d11e      	bne.n	800205c <HAL_TIM_MspPostInit+0x60>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
<<<<<<< HEAD
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_TIM_MspPostInit+0x6c>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_TIM_MspPostInit+0x6c>)
 8002064:	f043 0310 	orr.w	r3, r3, #16
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_TIM_MspPostInit+0x6c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
=======
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_TIM_MspPostInit+0x6c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a10      	ldr	r2, [pc, #64]	; (8002068 <HAL_TIM_MspPostInit+0x6c>)
 8002028:	f043 0310 	orr.w	r3, r3, #16
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_TIM_MspPostInit+0x6c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 8002076:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002088:	2301      	movs	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	4619      	mov	r1, r3
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <HAL_TIM_MspPostInit+0x70>)
 8002094:	f000 ff16 	bl	8002ec4 <HAL_GPIO_Init>
=======
 800203a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800203e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800204c:	2301      	movs	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4619      	mov	r1, r3
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <HAL_TIM_MspPostInit+0x70>)
 8002058:	f000 ff68 	bl	8002f2c <HAL_GPIO_Init>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8002098:	bf00      	nop
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_UART_MspInit>:
=======
 800205c:	bf00      	nop
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40010000 	.word	0x40010000
 8002068:	40023800 	.word	0x40023800
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_UART_MspInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b092      	sub	sp, #72	; 0x48
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4aa1      	ldr	r2, [pc, #644]	; (8002350 <HAL_UART_MspInit+0x2a4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d135      	bne.n	800213a <HAL_UART_MspInit+0x8e>
=======
 8002070:	b580      	push	{r7, lr}
 8002072:	b092      	sub	sp, #72	; 0x48
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4aa1      	ldr	r2, [pc, #644]	; (8002314 <HAL_UART_MspInit+0x2a4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d135      	bne.n	80020fe <HAL_UART_MspInit+0x8e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
<<<<<<< HEAD
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
 80020d2:	4ba0      	ldr	r3, [pc, #640]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a9f      	ldr	r2, [pc, #636]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b9d      	ldr	r3, [pc, #628]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ee:	4b99      	ldr	r3, [pc, #612]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a98      	ldr	r2, [pc, #608]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b96      	ldr	r3, [pc, #600]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
=======
 8002092:	2300      	movs	r3, #0
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
 8002096:	4ba0      	ldr	r3, [pc, #640]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a9f      	ldr	r2, [pc, #636]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 800209c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b9d      	ldr	r3, [pc, #628]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b2:	4b99      	ldr	r3, [pc, #612]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a98      	ldr	r2, [pc, #608]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b96      	ldr	r3, [pc, #600]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
<<<<<<< HEAD
 8002106:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002118:	2308      	movs	r3, #8
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002120:	4619      	mov	r1, r3
 8002122:	488d      	ldr	r0, [pc, #564]	; (8002358 <HAL_UART_MspInit+0x2ac>)
 8002124:	f000 fece 	bl	8002ec4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	2100      	movs	r1, #0
 800212c:	2034      	movs	r0, #52	; 0x34
 800212e:	f000 fe00 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002132:	2034      	movs	r0, #52	; 0x34
 8002134:	f000 fe19 	bl	8002d6a <HAL_NVIC_EnableIRQ>
=======
 80020ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020dc:	2308      	movs	r3, #8
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020e4:	4619      	mov	r1, r3
 80020e6:	488d      	ldr	r0, [pc, #564]	; (800231c <HAL_UART_MspInit+0x2ac>)
 80020e8:	f000 ff20 	bl	8002f2c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2034      	movs	r0, #52	; 0x34
 80020f2:	f000 fe52 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020f6:	2034      	movs	r0, #52	; 0x34
 80020f8:	f000 fe6b 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002138:	e106      	b.n	8002348 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==UART5)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a87      	ldr	r2, [pc, #540]	; (800235c <HAL_UART_MspInit+0x2b0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d14b      	bne.n	80021dc <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
 8002148:	4b82      	ldr	r3, [pc, #520]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	4a81      	ldr	r2, [pc, #516]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800214e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002152:	6413      	str	r3, [r2, #64]	; 0x40
 8002154:	4b7f      	ldr	r3, [pc, #508]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	4b7b      	ldr	r3, [pc, #492]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	4a7a      	ldr	r2, [pc, #488]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	6313      	str	r3, [r2, #48]	; 0x30
 8002170:	4b78      	ldr	r3, [pc, #480]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
 8002180:	4b74      	ldr	r3, [pc, #464]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	4a73      	ldr	r2, [pc, #460]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002186:	f043 0308 	orr.w	r3, r3, #8
 800218a:	6313      	str	r3, [r2, #48]	; 0x30
 800218c:	4b71      	ldr	r3, [pc, #452]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	623b      	str	r3, [r7, #32]
 8002196:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021aa:	2308      	movs	r3, #8
 80021ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021b2:	4619      	mov	r1, r3
 80021b4:	4868      	ldr	r0, [pc, #416]	; (8002358 <HAL_UART_MspInit+0x2ac>)
 80021b6:	f000 fe85 	bl	8002ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ba:	2304      	movs	r3, #4
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021ca:	2308      	movs	r3, #8
 80021cc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021d2:	4619      	mov	r1, r3
 80021d4:	4862      	ldr	r0, [pc, #392]	; (8002360 <HAL_UART_MspInit+0x2b4>)
 80021d6:	f000 fe75 	bl	8002ec4 <HAL_GPIO_Init>
}
 80021da:	e0b5      	b.n	8002348 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a60      	ldr	r2, [pc, #384]	; (8002364 <HAL_UART_MspInit+0x2b8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d12c      	bne.n	8002240 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a59      	ldr	r2, [pc, #356]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80021f0:	f043 0310 	orr.w	r3, r3, #16
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b57      	ldr	r3, [pc, #348]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b50      	ldr	r3, [pc, #320]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800221e:	23c0      	movs	r3, #192	; 0xc0
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800222e:	2307      	movs	r3, #7
 8002230:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002236:	4619      	mov	r1, r3
 8002238:	484b      	ldr	r0, [pc, #300]	; (8002368 <HAL_UART_MspInit+0x2bc>)
 800223a:	f000 fe43 	bl	8002ec4 <HAL_GPIO_Init>
}
 800223e:	e083      	b.n	8002348 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a49      	ldr	r2, [pc, #292]	; (800236c <HAL_UART_MspInit+0x2c0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d144      	bne.n	80022d4 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART2_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a40      	ldr	r2, [pc, #256]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a39      	ldr	r2, [pc, #228]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002270:	f043 0308 	orr.w	r3, r3, #8
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002282:	2320      	movs	r3, #32
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002292:	2307      	movs	r3, #7
 8002294:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002296:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800229a:	4619      	mov	r1, r3
 800229c:	4830      	ldr	r0, [pc, #192]	; (8002360 <HAL_UART_MspInit+0x2b4>)
 800229e:	f000 fe11 	bl	8002ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022a2:	2340      	movs	r3, #64	; 0x40
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b2:	2307      	movs	r3, #7
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ba:	4619      	mov	r1, r3
 80022bc:	4828      	ldr	r0, [pc, #160]	; (8002360 <HAL_UART_MspInit+0x2b4>)
 80022be:	f000 fe01 	bl	8002ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	2026      	movs	r0, #38	; 0x26
 80022c8:	f000 fd33 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022cc:	2026      	movs	r0, #38	; 0x26
 80022ce:	f000 fd4c 	bl	8002d6a <HAL_NVIC_EnableIRQ>
}
 80022d2:	e039      	b.n	8002348 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART3)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a25      	ldr	r2, [pc, #148]	; (8002370 <HAL_UART_MspInit+0x2c4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d134      	bne.n	8002348 <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a14      	ldr	r2, [pc, #80]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_UART_MspInit+0x2a8>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002328:	2307      	movs	r3, #7
 800232a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002330:	4619      	mov	r1, r3
 8002332:	480b      	ldr	r0, [pc, #44]	; (8002360 <HAL_UART_MspInit+0x2b4>)
 8002334:	f000 fdc6 	bl	8002ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	2027      	movs	r0, #39	; 0x27
 800233e:	f000 fcf8 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002342:	2027      	movs	r0, #39	; 0x27
 8002344:	f000 fd11 	bl	8002d6a <HAL_NVIC_EnableIRQ>
}
 8002348:	bf00      	nop
 800234a:	3748      	adds	r7, #72	; 0x48
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40004c00 	.word	0x40004c00
 8002354:	40023800 	.word	0x40023800
 8002358:	40020800 	.word	0x40020800
 800235c:	40005000 	.word	0x40005000
 8002360:	40020c00 	.word	0x40020c00
 8002364:	40011000 	.word	0x40011000
 8002368:	40020400 	.word	0x40020400
 800236c:	40004400 	.word	0x40004400
 8002370:	40004800 	.word	0x40004800

08002374 <NMI_Handler>:
=======
 80020fc:	e106      	b.n	800230c <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==UART5)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a87      	ldr	r2, [pc, #540]	; (8002320 <HAL_UART_MspInit+0x2b0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d14b      	bne.n	80021a0 <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
 800210c:	4b82      	ldr	r3, [pc, #520]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a81      	ldr	r2, [pc, #516]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 8002112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
 8002118:	4b7f      	ldr	r3, [pc, #508]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
 8002128:	4b7b      	ldr	r3, [pc, #492]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	4a7a      	ldr	r2, [pc, #488]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6313      	str	r3, [r2, #48]	; 0x30
 8002134:	4b78      	ldr	r3, [pc, #480]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	4b74      	ldr	r3, [pc, #464]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a73      	ldr	r2, [pc, #460]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	4b71      	ldr	r3, [pc, #452]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800215c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800216e:	2308      	movs	r3, #8
 8002170:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002172:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002176:	4619      	mov	r1, r3
 8002178:	4868      	ldr	r0, [pc, #416]	; (800231c <HAL_UART_MspInit+0x2ac>)
 800217a:	f000 fed7 	bl	8002f2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800217e:	2304      	movs	r3, #4
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800218e:	2308      	movs	r3, #8
 8002190:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002192:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002196:	4619      	mov	r1, r3
 8002198:	4862      	ldr	r0, [pc, #392]	; (8002324 <HAL_UART_MspInit+0x2b4>)
 800219a:	f000 fec7 	bl	8002f2c <HAL_GPIO_Init>
}
 800219e:	e0b5      	b.n	800230c <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a60      	ldr	r2, [pc, #384]	; (8002328 <HAL_UART_MspInit+0x2b8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d12c      	bne.n	8002204 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	4b5a      	ldr	r3, [pc, #360]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a59      	ldr	r2, [pc, #356]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b57      	ldr	r3, [pc, #348]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a52      	ldr	r2, [pc, #328]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b50      	ldr	r3, [pc, #320]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021e2:	23c0      	movs	r3, #192	; 0xc0
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f2:	2307      	movs	r3, #7
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021fa:	4619      	mov	r1, r3
 80021fc:	484b      	ldr	r0, [pc, #300]	; (800232c <HAL_UART_MspInit+0x2bc>)
 80021fe:	f000 fe95 	bl	8002f2c <HAL_GPIO_Init>
}
 8002202:	e083      	b.n	800230c <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a49      	ldr	r2, [pc, #292]	; (8002330 <HAL_UART_MspInit+0x2c0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d144      	bne.n	8002298 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART2_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	4b41      	ldr	r3, [pc, #260]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a40      	ldr	r2, [pc, #256]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 8002218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a39      	ldr	r2, [pc, #228]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b37      	ldr	r3, [pc, #220]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002246:	2320      	movs	r3, #32
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002256:	2307      	movs	r3, #7
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800225e:	4619      	mov	r1, r3
 8002260:	4830      	ldr	r0, [pc, #192]	; (8002324 <HAL_UART_MspInit+0x2b4>)
 8002262:	f000 fe63 	bl	8002f2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002266:	2340      	movs	r3, #64	; 0x40
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800226e:	2301      	movs	r3, #1
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002272:	2303      	movs	r3, #3
 8002274:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002276:	2307      	movs	r3, #7
 8002278:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800227e:	4619      	mov	r1, r3
 8002280:	4828      	ldr	r0, [pc, #160]	; (8002324 <HAL_UART_MspInit+0x2b4>)
 8002282:	f000 fe53 	bl	8002f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2026      	movs	r0, #38	; 0x26
 800228c:	f000 fd85 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002290:	2026      	movs	r0, #38	; 0x26
 8002292:	f000 fd9e 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 8002296:	e039      	b.n	800230c <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a25      	ldr	r2, [pc, #148]	; (8002334 <HAL_UART_MspInit+0x2c4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d134      	bne.n	800230c <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a14      	ldr	r2, [pc, #80]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_UART_MspInit+0x2a8>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022ec:	2307      	movs	r3, #7
 80022ee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022f4:	4619      	mov	r1, r3
 80022f6:	480b      	ldr	r0, [pc, #44]	; (8002324 <HAL_UART_MspInit+0x2b4>)
 80022f8:	f000 fe18 	bl	8002f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2027      	movs	r0, #39	; 0x27
 8002302:	f000 fd4a 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002306:	2027      	movs	r0, #39	; 0x27
 8002308:	f000 fd63 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 800230c:	bf00      	nop
 800230e:	3748      	adds	r7, #72	; 0x48
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40004c00 	.word	0x40004c00
 8002318:	40023800 	.word	0x40023800
 800231c:	40020800 	.word	0x40020800
 8002320:	40005000 	.word	0x40005000
 8002324:	40020c00 	.word	0x40020c00
 8002328:	40011000 	.word	0x40011000
 800232c:	40020400 	.word	0x40020400
 8002330:	40004400 	.word	0x40004400
 8002334:	40004800 	.word	0x40004800

08002338 <NMI_Handler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
=======
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
<<<<<<< HEAD
 8002378:	f003 fa96 	bl	80058a8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800237c:	e7fe      	b.n	800237c <NMI_Handler+0x8>

0800237e <HardFault_Handler>:
=======
 800233c:	f003 fae8 	bl	8005910 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <NMI_Handler+0x8>

08002342 <HardFault_Handler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
=======
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
	 * 	To keep the program running, maybe I can make a fault_cnt here,
	     every time entering xxxFault_Handler(), fault_cnt++ and return.
	     Once fault_cnt++ exceeds a threshold, do softreset or while(1).
	 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:
=======
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler+0x4>

08002348 <MemManage_Handler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
=======
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler+0x4>

0800238a <BusFault_Handler>:
=======
 800234c:	e7fe      	b.n	800234c <MemManage_Handler+0x4>

0800234e <BusFault_Handler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
=======
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800238e:	e7fe      	b.n	800238e <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:
=======
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
=======
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler+0x4>

08002396 <SVC_Handler>:
=======
 8002358:	e7fe      	b.n	8002358 <UsageFault_Handler+0x4>

0800235a <SVC_Handler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
=======
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DebugMon_Handler>:
=======
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <DebugMon_Handler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
=======
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:
=======
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <PendSV_Handler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
=======
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <SysTick_Handler>:
=======
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <SysTick_Handler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
=======
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80023c4:	f000 fb96 	bl	8002af4 <HAL_IncTick>
=======
 8002388:	f000 fbe8 	bl	8002b5c <HAL_IncTick>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <USART2_IRQHandler>:
=======
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}

08002390 <USART2_IRQHandler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< HEAD
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
=======
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< HEAD
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <USART2_IRQHandler+0x10>)
 80023d2:	f004 fae3 	bl	800699c <HAL_UART_IRQHandler>
=======
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <USART2_IRQHandler+0x10>)
 8002396:	f004 fb35 	bl	8006a04 <HAL_UART_IRQHandler>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< HEAD
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200008e4 	.word	0x200008e4

080023e0 <USART3_IRQHandler>:
=======
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200008e0 	.word	0x200008e0

080023a4 <USART3_IRQHandler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
<<<<<<< HEAD
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
=======
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
<<<<<<< HEAD
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <USART3_IRQHandler+0x10>)
 80023e6:	f004 fad9 	bl	800699c <HAL_UART_IRQHandler>
=======
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <USART3_IRQHandler+0x10>)
 80023aa:	f004 fb2b 	bl	8006a04 <HAL_UART_IRQHandler>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
<<<<<<< HEAD
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200006dc 	.word	0x200006dc

080023f4 <UART4_IRQHandler>:
=======
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200006d4 	.word	0x200006d4

080023b8 <UART4_IRQHandler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
<<<<<<< HEAD
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
=======
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
<<<<<<< HEAD
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <UART4_IRQHandler+0x10>)
 80023fa:	f004 facf 	bl	800699c <HAL_UART_IRQHandler>
=======
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <UART4_IRQHandler+0x10>)
 80023be:	f004 fb21 	bl	8006a04 <HAL_UART_IRQHandler>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
<<<<<<< HEAD
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000848 	.word	0x20000848

08002408 <TIM7_IRQHandler>:
=======
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000844 	.word	0x20000844

080023cc <TIM7_IRQHandler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
<<<<<<< HEAD
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
=======
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
<<<<<<< HEAD
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <TIM7_IRQHandler+0x10>)
 800240e:	f003 fbfe 	bl	8005c0e <HAL_TIM_IRQHandler>
=======
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <TIM7_IRQHandler+0x10>)
 80023d2:	f003 fc50 	bl	8005c76 <HAL_TIM_IRQHandler>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
<<<<<<< HEAD
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000928 	.word	0x20000928

0800241c <OTG_FS_IRQHandler>:
=======
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000924 	.word	0x20000924

080023e0 <OTG_FS_IRQHandler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
<<<<<<< HEAD
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
=======
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
<<<<<<< HEAD
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <OTG_FS_IRQHandler+0x10>)
 8002422:	f001 fdb9 	bl	8003f98 <HAL_PCD_IRQHandler>
=======
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <OTG_FS_IRQHandler+0x10>)
 80023e6:	f001 fe0b 	bl	8004000 <HAL_PCD_IRQHandler>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
<<<<<<< HEAD
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20001e44 	.word	0x20001e44

08002430 <_getpid>:
=======
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20001e40 	.word	0x20001e40

080023f4 <_getpid>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
	return 1;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_kill>:

int _kill(int pid, int sig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800244a:	f009 fdcb 	bl	800bfe4 <__errno>
 800244e:	4603      	mov	r3, r0
 8002450:	2216      	movs	r2, #22
 8002452:	601a      	str	r2, [r3, #0]
	return -1;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_exit>:

void _exit (int status)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ffe7 	bl	8002440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002472:	e7fe      	b.n	8002472 <_exit+0x12>

08002474 <_read>:
=======
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
	return 1;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <_kill>:

int _kill(int pid, int sig)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800240e:	f009 fe1d 	bl	800c04c <__errno>
 8002412:	4603      	mov	r3, r0
 8002414:	2216      	movs	r2, #22
 8002416:	601a      	str	r2, [r3, #0]
	return -1;
 8002418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_exit>:

void _exit (int status)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800242c:	f04f 31ff 	mov.w	r1, #4294967295
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ffe7 	bl	8002404 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002436:	e7fe      	b.n	8002436 <_exit+0x12>

08002438 <_read>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e00a      	b.n	800249c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002486:	f3af 8000 	nop.w
 800248a:	4601      	mov	r1, r0
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	60ba      	str	r2, [r7, #8]
 8002492:	b2ca      	uxtb	r2, r1
 8002494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dbf0      	blt.n	8002486 <_read+0x12>
	}

return len;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	e009      	b.n	80024d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	60ba      	str	r2, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3301      	adds	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	dbf1      	blt.n	80024c0 <_write+0x12>
	}
	return len;
 80024dc:	687b      	ldr	r3, [r7, #4]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <_close>:

int _close(int file)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	return -1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <_fstat>:
=======
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e00a      	b.n	8002460 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800244a:	f3af 8000 	nop.w
 800244e:	4601      	mov	r1, r0
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	60ba      	str	r2, [r7, #8]
 8002456:	b2ca      	uxtb	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3301      	adds	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	dbf0      	blt.n	800244a <_read+0x12>
	}

return len;
 8002468:	687b      	ldr	r3, [r7, #4]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e009      	b.n	8002498 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	60ba      	str	r2, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	dbf1      	blt.n	8002484 <_write+0x12>
	}
	return len;
 80024a0:	687b      	ldr	r3, [r7, #4]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_close>:

int _close(int file)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
	return -1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_fstat>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800250e:	605a      	str	r2, [r3, #4]
	return 0;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <_isatty>:

int _isatty(int file)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
	return 1;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
	return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <_sbrk>:
=======
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d2:	605a      	str	r2, [r3, #4]
	return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_isatty>:

int _isatty(int file)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	return 1;
 80024ea:	2301      	movs	r3, #1
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
	return 0;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <_sbrk>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
=======
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <_sbrk+0x5c>)
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <_sbrk+0x60>)
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	613b      	str	r3, [r7, #16]
=======
 800251c:	4a14      	ldr	r2, [pc, #80]	; (8002570 <_sbrk+0x5c>)
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <_sbrk+0x60>)
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <_sbrk+0x64>)
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <_sbrk+0x68>)
 8002570:	601a      	str	r2, [r3, #0]
=======
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <_sbrk+0x64>)
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <_sbrk+0x68>)
 8002534:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d207      	bcs.n	8002590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002580:	f009 fd30 	bl	800bfe4 <__errno>
 8002584:	4603      	mov	r3, r0
 8002586:	220c      	movs	r2, #12
 8002588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e009      	b.n	80025a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <_sbrk+0x64>)
 80025a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20020000 	.word	0x20020000
 80025b0:	00000400 	.word	0x00000400
 80025b4:	200003e0 	.word	0x200003e0
 80025b8:	20002260 	.word	0x20002260

080025bc <SystemInit>:
=======
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d207      	bcs.n	8002554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002544:	f009 fd82 	bl	800c04c <__errno>
 8002548:	4603      	mov	r3, r0
 800254a:	220c      	movs	r2, #12
 800254c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	e009      	b.n	8002568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <_sbrk+0x64>)
 8002564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20020000 	.word	0x20020000
 8002574:	00000400 	.word	0x00000400
 8002578:	200003d8 	.word	0x200003d8
 800257c:	20002258 	.word	0x20002258

08002580 <SystemInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <SystemInit+0x20>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <SystemInit+0x20>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <SystemInit+0x20>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <SystemInit+0x20>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <user_main>:
=======
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <user_main>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
uint8_t bufdata[200] = {0}, result_bufdata[200] = {0};
uint8_t abufdata;
uint8_t data[] = {0x5A, 0x0D, 0x0A};
extern float P;
extern float r;
void user_main(void){
<<<<<<< HEAD
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)data, 3);
 80025e4:	2203      	movs	r2, #3
 80025e6:	4907      	ldr	r1, [pc, #28]	; (8002604 <user_main+0x24>)
 80025e8:	4807      	ldr	r0, [pc, #28]	; (8002608 <user_main+0x28>)
 80025ea:	f004 f961 	bl	80068b0 <HAL_UART_Transmit_IT>
=======
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)data, 3);
 80025a8:	2203      	movs	r2, #3
 80025aa:	4905      	ldr	r1, [pc, #20]	; (80025c0 <user_main+0x1c>)
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <user_main+0x20>)
 80025ae:	f004 f9b3 	bl	8006918 <HAL_UART_Transmit_IT>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
//
	HAL_Delay(1000);
 80025ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025f2:	f000 fa9f 	bl	8002b34 <HAL_Delay>
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&abufdata, 1);
<<<<<<< HEAD
 80025f6:	2201      	movs	r2, #1
 80025f8:	4904      	ldr	r1, [pc, #16]	; (800260c <user_main+0x2c>)
 80025fa:	4803      	ldr	r0, [pc, #12]	; (8002608 <user_main+0x28>)
 80025fc:	f004 f99d 	bl	800693a <HAL_UART_Receive_IT>

}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000014 	.word	0x20000014
 8002608:	200006dc 	.word	0x200006dc
 800260c:	200004b0 	.word	0x200004b0

08002610 <EXPLOR_read>:

void EXPLOR_read(void){
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
=======
 80025b2:	2201      	movs	r2, #1
 80025b4:	4904      	ldr	r1, [pc, #16]	; (80025c8 <user_main+0x24>)
 80025b6:	4803      	ldr	r0, [pc, #12]	; (80025c4 <user_main+0x20>)
 80025b8:	f004 f9f3 	bl	80069a2 <HAL_UART_Receive_IT>

}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000010 	.word	0x20000010
 80025c4:	200006d4 	.word	0x200006d4
 80025c8:	200004a8 	.word	0x200004a8

080025cc <EXPLOR_read>:

void EXPLOR_read(void){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)


//	HAL_UART_Transmit_IT(&huart3, data, strlen(data));
	HAL_Delay(3000);
<<<<<<< HEAD
 8002614:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002618:	f000 fa8c 	bl	8002b34 <HAL_Delay>
//	HAL_UART_Transmit(&huart3, (uint8_t *)&data, 5, 100);
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)data, 3);
 800261c:	2203      	movs	r2, #3
 800261e:	4905      	ldr	r1, [pc, #20]	; (8002634 <EXPLOR_read+0x24>)
 8002620:	4805      	ldr	r0, [pc, #20]	; (8002638 <EXPLOR_read+0x28>)
 8002622:	f004 f945 	bl	80068b0 <HAL_UART_Transmit_IT>
//
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&abufdata, 1);
 8002626:	2201      	movs	r2, #1
 8002628:	4904      	ldr	r1, [pc, #16]	; (800263c <EXPLOR_read+0x2c>)
 800262a:	4803      	ldr	r0, [pc, #12]	; (8002638 <EXPLOR_read+0x28>)
 800262c:	f004 f985 	bl	800693a <HAL_UART_Receive_IT>

}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000014 	.word	0x20000014
 8002638:	200006dc 	.word	0x200006dc
 800263c:	200004b0 	.word	0x200004b0

08002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
=======
 80025d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025d4:	f000 fae2 	bl	8002b9c <HAL_Delay>
//	HAL_UART_Transmit(&huart3, (uint8_t *)&data, 5, 100);
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)data, 3);
 80025d8:	2203      	movs	r2, #3
 80025da:	4905      	ldr	r1, [pc, #20]	; (80025f0 <EXPLOR_read+0x24>)
 80025dc:	4805      	ldr	r0, [pc, #20]	; (80025f4 <EXPLOR_read+0x28>)
 80025de:	f004 f99b 	bl	8006918 <HAL_UART_Transmit_IT>
//
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&abufdata, 1);
 80025e2:	2201      	movs	r2, #1
 80025e4:	4904      	ldr	r1, [pc, #16]	; (80025f8 <EXPLOR_read+0x2c>)
 80025e6:	4803      	ldr	r0, [pc, #12]	; (80025f4 <EXPLOR_read+0x28>)
 80025e8:	f004 f9db 	bl	80069a2 <HAL_UART_Receive_IT>

}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000010 	.word	0x20000010
 80025f4:	200006d4 	.word	0x200006d4
 80025f8:	200004a8 	.word	0x200004a8

080025fc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
<<<<<<< HEAD
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fd ff6a 	bl	8000524 <__aeabi_i2d>
 8002650:	4604      	mov	r4, r0
 8002652:	460d      	mov	r5, r1
 8002654:	6838      	ldr	r0, [r7, #0]
 8002656:	f7fd ff65 	bl	8000524 <__aeabi_i2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	ec43 2b11 	vmov	d1, r2, r3
 8002662:	ec45 4b10 	vmov	d0, r4, r5
 8002666:	f008 fd07 	bl	800b078 <pow>
 800266a:	eeb0 7a40 	vmov.f32	s14, s0
 800266e:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002672:	eeb0 0a47 	vmov.f32	s0, s14
 8002676:	eef0 0a67 	vmov.f32	s1, s15
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bdb0      	pop	{r4, r5, r7, pc}

08002680 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002684:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002688:	af04      	add	r7, sp, #16
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	6018      	str	r0, [r3, #0]

	bufdata[cnt++] = abufdata;
 800268e:	4bc0      	ldr	r3, [pc, #768]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	49be      	ldr	r1, [pc, #760]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 8002696:	600a      	str	r2, [r1, #0]
 8002698:	4abe      	ldr	r2, [pc, #760]	; (8002994 <HAL_UART_RxCpltCallback+0x314>)
 800269a:	7811      	ldrb	r1, [r2, #0]
 800269c:	4abe      	ldr	r2, [pc, #760]	; (8002998 <HAL_UART_RxCpltCallback+0x318>)
 800269e:	54d1      	strb	r1, [r2, r3]

	char DEBUG_cmd[300] = "";
 80026a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	3304      	adds	r3, #4
 80026aa:	f44f 7294 	mov.w	r2, #296	; 0x128
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f009 fcc1 	bl	800c038 <memset>
	char DEBUG_temp[300] = "";
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	3304      	adds	r3, #4
 80026c0:	f44f 7294 	mov.w	r2, #296	; 0x128
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f009 fcb6 	bl	800c038 <memset>
	float C1 = 0, y=0,result=10;
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80026dc:	4baf      	ldr	r3, [pc, #700]	; (800299c <HAL_UART_RxCpltCallback+0x31c>)
 80026de:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
//	sprintf(DEBUG_cmd, "%d \r\n",cnt);
//	CDC_Transmit_FS((uint8_t*)DEBUG_cmd, strlen(DEBUG_cmd));
	if((bufdata[cnt-1] == 0x0A) && (bufdata[cnt-2] == 0x0D)){
 80026e2:	4bab      	ldr	r3, [pc, #684]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	4aab      	ldr	r2, [pc, #684]	; (8002998 <HAL_UART_RxCpltCallback+0x318>)
 80026ea:	5cd3      	ldrb	r3, [r2, r3]
 80026ec:	2b0a      	cmp	r3, #10
 80026ee:	f040 8130 	bne.w	8002952 <HAL_UART_RxCpltCallback+0x2d2>
 80026f2:	4ba7      	ldr	r3, [pc, #668]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3b02      	subs	r3, #2
 80026f8:	4aa7      	ldr	r2, [pc, #668]	; (8002998 <HAL_UART_RxCpltCallback+0x318>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	2b0d      	cmp	r3, #13
 80026fe:	f040 8128 	bne.w	8002952 <HAL_UART_RxCpltCallback+0x2d2>
		sprintf(DEBUG_cmd, "%d \r\n", cnt);
 8002702:	4ba3      	ldr	r3, [pc, #652]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800270a:	49a5      	ldr	r1, [pc, #660]	; (80029a0 <HAL_UART_RxCpltCallback+0x320>)
 800270c:	4618      	mov	r0, r3
 800270e:	f00a f905 	bl	800c91c <siprintf>
		int co2=0;
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
		for(int i=3;i<cnt-2;i++){
 8002718:	2303      	movs	r3, #3
 800271a:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800271e:	4b9c      	ldr	r3, [pc, #624]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3b02      	subs	r3, #2
 8002724:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002728:	429a      	cmp	r2, r3
 800272a:	da15      	bge.n	8002758 <HAL_UART_RxCpltCallback+0xd8>
			co2 = co2*10+ (bufdata[i]-48);
 800272c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4619      	mov	r1, r3
 800273a:	4a97      	ldr	r2, [pc, #604]	; (8002998 <HAL_UART_RxCpltCallback+0x318>)
 800273c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002740:	4413      	add	r3, r2
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	3b30      	subs	r3, #48	; 0x30
 8002746:	440b      	add	r3, r1
 8002748:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
		for(int i=3;i<cnt-2;i++){
 800274c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002750:	3301      	adds	r3, #1
 8002752:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8002756:	e7e2      	b.n	800271e <HAL_UART_RxCpltCallback+0x9e>
		}
		C1 = co2;
 8002758:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002764:	edc7 7a9b 	vstr	s15, [r7, #620]	; 0x26c

		y = (2.6661 * pow(10,-16)* pow(C1,4) - 1.1146 * pow(10,-12) * pow(C1,3) + 1.7397 * pow(10,-9) * pow(C1,2) - 1.2556 * pow(10,-6)*C1 - 9.8754 * pow(10,-4));
 8002768:	f06f 010f 	mvn.w	r1, #15
 800276c:	200a      	movs	r0, #10
 800276e:	f7ff ff67 	bl	8002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002772:	ec51 0b10 	vmov	r0, r1, d0
 8002776:	a37c      	add	r3, pc, #496	; (adr r3, 8002968 <HAL_UART_RxCpltCallback+0x2e8>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f7fd ff3c 	bl	80005f8 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4614      	mov	r4, r2
 8002786:	461d      	mov	r5, r3
 8002788:	2004      	movs	r0, #4
 800278a:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 800278e:	f000 f913 	bl	80029b8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002792:	ec53 2b10 	vmov	r2, r3, d0
 8002796:	4620      	mov	r0, r4
 8002798:	4629      	mov	r1, r5
 800279a:	f7fd ff2d 	bl	80005f8 <__aeabi_dmul>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4614      	mov	r4, r2
 80027a4:	461d      	mov	r5, r3
 80027a6:	f06f 010b 	mvn.w	r1, #11
 80027aa:	200a      	movs	r0, #10
 80027ac:	f7ff ff48 	bl	8002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027b0:	ec51 0b10 	vmov	r0, r1, d0
 80027b4:	a36e      	add	r3, pc, #440	; (adr r3, 8002970 <HAL_UART_RxCpltCallback+0x2f0>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd ff1d 	bl	80005f8 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	2003      	movs	r0, #3
 80027c8:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 80027cc:	f000 f8f4 	bl	80029b8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027d0:	ec53 2b10 	vmov	r2, r3, d0
 80027d4:	4640      	mov	r0, r8
 80027d6:	4649      	mov	r1, r9
 80027d8:	f7fd ff0e 	bl	80005f8 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fd50 	bl	8000288 <__aeabi_dsub>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4614      	mov	r4, r2
 80027ee:	461d      	mov	r5, r3
 80027f0:	f06f 0108 	mvn.w	r1, #8
 80027f4:	200a      	movs	r0, #10
 80027f6:	f7ff ff23 	bl	8002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027fa:	ec51 0b10 	vmov	r0, r1, d0
 80027fe:	a35e      	add	r3, pc, #376	; (adr r3, 8002978 <HAL_UART_RxCpltCallback+0x2f8>)
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	f7fd fef8 	bl	80005f8 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4690      	mov	r8, r2
 800280e:	4699      	mov	r9, r3
 8002810:	2002      	movs	r0, #2
 8002812:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 8002816:	f000 f8cf 	bl	80029b8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800281a:	ec53 2b10 	vmov	r2, r3, d0
 800281e:	4640      	mov	r0, r8
 8002820:	4649      	mov	r1, r9
 8002822:	f7fd fee9 	bl	80005f8 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4620      	mov	r0, r4
 800282c:	4629      	mov	r1, r5
 800282e:	f7fd fd2d 	bl	800028c <__adddf3>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4614      	mov	r4, r2
 8002838:	461d      	mov	r5, r3
 800283a:	f06f 0105 	mvn.w	r1, #5
 800283e:	200a      	movs	r0, #10
 8002840:	f7ff fefe 	bl	8002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002844:	ec51 0b10 	vmov	r0, r1, d0
 8002848:	a34d      	add	r3, pc, #308	; (adr r3, 8002980 <HAL_UART_RxCpltCallback+0x300>)
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	f7fd fed3 	bl	80005f8 <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4690      	mov	r8, r2
 8002858:	4699      	mov	r9, r3
 800285a:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 800285e:	f7fd fe73 	bl	8000548 <__aeabi_f2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4640      	mov	r0, r8
 8002868:	4649      	mov	r1, r9
 800286a:	f7fd fec5 	bl	80005f8 <__aeabi_dmul>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	f7fd fd07 	bl	8000288 <__aeabi_dsub>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4614      	mov	r4, r2
 8002880:	461d      	mov	r5, r3
 8002882:	f06f 0103 	mvn.w	r1, #3
 8002886:	200a      	movs	r0, #10
 8002888:	f7ff feda 	bl	8002640 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800288c:	ec51 0b10 	vmov	r0, r1, d0
 8002890:	a33d      	add	r3, pc, #244	; (adr r3, 8002988 <HAL_UART_RxCpltCallback+0x308>)
 8002892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002896:	f7fd feaf 	bl	80005f8 <__aeabi_dmul>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4620      	mov	r0, r4
 80028a0:	4629      	mov	r1, r5
 80028a2:	f7fd fcf1 	bl	8000288 <__aeabi_dsub>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7fe f97b 	bl	8000ba8 <__aeabi_d2f>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
//		y = (2.811 * pow(10,-38)* pow(C1,6) - 9.817 * pow(10,-32) * pow(C1,5) + 1.304 * pow(10,-25) * pow(C1,4) - 8.126 * pow(10,-20)*pow(C1,3) + 2.311 * pow(10,-14) * pow(C1,2)- 2.195 * pow(10,-9) * C1 - 1.471 * pow(10,-3));
//		result = C1/(1+y*(1013-(1013+P)));
		result = C1/(1+y*(1013-(1013+0)));
 80028b8:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 80028bc:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80029a4 <HAL_UART_RxCpltCallback+0x324>
 80028c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80028cc:	edd7 6a9b 	vldr	s13, [r7, #620]	; 0x26c
 80028d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d4:	edc7 7a99 	vstr	s15, [r7, #612]	; 0x264
		r=result;
 80028d8:	4a33      	ldr	r2, [pc, #204]	; (80029a8 <HAL_UART_RxCpltCallback+0x328>)
 80028da:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80028de:	6013      	str	r3, [r2, #0]
//		sprintf(DEBUG_cmd, " %d %d %d\r\n", cnt, bufdata[0],bufdata[1]);
		sprintf(DEBUG_cmd, "%f,%f,%f\r\n ", C1/100,y,result/100);
 80028e0:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 80028e4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80029ac <HAL_UART_RxCpltCallback+0x32c>
 80028e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028ec:	ee16 0a90 	vmov	r0, s13
 80028f0:	f7fd fe2a 	bl	8000548 <__aeabi_f2d>
 80028f4:	4680      	mov	r8, r0
 80028f6:	4689      	mov	r9, r1
 80028f8:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 80028fc:	f7fd fe24 	bl	8000548 <__aeabi_f2d>
 8002900:	4604      	mov	r4, r0
 8002902:	460d      	mov	r5, r1
 8002904:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 8002908:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80029ac <HAL_UART_RxCpltCallback+0x32c>
 800290c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002910:	ee16 0a90 	vmov	r0, s13
 8002914:	f7fd fe18 	bl	8000548 <__aeabi_f2d>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8002920:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002924:	e9cd 4500 	strd	r4, r5, [sp]
 8002928:	4642      	mov	r2, r8
 800292a:	464b      	mov	r3, r9
 800292c:	4920      	ldr	r1, [pc, #128]	; (80029b0 <HAL_UART_RxCpltCallback+0x330>)
 800292e:	f009 fff5 	bl	800c91c <siprintf>
		CDC_Transmit_FS((uint8_t*)DEBUG_cmd, strlen(DEBUG_cmd));
 8002932:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fc4a 	bl	80001d0 <strlen>
 800293c:	4603      	mov	r3, r0
 800293e:	b29a      	uxth	r2, r3
 8002940:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f007 ff3a 	bl	800a7c0 <CDC_Transmit_FS>
=======
 80025fc:	b5b0      	push	{r4, r5, r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fd ff8c 	bl	8000524 <__aeabi_i2d>
 800260c:	4604      	mov	r4, r0
 800260e:	460d      	mov	r5, r1
 8002610:	6838      	ldr	r0, [r7, #0]
 8002612:	f7fd ff87 	bl	8000524 <__aeabi_i2d>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	ec43 2b11 	vmov	d1, r2, r3
 800261e:	ec45 4b10 	vmov	d0, r4, r5
 8002622:	f008 fd5d 	bl	800b0e0 <pow>
 8002626:	eeb0 7a40 	vmov.f32	s14, s0
 800262a:	eef0 7a60 	vmov.f32	s15, s1
    }
 800262e:	eeb0 0a47 	vmov.f32	s0, s14
 8002632:	eef0 0a67 	vmov.f32	s1, s15
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bdb0      	pop	{r4, r5, r7, pc}
 800263c:	0000      	movs	r0, r0
	...

08002640 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002640:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002644:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002648:	af04      	add	r7, sp, #16
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	6018      	str	r0, [r3, #0]

	bufdata[cnt++] = abufdata;
 800264e:	4b33      	ldr	r3, [pc, #204]	; (800271c <HAL_UART_RxCpltCallback+0xdc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	4931      	ldr	r1, [pc, #196]	; (800271c <HAL_UART_RxCpltCallback+0xdc>)
 8002656:	600a      	str	r2, [r1, #0]
 8002658:	4a31      	ldr	r2, [pc, #196]	; (8002720 <HAL_UART_RxCpltCallback+0xe0>)
 800265a:	7811      	ldrb	r1, [r2, #0]
 800265c:	4a31      	ldr	r2, [pc, #196]	; (8002724 <HAL_UART_RxCpltCallback+0xe4>)
 800265e:	54d1      	strb	r1, [r2, r3]

	char DEBUG_cmd[300] = "";
 8002660:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	3304      	adds	r3, #4
 800266a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f009 fd15 	bl	800c0a0 <memset>
	char DEBUG_temp[300] = "";
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	3304      	adds	r3, #4
 8002680:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f009 fd0a 	bl	800c0a0 <memset>
	float C1 = 0, y=0,result=0;
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
//	sprintf(DEBUG_cmd, "%d \r\n",cnt);
//	CDC_Transmit_FS((uint8_t*)DEBUG_cmd, strlen(DEBUG_cmd));
	if((bufdata[cnt-1] == 0x0A) && (bufdata[cnt-2] == 0x0D)){
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_UART_RxCpltCallback+0xdc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_UART_RxCpltCallback+0xe4>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	2b0a      	cmp	r3, #10
 80026b0:	f040 817f 	bne.w	80029b2 <HAL_UART_RxCpltCallback+0x372>
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_UART_RxCpltCallback+0xdc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3b02      	subs	r3, #2
 80026ba:	4a1a      	ldr	r2, [pc, #104]	; (8002724 <HAL_UART_RxCpltCallback+0xe4>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	2b0d      	cmp	r3, #13
 80026c0:	f040 8177 	bne.w	80029b2 <HAL_UART_RxCpltCallback+0x372>
		sprintf(DEBUG_cmd, "%d \r\n", cnt);
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_UART_RxCpltCallback+0xdc>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80026cc:	4916      	ldr	r1, [pc, #88]	; (8002728 <HAL_UART_RxCpltCallback+0xe8>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f00a f958 	bl	800c984 <siprintf>
		int co2=0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
		for(int i=3;i<cnt-2;i++){
 80026da:	2303      	movs	r3, #3
 80026dc:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_UART_RxCpltCallback+0xdc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3b02      	subs	r3, #2
 80026e6:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80026ea:	429a      	cmp	r2, r3
 80026ec:	da1e      	bge.n	800272c <HAL_UART_RxCpltCallback+0xec>
			co2 = co2*10+ (bufdata[i]-48);
 80026ee:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4619      	mov	r1, r3
 80026fc:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_UART_RxCpltCallback+0xe4>)
 80026fe:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	3b30      	subs	r3, #48	; 0x30
 8002708:	440b      	add	r3, r1
 800270a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
		for(int i=3;i<cnt-2;i++){
 800270e:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002712:	3301      	adds	r3, #1
 8002714:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8002718:	e7e2      	b.n	80026e0 <HAL_UART_RxCpltCallback+0xa0>
 800271a:	bf00      	nop
 800271c:	200003dc 	.word	0x200003dc
 8002720:	200004a8 	.word	0x200004a8
 8002724:	200003e0 	.word	0x200003e0
 8002728:	0800ee58 	.word	0x0800ee58
		}
		C1 = co2;
 800272c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002738:	edc7 7a9b 	vstr	s15, [r7, #620]	; 0x26c
		y = (2.811 * pow(10,-38)* pow(C1,6) - 9.817 * pow(10,-32) * pow(C1,5) + 1.304 * pow(10,-25) * pow(C1,4) - 8.126 * pow(10,-20)*pow(C1,3) + 2.311 * pow(10,-14) * pow(C1,2)- 2.195 * pow(10,-9) * C1 - 1.471 * pow(10,-3));
 800273c:	f06f 0125 	mvn.w	r1, #37	; 0x25
 8002740:	200a      	movs	r0, #10
 8002742:	f7ff ff5b 	bl	80025fc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002746:	ec51 0b10 	vmov	r0, r1, d0
 800274a:	a3a7      	add	r3, pc, #668	; (adr r3, 80029e8 <HAL_UART_RxCpltCallback+0x3a8>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fd ff52 	bl	80005f8 <__aeabi_dmul>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4614      	mov	r4, r2
 800275a:	461d      	mov	r5, r3
 800275c:	2006      	movs	r0, #6
 800275e:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 8002762:	f000 f95d 	bl	8002a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002766:	ec53 2b10 	vmov	r2, r3, d0
 800276a:	4620      	mov	r0, r4
 800276c:	4629      	mov	r1, r5
 800276e:	f7fd ff43 	bl	80005f8 <__aeabi_dmul>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4614      	mov	r4, r2
 8002778:	461d      	mov	r5, r3
 800277a:	f06f 011f 	mvn.w	r1, #31
 800277e:	200a      	movs	r0, #10
 8002780:	f7ff ff3c 	bl	80025fc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002784:	ec51 0b10 	vmov	r0, r1, d0
 8002788:	a399      	add	r3, pc, #612	; (adr r3, 80029f0 <HAL_UART_RxCpltCallback+0x3b0>)
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f7fd ff33 	bl	80005f8 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4690      	mov	r8, r2
 8002798:	4699      	mov	r9, r3
 800279a:	2005      	movs	r0, #5
 800279c:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 80027a0:	f000 f93e 	bl	8002a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027a4:	ec53 2b10 	vmov	r2, r3, d0
 80027a8:	4640      	mov	r0, r8
 80027aa:	4649      	mov	r1, r9
 80027ac:	f7fd ff24 	bl	80005f8 <__aeabi_dmul>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4620      	mov	r0, r4
 80027b6:	4629      	mov	r1, r5
 80027b8:	f7fd fd66 	bl	8000288 <__aeabi_dsub>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4614      	mov	r4, r2
 80027c2:	461d      	mov	r5, r3
 80027c4:	f06f 0118 	mvn.w	r1, #24
 80027c8:	200a      	movs	r0, #10
 80027ca:	f7ff ff17 	bl	80025fc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027ce:	ec51 0b10 	vmov	r0, r1, d0
 80027d2:	a389      	add	r3, pc, #548	; (adr r3, 80029f8 <HAL_UART_RxCpltCallback+0x3b8>)
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	f7fd ff0e 	bl	80005f8 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4690      	mov	r8, r2
 80027e2:	4699      	mov	r9, r3
 80027e4:	2004      	movs	r0, #4
 80027e6:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 80027ea:	f000 f919 	bl	8002a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027ee:	ec53 2b10 	vmov	r2, r3, d0
 80027f2:	4640      	mov	r0, r8
 80027f4:	4649      	mov	r1, r9
 80027f6:	f7fd feff 	bl	80005f8 <__aeabi_dmul>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4620      	mov	r0, r4
 8002800:	4629      	mov	r1, r5
 8002802:	f7fd fd43 	bl	800028c <__adddf3>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4614      	mov	r4, r2
 800280c:	461d      	mov	r5, r3
 800280e:	f06f 0113 	mvn.w	r1, #19
 8002812:	200a      	movs	r0, #10
 8002814:	f7ff fef2 	bl	80025fc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002818:	ec51 0b10 	vmov	r0, r1, d0
 800281c:	a378      	add	r3, pc, #480	; (adr r3, 8002a00 <HAL_UART_RxCpltCallback+0x3c0>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f7fd fee9 	bl	80005f8 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4690      	mov	r8, r2
 800282c:	4699      	mov	r9, r3
 800282e:	2003      	movs	r0, #3
 8002830:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 8002834:	f000 f8f4 	bl	8002a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002838:	ec53 2b10 	vmov	r2, r3, d0
 800283c:	4640      	mov	r0, r8
 800283e:	4649      	mov	r1, r9
 8002840:	f7fd feda 	bl	80005f8 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4620      	mov	r0, r4
 800284a:	4629      	mov	r1, r5
 800284c:	f7fd fd1c 	bl	8000288 <__aeabi_dsub>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4614      	mov	r4, r2
 8002856:	461d      	mov	r5, r3
 8002858:	f06f 010d 	mvn.w	r1, #13
 800285c:	200a      	movs	r0, #10
 800285e:	f7ff fecd 	bl	80025fc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002862:	ec51 0b10 	vmov	r0, r1, d0
 8002866:	a368      	add	r3, pc, #416	; (adr r3, 8002a08 <HAL_UART_RxCpltCallback+0x3c8>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fec4 	bl	80005f8 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4690      	mov	r8, r2
 8002876:	4699      	mov	r9, r3
 8002878:	2002      	movs	r0, #2
 800287a:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 800287e:	f000 f8cf 	bl	8002a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002882:	ec53 2b10 	vmov	r2, r3, d0
 8002886:	4640      	mov	r0, r8
 8002888:	4649      	mov	r1, r9
 800288a:	f7fd feb5 	bl	80005f8 <__aeabi_dmul>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4620      	mov	r0, r4
 8002894:	4629      	mov	r1, r5
 8002896:	f7fd fcf9 	bl	800028c <__adddf3>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4614      	mov	r4, r2
 80028a0:	461d      	mov	r5, r3
 80028a2:	f06f 0108 	mvn.w	r1, #8
 80028a6:	200a      	movs	r0, #10
 80028a8:	f7ff fea8 	bl	80025fc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028ac:	ec51 0b10 	vmov	r0, r1, d0
 80028b0:	a357      	add	r3, pc, #348	; (adr r3, 8002a10 <HAL_UART_RxCpltCallback+0x3d0>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f7fd fe9f 	bl	80005f8 <__aeabi_dmul>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4690      	mov	r8, r2
 80028c0:	4699      	mov	r9, r3
 80028c2:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 80028c6:	f7fd fe3f 	bl	8000548 <__aeabi_f2d>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4640      	mov	r0, r8
 80028d0:	4649      	mov	r1, r9
 80028d2:	f7fd fe91 	bl	80005f8 <__aeabi_dmul>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4620      	mov	r0, r4
 80028dc:	4629      	mov	r1, r5
 80028de:	f7fd fcd3 	bl	8000288 <__aeabi_dsub>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4614      	mov	r4, r2
 80028e8:	461d      	mov	r5, r3
 80028ea:	f06f 0102 	mvn.w	r1, #2
 80028ee:	200a      	movs	r0, #10
 80028f0:	f7ff fe84 	bl	80025fc <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028f4:	ec51 0b10 	vmov	r0, r1, d0
 80028f8:	a347      	add	r3, pc, #284	; (adr r3, 8002a18 <HAL_UART_RxCpltCallback+0x3d8>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fd fe7b 	bl	80005f8 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4620      	mov	r0, r4
 8002908:	4629      	mov	r1, r5
 800290a:	f7fd fcbd 	bl	8000288 <__aeabi_dsub>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f947 	bl	8000ba8 <__aeabi_d2f>
 800291a:	4603      	mov	r3, r0
 800291c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
		result = C1/(1+y*(1013-(1013+P)));
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <HAL_UART_RxCpltCallback+0x388>)
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80029cc <HAL_UART_RxCpltCallback+0x38c>
 800292a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800292e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80029cc <HAL_UART_RxCpltCallback+0x38c>
 8002932:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002936:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 800293a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002946:	edd7 6a9b 	vldr	s13, [r7, #620]	; 0x26c
 800294a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800294e:	edc7 7a99 	vstr	s15, [r7, #612]	; 0x264
		r=result;
 8002952:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_UART_RxCpltCallback+0x390>)
 8002954:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8002958:	6013      	str	r3, [r2, #0]
//		sprintf(DEBUG_cmd, " %d %d %d\r\n", cnt, bufdata[0],bufdata[1]);
		sprintf(DEBUG_cmd, "%f,%f,%f\r\n ", C1/100,y,result/100);
 800295a:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 800295e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80029d4 <HAL_UART_RxCpltCallback+0x394>
 8002962:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002966:	ee16 0a90 	vmov	r0, s13
 800296a:	f7fd fded 	bl	8000548 <__aeabi_f2d>
 800296e:	4680      	mov	r8, r0
 8002970:	4689      	mov	r9, r1
 8002972:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 8002976:	f7fd fde7 	bl	8000548 <__aeabi_f2d>
 800297a:	4604      	mov	r4, r0
 800297c:	460d      	mov	r5, r1
 800297e:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 8002982:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80029d4 <HAL_UART_RxCpltCallback+0x394>
 8002986:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800298a:	ee16 0a90 	vmov	r0, s13
 800298e:	f7fd fddb 	bl	8000548 <__aeabi_f2d>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800299a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800299e:	e9cd 4500 	strd	r4, r5, [sp]
 80029a2:	4642      	mov	r2, r8
 80029a4:	464b      	mov	r3, r9
 80029a6:	490c      	ldr	r1, [pc, #48]	; (80029d8 <HAL_UART_RxCpltCallback+0x398>)
 80029a8:	f009 ffec 	bl	800c984 <siprintf>
//		CDC_Transmit_FS((uint8_t*)DEBUG_cmd, strlen(DEBUG_cmd));
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
//		for(int i=0;i<cnt;i++){
//			result_bufdata[i] = bufdata[i];
//		}

		cnt = 0;
<<<<<<< HEAD
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_UART_RxCpltCallback+0x310>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
=======
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_UART_RxCpltCallback+0x39c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
	}



	HAL_UART_Receive_IT(&huart3, (uint8_t *)&abufdata, 1);
<<<<<<< HEAD
 8002952:	2201      	movs	r2, #1
 8002954:	490f      	ldr	r1, [pc, #60]	; (8002994 <HAL_UART_RxCpltCallback+0x314>)
 8002956:	4817      	ldr	r0, [pc, #92]	; (80029b4 <HAL_UART_RxCpltCallback+0x334>)
 8002958:	f003 ffef 	bl	800693a <HAL_UART_Receive_IT>
}
 800295c:	bf00      	nop
 800295e:	f507 771e 	add.w	r7, r7, #632	; 0x278
 8002962:	46bd      	mov	sp, r7
 8002964:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002968:	3c9eecc0 	.word	0x3c9eecc0
 800296c:	4005542c 	.word	0x4005542c
 8002970:	cf41f213 	.word	0xcf41f213
 8002974:	3ff1d566 	.word	0x3ff1d566
 8002978:	aacd9e84 	.word	0xaacd9e84
 800297c:	3ffbd5cf 	.word	0x3ffbd5cf
 8002980:	068db8bb 	.word	0x068db8bb
 8002984:	3ff416f0 	.word	0x3ff416f0
 8002988:	6dc5d639 	.word	0x6dc5d639
 800298c:	4023c034 	.word	0x4023c034
 8002990:	200003e4 	.word	0x200003e4
 8002994:	200004b0 	.word	0x200004b0
 8002998:	200003e8 	.word	0x200003e8
 800299c:	41200000 	.word	0x41200000
 80029a0:	0800edb4 	.word	0x0800edb4
 80029a4:	00000000 	.word	0x00000000
 80029a8:	20000000 	.word	0x20000000
 80029ac:	42c80000 	.word	0x42c80000
 80029b0:	0800edbc 	.word	0x0800edbc
 80029b4:	200006dc 	.word	0x200006dc

080029b8 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	ed87 0a01 	vstr	s0, [r7, #4]
 80029c2:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fd fdbf 	bl	8000548 <__aeabi_f2d>
 80029ca:	4604      	mov	r4, r0
 80029cc:	460d      	mov	r5, r1
 80029ce:	6838      	ldr	r0, [r7, #0]
 80029d0:	f7fd fda8 	bl	8000524 <__aeabi_i2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	ec43 2b11 	vmov	d1, r2, r3
 80029dc:	ec45 4b10 	vmov	d0, r4, r5
 80029e0:	f008 fb4a 	bl	800b078 <pow>
 80029e4:	eeb0 7a40 	vmov.f32	s14, s0
 80029e8:	eef0 7a60 	vmov.f32	s15, s1
    }
 80029ec:	eeb0 0a47 	vmov.f32	s0, s14
 80029f0:	eef0 0a67 	vmov.f32	s1, s15
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080029fc <Reset_Handler>:
=======
 80029b2:	2201      	movs	r2, #1
 80029b4:	490a      	ldr	r1, [pc, #40]	; (80029e0 <HAL_UART_RxCpltCallback+0x3a0>)
 80029b6:	480b      	ldr	r0, [pc, #44]	; (80029e4 <HAL_UART_RxCpltCallback+0x3a4>)
 80029b8:	f003 fff3 	bl	80069a2 <HAL_UART_Receive_IT>
}
 80029bc:	bf00      	nop
 80029be:	f507 771e 	add.w	r7, r7, #632	; 0x278
 80029c2:	46bd      	mov	sp, r7
 80029c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029c8:	20000384 	.word	0x20000384
 80029cc:	447d4000 	.word	0x447d4000
 80029d0:	2000076c 	.word	0x2000076c
 80029d4:	42c80000 	.word	0x42c80000
 80029d8:	0800ee60 	.word	0x0800ee60
 80029dc:	200003dc 	.word	0x200003dc
 80029e0:	200004a8 	.word	0x200004a8
 80029e4:	200006d4 	.word	0x200006d4
 80029e8:	916872b0 	.word	0x916872b0
 80029ec:	40067ced 	.word	0x40067ced
 80029f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80029f4:	4023a24d 	.word	0x4023a24d
 80029f8:	1a9fbe77 	.word	0x1a9fbe77
 80029fc:	3ff4dd2f 	.word	0x3ff4dd2f
 8002a00:	126e978d 	.word	0x126e978d
 8002a04:	40204083 	.word	0x40204083
 8002a08:	916872b0 	.word	0x916872b0
 8002a0c:	40027ced 	.word	0x40027ced
 8002a10:	28f5c28f 	.word	0x28f5c28f
 8002a14:	40018f5c 	.word	0x40018f5c
 8002a18:	4bc6a7f0 	.word	0x4bc6a7f0
 8002a1c:	3ff78937 	.word	0x3ff78937

08002a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8002a20:	b5b0      	push	{r4, r5, r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a2a:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7fd fd8b 	bl	8000548 <__aeabi_f2d>
 8002a32:	4604      	mov	r4, r0
 8002a34:	460d      	mov	r5, r1
 8002a36:	6838      	ldr	r0, [r7, #0]
 8002a38:	f7fd fd74 	bl	8000524 <__aeabi_i2d>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	ec43 2b11 	vmov	d1, r2, r3
 8002a44:	ec45 4b10 	vmov	d0, r4, r5
 8002a48:	f008 fb4a 	bl	800b0e0 <pow>
 8002a4c:	eeb0 7a40 	vmov.f32	s14, s0
 8002a50:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002a54:	eeb0 0a47 	vmov.f32	s0, s14
 8002a58:	eef0 0a67 	vmov.f32	s1, s15
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002a64 <Reset_Handler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
 80029fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a02:	490e      	ldr	r1, [pc, #56]	; (8002a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a18:	4c0b      	ldr	r4, [pc, #44]	; (8002a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a26:	f7ff fdc9 	bl	80025bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f009 fae1 	bl	800bff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a2e:	f7fe fa87 	bl	8000f40 <main>
  bx  lr    
 8002a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a3c:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8002a40:	0800f24c 	.word	0x0800f24c
  ldr r2, =_sbss
 8002a44:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8002a48:	2000225c 	.word	0x2000225c

08002a4c <ADC_IRQHandler>:
=======
 8002a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a68:	480d      	ldr	r0, [pc, #52]	; (8002aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a6a:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a6c:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a70:	e002      	b.n	8002a78 <LoopCopyDataInit>

08002a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a76:	3304      	adds	r3, #4

08002a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a7c:	d3f9      	bcc.n	8002a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a80:	4c0b      	ldr	r4, [pc, #44]	; (8002ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a84:	e001      	b.n	8002a8a <LoopFillZerobss>

08002a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a88:	3204      	adds	r2, #4

08002a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a8c:	d3fb      	bcc.n	8002a86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a8e:	f7ff fd77 	bl	8002580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a92:	f009 fae1 	bl	800c058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a96:	f7fe fa53 	bl	8000f40 <main>
  bx  lr    
 8002a9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa4:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8002aa8:	0800f2f4 	.word	0x0800f2f4
  ldr r2, =_sbss
 8002aac:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8002ab0:	20002258 	.word	0x20002258

08002ab4 <ADC_IRQHandler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8002a4c:	e7fe      	b.n	8002a4c <ADC_IRQHandler>
	...

08002a50 <HAL_Init>:
=======
 8002ab4:	e7fe      	b.n	8002ab4 <ADC_IRQHandler>
	...

08002ab8 <HAL_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <HAL_Init+0x40>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5e:	6013      	str	r3, [r2, #0]
=======
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <HAL_Init+0x40>)
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac6:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_Init+0x40>)
 8002a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6a:	6013      	str	r3, [r2, #0]
=======
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_Init+0x40>)
 8002ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad2:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_Init+0x40>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	6013      	str	r3, [r2, #0]
=======
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <HAL_Init+0x40>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f000 f94f 	bl	8002d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7e:	200f      	movs	r0, #15
 8002a80:	f000 f808 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a84:	f7ff f9d6 	bl	8001e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00

08002a94 <HAL_InitTick>:
=======
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f000 f94f 	bl	8002d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae6:	200f      	movs	r0, #15
 8002ae8:	f000 f808 	bl	8002afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aec:	f7ff f984 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00

08002afc <HAL_InitTick>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_InitTick+0x54>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_InitTick+0x58>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f967 	bl	8002d86 <HAL_SYSTICK_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00e      	b.n	8002ae0 <HAL_InitTick+0x4c>
=======
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_InitTick+0x54>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_InitTick+0x58>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f967 	bl	8002dee <HAL_SYSTICK_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00e      	b.n	8002b48 <HAL_InitTick+0x4c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d80a      	bhi.n	8002ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f000 f92f 	bl	8002d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad4:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <HAL_InitTick+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
=======
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d80a      	bhi.n	8002b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b30:	2200      	movs	r2, #0
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	f000 f92f 	bl	8002d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b3c:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <HAL_InitTick+0x5c>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000010 	.word	0x20000010
 8002aec:	2000001c 	.word	0x2000001c
 8002af0:	20000018 	.word	0x20000018

08002af4 <HAL_IncTick>:
=======
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	2000000c 	.word	0x2000000c
 8002b54:	20000018 	.word	0x20000018
 8002b58:	20000014 	.word	0x20000014

08002b5c <HAL_IncTick>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_IncTick+0x20>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_IncTick+0x24>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_IncTick+0x24>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	2000001c 	.word	0x2000001c
 8002b18:	20000970 	.word	0x20000970

08002b1c <HAL_GetTick>:
=======
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_IncTick+0x20>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_IncTick+0x24>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_IncTick+0x24>)
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000018 	.word	0x20000018
 8002b80:	2000096c 	.word	0x2000096c

08002b84 <HAL_GetTick>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_GetTick+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000970 	.word	0x20000970

08002b34 <HAL_Delay>:
=======
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return uwTick;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_GetTick+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	2000096c 	.word	0x2000096c

08002b9c <HAL_Delay>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff ffee 	bl	8002b1c <HAL_GetTick>
 8002b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d005      	beq.n	8002b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_Delay+0x44>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b5a:	bf00      	nop
 8002b5c:	f7ff ffde 	bl	8002b1c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d8f7      	bhi.n	8002b5c <HAL_Delay+0x28>
  {
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000001c 	.word	0x2000001c

08002b7c <__NVIC_SetPriorityGrouping>:
=======
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7ff ffee 	bl	8002b84 <HAL_GetTick>
 8002ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d005      	beq.n	8002bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_Delay+0x44>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bc2:	bf00      	nop
 8002bc4:	f7ff ffde 	bl	8002b84 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d8f7      	bhi.n	8002bc4 <HAL_Delay+0x28>
  {
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000018 	.word	0x20000018

08002be4 <__NVIC_SetPriorityGrouping>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bae:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	60d3      	str	r3, [r2, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_GetPriorityGrouping>:
=======
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c16:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_GetPriorityGrouping>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
=======
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <__NVIC_GetPriorityGrouping+0x18>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0307 	and.w	r3, r3, #7
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_EnableIRQ>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4907      	ldr	r1, [pc, #28]	; (8002c18 <__NVIC_EnableIRQ+0x38>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
=======
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db0b      	blt.n	8002c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4907      	ldr	r1, [pc, #28]	; (8002c80 <__NVIC_EnableIRQ+0x38>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <__NVIC_SetPriority>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	; (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	db0a      	blt.n	8002cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	490c      	ldr	r1, [pc, #48]	; (8002cd0 <__NVIC_SetPriority+0x4c>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	0112      	lsls	r2, r2, #4
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
=======
 8002cac:	e00a      	b.n	8002cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4908      	ldr	r1, [pc, #32]	; (8002cd4 <__NVIC_SetPriority+0x50>)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3b04      	subs	r3, #4
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	761a      	strb	r2, [r3, #24]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000e100 	.word	0xe000e100
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <NVIC_EncodePriority>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
=======
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	61fb      	str	r3, [r7, #28]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <SysTick_Config>:
=======
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f1c3 0307 	rsb	r3, r3, #7
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	bf28      	it	cs
 8002cf6:	2304      	movcs	r3, #4
 8002cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d902      	bls.n	8002d08 <NVIC_EncodePriority+0x30>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3b03      	subs	r3, #3
 8002d06:	e000      	b.n	8002d0a <NVIC_EncodePriority+0x32>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43d9      	mvns	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	4313      	orrs	r3, r2
         );
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3724      	adds	r7, #36	; 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <SysTick_Config>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce8:	d301      	bcc.n	8002cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00f      	b.n	8002d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <SysTick_Config+0x40>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf6:	210f      	movs	r1, #15
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f7ff ff8e 	bl	8002c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <SysTick_Config+0x40>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <SysTick_Config+0x40>)
 8002d08:	2207      	movs	r2, #7
 8002d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	e000e010 	.word	0xe000e010

08002d1c <HAL_NVIC_SetPriorityGrouping>:
=======
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d50:	d301      	bcc.n	8002d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00f      	b.n	8002d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <SysTick_Config+0x40>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5e:	210f      	movs	r1, #15
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f7ff ff8e 	bl	8002c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <SysTick_Config+0x40>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6e:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <SysTick_Config+0x40>)
 8002d70:	2207      	movs	r2, #7
 8002d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	e000e010 	.word	0xe000e010

08002d84 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
=======
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ff29 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_SetPriority>:
=======
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff29 	bl	8002be4 <__NVIC_SetPriorityGrouping>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_SetPriority>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
=======
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002d44:	f7ff ff3e 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f7ff ff8e 	bl	8002c70 <NVIC_EncodePriority>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff5d 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_EnableIRQ>:
=======
 8002dac:	f7ff ff3e 	bl	8002c2c <__NVIC_GetPriorityGrouping>
 8002db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f7ff ff8e 	bl	8002cd8 <NVIC_EncodePriority>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff5d 	bl	8002c84 <__NVIC_SetPriority>
}
 8002dca:	bf00      	nop
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_EnableIRQ>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	71fb      	strb	r3, [r7, #7]
=======
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	71fb      	strb	r3, [r7, #7]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff31 	bl	8002be0 <__NVIC_EnableIRQ>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_SYSTICK_Config>:
=======
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff31 	bl	8002c48 <__NVIC_EnableIRQ>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_SYSTICK_Config>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ffa2 	bl	8002cd8 <SysTick_Config>
 8002d94:	4603      	mov	r3, r0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_DMA_Abort>:
=======
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ffa2 	bl	8002d40 <SysTick_Config>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_DMA_Abort>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff feb6 	bl	8002b1c <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d008      	beq.n	8002dd0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e052      	b.n	8002e76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0216 	bic.w	r2, r2, #22
 8002dde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <HAL_DMA_Abort+0x62>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0208 	bic.w	r2, r2, #8
 8002e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e20:	e013      	b.n	8002e4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e22:	f7ff fe7b 	bl	8002b1c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d90c      	bls.n	8002e4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e015      	b.n	8002e76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e4      	bne.n	8002e22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	223f      	movs	r2, #63	; 0x3f
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_DMA_Abort_IT>:
=======
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff feb6 	bl	8002b84 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d008      	beq.n	8002e38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e052      	b.n	8002ede <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0216 	bic.w	r2, r2, #22
 8002e46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_DMA_Abort+0x62>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0208 	bic.w	r2, r2, #8
 8002e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e88:	e013      	b.n	8002eb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8a:	f7ff fe7b 	bl	8002b84 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d90c      	bls.n	8002eb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e015      	b.n	8002ede <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e4      	bne.n	8002e8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	223f      	movs	r2, #63	; 0x3f
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_DMA_Abort_IT>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d004      	beq.n	8002e9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e00c      	b.n	8002eb6 <HAL_DMA_Abort_IT+0x38>
=======
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e00c      	b.n	8002f1e <HAL_DMA_Abort_IT+0x38>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2205      	movs	r2, #5
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_GPIO_Init>:
=======
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2205      	movs	r2, #5
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_GPIO_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
=======
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e16b      	b.n	80031b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f040 815a 	bne.w	80031b2 <HAL_GPIO_Init+0x2ee>
=======
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e16b      	b.n	8003220 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	f040 815a 	bne.w	800321a <HAL_GPIO_Init+0x2ee>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d005      	beq.n	8002f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d130      	bne.n	8002f78 <HAL_GPIO_Init+0xb4>
=======
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d130      	bne.n	8002fe0 <HAL_GPIO_Init+0xb4>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	2203      	movs	r2, #3
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 0201 	and.w	r2, r3, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d017      	beq.n	8002fb4 <HAL_GPIO_Init+0xf0>
=======
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0201 	and.w	r2, r3, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d017      	beq.n	800301c <HAL_GPIO_Init+0xf0>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	60da      	str	r2, [r3, #12]
=======
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	60da      	str	r2, [r3, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d123      	bne.n	8003008 <HAL_GPIO_Init+0x144>
=======
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d123      	bne.n	8003070 <HAL_GPIO_Init+0x144>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3208      	adds	r2, #8
 8002fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	08da      	lsrs	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3208      	adds	r2, #8
 8003030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	69b9      	ldr	r1, [r7, #24]
 800306c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	601a      	str	r2, [r3, #0]
=======
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0203 	and.w	r2, r3, #3
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80b4 	beq.w	80031b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <HAL_GPIO_Init+0x30c>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	4a5f      	ldr	r2, [pc, #380]	; (80031d0 <HAL_GPIO_Init+0x30c>)
 8003054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003058:	6453      	str	r3, [r2, #68]	; 0x44
 800305a:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_GPIO_Init+0x30c>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003066:	4a5b      	ldr	r2, [pc, #364]	; (80031d4 <HAL_GPIO_Init+0x310>)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_GPIO_Init+0x314>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d02b      	beq.n	80030ea <HAL_GPIO_Init+0x226>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a51      	ldr	r2, [pc, #324]	; (80031dc <HAL_GPIO_Init+0x318>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d025      	beq.n	80030e6 <HAL_GPIO_Init+0x222>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a50      	ldr	r2, [pc, #320]	; (80031e0 <HAL_GPIO_Init+0x31c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01f      	beq.n	80030e2 <HAL_GPIO_Init+0x21e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4f      	ldr	r2, [pc, #316]	; (80031e4 <HAL_GPIO_Init+0x320>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d019      	beq.n	80030de <HAL_GPIO_Init+0x21a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a4e      	ldr	r2, [pc, #312]	; (80031e8 <HAL_GPIO_Init+0x324>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0x216>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a4d      	ldr	r2, [pc, #308]	; (80031ec <HAL_GPIO_Init+0x328>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <HAL_GPIO_Init+0x212>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4c      	ldr	r2, [pc, #304]	; (80031f0 <HAL_GPIO_Init+0x32c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x20e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <HAL_GPIO_Init+0x330>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_GPIO_Init+0x20a>
 80030ca:	2307      	movs	r3, #7
 80030cc:	e00e      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030ce:	2308      	movs	r3, #8
 80030d0:	e00c      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030d2:	2306      	movs	r3, #6
 80030d4:	e00a      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030d6:	2305      	movs	r3, #5
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030da:	2304      	movs	r3, #4
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x228>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	; (80031d4 <HAL_GPIO_Init+0x310>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310a:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <HAL_GPIO_Init+0x334>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800312e:	4a32      	ldr	r2, [pc, #200]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003134:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003158:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <HAL_GPIO_Init+0x334>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003182:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_GPIO_Init+0x334>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_GPIO_Init+0x334>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ac:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <HAL_GPIO_Init+0x334>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f ae90 	bls.w	8002ee0 <HAL_GPIO_Init+0x1c>
=======
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80b4 	beq.w	800321a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b60      	ldr	r3, [pc, #384]	; (8003238 <HAL_GPIO_Init+0x30c>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4a5f      	ldr	r2, [pc, #380]	; (8003238 <HAL_GPIO_Init+0x30c>)
 80030bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	4b5d      	ldr	r3, [pc, #372]	; (8003238 <HAL_GPIO_Init+0x30c>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ce:	4a5b      	ldr	r2, [pc, #364]	; (800323c <HAL_GPIO_Init+0x310>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_GPIO_Init+0x314>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d02b      	beq.n	8003152 <HAL_GPIO_Init+0x226>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a51      	ldr	r2, [pc, #324]	; (8003244 <HAL_GPIO_Init+0x318>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d025      	beq.n	800314e <HAL_GPIO_Init+0x222>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a50      	ldr	r2, [pc, #320]	; (8003248 <HAL_GPIO_Init+0x31c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01f      	beq.n	800314a <HAL_GPIO_Init+0x21e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4f      	ldr	r2, [pc, #316]	; (800324c <HAL_GPIO_Init+0x320>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d019      	beq.n	8003146 <HAL_GPIO_Init+0x21a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4e      	ldr	r2, [pc, #312]	; (8003250 <HAL_GPIO_Init+0x324>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_GPIO_Init+0x216>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4d      	ldr	r2, [pc, #308]	; (8003254 <HAL_GPIO_Init+0x328>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00d      	beq.n	800313e <HAL_GPIO_Init+0x212>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4c      	ldr	r2, [pc, #304]	; (8003258 <HAL_GPIO_Init+0x32c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <HAL_GPIO_Init+0x20e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4b      	ldr	r2, [pc, #300]	; (800325c <HAL_GPIO_Init+0x330>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_GPIO_Init+0x20a>
 8003132:	2307      	movs	r3, #7
 8003134:	e00e      	b.n	8003154 <HAL_GPIO_Init+0x228>
 8003136:	2308      	movs	r3, #8
 8003138:	e00c      	b.n	8003154 <HAL_GPIO_Init+0x228>
 800313a:	2306      	movs	r3, #6
 800313c:	e00a      	b.n	8003154 <HAL_GPIO_Init+0x228>
 800313e:	2305      	movs	r3, #5
 8003140:	e008      	b.n	8003154 <HAL_GPIO_Init+0x228>
 8003142:	2304      	movs	r3, #4
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x228>
 8003146:	2303      	movs	r3, #3
 8003148:	e004      	b.n	8003154 <HAL_GPIO_Init+0x228>
 800314a:	2302      	movs	r3, #2
 800314c:	e002      	b.n	8003154 <HAL_GPIO_Init+0x228>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_GPIO_Init+0x228>
 8003152:	2300      	movs	r3, #0
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f002 0203 	and.w	r2, r2, #3
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	4093      	lsls	r3, r2
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003164:	4935      	ldr	r1, [pc, #212]	; (800323c <HAL_GPIO_Init+0x310>)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003172:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <HAL_GPIO_Init+0x334>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003196:	4a32      	ldr	r2, [pc, #200]	; (8003260 <HAL_GPIO_Init+0x334>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800319c:	4b30      	ldr	r3, [pc, #192]	; (8003260 <HAL_GPIO_Init+0x334>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c0:	4a27      	ldr	r2, [pc, #156]	; (8003260 <HAL_GPIO_Init+0x334>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c6:	4b26      	ldr	r3, [pc, #152]	; (8003260 <HAL_GPIO_Init+0x334>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ea:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_GPIO_Init+0x334>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_GPIO_Init+0x334>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003214:	4a12      	ldr	r2, [pc, #72]	; (8003260 <HAL_GPIO_Init+0x334>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	f67f ae90 	bls.w	8002f48 <HAL_GPIO_Init+0x1c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
  }
}
<<<<<<< HEAD
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40021400 	.word	0x40021400
 80031f0:	40021800 	.word	0x40021800
 80031f4:	40021c00 	.word	0x40021c00
 80031f8:	40013c00 	.word	0x40013c00

080031fc <HAL_GPIO_WritePin>:
=======
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40013800 	.word	0x40013800
 8003240:	40020000 	.word	0x40020000
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	40020c00 	.word	0x40020c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40021400 	.word	0x40021400
 8003258:	40021800 	.word	0x40021800
 800325c:	40021c00 	.word	0x40021c00
 8003260:	40013c00 	.word	0x40013c00

08003264 <HAL_GPIO_WritePin>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
 8003208:	4613      	mov	r3, r2
 800320a:	707b      	strb	r3, [r7, #1]
=======
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
=======
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8003218:	e003      	b.n	8003222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	041a      	lsls	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	619a      	str	r2, [r3, #24]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_I2C_Init>:
=======
 8003280:	e003      	b.n	800328a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	619a      	str	r2, [r3, #24]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_I2C_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
=======
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e12b      	b.n	800349a <HAL_I2C_Init+0x26a>
=======
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e12b      	b.n	8003502 <HAL_I2C_Init+0x26a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe fe14 	bl	8001e84 <HAL_I2C_MspInit>
=======
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fdc2 	bl	8001e48 <HAL_I2C_MspInit>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003294:	f002 fae0 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8003298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a81      	ldr	r2, [pc, #516]	; (80034a4 <HAL_I2C_Init+0x274>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d807      	bhi.n	80032b4 <HAL_I2C_Init+0x84>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a80      	ldr	r2, [pc, #512]	; (80034a8 <HAL_I2C_Init+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bf94      	ite	ls
 80032ac:	2301      	movls	r3, #1
 80032ae:	2300      	movhi	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e006      	b.n	80032c2 <HAL_I2C_Init+0x92>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a7d      	ldr	r2, [pc, #500]	; (80034ac <HAL_I2C_Init+0x27c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0e7      	b.n	800349a <HAL_I2C_Init+0x26a>
=======
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	; 0x24
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032fc:	f002 fae0 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8003300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4a81      	ldr	r2, [pc, #516]	; (800350c <HAL_I2C_Init+0x274>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d807      	bhi.n	800331c <HAL_I2C_Init+0x84>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a80      	ldr	r2, [pc, #512]	; (8003510 <HAL_I2C_Init+0x278>)
 8003310:	4293      	cmp	r3, r2
 8003312:	bf94      	ite	ls
 8003314:	2301      	movls	r3, #1
 8003316:	2300      	movhi	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e006      	b.n	800332a <HAL_I2C_Init+0x92>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a7d      	ldr	r2, [pc, #500]	; (8003514 <HAL_I2C_Init+0x27c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	bf94      	ite	ls
 8003324:	2301      	movls	r3, #1
 8003326:	2300      	movhi	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0e7      	b.n	8003502 <HAL_I2C_Init+0x26a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a78      	ldr	r2, [pc, #480]	; (80034b0 <HAL_I2C_Init+0x280>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9b      	lsrs	r3, r3, #18
 80032d4:	60bb      	str	r3, [r7, #8]
=======
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a78      	ldr	r2, [pc, #480]	; (8003518 <HAL_I2C_Init+0x280>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	0c9b      	lsrs	r3, r3, #18
 800333c:	60bb      	str	r3, [r7, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
=======
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a6a      	ldr	r2, [pc, #424]	; (80034a4 <HAL_I2C_Init+0x274>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d802      	bhi.n	8003304 <HAL_I2C_Init+0xd4>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3301      	adds	r3, #1
 8003302:	e009      	b.n	8003318 <HAL_I2C_Init+0xe8>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	4a69      	ldr	r2, [pc, #420]	; (80034b4 <HAL_I2C_Init+0x284>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	3301      	adds	r3, #1
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6213      	str	r3, [r2, #32]
=======
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a6a      	ldr	r2, [pc, #424]	; (800350c <HAL_I2C_Init+0x274>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d802      	bhi.n	800336c <HAL_I2C_Init+0xd4>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3301      	adds	r3, #1
 800336a:	e009      	b.n	8003380 <HAL_I2C_Init+0xe8>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	4a69      	ldr	r2, [pc, #420]	; (800351c <HAL_I2C_Init+0x284>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	3301      	adds	r3, #1
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	430b      	orrs	r3, r1
 8003386:	6213      	str	r3, [r2, #32]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800332a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	495c      	ldr	r1, [pc, #368]	; (80034a4 <HAL_I2C_Init+0x274>)
 8003334:	428b      	cmp	r3, r1
 8003336:	d819      	bhi.n	800336c <HAL_I2C_Init+0x13c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e59      	subs	r1, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fbb1 f3f3 	udiv	r3, r1, r3
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800334c:	400b      	ands	r3, r1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_I2C_Init+0x138>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e59      	subs	r1, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	e051      	b.n	800340c <HAL_I2C_Init+0x1dc>
 8003368:	2304      	movs	r3, #4
 800336a:	e04f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <HAL_I2C_Init+0x168>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e012      	b.n	80033be <HAL_I2C_Init+0x18e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x196>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_I2C_Init+0x1bc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e58      	subs	r0, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	440b      	add	r3, r1
 80033dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ea:	e00f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	0099      	lsls	r1, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6809      	ldr	r1, [r1, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]
=======
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003392:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	495c      	ldr	r1, [pc, #368]	; (800350c <HAL_I2C_Init+0x274>)
 800339c:	428b      	cmp	r3, r1
 800339e:	d819      	bhi.n	80033d4 <HAL_I2C_Init+0x13c>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1e59      	subs	r1, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ae:	1c59      	adds	r1, r3, #1
 80033b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b4:	400b      	ands	r3, r1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_I2C_Init+0x138>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1e59      	subs	r1, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ce:	e051      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 80033d0:	2304      	movs	r3, #4
 80033d2:	e04f      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d111      	bne.n	8003400 <HAL_I2C_Init+0x168>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e58      	subs	r0, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	440b      	add	r3, r1
 80033ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ee:	3301      	adds	r3, #1
 80033f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e012      	b.n	8003426 <HAL_I2C_Init+0x18e>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e58      	subs	r0, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	0099      	lsls	r1, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	fbb0 f3f3 	udiv	r3, r0, r3
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Init+0x196>
 800342a:	2301      	movs	r3, #1
 800342c:	e022      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10e      	bne.n	8003454 <HAL_I2C_Init+0x1bc>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1e58      	subs	r0, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	440b      	add	r3, r1
 8003444:	fbb0 f3f3 	udiv	r3, r0, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003452:	e00f      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e58      	subs	r0, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	0099      	lsls	r1, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	fbb0 f3f3 	udiv	r3, r0, r3
 800346a:	3301      	adds	r3, #1
 800346c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	6809      	ldr	r1, [r1, #0]
 8003478:	4313      	orrs	r3, r2
 800347a:	61cb      	str	r3, [r1, #28]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
=======
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800343a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6911      	ldr	r1, [r2, #16]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	430b      	orrs	r3, r1
 800344e:	6093      	str	r3, [r2, #8]
=======
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6911      	ldr	r1, [r2, #16]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68d2      	ldr	r2, [r2, #12]
 80034ae:	4311      	orrs	r1, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6093      	str	r3, [r2, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	000186a0 	.word	0x000186a0
 80034a8:	001e847f 	.word	0x001e847f
 80034ac:	003d08ff 	.word	0x003d08ff
 80034b0:	431bde83 	.word	0x431bde83
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <HAL_I2C_Master_Receive>:
=======
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	000186a0 	.word	0x000186a0
 8003510:	001e847f 	.word	0x001e847f
 8003514:	003d08ff 	.word	0x003d08ff
 8003518:	431bde83 	.word	0x431bde83
 800351c:	10624dd3 	.word	0x10624dd3

08003520 <HAL_I2C_Master_Receive>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	461a      	mov	r2, r3
 80034c4:	460b      	mov	r3, r1
 80034c6:	817b      	strh	r3, [r7, #10]
 80034c8:	4613      	mov	r3, r2
 80034ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034cc:	f7ff fb26 	bl	8002b1c <HAL_GetTick>
 80034d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f040 820b 	bne.w	80038f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2319      	movs	r3, #25
 80034e6:	2201      	movs	r2, #1
 80034e8:	497c      	ldr	r1, [pc, #496]	; (80036dc <HAL_I2C_Master_Receive+0x224>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fad8 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	e1fe      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
=======
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	; 0x30
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	460b      	mov	r3, r1
 800352e:	817b      	strh	r3, [r7, #10]
 8003530:	4613      	mov	r3, r2
 8003532:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003534:	f7ff fb26 	bl	8002b84 <HAL_GetTick>
 8003538:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b20      	cmp	r3, #32
 8003544:	f040 820b 	bne.w	800395e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2319      	movs	r3, #25
 800354e:	2201      	movs	r2, #1
 8003550:	497c      	ldr	r1, [pc, #496]	; (8003744 <HAL_I2C_Master_Receive+0x224>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fad8 	bl	8003b08 <I2C_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
 8003560:	e1fe      	b.n	8003960 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_I2C_Master_Receive+0x50>
 8003504:	2302      	movs	r3, #2
 8003506:	e1f7      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d007      	beq.n	800352e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
=======
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_I2C_Master_Receive+0x50>
 800356c:	2302      	movs	r3, #2
 800356e:	e1f7      	b.n	8003960 <HAL_I2C_Master_Receive+0x440>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d007      	beq.n	8003596 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2222      	movs	r2, #34	; 0x22
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2210      	movs	r2, #16
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	893a      	ldrh	r2, [r7, #8]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a5c      	ldr	r2, [pc, #368]	; (80036e0 <HAL_I2C_Master_Receive+0x228>)
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003570:	8979      	ldrh	r1, [r7, #10]
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f9c4 	bl	8003904 <I2C_MasterRequestRead>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e1b8      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d113      	bne.n	80035b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	623b      	str	r3, [r7, #32]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e18c      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d11b      	bne.n	80035f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e16c      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d11b      	bne.n	8003636 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	e14c      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
=======
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2222      	movs	r2, #34	; 0x22
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2210      	movs	r2, #16
 80035b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	893a      	ldrh	r2, [r7, #8]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4a5c      	ldr	r2, [pc, #368]	; (8003748 <HAL_I2C_Master_Receive+0x228>)
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035d8:	8979      	ldrh	r1, [r7, #10]
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f9c4 	bl	800396c <I2C_MasterRequestRead>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e1b8      	b.n	8003960 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d113      	bne.n	800361e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	623b      	str	r3, [r7, #32]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	623b      	str	r3, [r7, #32]
 800360a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e18c      	b.n	8003938 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	2b01      	cmp	r3, #1
 8003624:	d11b      	bne.n	800365e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003634:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e16c      	b.n	8003938 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	2b02      	cmp	r3, #2
 8003664:	d11b      	bne.n	800369e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003674:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	e14c      	b.n	8003938 <HAL_I2C_Master_Receive+0x418>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800365c:	e138      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	2b03      	cmp	r3, #3
 8003664:	f200 80f1 	bhi.w	800384a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	2b01      	cmp	r3, #1
 800366e:	d123      	bne.n	80036b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fae9 	bl	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e139      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
=======
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036c4:	e138      	b.n	8003938 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	f200 80f1 	bhi.w	80038b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d123      	bne.n	8003720 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fae9 	bl	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e139      	b.n	8003960 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036b6:	e10b      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d14e      	bne.n	800375e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	2200      	movs	r2, #0
 80036c8:	4906      	ldr	r1, [pc, #24]	; (80036e4 <HAL_I2C_Master_Receive+0x22c>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f9e8 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e10e      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
 80036da:	bf00      	nop
 80036dc:	00100002 	.word	0x00100002
 80036e0:	ffff0000 	.word	0xffff0000
 80036e4:	00010004 	.word	0x00010004
=======
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800371e:	e10b      	b.n	8003938 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	2b02      	cmp	r3, #2
 8003726:	d14e      	bne.n	80037c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	2200      	movs	r2, #0
 8003730:	4906      	ldr	r1, [pc, #24]	; (800374c <HAL_I2C_Master_Receive+0x22c>)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f9e8 	bl	8003b08 <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e10e      	b.n	8003960 <HAL_I2C_Master_Receive+0x440>
 8003742:	bf00      	nop
 8003744:	00100002 	.word	0x00100002
 8003748:	ffff0000 	.word	0xffff0000
 800374c:	00010004 	.word	0x00010004
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800375c:	e0b8      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
=======
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037c4:	e0b8      	b.n	8003938 <HAL_I2C_Master_Receive+0x418>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	2200      	movs	r2, #0
 8003766:	4966      	ldr	r1, [pc, #408]	; (8003900 <HAL_I2C_Master_Receive+0x448>)
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f999 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0bf      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
=======
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	2200      	movs	r2, #0
 80037ce:	4966      	ldr	r1, [pc, #408]	; (8003968 <HAL_I2C_Master_Receive+0x448>)
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f999 	bl	8003b08 <I2C_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0bf      	b.n	8003960 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	2200      	movs	r2, #0
 80037c2:	494f      	ldr	r1, [pc, #316]	; (8003900 <HAL_I2C_Master_Receive+0x448>)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f96b 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e091      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
=======
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	2200      	movs	r2, #0
 800382a:	494f      	ldr	r1, [pc, #316]	; (8003968 <HAL_I2C_Master_Receive+0x448>)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f96b 	bl	8003b08 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e091      	b.n	8003960 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003848:	e042      	b.n	80038d0 <HAL_I2C_Master_Receive+0x418>
=======
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038b0:	e042      	b.n	8003938 <HAL_I2C_Master_Receive+0x418>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f9fc 	bl	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e04c      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
=======
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f9fc 	bl	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e04c      	b.n	8003960 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b04      	cmp	r3, #4
 800389c:	d118      	bne.n	80038d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f47f aec2 	bne.w	800365e <HAL_I2C_Master_Receive+0x1a6>
=======
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d118      	bne.n	8003938 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	f47f aec2 	bne.w	80036c6 <HAL_I2C_Master_Receive+0x1a6>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <HAL_I2C_Master_Receive+0x440>
=======
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3728      	adds	r7, #40	; 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	00010004 	.word	0x00010004

08003904 <I2C_MasterRequestRead>:
=======
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3728      	adds	r7, #40	; 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	00010004 	.word	0x00010004

0800396c <I2C_MasterRequestRead>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	460b      	mov	r3, r1
 8003912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003928:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d006      	beq.n	800393e <I2C_MasterRequestRead+0x3a>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d003      	beq.n	800393e <I2C_MasterRequestRead+0x3a>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800393c:	d108      	bne.n	8003950 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e00b      	b.n	8003968 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	2b11      	cmp	r3, #17
 8003956:	d107      	bne.n	8003968 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003966:	601a      	str	r2, [r3, #0]
=======
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	460b      	mov	r3, r1
 800397a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003990:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d006      	beq.n	80039a6 <I2C_MasterRequestRead+0x3a>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d003      	beq.n	80039a6 <I2C_MasterRequestRead+0x3a>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e00b      	b.n	80039d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	2b11      	cmp	r3, #17
 80039be:	d107      	bne.n	80039d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ce:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f893 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	d103      	bne.n	8003998 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e079      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	e05f      	b.n	8003a78 <I2C_MasterRequestRead+0x174>
=======
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f893 	bl	8003b08 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f6:	d103      	bne.n	8003a00 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e079      	b.n	8003af8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0c:	d108      	bne.n	8003a20 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]
 8003a1e:	e05f      	b.n	8003ae0 <I2C_MasterRequestRead+0x174>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	11db      	asrs	r3, r3, #7
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0306 	and.w	r3, r3, #6
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f063 030f 	orn	r3, r3, #15
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4930      	ldr	r1, [pc, #192]	; (8003a98 <I2C_MasterRequestRead+0x194>)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f8b9 	bl	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e054      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
=======
 8003a20:	897b      	ldrh	r3, [r7, #10]
 8003a22:	11db      	asrs	r3, r3, #7
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0306 	and.w	r3, r3, #6
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f063 030f 	orn	r3, r3, #15
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4930      	ldr	r1, [pc, #192]	; (8003b00 <I2C_MasterRequestRead+0x194>)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f8b9 	bl	8003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e054      	b.n	8003af8 <I2C_MasterRequestRead+0x18c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4929      	ldr	r1, [pc, #164]	; (8003a9c <I2C_MasterRequestRead+0x198>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f8a9 	bl	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e044      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
=======
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4929      	ldr	r1, [pc, #164]	; (8003b04 <I2C_MasterRequestRead+0x198>)
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f8a9 	bl	8003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e044      	b.n	8003af8 <I2C_MasterRequestRead+0x18c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f831 	bl	8003aa0 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a52:	d103      	bne.n	8003a5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e017      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
=======
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f831 	bl	8003b08 <I2C_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aba:	d103      	bne.n	8003ac4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e017      	b.n	8003af8 <I2C_MasterRequestRead+0x18c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
<<<<<<< HEAD
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	11db      	asrs	r3, r3, #7
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0306 	and.w	r3, r3, #6
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f063 030e 	orn	r3, r3, #14
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]
=======
 8003ac8:	897b      	ldrh	r3, [r7, #10]
 8003aca:	11db      	asrs	r3, r3, #7
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f003 0306 	and.w	r3, r3, #6
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f063 030e 	orn	r3, r3, #14
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4907      	ldr	r1, [pc, #28]	; (8003a9c <I2C_MasterRequestRead+0x198>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f865 	bl	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	00010008 	.word	0x00010008
 8003a9c:	00010002 	.word	0x00010002

08003aa0 <I2C_WaitOnFlagUntilTimeout>:
=======
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4907      	ldr	r1, [pc, #28]	; (8003b04 <I2C_MasterRequestRead+0x198>)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f865 	bl	8003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	00010008 	.word	0x00010008
 8003b04:	00010002 	.word	0x00010002

08003b08 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab0:	e025      	b.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d021      	beq.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7ff f82f 	bl	8002b1c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d116      	bne.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e023      	b.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d10d      	bne.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	e00c      	b.n	8003b3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d0b6      	beq.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b18:	e025      	b.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d021      	beq.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b22:	f7ff f82f 	bl	8002b84 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d302      	bcc.n	8003b38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d116      	bne.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0220 	orr.w	r2, r3, #32
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e023      	b.n	8003bae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10d      	bne.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	43da      	mvns	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bf0c      	ite	eq
 8003b82:	2301      	moveq	r3, #1
 8003b84:	2300      	movne	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	e00c      	b.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	43da      	mvns	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d0b6      	beq.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b5c:	e051      	b.n	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6c:	d123      	bne.n	8003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f043 0204 	orr.w	r2, r3, #4
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e046      	b.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
=======
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc4:	e051      	b.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd4:	d123      	bne.n	8003c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f043 0204 	orr.w	r2, r3, #4
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e046      	b.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d021      	beq.n	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	f7fe ffad 	bl	8002b1c <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d116      	bne.n	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0220 	orr.w	r2, r3, #32
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e020      	b.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10c      	bne.n	8003c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e00b      	b.n	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d18d      	bne.n	8003b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d021      	beq.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c26:	f7fe ffad 	bl	8002b84 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d302      	bcc.n	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d116      	bne.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e020      	b.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10c      	bne.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e00b      	b.n	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	43da      	mvns	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d18d      	bne.n	8003bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
=======
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c58:	e042      	b.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d119      	bne.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0210 	mvn.w	r2, #16
 8003c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e029      	b.n	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
=======
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cc0:	e042      	b.n	8003d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d119      	bne.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0210 	mvn.w	r2, #16
 8003cd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e029      	b.n	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8003c9c:	f7fe ff3e 	bl	8002b1c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e007      	b.n	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d1b5      	bne.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_PCD_Init>:
=======
 8003d04:	f7fe ff3e 	bl	8002b84 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d116      	bne.n	8003d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e007      	b.n	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d1b5      	bne.n	8003cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_PCD_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8003cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfa:	b08f      	sub	sp, #60	; 0x3c
 8003cfc:	af0a      	add	r7, sp, #40	; 0x28
 8003cfe:	6078      	str	r0, [r7, #4]
=======
 8003d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d62:	b08f      	sub	sp, #60	; 0x3c
 8003d64:	af0a      	add	r7, sp, #40	; 0x28
 8003d66:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e10f      	b.n	8003f2a <HAL_PCD_Init+0x232>
=======
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e10f      	b.n	8003f92 <HAL_PCD_Init+0x232>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
<<<<<<< HEAD
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
=======
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f006 fe93 	bl	800aa50 <HAL_PCD_MspInit>
=======
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f006 fe93 	bl	800aab8 <HAL_PCD_MspInit>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
=======
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2203      	movs	r2, #3
 8003d96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
<<<<<<< HEAD
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f003 fd86 	bl	800785a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	687e      	ldr	r6, [r7, #4]
 8003d56:	466d      	mov	r5, sp
 8003d58:	f106 0410 	add.w	r4, r6, #16
 8003d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d68:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d6c:	1d33      	adds	r3, r6, #4
 8003d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d70:	6838      	ldr	r0, [r7, #0]
 8003d72:	f003 fc5d 	bl	8007630 <USB_CoreInit>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0d0      	b.n	8003f2a <HAL_PCD_Init+0x232>
=======
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f003 fd86 	bl	80078c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	687e      	ldr	r6, [r7, #4]
 8003dbe:	466d      	mov	r5, sp
 8003dc0:	f106 0410 	add.w	r4, r6, #16
 8003dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dd4:	1d33      	adds	r3, r6, #4
 8003dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd8:	6838      	ldr	r0, [r7, #0]
 8003dda:	f003 fc5d 	bl	8007698 <USB_CoreInit>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0d0      	b.n	8003f92 <HAL_PCD_Init+0x232>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
<<<<<<< HEAD
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f003 fd74 	bl	800787c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e04a      	b.n	8003e30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	333d      	adds	r3, #61	; 0x3d
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	333c      	adds	r3, #60	; 0x3c
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dc2:	7bfa      	ldrb	r2, [r7, #15]
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	b298      	uxth	r0, r3
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3342      	adds	r3, #66	; 0x42
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	333f      	adds	r3, #63	; 0x3f
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3344      	adds	r3, #68	; 0x44
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3348      	adds	r3, #72	; 0x48
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	3350      	adds	r3, #80	; 0x50
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3af      	bcc.n	8003d9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	e044      	b.n	8003eca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003eae:	7bfa      	ldrb	r2, [r7, #15]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d3b5      	bcc.n	8003e40 <HAL_PCD_Init+0x148>
=======
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f003 fd74 	bl	80078e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]
 8003e00:	e04a      	b.n	8003e98 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	333d      	adds	r3, #61	; 0x3d
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	333c      	adds	r3, #60	; 0x3c
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e2a:	7bfa      	ldrb	r2, [r7, #15]
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	b298      	uxth	r0, r3
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	3342      	adds	r3, #66	; 0x42
 8003e3e:	4602      	mov	r2, r0
 8003e40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	333f      	adds	r3, #63	; 0x3f
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	3344      	adds	r3, #68	; 0x44
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e6a:	7bfa      	ldrb	r2, [r7, #15]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	3348      	adds	r3, #72	; 0x48
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e7e:	7bfa      	ldrb	r2, [r7, #15]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3350      	adds	r3, #80	; 0x50
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	3301      	adds	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d3af      	bcc.n	8003e02 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	e044      	b.n	8003f32 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	7bfa      	ldrb	r2, [r7, #15]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d3b5      	bcc.n	8003ea8 <HAL_PCD_Init+0x148>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
<<<<<<< HEAD
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	687e      	ldr	r6, [r7, #4]
 8003edc:	466d      	mov	r5, sp
 8003ede:	f106 0410 	add.w	r4, r6, #16
 8003ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eee:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ef2:	1d33      	adds	r3, r6, #4
 8003ef4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ef6:	6838      	ldr	r0, [r7, #0]
 8003ef8:	f003 fd0c 	bl	8007914 <USB_DevInit>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e00d      	b.n	8003f2a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
=======
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	687e      	ldr	r6, [r7, #4]
 8003f44:	466d      	mov	r5, sp
 8003f46:	f106 0410 	add.w	r4, r6, #16
 8003f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f5a:	1d33      	adds	r3, r6, #4
 8003f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5e:	6838      	ldr	r0, [r7, #0]
 8003f60:	f003 fd0c 	bl	800797c <USB_DevInit>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e00d      	b.n	8003f92 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
<<<<<<< HEAD
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f004 fd88 	bl	8008a38 <USB_DevDisconnect>

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f32 <HAL_PCD_Start>:
=======
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f004 fd88 	bl	8008aa0 <USB_DevDisconnect>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f9a <HAL_PCD_Start>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_PCD_Start+0x1c>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e020      	b.n	8003f90 <HAL_PCD_Start+0x5e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d109      	bne.n	8003f72 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d005      	beq.n	8003f72 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f003 fc5e 	bl	8007838 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 fd38 	bl	80089f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_PCD_IRQHandler>:
=======
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_PCD_Start+0x1c>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e020      	b.n	8003ff8 <HAL_PCD_Start+0x5e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d109      	bne.n	8003fda <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d005      	beq.n	8003fda <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f003 fc5e 	bl	80078a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f004 fd38 	bl	8008a5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_PCD_IRQHandler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b08d      	sub	sp, #52	; 0x34
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	61fb      	str	r3, [r7, #28]
=======
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b08d      	sub	sp, #52	; 0x34
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	61fb      	str	r3, [r7, #28]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
<<<<<<< HEAD
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f004 fdf6 	bl	8008ba0 <USB_GetMode>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 839d 	bne.w	80046f6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f004 fd5a 	bl	8008a7a <USB_ReadInterrupts>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8393 	beq.w	80046f4 <HAL_PCD_IRQHandler+0x75c>
=======
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f004 fdf6 	bl	8008c08 <USB_GetMode>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 839d 	bne.w	800475e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f004 fd5a 	bl	8008ae2 <USB_ReadInterrupts>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8393 	beq.w	800475c <HAL_PCD_IRQHandler+0x75c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
<<<<<<< HEAD
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f004 fd51 	bl	8008a7a <USB_ReadInterrupts>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d107      	bne.n	8003ff2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f002 0202 	and.w	r2, r2, #2
 8003ff0:	615a      	str	r2, [r3, #20]
=======
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f004 fd51 	bl	8008ae2 <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b02      	cmp	r3, #2
 8004048:	d107      	bne.n	800405a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f002 0202 	and.w	r2, r2, #2
 8004058:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
<<<<<<< HEAD
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f004 fd3f 	bl	8008a7a <USB_ReadInterrupts>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b10      	cmp	r3, #16
 8004004:	d161      	bne.n	80040ca <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0210 	bic.w	r2, r2, #16
 8004014:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	3304      	adds	r3, #4
 8004034:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	0c5b      	lsrs	r3, r3, #17
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	2b02      	cmp	r3, #2
 8004040:	d124      	bne.n	800408c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d035      	beq.n	80040ba <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800405c:	b29b      	uxth	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	6a38      	ldr	r0, [r7, #32]
 8004062:	f004 fb76 	bl	8008752 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004072:	441a      	add	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004084:	441a      	add	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	619a      	str	r2, [r3, #24]
 800408a:	e016      	b.n	80040ba <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	0c5b      	lsrs	r3, r3, #17
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	2b06      	cmp	r3, #6
 8004096:	d110      	bne.n	80040ba <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800409e:	2208      	movs	r2, #8
 80040a0:	4619      	mov	r1, r3
 80040a2:	6a38      	ldr	r0, [r7, #32]
 80040a4:	f004 fb55 	bl	8008752 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040b4:	441a      	add	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	619a      	str	r2, [r3, #24]
=======
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f004 fd3f 	bl	8008ae2 <USB_ReadInterrupts>
 8004064:	4603      	mov	r3, r0
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b10      	cmp	r3, #16
 800406c:	d161      	bne.n	8004132 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0210 	bic.w	r2, r2, #16
 800407c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	f003 020f 	and.w	r2, r3, #15
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	3304      	adds	r3, #4
 800409c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	0c5b      	lsrs	r3, r3, #17
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d124      	bne.n	80040f4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d035      	beq.n	8004122 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	6a38      	ldr	r0, [r7, #32]
 80040ca:	f004 fb76 	bl	80087ba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040da:	441a      	add	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	091b      	lsrs	r3, r3, #4
 80040e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ec:	441a      	add	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	619a      	str	r2, [r3, #24]
 80040f2:	e016      	b.n	8004122 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	0c5b      	lsrs	r3, r3, #17
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d110      	bne.n	8004122 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004106:	2208      	movs	r2, #8
 8004108:	4619      	mov	r1, r3
 800410a:	6a38      	ldr	r0, [r7, #32]
 800410c:	f004 fb55 	bl	80087ba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	699a      	ldr	r2, [r3, #24]
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800411c:	441a      	add	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	619a      	str	r2, [r3, #24]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
<<<<<<< HEAD
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0210 	orr.w	r2, r2, #16
 80040c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 fcd3 	bl	8008a7a <USB_ReadInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040de:	d16e      	bne.n	80041be <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f004 fcd9 	bl	8008aa0 <USB_ReadDevAllOutEpInterrupt>
 80040ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80040f0:	e062      	b.n	80041b8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d057      	beq.n	80041ac <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f004 fcfe 	bl	8008b08 <USB_ReadDevOutEPInterrupt>
 800410c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00c      	beq.n	8004132 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004124:	461a      	mov	r2, r3
 8004126:	2301      	movs	r3, #1
 8004128:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800412a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fdb1 	bl	8004c94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00c      	beq.n	8004156 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	461a      	mov	r2, r3
 800414a:	2308      	movs	r3, #8
 800414c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800414e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 feab 	bl	8004eac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	461a      	mov	r2, r3
 800416e:	2310      	movs	r3, #16
 8004170:	6093      	str	r3, [r2, #8]
=======
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0210 	orr.w	r2, r2, #16
 8004130:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f004 fcd3 	bl	8008ae2 <USB_ReadInterrupts>
 800413c:	4603      	mov	r3, r0
 800413e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004142:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004146:	d16e      	bne.n	8004226 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f004 fcd9 	bl	8008b08 <USB_ReadDevAllOutEpInterrupt>
 8004156:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004158:	e062      	b.n	8004220 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d057      	beq.n	8004214 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f004 fcfe 	bl	8008b70 <USB_ReadDevOutEPInterrupt>
 8004174:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00c      	beq.n	800419a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418c:	461a      	mov	r2, r3
 800418e:	2301      	movs	r3, #1
 8004190:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fdb1 	bl	8004cfc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00c      	beq.n	80041be <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b0:	461a      	mov	r2, r3
 80041b2:	2308      	movs	r3, #8
 80041b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 feab 	bl	8004f14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	461a      	mov	r2, r3
 80041d6:	2310      	movs	r3, #16
 80041d8:	6093      	str	r3, [r2, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
<<<<<<< HEAD
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004188:	461a      	mov	r2, r3
 800418a:	2320      	movs	r3, #32
 800418c:	6093      	str	r3, [r2, #8]
=======
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	461a      	mov	r2, r3
 80041f2:	2320      	movs	r3, #32
 80041f4:	6093      	str	r3, [r2, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
<<<<<<< HEAD
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a4:	461a      	mov	r2, r3
 80041a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	3301      	adds	r3, #1
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d199      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x15a>
=======
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	461a      	mov	r2, r3
 800420e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004212:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	3301      	adds	r3, #1
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d199      	bne.n	800415a <HAL_PCD_IRQHandler+0x15a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
<<<<<<< HEAD
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f004 fc59 	bl	8008a7a <USB_ReadInterrupts>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041d2:	f040 80c0 	bne.w	8004356 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f004 fc7a 	bl	8008ad4 <USB_ReadDevAllInEpInterrupt>
 80041e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80041e6:	e0b2      	b.n	800434e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 80a7 	beq.w	8004342 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f004 fca0 	bl	8008b44 <USB_ReadDevInEPInterrupt>
 8004204:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d057      	beq.n	80042c0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	2201      	movs	r2, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	43db      	mvns	r3, r3
 800422a:	69f9      	ldr	r1, [r7, #28]
 800422c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004230:	4013      	ands	r3, r2
 8004232:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	461a      	mov	r2, r3
 8004242:	2301      	movs	r3, #1
 8004244:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d132      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	3348      	adds	r3, #72	; 0x48
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4403      	add	r3, r0
 800426e:	3344      	adds	r3, #68	; 0x44
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4419      	add	r1, r3
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4403      	add	r3, r0
 8004282:	3348      	adds	r3, #72	; 0x48
 8004284:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	2b00      	cmp	r3, #0
 800428a:	d113      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x31c>
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	3350      	adds	r3, #80	; 0x50
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d108      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042ac:	461a      	mov	r2, r3
 80042ae:	2101      	movs	r1, #1
 80042b0:	f004 fca8 	bl	8008c04 <USB_EP0_OutStart>
=======
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f004 fc59 	bl	8008ae2 <USB_ReadInterrupts>
 8004230:	4603      	mov	r3, r0
 8004232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004236:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800423a:	f040 80c0 	bne.w	80043be <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f004 fc7a 	bl	8008b3c <USB_ReadDevAllInEpInterrupt>
 8004248:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800424e:	e0b2      	b.n	80043b6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80a7 	beq.w	80043aa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	4611      	mov	r1, r2
 8004266:	4618      	mov	r0, r3
 8004268:	f004 fca0 	bl	8008bac <USB_ReadDevInEPInterrupt>
 800426c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d057      	beq.n	8004328 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	2201      	movs	r2, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	43db      	mvns	r3, r3
 8004292:	69f9      	ldr	r1, [r7, #28]
 8004294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004298:	4013      	ands	r3, r2
 800429a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	461a      	mov	r2, r3
 80042aa:	2301      	movs	r3, #1
 80042ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d132      	bne.n	800431c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	3348      	adds	r3, #72	; 0x48
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4403      	add	r3, r0
 80042d6:	3344      	adds	r3, #68	; 0x44
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4419      	add	r1, r3
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e0:	4613      	mov	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4403      	add	r3, r0
 80042ea:	3348      	adds	r3, #72	; 0x48
 80042ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d113      	bne.n	800431c <HAL_PCD_IRQHandler+0x31c>
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f8:	4613      	mov	r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	3350      	adds	r3, #80	; 0x50
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d108      	bne.n	800431c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004314:	461a      	mov	r2, r3
 8004316:	2101      	movs	r1, #1
 8004318:	f004 fca8 	bl	8008c6c <USB_EP0_OutStart>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f006 fc49 	bl	800ab52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d6:	461a      	mov	r2, r3
 80042d8:	2308      	movs	r3, #8
 80042da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	461a      	mov	r2, r3
 80042f4:	2310      	movs	r3, #16
 80042f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430e:	461a      	mov	r2, r3
 8004310:	2340      	movs	r3, #64	; 0x40
 8004312:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432a:	461a      	mov	r2, r3
 800432c:	2302      	movs	r3, #2
 800432e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800433a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fc1b 	bl	8004b78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	3301      	adds	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	f47f af49 	bne.w	80041e8 <HAL_PCD_IRQHandler+0x250>
=======
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	b2db      	uxtb	r3, r3
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f006 fc49 	bl	800abba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433e:	461a      	mov	r2, r3
 8004340:	2308      	movs	r3, #8
 8004342:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435a:	461a      	mov	r2, r3
 800435c:	2310      	movs	r3, #16
 800435e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004376:	461a      	mov	r2, r3
 8004378:	2340      	movs	r3, #64	; 0x40
 800437a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004392:	461a      	mov	r2, r3
 8004394:	2302      	movs	r3, #2
 8004396:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fc1b 	bl	8004be0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	3301      	adds	r3, #1
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f47f af49 	bne.w	8004250 <HAL_PCD_IRQHandler+0x250>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
<<<<<<< HEAD
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f004 fb8d 	bl	8008a7a <USB_ReadInterrupts>
 8004360:	4603      	mov	r3, r0
 8004362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800436a:	d122      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004386:	2b01      	cmp	r3, #1
 8004388:	d108      	bne.n	800439c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
=======
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f004 fb8d 	bl	8008ae2 <USB_ReadInterrupts>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d2:	d122      	bne.n	800441a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d108      	bne.n	8004404 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
<<<<<<< HEAD
 8004392:	2100      	movs	r1, #0
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fe27 	bl	8004fe8 <HAL_PCDEx_LPM_Callback>
 800439a:	e002      	b.n	80043a2 <HAL_PCD_IRQHandler+0x40a>
=======
 80043fa:	2100      	movs	r1, #0
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fe27 	bl	8005050 <HAL_PCDEx_LPM_Callback>
 8004402:	e002      	b.n	800440a <HAL_PCD_IRQHandler+0x40a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
<<<<<<< HEAD
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f006 fc4f 	bl	800ac40 <HAL_PCD_ResumeCallback>
=======
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f006 fc4f 	bl	800aca8 <HAL_PCD_ResumeCallback>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
<<<<<<< HEAD
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80043b0:	615a      	str	r2, [r3, #20]
=======
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004418:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
<<<<<<< HEAD
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f004 fb5f 	bl	8008a7a <USB_ReadInterrupts>
 80043bc:	4603      	mov	r3, r0
 80043be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c6:	d112      	bne.n	80043ee <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d102      	bne.n	80043de <HAL_PCD_IRQHandler+0x446>
=======
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f004 fb5f 	bl	8008ae2 <USB_ReadInterrupts>
 8004424:	4603      	mov	r3, r0
 8004426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442e:	d112      	bne.n	8004456 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d102      	bne.n	8004446 <HAL_PCD_IRQHandler+0x446>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
<<<<<<< HEAD
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f006 fc0b 	bl	800abf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043ec:	615a      	str	r2, [r3, #20]
=======
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f006 fc0b 	bl	800ac5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004454:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
<<<<<<< HEAD
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f004 fb41 	bl	8008a7a <USB_ReadInterrupts>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004402:	f040 80c7 	bne.w	8004594 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2110      	movs	r1, #16
 8004420:	4618      	mov	r0, r3
 8004422:	f003 fbdb 	bl	8007bdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004426:	2300      	movs	r3, #0
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442a:	e056      	b.n	80044da <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004438:	461a      	mov	r2, r3
 800443a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800443e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004450:	0151      	lsls	r1, r2, #5
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	440a      	add	r2, r1
 8004456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800445e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800447e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448c:	461a      	mov	r2, r3
 800448e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004492:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c4:	0151      	lsls	r1, r2, #5
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	440a      	add	r2, r1
 80044ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	3301      	adds	r3, #1
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d3a3      	bcc.n	800442c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d016      	beq.n	800452e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004510:	f043 030b 	orr.w	r3, r3, #11
 8004514:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
=======
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f004 fb41 	bl	8008ae2 <USB_ReadInterrupts>
 8004460:	4603      	mov	r3, r0
 8004462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	f040 80c7 	bne.w	80045fc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2110      	movs	r1, #16
 8004488:	4618      	mov	r0, r3
 800448a:	f003 fbdb 	bl	8007c44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448e:	2300      	movs	r3, #0
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004492:	e056      	b.n	8004542 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	461a      	mov	r2, r3
 80044a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b8:	0151      	lsls	r1, r2, #5
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	440a      	add	r2, r1
 80044be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044c6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d8:	0151      	lsls	r1, r2, #5
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	440a      	add	r2, r1
 80044de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	461a      	mov	r2, r3
 80044f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800450c:	0151      	lsls	r1, r2, #5
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	440a      	add	r2, r1
 8004512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004516:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800451a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800452c:	0151      	lsls	r1, r2, #5
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	440a      	add	r2, r1
 8004532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004536:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800453a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	3301      	adds	r3, #1
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004548:	429a      	cmp	r2, r3
 800454a:	d3a3      	bcc.n	8004494 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800455a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800455e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	2b00      	cmp	r3, #0
 8004566:	d016      	beq.n	8004596 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004578:	f043 030b 	orr.w	r3, r3, #11
 800457c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
<<<<<<< HEAD
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004526:	f043 030b 	orr.w	r3, r3, #11
 800452a:	6453      	str	r3, [r2, #68]	; 0x44
 800452c:	e015      	b.n	800455a <HAL_PCD_IRQHandler+0x5c2>
=======
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800458e:	f043 030b 	orr.w	r3, r3, #11
 8004592:	6453      	str	r3, [r2, #68]	; 0x44
 8004594:	e015      	b.n	80045c2 <HAL_PCD_IRQHandler+0x5c2>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
<<<<<<< HEAD
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004540:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004544:	6153      	str	r3, [r2, #20]
=======
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80045ac:	6153      	str	r3, [r2, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
<<<<<<< HEAD
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004554:	f043 030b 	orr.w	r3, r3, #11
 8004558:	6113      	str	r3, [r2, #16]
=======
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045bc:	f043 030b 	orr.w	r3, r3, #11
 80045c0:	6113      	str	r3, [r2, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
<<<<<<< HEAD
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004568:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800456c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800457e:	461a      	mov	r2, r3
 8004580:	f004 fb40 	bl	8008c04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004592:	615a      	str	r2, [r3, #20]
=======
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80045d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045e6:	461a      	mov	r2, r3
 80045e8:	f004 fb40 	bl	8008c6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80045fa:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
<<<<<<< HEAD
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f004 fa6e 	bl	8008a7a <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a8:	d124      	bne.n	80045f4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f004 fb04 	bl	8008bbc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f003 fb6c 	bl	8007c96 <USB_GetDevSpeed>
 80045be:	4603      	mov	r3, r0
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681c      	ldr	r4, [r3, #0]
 80045ca:	f001 f939 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 80045ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	4620      	mov	r0, r4
 80045da:	f003 f88b 	bl	80076f4 <USB_SetTurnaroundTime>
=======
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f004 fa6e 	bl	8008ae2 <USB_ReadInterrupts>
 8004606:	4603      	mov	r3, r0
 8004608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800460c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004610:	d124      	bne.n	800465c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f004 fb04 	bl	8008c24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f003 fb6c 	bl	8007cfe <USB_GetDevSpeed>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681c      	ldr	r4, [r3, #0]
 8004632:	f001 f939 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 8004636:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800463c:	b2db      	uxtb	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	4620      	mov	r0, r4
 8004642:	f003 f88b 	bl	800775c <USB_SetTurnaroundTime>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
<<<<<<< HEAD
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f006 fadf 	bl	800aba2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045f2:	615a      	str	r2, [r3, #20]
=======
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f006 fadf 	bl	800ac0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800465a:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
<<<<<<< HEAD
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f004 fa3e 	bl	8008a7a <USB_ReadInterrupts>
 80045fe:	4603      	mov	r3, r0
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d10a      	bne.n	800461e <HAL_PCD_IRQHandler+0x686>
=======
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f004 fa3e 	bl	8008ae2 <USB_ReadInterrupts>
 8004666:	4603      	mov	r3, r0
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b08      	cmp	r3, #8
 800466e:	d10a      	bne.n	8004686 <HAL_PCD_IRQHandler+0x686>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
<<<<<<< HEAD
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f006 fabc 	bl	800ab86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f002 0208 	and.w	r2, r2, #8
 800461c:	615a      	str	r2, [r3, #20]
=======
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f006 fabc 	bl	800abee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f002 0208 	and.w	r2, r2, #8
 8004684:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
<<<<<<< HEAD
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f004 fa29 	bl	8008a7a <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800462e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004632:	d10f      	bne.n	8004654 <HAL_PCD_IRQHandler+0x6bc>
=======
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f004 fa29 	bl	8008ae2 <USB_ReadInterrupts>
 8004690:	4603      	mov	r3, r0
 8004692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469a:	d10f      	bne.n	80046bc <HAL_PCD_IRQHandler+0x6bc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
<<<<<<< HEAD
 8004634:	2300      	movs	r3, #0
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800469c:	2300      	movs	r3, #0
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	b2db      	uxtb	r3, r3
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f006 fb1e 	bl	800ac80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004652:	615a      	str	r2, [r3, #20]
=======
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f006 fb1e 	bl	800ace8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80046ba:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
<<<<<<< HEAD
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f004 fa0e 	bl	8008a7a <USB_ReadInterrupts>
 800465e:	4603      	mov	r3, r0
 8004660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004668:	d10f      	bne.n	800468a <HAL_PCD_IRQHandler+0x6f2>
=======
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f004 fa0e 	bl	8008ae2 <USB_ReadInterrupts>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d0:	d10f      	bne.n	80046f2 <HAL_PCD_IRQHandler+0x6f2>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
<<<<<<< HEAD
 800466a:	2300      	movs	r3, #0
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80046d2:	2300      	movs	r3, #0
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	b2db      	uxtb	r3, r3
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f006 faf1 	bl	800ac5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004688:	615a      	str	r2, [r3, #20]
=======
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f006 faf1 	bl	800acc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80046f0:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
<<<<<<< HEAD
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f004 f9f3 	bl	8008a7a <USB_ReadInterrupts>
 8004694:	4603      	mov	r3, r0
 8004696:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d10a      	bne.n	80046b6 <HAL_PCD_IRQHandler+0x71e>
=======
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f004 f9f3 	bl	8008ae2 <USB_ReadInterrupts>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004706:	d10a      	bne.n	800471e <HAL_PCD_IRQHandler+0x71e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
<<<<<<< HEAD
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f006 faff 	bl	800aca4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80046b4:	615a      	str	r2, [r3, #20]
=======
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f006 faff 	bl	800ad0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800471c:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
<<<<<<< HEAD
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f004 f9dd 	bl	8008a7a <USB_ReadInterrupts>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d115      	bne.n	80046f6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_PCD_IRQHandler+0x74a>
=======
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f004 f9dd 	bl	8008ae2 <USB_ReadInterrupts>
 8004728:	4603      	mov	r3, r0
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d115      	bne.n	800475e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <HAL_PCD_IRQHandler+0x74a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
<<<<<<< HEAD
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f006 faef 	bl	800acc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6859      	ldr	r1, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	e000      	b.n	80046f6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80046f4:	bf00      	nop
    }
  }
}
 80046f6:	3734      	adds	r7, #52	; 0x34
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd90      	pop	{r4, r7, pc}

080046fc <HAL_PCD_SetAddress>:
=======
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f006 faef 	bl	800ad28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	e000      	b.n	800475e <HAL_PCD_IRQHandler+0x75e>
      return;
 800475c:	bf00      	nop
    }
  }
}
 800475e:	3734      	adds	r7, #52	; 0x34
 8004760:	46bd      	mov	sp, r7
 8004762:	bd90      	pop	{r4, r7, pc}

08004764 <HAL_PCD_SetAddress>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
<<<<<<< HEAD
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_PCD_SetAddress+0x1a>
 8004712:	2302      	movs	r3, #2
 8004714:	e013      	b.n	800473e <HAL_PCD_SetAddress+0x42>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f004 f93b 	bl	80089aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_PCD_EP_Open>:
=======
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_PCD_SetAddress+0x1a>
 800477a:	2302      	movs	r3, #2
 800477c:	e013      	b.n	80047a6 <HAL_PCD_SetAddress+0x42>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	78fa      	ldrb	r2, [r7, #3]
 8004794:	4611      	mov	r1, r2
 8004796:	4618      	mov	r0, r3
 8004798:	f004 f93b 	bl	8008a12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_PCD_EP_Open>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
<<<<<<< HEAD
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	4608      	mov	r0, r1
 8004750:	4611      	mov	r1, r2
 8004752:	461a      	mov	r2, r3
 8004754:	4603      	mov	r3, r0
 8004756:	70fb      	strb	r3, [r7, #3]
 8004758:	460b      	mov	r3, r1
 800475a:	803b      	strh	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004768:	2b00      	cmp	r3, #0
 800476a:	da0f      	bge.n	800478c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	f003 020f 	and.w	r2, r3, #15
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	3338      	adds	r3, #56	; 0x38
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	705a      	strb	r2, [r3, #1]
 800478a:	e00f      	b.n	80047ac <HAL_PCD_EP_Open+0x66>
=======
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	4608      	mov	r0, r1
 80047b8:	4611      	mov	r1, r2
 80047ba:	461a      	mov	r2, r3
 80047bc:	4603      	mov	r3, r0
 80047be:	70fb      	strb	r3, [r7, #3]
 80047c0:	460b      	mov	r3, r1
 80047c2:	803b      	strh	r3, [r7, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	da0f      	bge.n	80047f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	f003 020f 	and.w	r2, r3, #15
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	3338      	adds	r3, #56	; 0x38
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4413      	add	r3, r2
 80047e8:	3304      	adds	r3, #4
 80047ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	705a      	strb	r2, [r3, #1]
 80047f2:	e00f      	b.n	8004814 <HAL_PCD_EP_Open+0x66>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	f003 020f 	and.w	r2, r3, #15
 8004792:	4613      	mov	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	3304      	adds	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80047b8:	883a      	ldrh	r2, [r7, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	78ba      	ldrb	r2, [r7, #2]
 80047c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047d6:	78bb      	ldrb	r3, [r7, #2]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d102      	bne.n	80047e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_PCD_EP_Open+0xaa>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e00e      	b.n	800480e <HAL_PCD_EP_Open+0xc8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68f9      	ldr	r1, [r7, #12]
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 fa6e 	bl	8007ce0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800480c:	7afb      	ldrb	r3, [r7, #11]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_PCD_EP_Close>:
=======
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	f003 020f 	and.w	r2, r3, #15
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4413      	add	r3, r2
 800480a:	3304      	adds	r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004820:	883a      	ldrh	r2, [r7, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	78ba      	ldrb	r2, [r7, #2]
 800482a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	785b      	ldrb	r3, [r3, #1]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800483e:	78bb      	ldrb	r3, [r7, #2]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d102      	bne.n	800484a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_PCD_EP_Open+0xaa>
 8004854:	2302      	movs	r3, #2
 8004856:	e00e      	b.n	8004876 <HAL_PCD_EP_Open+0xc8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68f9      	ldr	r1, [r7, #12]
 8004866:	4618      	mov	r0, r3
 8004868:	f003 fa6e 	bl	8007d48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004874:	7afb      	ldrb	r3, [r7, #11]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_PCD_EP_Close>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004826:	2b00      	cmp	r3, #0
 8004828:	da0f      	bge.n	800484a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 020f 	and.w	r2, r3, #15
 8004830:	4613      	mov	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	3338      	adds	r3, #56	; 0x38
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	3304      	adds	r3, #4
 8004840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	705a      	strb	r2, [r3, #1]
 8004848:	e00f      	b.n	800486a <HAL_PCD_EP_Close+0x54>
=======
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	460b      	mov	r3, r1
 8004888:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800488a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800488e:	2b00      	cmp	r3, #0
 8004890:	da0f      	bge.n	80048b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	f003 020f 	and.w	r2, r3, #15
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	3338      	adds	r3, #56	; 0x38
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4413      	add	r3, r2
 80048a6:	3304      	adds	r3, #4
 80048a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	705a      	strb	r2, [r3, #1]
 80048b0:	e00f      	b.n	80048d2 <HAL_PCD_EP_Close+0x54>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	f003 020f 	and.w	r2, r3, #15
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	3304      	adds	r3, #4
 8004862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_PCD_EP_Close+0x6e>
 8004880:	2302      	movs	r3, #2
 8004882:	e00e      	b.n	80048a2 <HAL_PCD_EP_Close+0x8c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	4618      	mov	r0, r3
 8004894:	f003 faac 	bl	8007df0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_PCD_EP_Receive>:
=======
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 020f 	and.w	r2, r3, #15
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_PCD_EP_Close+0x6e>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e00e      	b.n	800490a <HAL_PCD_EP_Close+0x8c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68f9      	ldr	r1, [r7, #12]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f003 faac 	bl	8007e58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_PCD_EP_Receive>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	460b      	mov	r3, r1
 80048b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048ba:	7afb      	ldrb	r3, [r7, #11]
 80048bc:	f003 020f 	and.w	r2, r3, #15
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	3304      	adds	r3, #4
 80048d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2200      	movs	r2, #0
 80048e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ec:	7afb      	ldrb	r3, [r7, #11]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d102      	bne.n	8004906 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004906:	7afb      	ldrb	r3, [r7, #11]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	6979      	ldr	r1, [r7, #20]
 800491e:	f003 fd87 	bl	8008430 <USB_EP0StartXfer>
 8004922:	e008      	b.n	8004936 <HAL_PCD_EP_Receive+0x8c>
=======
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	460b      	mov	r3, r1
 8004920:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004922:	7afb      	ldrb	r3, [r7, #11]
 8004924:	f003 020f 	and.w	r2, r3, #15
 8004928:	4613      	mov	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	3304      	adds	r3, #4
 800493a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2200      	movs	r2, #0
 800494c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2200      	movs	r2, #0
 8004952:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004954:	7afb      	ldrb	r3, [r7, #11]
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	b2da      	uxtb	r2, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d102      	bne.n	800496e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800496e:	7afb      	ldrb	r3, [r7, #11]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	2b00      	cmp	r3, #0
 8004976:	d109      	bne.n	800498c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	6979      	ldr	r1, [r7, #20]
 8004986:	f003 fd87 	bl	8008498 <USB_EP0StartXfer>
 800498a:	e008      	b.n	800499e <HAL_PCD_EP_Receive+0x8c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
<<<<<<< HEAD
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	6979      	ldr	r1, [r7, #20]
 8004932:	f003 fb39 	bl	8007fa8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_PCD_EP_GetRxCount>:
=======
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	6979      	ldr	r1, [r7, #20]
 800499a:	f003 fb39 	bl	8008010 <USB_EPStartXfer>
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_PCD_EP_GetRxCount>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	f003 020f 	and.w	r2, r3, #15
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_PCD_EP_Transmit>:
=======
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	f003 020f 	and.w	r2, r3, #15
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80049ca:	681b      	ldr	r3, [r3, #0]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_PCD_EP_Transmit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	460b      	mov	r3, r1
 800497e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004980:	7afb      	ldrb	r3, [r7, #11]
 8004982:	f003 020f 	and.w	r2, r3, #15
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	3338      	adds	r3, #56	; 0x38
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	3304      	adds	r3, #4
 8004996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2200      	movs	r2, #0
 80049a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2201      	movs	r2, #1
 80049ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049b0:	7afb      	ldrb	r3, [r7, #11]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d102      	bne.n	80049ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	6979      	ldr	r1, [r7, #20]
 80049e2:	f003 fd25 	bl	8008430 <USB_EP0StartXfer>
 80049e6:	e008      	b.n	80049fa <HAL_PCD_EP_Transmit+0x8a>
=======
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	460b      	mov	r3, r1
 80049e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e8:	7afb      	ldrb	r3, [r7, #11]
 80049ea:	f003 020f 	and.w	r2, r3, #15
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	3338      	adds	r3, #56	; 0x38
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	3304      	adds	r3, #4
 80049fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2201      	movs	r2, #1
 8004a16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a18:	7afb      	ldrb	r3, [r7, #11]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d102      	bne.n	8004a32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a32:	7afb      	ldrb	r3, [r7, #11]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	6979      	ldr	r1, [r7, #20]
 8004a4a:	f003 fd25 	bl	8008498 <USB_EP0StartXfer>
 8004a4e:	e008      	b.n	8004a62 <HAL_PCD_EP_Transmit+0x8a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
<<<<<<< HEAD
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	6979      	ldr	r1, [r7, #20]
 80049f6:	f003 fad7 	bl	8007fa8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_PCD_EP_SetStall>:
=======
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6979      	ldr	r1, [r7, #20]
 8004a5e:	f003 fad7 	bl	8008010 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_PCD_EP_SetStall>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 020f 	and.w	r2, r3, #15
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d901      	bls.n	8004a22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e050      	b.n	8004ac4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	da0f      	bge.n	8004a4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	f003 020f 	and.w	r2, r3, #15
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	3338      	adds	r3, #56	; 0x38
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3304      	adds	r3, #4
 8004a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	705a      	strb	r2, [r3, #1]
 8004a48:	e00d      	b.n	8004a66 <HAL_PCD_EP_SetStall+0x62>
=======
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	f003 020f 	and.w	r2, r3, #15
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d901      	bls.n	8004a8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e050      	b.n	8004b2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	da0f      	bge.n	8004ab2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	f003 020f 	and.w	r2, r3, #15
 8004a98:	4613      	mov	r3, r2
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	3338      	adds	r3, #56	; 0x38
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	705a      	strb	r2, [r3, #1]
 8004ab0:	e00d      	b.n	8004ace <HAL_PCD_EP_SetStall+0x62>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_PCD_EP_SetStall+0x82>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e01e      	b.n	8004ac4 <HAL_PCD_EP_SetStall+0xc0>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f003 feb4 	bl	8008802 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	b2d9      	uxtb	r1, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f004 f8a5 	bl	8008c04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_PCD_EP_ClrStall>:
=======
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_PCD_EP_SetStall+0x82>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e01e      	b.n	8004b2c <HAL_PCD_EP_SetStall+0xc0>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68f9      	ldr	r1, [r7, #12]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f003 feb4 	bl	800886a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	b2d9      	uxtb	r1, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f004 f8a5 	bl	8008c6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_PCD_EP_ClrStall>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	f003 020f 	and.w	r2, r3, #15
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d901      	bls.n	8004aea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e042      	b.n	8004b70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da0f      	bge.n	8004b12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	f003 020f 	and.w	r2, r3, #15
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	3338      	adds	r3, #56	; 0x38
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	3304      	adds	r3, #4
 8004b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	705a      	strb	r2, [r3, #1]
 8004b10:	e00f      	b.n	8004b32 <HAL_PCD_EP_ClrStall+0x66>
=======
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	f003 020f 	and.w	r2, r3, #15
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d901      	bls.n	8004b52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e042      	b.n	8004bd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da0f      	bge.n	8004b7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	f003 020f 	and.w	r2, r3, #15
 8004b60:	4613      	mov	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	3338      	adds	r3, #56	; 0x38
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	3304      	adds	r3, #4
 8004b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	705a      	strb	r2, [r3, #1]
 8004b78:	e00f      	b.n	8004b9a <HAL_PCD_EP_ClrStall+0x66>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f003 020f 	and.w	r2, r3, #15
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	4413      	add	r3, r2
 8004b28:	3304      	adds	r3, #4
 8004b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_PCD_EP_ClrStall+0x86>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e00e      	b.n	8004b70 <HAL_PCD_EP_ClrStall+0xa4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f003 febc 	bl	80088de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <PCD_WriteEmptyTxFifo>:
=======
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	f003 020f 	and.w	r2, r3, #15
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	4413      	add	r3, r2
 8004b90:	3304      	adds	r3, #4
 8004b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_PCD_EP_ClrStall+0x86>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e00e      	b.n	8004bd8 <HAL_PCD_EP_ClrStall+0xa4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f003 febc 	bl	8008946 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <PCD_WriteEmptyTxFifo>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	613b      	str	r3, [r7, #16]
=======
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	; 0x28
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
<<<<<<< HEAD
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	3338      	adds	r3, #56	; 0x38
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d901      	bls.n	8004bb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e06c      	b.n	8004c8a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d902      	bls.n	8004bcc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	3303      	adds	r3, #3
 8004bd0:	089b      	lsrs	r3, r3, #2
 8004bd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bd4:	e02b      	b.n	8004c2e <PCD_WriteEmptyTxFifo+0xb6>
=======
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	3338      	adds	r3, #56	; 0x38
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	4413      	add	r3, r2
 8004c04:	3304      	adds	r3, #4
 8004c06:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d901      	bls.n	8004c18 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e06c      	b.n	8004cf2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	695a      	ldr	r2, [r3, #20]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d902      	bls.n	8004c34 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	3303      	adds	r3, #3
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c3c:	e02b      	b.n	8004c96 <PCD_WriteEmptyTxFifo+0xb6>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
<<<<<<< HEAD
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d902      	bls.n	8004bf2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3303      	adds	r3, #3
 8004bf6:	089b      	lsrs	r3, r3, #2
 8004bf8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68d9      	ldr	r1, [r3, #12]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	4603      	mov	r3, r0
 8004c10:	6978      	ldr	r0, [r7, #20]
 8004c12:	f003 fd60 	bl	80086d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	441a      	add	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d809      	bhi.n	8004c58 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d203      	bcs.n	8004c58 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1be      	bne.n	8004bd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d811      	bhi.n	8004c88 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	6939      	ldr	r1, [r7, #16]
 8004c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c84:	4013      	ands	r3, r2
 8004c86:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <PCD_EP_OutXfrComplete_int>:
=======
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d902      	bls.n	8004c5a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3303      	adds	r3, #3
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	68d9      	ldr	r1, [r3, #12]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4603      	mov	r3, r0
 8004c78:	6978      	ldr	r0, [r7, #20]
 8004c7a:	f003 fd60 	bl	800873e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	441a      	add	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	441a      	add	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d809      	bhi.n	8004cc0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	699a      	ldr	r2, [r3, #24]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d203      	bcs.n	8004cc0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1be      	bne.n	8004c3e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d811      	bhi.n	8004cf0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	6939      	ldr	r1, [r7, #16]
 8004ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cec:	4013      	ands	r3, r2
 8004cee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <PCD_EP_OutXfrComplete_int>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	333c      	adds	r3, #60	; 0x3c
 8004cac:	3304      	adds	r3, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	f040 80a0 	bne.w	8004e0c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d015      	beq.n	8004d02 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a72      	ldr	r2, [pc, #456]	; (8004ea4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f240 80dd 	bls.w	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80d7 	beq.w	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfe:	6093      	str	r3, [r2, #8]
 8004d00:	e0cb      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d009      	beq.n	8004d20 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2320      	movs	r3, #32
 8004d1c:	6093      	str	r3, [r2, #8]
 8004d1e:	e0bc      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 80b7 	bne.w	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4a5d      	ldr	r2, [pc, #372]	; (8004ea4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d90f      	bls.n	8004d54 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d50:	6093      	str	r3, [r2, #8]
 8004d52:	e0a2      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
=======
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	333c      	adds	r3, #60	; 0x3c
 8004d14:	3304      	adds	r3, #4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	f040 80a0 	bne.w	8004e74 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d015      	beq.n	8004d6a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4a72      	ldr	r2, [pc, #456]	; (8004f0c <PCD_EP_OutXfrComplete_int+0x210>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	f240 80dd 	bls.w	8004f02 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80d7 	beq.w	8004f02 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	461a      	mov	r2, r3
 8004d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d66:	6093      	str	r3, [r2, #8]
 8004d68:	e0cb      	b.n	8004f02 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	461a      	mov	r2, r3
 8004d82:	2320      	movs	r3, #32
 8004d84:	6093      	str	r3, [r2, #8]
 8004d86:	e0bc      	b.n	8004f02 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f040 80b7 	bne.w	8004f02 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a5d      	ldr	r2, [pc, #372]	; (8004f0c <PCD_EP_OutXfrComplete_int+0x210>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d90f      	bls.n	8004dbc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	461a      	mov	r2, r3
 8004db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db8:	6093      	str	r3, [r2, #8]
 8004dba:	e0a2      	b.n	8004f02 <PCD_EP_OutXfrComplete_int+0x206>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
<<<<<<< HEAD
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d66:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	0159      	lsls	r1, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	440b      	add	r3, r1
 8004d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004d7a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	4613      	mov	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4403      	add	r3, r0
 8004d8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d8e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4403      	add	r3, r0
 8004db2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4419      	add	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4403      	add	r3, r0
 8004dc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004dcc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d114      	bne.n	8004dfe <PCD_EP_OutXfrComplete_int+0x16a>
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d108      	bne.n	8004dfe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004df6:	461a      	mov	r2, r3
 8004df8:	2101      	movs	r1, #1
 8004dfa:	f003 ff03 	bl	8008c04 <USB_EP0_OutStart>
=======
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004dce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	0159      	lsls	r1, r3, #5
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	440b      	add	r3, r1
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004de2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4403      	add	r3, r0
 8004df2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004df6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e0a:	6819      	ldr	r1, [r3, #0]
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4403      	add	r3, r0
 8004e1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4419      	add	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4403      	add	r3, r0
 8004e30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e34:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d114      	bne.n	8004e66 <PCD_EP_OutXfrComplete_int+0x16a>
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d108      	bne.n	8004e66 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2101      	movs	r1, #1
 8004e62:	f003 ff03 	bl	8008c6c <USB_EP0_OutStart>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f005 fe89 	bl	800ab1c <HAL_PCD_DataOutStageCallback>
 8004e0a:	e046      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
=======
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f005 fe89 	bl	800ab84 <HAL_PCD_DataOutStageCallback>
 8004e72:	e046      	b.n	8004f02 <PCD_EP_OutXfrComplete_int+0x206>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
<<<<<<< HEAD
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4a26      	ldr	r2, [pc, #152]	; (8004ea8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d124      	bne.n	8004e5e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e30:	6093      	str	r3, [r2, #8]
 8004e32:	e032      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
=======
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a26      	ldr	r2, [pc, #152]	; (8004f10 <PCD_EP_OutXfrComplete_int+0x214>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d124      	bne.n	8004ec6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e92:	461a      	mov	r2, r3
 8004e94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e98:	6093      	str	r3, [r2, #8]
 8004e9a:	e032      	b.n	8004f02 <PCD_EP_OutXfrComplete_int+0x206>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
<<<<<<< HEAD
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	6093      	str	r3, [r2, #8]
=======
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	6093      	str	r3, [r2, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f005 fe60 	bl	800ab1c <HAL_PCD_DataOutStageCallback>
 8004e5c:	e01d      	b.n	8004e9a <PCD_EP_OutXfrComplete_int+0x206>
=======
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f005 fe60 	bl	800ab84 <HAL_PCD_DataOutStageCallback>
 8004ec4:	e01d      	b.n	8004f02 <PCD_EP_OutXfrComplete_int+0x206>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
<<<<<<< HEAD
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d114      	bne.n	8004e8e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d108      	bne.n	8004e8e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e86:	461a      	mov	r2, r3
 8004e88:	2100      	movs	r1, #0
 8004e8a:	f003 febb 	bl	8008c04 <USB_EP0_OutStart>
=======
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d114      	bne.n	8004ef6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d108      	bne.n	8004ef6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	f003 febb 	bl	8008c6c <USB_EP0_OutStart>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
<<<<<<< HEAD
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f005 fe41 	bl	800ab1c <HAL_PCD_DataOutStageCallback>
=======
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	4619      	mov	r1, r3
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f005 fe41 	bl	800ab84 <HAL_PCD_DataOutStageCallback>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	4f54300a 	.word	0x4f54300a
 8004ea8:	4f54310a 	.word	0x4f54310a

08004eac <PCD_EP_OutSetupPacket_int>:
=======
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	4f54300a 	.word	0x4f54300a
 8004f10:	4f54310a 	.word	0x4f54310a

08004f14 <PCD_EP_OutSetupPacket_int>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
<<<<<<< HEAD
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	333c      	adds	r3, #60	; 0x3c
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d90e      	bls.n	8004f00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efe:	6093      	str	r3, [r2, #8]
=======
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	333c      	adds	r3, #60	; 0x3c
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d90e      	bls.n	8004f68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d009      	beq.n	8004f68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	461a      	mov	r2, r3
 8004f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f66:	6093      	str	r3, [r2, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
<<<<<<< HEAD
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f005 fdf9 	bl	800aaf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d90c      	bls.n	8004f28 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d108      	bne.n	8004f28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f20:	461a      	mov	r2, r3
 8004f22:	2101      	movs	r1, #1
 8004f24:	f003 fe6e 	bl	8008c04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	4f54300a 	.word	0x4f54300a

08004f38 <HAL_PCDEx_SetTxFiFo>:
=======
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f005 fdf9 	bl	800ab60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d90c      	bls.n	8004f90 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d108      	bne.n	8004f90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	f003 fe6e 	bl	8008c6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	4f54300a 	.word	0x4f54300a

08004fa0 <HAL_PCDEx_SetTxFiFo>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
<<<<<<< HEAD
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]
 8004f44:	4613      	mov	r3, r2
 8004f46:	803b      	strh	r3, [r7, #0]
=======
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
 8004fac:	4613      	mov	r3, r2
 8004fae:	803b      	strh	r3, [r7, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
<<<<<<< HEAD
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d107      	bne.n	8004f66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f56:	883b      	ldrh	r3, [r7, #0]
 8004f58:	0419      	lsls	r1, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28
 8004f64:	e028      	b.n	8004fb8 <HAL_PCDEx_SetTxFiFo+0x80>
=======
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d107      	bne.n	8004fce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fbe:	883b      	ldrh	r3, [r7, #0]
 8004fc0:	0419      	lsls	r1, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	629a      	str	r2, [r3, #40]	; 0x28
 8004fcc:	e028      	b.n	8005020 <HAL_PCDEx_SetTxFiFo+0x80>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
<<<<<<< HEAD
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	4413      	add	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f74:	2300      	movs	r3, #0
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	e00d      	b.n	8004f96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	3340      	adds	r3, #64	; 0x40
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	3301      	adds	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
 8004f96:	7bfa      	ldrb	r2, [r7, #15]
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d3ec      	bcc.n	8004f7a <HAL_PCDEx_SetTxFiFo+0x42>
=======
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	4413      	add	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	e00d      	b.n	8004ffe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	3340      	adds	r3, #64	; 0x40
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
 8004ffe:	7bfa      	ldrb	r2, [r7, #15]
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	3b01      	subs	r3, #1
 8005004:	429a      	cmp	r2, r3
 8005006:	d3ec      	bcc.n	8004fe2 <HAL_PCDEx_SetTxFiFo+0x42>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
<<<<<<< HEAD
 8004fa0:	883b      	ldrh	r3, [r7, #0]
 8004fa2:	0418      	lsls	r0, r3, #16
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6819      	ldr	r1, [r3, #0]
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	4302      	orrs	r2, r0
 8004fb0:	3340      	adds	r3, #64	; 0x40
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_PCDEx_SetRxFiFo>:
=======
 8005008:	883b      	ldrh	r3, [r7, #0]
 800500a:	0418      	lsls	r0, r3, #16
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	3b01      	subs	r3, #1
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	4302      	orrs	r2, r0
 8005018:	3340      	adds	r3, #64	; 0x40
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_PCDEx_SetRxFiFo>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
<<<<<<< HEAD
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	887a      	ldrh	r2, [r7, #2]
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_PCDEx_LPM_Callback>:
=======
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	460b      	mov	r3, r1
 8005038:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	887a      	ldrh	r2, [r7, #2]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_PCDEx_LPM_Callback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
<<<<<<< HEAD
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
=======
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_RCC_OscConfig>:
=======
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_RCC_OscConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
=======
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e264      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
=======
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e264      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d075      	beq.n	800510a <HAL_RCC_OscConfig+0x10a>
=======
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d075      	beq.n	8005172 <HAL_RCC_OscConfig+0x10a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 800501e:	4ba3      	ldr	r3, [pc, #652]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b04      	cmp	r3, #4
 8005028:	d00c      	beq.n	8005044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800502a:	4ba0      	ldr	r3, [pc, #640]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005032:	2b08      	cmp	r3, #8
 8005034:	d112      	bne.n	800505c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	4b9d      	ldr	r3, [pc, #628]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005042:	d10b      	bne.n	800505c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	4b99      	ldr	r3, [pc, #612]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d05b      	beq.n	8005108 <HAL_RCC_OscConfig+0x108>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d157      	bne.n	8005108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e23f      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
=======
 8005086:	4ba3      	ldr	r3, [pc, #652]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b04      	cmp	r3, #4
 8005090:	d00c      	beq.n	80050ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005092:	4ba0      	ldr	r3, [pc, #640]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800509a:	2b08      	cmp	r3, #8
 800509c:	d112      	bne.n	80050c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800509e:	4b9d      	ldr	r3, [pc, #628]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050aa:	d10b      	bne.n	80050c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ac:	4b99      	ldr	r3, [pc, #612]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d05b      	beq.n	8005170 <HAL_RCC_OscConfig+0x108>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d157      	bne.n	8005170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e23f      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d106      	bne.n	8005074 <HAL_RCC_OscConfig+0x74>
 8005066:	4b91      	ldr	r3, [pc, #580]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a90      	ldr	r2, [pc, #576]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800506c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e01d      	b.n	80050b0 <HAL_RCC_OscConfig+0xb0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800507c:	d10c      	bne.n	8005098 <HAL_RCC_OscConfig+0x98>
 800507e:	4b8b      	ldr	r3, [pc, #556]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a8a      	ldr	r2, [pc, #552]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	4b88      	ldr	r3, [pc, #544]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a87      	ldr	r2, [pc, #540]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e00b      	b.n	80050b0 <HAL_RCC_OscConfig+0xb0>
 8005098:	4b84      	ldr	r3, [pc, #528]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a83      	ldr	r2, [pc, #524]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800509e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b81      	ldr	r3, [pc, #516]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a80      	ldr	r2, [pc, #512]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80050aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d013      	beq.n	80050e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fd fd30 	bl	8002b1c <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c0:	f7fd fd2c 	bl	8002b1c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	; 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e204      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	4b76      	ldr	r3, [pc, #472]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0xc0>
 80050de:	e014      	b.n	800510a <HAL_RCC_OscConfig+0x10a>
=======
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050cc:	d106      	bne.n	80050dc <HAL_RCC_OscConfig+0x74>
 80050ce:	4b91      	ldr	r3, [pc, #580]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a90      	ldr	r2, [pc, #576]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80050d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	e01d      	b.n	8005118 <HAL_RCC_OscConfig+0xb0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050e4:	d10c      	bne.n	8005100 <HAL_RCC_OscConfig+0x98>
 80050e6:	4b8b      	ldr	r3, [pc, #556]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a8a      	ldr	r2, [pc, #552]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b88      	ldr	r3, [pc, #544]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a87      	ldr	r2, [pc, #540]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e00b      	b.n	8005118 <HAL_RCC_OscConfig+0xb0>
 8005100:	4b84      	ldr	r3, [pc, #528]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a83      	ldr	r2, [pc, #524]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 8005106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	4b81      	ldr	r3, [pc, #516]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a80      	ldr	r2, [pc, #512]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 8005112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d013      	beq.n	8005148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7fd fd30 	bl	8002b84 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005128:	f7fd fd2c 	bl	8002b84 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b64      	cmp	r3, #100	; 0x64
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e204      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513a:	4b76      	ldr	r3, [pc, #472]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0xc0>
 8005146:	e014      	b.n	8005172 <HAL_RCC_OscConfig+0x10a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80050e0:	f7fd fd1c 	bl	8002b1c <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fd fd18 	bl	8002b1c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	; 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e1f0      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fa:	4b6c      	ldr	r3, [pc, #432]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0xe8>
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005108:	bf00      	nop
=======
 8005148:	f7fd fd1c 	bl	8002b84 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005150:	f7fd fd18 	bl	8002b84 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	; 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e1f0      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005162:	4b6c      	ldr	r3, [pc, #432]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0xe8>
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005170:	bf00      	nop
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d063      	beq.n	80051de <HAL_RCC_OscConfig+0x1de>
=======
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d063      	beq.n	8005246 <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8005116:	4b65      	ldr	r3, [pc, #404]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005122:	4b62      	ldr	r3, [pc, #392]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800512a:	2b08      	cmp	r3, #8
 800512c:	d11c      	bne.n	8005168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512e:	4b5f      	ldr	r3, [pc, #380]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d116      	bne.n	8005168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513a:	4b5c      	ldr	r3, [pc, #368]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_RCC_OscConfig+0x152>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e1c4      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
=======
 800517e:	4b65      	ldr	r3, [pc, #404]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800518a:	4b62      	ldr	r3, [pc, #392]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005192:	2b08      	cmp	r3, #8
 8005194:	d11c      	bne.n	80051d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005196:	4b5f      	ldr	r3, [pc, #380]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d116      	bne.n	80051d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a2:	4b5c      	ldr	r3, [pc, #368]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <HAL_RCC_OscConfig+0x152>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d001      	beq.n	80051ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e1c4      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8005152:	4b56      	ldr	r3, [pc, #344]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4952      	ldr	r1, [pc, #328]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005162:	4313      	orrs	r3, r2
 8005164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005166:	e03a      	b.n	80051de <HAL_RCC_OscConfig+0x1de>
=======
 80051ba:	4b56      	ldr	r3, [pc, #344]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4952      	ldr	r1, [pc, #328]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ce:	e03a      	b.n	8005246 <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d020      	beq.n	80051b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005170:	4b4f      	ldr	r3, [pc, #316]	; (80052b0 <HAL_RCC_OscConfig+0x2b0>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fd fcd1 	bl	8002b1c <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517e:	f7fd fccd 	bl	8002b1c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e1a5      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005190:	4b46      	ldr	r3, [pc, #280]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x17e>
=======
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d020      	beq.n	800521a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051d8:	4b4f      	ldr	r3, [pc, #316]	; (8005318 <HAL_RCC_OscConfig+0x2b0>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051de:	f7fd fcd1 	bl	8002b84 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e6:	f7fd fccd 	bl	8002b84 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e1a5      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f8:	4b46      	ldr	r3, [pc, #280]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x17e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800519c:	4b43      	ldr	r3, [pc, #268]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4940      	ldr	r1, [pc, #256]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]
 80051b0:	e015      	b.n	80051de <HAL_RCC_OscConfig+0x1de>
=======
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4940      	ldr	r1, [pc, #256]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 8005214:	4313      	orrs	r3, r2
 8005216:	600b      	str	r3, [r1, #0]
 8005218:	e015      	b.n	8005246 <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80051b2:	4b3f      	ldr	r3, [pc, #252]	; (80052b0 <HAL_RCC_OscConfig+0x2b0>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd fcb0 	bl	8002b1c <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c0:	f7fd fcac 	bl	8002b1c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e184      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d2:	4b36      	ldr	r3, [pc, #216]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x1c0>
=======
 800521a:	4b3f      	ldr	r3, [pc, #252]	; (8005318 <HAL_RCC_OscConfig+0x2b0>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fd fcb0 	bl	8002b84 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005228:	f7fd fcac 	bl	8002b84 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e184      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800523a:	4b36      	ldr	r3, [pc, #216]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d030      	beq.n	800524c <HAL_RCC_OscConfig+0x24c>
=======
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d030      	beq.n	80052b4 <HAL_RCC_OscConfig+0x24c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f2:	4b30      	ldr	r3, [pc, #192]	; (80052b4 <HAL_RCC_OscConfig+0x2b4>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fd fc90 	bl	8002b1c <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005200:	f7fd fc8c 	bl	8002b1c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e164      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005212:	4b26      	ldr	r3, [pc, #152]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x200>
 800521e:	e015      	b.n	800524c <HAL_RCC_OscConfig+0x24c>
=======
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d016      	beq.n	8005288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800525a:	4b30      	ldr	r3, [pc, #192]	; (800531c <HAL_RCC_OscConfig+0x2b4>)
 800525c:	2201      	movs	r2, #1
 800525e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fd fc90 	bl	8002b84 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005268:	f7fd fc8c 	bl	8002b84 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e164      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527a:	4b26      	ldr	r3, [pc, #152]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 800527c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x200>
 8005286:	e015      	b.n	80052b4 <HAL_RCC_OscConfig+0x24c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8005220:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <HAL_RCC_OscConfig+0x2b4>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005226:	f7fd fc79 	bl	8002b1c <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800522e:	f7fd fc75 	bl	8002b1c <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e14d      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005240:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x22e>
=======
 8005288:	4b24      	ldr	r3, [pc, #144]	; (800531c <HAL_RCC_OscConfig+0x2b4>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528e:	f7fd fc79 	bl	8002b84 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005296:	f7fd fc75 	bl	8002b84 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e14d      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a8:	4b1a      	ldr	r3, [pc, #104]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80052aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1f0      	bne.n	8005296 <HAL_RCC_OscConfig+0x22e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80a0 	beq.w	800539a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]
=======
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80a0 	beq.w	8005402 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	6413      	str	r3, [r2, #64]	; 0x40
 800527a:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <HAL_RCC_OscConfig+0x2ac>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_RCC_OscConfig+0x2b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d121      	bne.n	80052da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <HAL_RCC_OscConfig+0x2b8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a07      	ldr	r2, [pc, #28]	; (80052b8 <HAL_RCC_OscConfig+0x2b8>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a2:	f7fd fc3b 	bl	8002b1c <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	e011      	b.n	80052ce <HAL_RCC_OscConfig+0x2ce>
 80052aa:	bf00      	nop
 80052ac:	40023800 	.word	0x40023800
 80052b0:	42470000 	.word	0x42470000
 80052b4:	42470e80 	.word	0x42470e80
 80052b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052bc:	f7fd fc2e 	bl	8002b1c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e106      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ce:	4b85      	ldr	r3, [pc, #532]	; (80054e4 <HAL_RCC_OscConfig+0x4e4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x2bc>
=======
 80052c6:	4b13      	ldr	r3, [pc, #76]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10f      	bne.n	80052f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	4a0e      	ldr	r2, [pc, #56]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80052dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e0:	6413      	str	r3, [r2, #64]	; 0x40
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <HAL_RCC_OscConfig+0x2ac>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ea:	60bb      	str	r3, [r7, #8]
 80052ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_RCC_OscConfig+0x2b8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d121      	bne.n	8005342 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052fe:	4b08      	ldr	r3, [pc, #32]	; (8005320 <HAL_RCC_OscConfig+0x2b8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a07      	ldr	r2, [pc, #28]	; (8005320 <HAL_RCC_OscConfig+0x2b8>)
 8005304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800530a:	f7fd fc3b 	bl	8002b84 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005310:	e011      	b.n	8005336 <HAL_RCC_OscConfig+0x2ce>
 8005312:	bf00      	nop
 8005314:	40023800 	.word	0x40023800
 8005318:	42470000 	.word	0x42470000
 800531c:	42470e80 	.word	0x42470e80
 8005320:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005324:	f7fd fc2e 	bl	8002b84 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e106      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005336:	4b85      	ldr	r3, [pc, #532]	; (800554c <HAL_RCC_OscConfig+0x4e4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0x2bc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d106      	bne.n	80052f0 <HAL_RCC_OscConfig+0x2f0>
 80052e2:	4b81      	ldr	r3, [pc, #516]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e6:	4a80      	ldr	r2, [pc, #512]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	6713      	str	r3, [r2, #112]	; 0x70
 80052ee:	e01c      	b.n	800532a <HAL_RCC_OscConfig+0x32a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b05      	cmp	r3, #5
 80052f6:	d10c      	bne.n	8005312 <HAL_RCC_OscConfig+0x312>
 80052f8:	4b7b      	ldr	r3, [pc, #492]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	4a7a      	ldr	r2, [pc, #488]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80052fe:	f043 0304 	orr.w	r3, r3, #4
 8005302:	6713      	str	r3, [r2, #112]	; 0x70
 8005304:	4b78      	ldr	r3, [pc, #480]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	4a77      	ldr	r2, [pc, #476]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	6713      	str	r3, [r2, #112]	; 0x70
 8005310:	e00b      	b.n	800532a <HAL_RCC_OscConfig+0x32a>
 8005312:	4b75      	ldr	r3, [pc, #468]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	4a74      	ldr	r2, [pc, #464]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	6713      	str	r3, [r2, #112]	; 0x70
 800531e:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005322:	4a71      	ldr	r2, [pc, #452]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d015      	beq.n	800535e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7fd fbf3 	bl	8002b1c <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005338:	e00a      	b.n	8005350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fd fbef 	bl	8002b1c <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	; 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e0c5      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005350:	4b65      	ldr	r3, [pc, #404]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0ee      	beq.n	800533a <HAL_RCC_OscConfig+0x33a>
 800535c:	e014      	b.n	8005388 <HAL_RCC_OscConfig+0x388>
=======
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d106      	bne.n	8005358 <HAL_RCC_OscConfig+0x2f0>
 800534a:	4b81      	ldr	r3, [pc, #516]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	4a80      	ldr	r2, [pc, #512]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	6713      	str	r3, [r2, #112]	; 0x70
 8005356:	e01c      	b.n	8005392 <HAL_RCC_OscConfig+0x32a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b05      	cmp	r3, #5
 800535e:	d10c      	bne.n	800537a <HAL_RCC_OscConfig+0x312>
 8005360:	4b7b      	ldr	r3, [pc, #492]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	4a7a      	ldr	r2, [pc, #488]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 8005366:	f043 0304 	orr.w	r3, r3, #4
 800536a:	6713      	str	r3, [r2, #112]	; 0x70
 800536c:	4b78      	ldr	r3, [pc, #480]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005370:	4a77      	ldr	r2, [pc, #476]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	6713      	str	r3, [r2, #112]	; 0x70
 8005378:	e00b      	b.n	8005392 <HAL_RCC_OscConfig+0x32a>
 800537a:	4b75      	ldr	r3, [pc, #468]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	4a74      	ldr	r2, [pc, #464]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	6713      	str	r3, [r2, #112]	; 0x70
 8005386:	4b72      	ldr	r3, [pc, #456]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	4a71      	ldr	r2, [pc, #452]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 800538c:	f023 0304 	bic.w	r3, r3, #4
 8005390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d015      	beq.n	80053c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539a:	f7fd fbf3 	bl	8002b84 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a0:	e00a      	b.n	80053b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a2:	f7fd fbef 	bl	8002b84 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e0c5      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b8:	4b65      	ldr	r3, [pc, #404]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0ee      	beq.n	80053a2 <HAL_RCC_OscConfig+0x33a>
 80053c4:	e014      	b.n	80053f0 <HAL_RCC_OscConfig+0x388>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800535e:	f7fd fbdd 	bl	8002b1c <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005364:	e00a      	b.n	800537c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005366:	f7fd fbd9 	bl	8002b1c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	f241 3288 	movw	r2, #5000	; 0x1388
 8005374:	4293      	cmp	r3, r2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e0af      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800537c:	4b5a      	ldr	r3, [pc, #360]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1ee      	bne.n	8005366 <HAL_RCC_OscConfig+0x366>
=======
 80053c6:	f7fd fbdd 	bl	8002b84 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fd fbd9 	bl	8002b84 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e0af      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e4:	4b5a      	ldr	r3, [pc, #360]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1ee      	bne.n	80053ce <HAL_RCC_OscConfig+0x366>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d105      	bne.n	800539a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538e:	4b56      	ldr	r3, [pc, #344]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	4a55      	ldr	r2, [pc, #340]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005398:	6413      	str	r3, [r2, #64]	; 0x40
=======
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d105      	bne.n	8005402 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f6:	4b56      	ldr	r3, [pc, #344]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	4a55      	ldr	r2, [pc, #340]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 80053fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005400:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 809b 	beq.w	80054da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053a4:	4b50      	ldr	r3, [pc, #320]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 030c 	and.w	r3, r3, #12
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d05c      	beq.n	800546a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d141      	bne.n	800543c <HAL_RCC_OscConfig+0x43c>
=======
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 809b 	beq.w	8005542 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800540c:	4b50      	ldr	r3, [pc, #320]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 030c 	and.w	r3, r3, #12
 8005414:	2b08      	cmp	r3, #8
 8005416:	d05c      	beq.n	80054d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d141      	bne.n	80054a4 <HAL_RCC_OscConfig+0x43c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80053b8:	4b4c      	ldr	r3, [pc, #304]	; (80054ec <HAL_RCC_OscConfig+0x4ec>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053be:	f7fd fbad 	bl	8002b1c <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c6:	f7fd fba9 	bl	8002b1c <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e081      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d8:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f0      	bne.n	80053c6 <HAL_RCC_OscConfig+0x3c6>
=======
 8005420:	4b4c      	ldr	r3, [pc, #304]	; (8005554 <HAL_RCC_OscConfig+0x4ec>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005426:	f7fd fbad 	bl	8002b84 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542e:	f7fd fba9 	bl	8002b84 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e081      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005440:	4b43      	ldr	r3, [pc, #268]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f0      	bne.n	800542e <HAL_RCC_OscConfig+0x3c6>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	019b      	lsls	r3, r3, #6
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	3b01      	subs	r3, #1
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	061b      	lsls	r3, r3, #24
 8005408:	4937      	ldr	r1, [pc, #220]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 800540a:	4313      	orrs	r3, r2
 800540c:	604b      	str	r3, [r1, #4]
=======
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	019b      	lsls	r3, r3, #6
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	085b      	lsrs	r3, r3, #1
 8005464:	3b01      	subs	r3, #1
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	061b      	lsls	r3, r3, #24
 8005470:	4937      	ldr	r1, [pc, #220]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 8005472:	4313      	orrs	r3, r2
 8005474:	604b      	str	r3, [r1, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 800540e:	4b37      	ldr	r3, [pc, #220]	; (80054ec <HAL_RCC_OscConfig+0x4ec>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7fd fb82 	bl	8002b1c <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800541c:	f7fd fb7e 	bl	8002b1c <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e056      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542e:	4b2e      	ldr	r3, [pc, #184]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0x41c>
 800543a:	e04e      	b.n	80054da <HAL_RCC_OscConfig+0x4da>
=======
 8005476:	4b37      	ldr	r3, [pc, #220]	; (8005554 <HAL_RCC_OscConfig+0x4ec>)
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547c:	f7fd fb82 	bl	8002b84 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005484:	f7fd fb7e 	bl	8002b84 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e056      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005496:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x41c>
 80054a2:	e04e      	b.n	8005542 <HAL_RCC_OscConfig+0x4da>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800543c:	4b2b      	ldr	r3, [pc, #172]	; (80054ec <HAL_RCC_OscConfig+0x4ec>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005442:	f7fd fb6b 	bl	8002b1c <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544a:	f7fd fb67 	bl	8002b1c <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e03f      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545c:	4b22      	ldr	r3, [pc, #136]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCC_OscConfig+0x44a>
 8005468:	e037      	b.n	80054da <HAL_RCC_OscConfig+0x4da>
=======
 80054a4:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <HAL_RCC_OscConfig+0x4ec>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054aa:	f7fd fb6b 	bl	8002b84 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b2:	f7fd fb67 	bl	8002b84 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e03f      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c4:	4b22      	ldr	r3, [pc, #136]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f0      	bne.n	80054b2 <HAL_RCC_OscConfig+0x44a>
 80054d0:	e037      	b.n	8005542 <HAL_RCC_OscConfig+0x4da>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e032      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
=======
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e032      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8005476:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <HAL_RCC_OscConfig+0x4e8>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	60fb      	str	r3, [r7, #12]
=======
 80054de:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <HAL_RCC_OscConfig+0x4e8>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d028      	beq.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548e:	429a      	cmp	r2, r3
 8005490:	d121      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d11a      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054a6:	4013      	ands	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d111      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	3b01      	subs	r3, #1
 80054c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d107      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d001      	beq.n	80054da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <HAL_RCC_OscConfig+0x4dc>
=======
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d028      	beq.n	800553e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d121      	bne.n	800553e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005504:	429a      	cmp	r2, r3
 8005506:	d11a      	bne.n	800553e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800550e:	4013      	ands	r3, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005514:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005516:	4293      	cmp	r3, r2
 8005518:	d111      	bne.n	800553e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	3b01      	subs	r3, #1
 8005528:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800552a:	429a      	cmp	r2, r3
 800552c:	d107      	bne.n	800553e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d001      	beq.n	8005542 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40007000 	.word	0x40007000
 80054e8:	40023800 	.word	0x40023800
 80054ec:	42470060 	.word	0x42470060

080054f0 <HAL_RCC_ClockConfig>:
=======
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40007000 	.word	0x40007000
 8005550:	40023800 	.word	0x40023800
 8005554:	42470060 	.word	0x42470060

08005558 <HAL_RCC_ClockConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
=======
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0cc      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
=======
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0cc      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005504:	4b68      	ldr	r3, [pc, #416]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d90c      	bls.n	800552c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005512:	4b65      	ldr	r3, [pc, #404]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
=======
 800556c:	4b68      	ldr	r3, [pc, #416]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d90c      	bls.n	8005594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b65      	ldr	r3, [pc, #404]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800551a:	4b63      	ldr	r3, [pc, #396]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d001      	beq.n	800552c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e0b8      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
=======
 8005582:	4b63      	ldr	r3, [pc, #396]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0b8      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d020      	beq.n	800557a <HAL_RCC_ClockConfig+0x8a>
=======
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d020      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005544:	4b59      	ldr	r3, [pc, #356]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4a58      	ldr	r2, [pc, #352]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800554a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800554e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800555c:	4b53      	ldr	r3, [pc, #332]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a52      	ldr	r2, [pc, #328]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005566:	6093      	str	r3, [r2, #8]
=======
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055ac:	4b59      	ldr	r3, [pc, #356]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a58      	ldr	r2, [pc, #352]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c4:	4b53      	ldr	r3, [pc, #332]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a52      	ldr	r2, [pc, #328]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ce:	6093      	str	r3, [r2, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8005568:	4b50      	ldr	r3, [pc, #320]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	494d      	ldr	r1, [pc, #308]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
=======
 80055d0:	4b50      	ldr	r3, [pc, #320]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	494d      	ldr	r1, [pc, #308]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d044      	beq.n	8005610 <HAL_RCC_ClockConfig+0x120>
=======
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d044      	beq.n	8005678 <HAL_RCC_ClockConfig+0x120>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d107      	bne.n	800559e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558e:	4b47      	ldr	r3, [pc, #284]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d119      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e07f      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
=======
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	4b47      	ldr	r3, [pc, #284]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d119      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e07f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d003      	beq.n	80055ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d107      	bne.n	80055be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ae:	4b3f      	ldr	r3, [pc, #252]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e06f      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
=======
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d003      	beq.n	8005616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005612:	2b03      	cmp	r3, #3
 8005614:	d107      	bne.n	8005626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005616:	4b3f      	ldr	r3, [pc, #252]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e06f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80055be:	4b3b      	ldr	r3, [pc, #236]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e067      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
=======
 8005626:	4b3b      	ldr	r3, [pc, #236]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e067      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80055ce:	4b37      	ldr	r3, [pc, #220]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 0203 	bic.w	r2, r3, #3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4934      	ldr	r1, [pc, #208]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055e0:	f7fd fa9c 	bl	8002b1c <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e8:	f7fd fa98 	bl	8002b1c <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e04f      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	4b2b      	ldr	r3, [pc, #172]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 020c 	and.w	r2, r3, #12
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	429a      	cmp	r2, r3
 800560e:	d1eb      	bne.n	80055e8 <HAL_RCC_ClockConfig+0xf8>
=======
 8005636:	4b37      	ldr	r3, [pc, #220]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f023 0203 	bic.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4934      	ldr	r1, [pc, #208]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	4313      	orrs	r3, r2
 8005646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005648:	f7fd fa9c 	bl	8002b84 <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	e00a      	b.n	8005666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005650:	f7fd fa98 	bl	8002b84 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	; 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e04f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005666:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 020c 	and.w	r2, r3, #12
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	429a      	cmp	r2, r3
 8005676:	d1eb      	bne.n	8005650 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005610:	4b25      	ldr	r3, [pc, #148]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d20c      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b22      	ldr	r3, [pc, #136]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
=======
 8005678:	4b25      	ldr	r3, [pc, #148]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d20c      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005686:	4b22      	ldr	r3, [pc, #136]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8005626:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d001      	beq.n	8005638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e032      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
=======
 800568e:	4b20      	ldr	r3, [pc, #128]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d001      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e032      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005644:	4b19      	ldr	r3, [pc, #100]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4916      	ldr	r1, [pc, #88]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
=======
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056ac:	4b19      	ldr	r3, [pc, #100]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4916      	ldr	r1, [pc, #88]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005662:	4b12      	ldr	r3, [pc, #72]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	490e      	ldr	r1, [pc, #56]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	4313      	orrs	r3, r2
 8005674:	608b      	str	r3, [r1, #8]
=======
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	490e      	ldr	r1, [pc, #56]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	608b      	str	r3, [r1, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8005676:	f000 f82d 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 800567a:	4602      	mov	r2, r0
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	490a      	ldr	r1, [pc, #40]	; (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005688:	5ccb      	ldrb	r3, [r1, r3]
 800568a:	fa22 f303 	lsr.w	r3, r2, r3
 800568e:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fd f9fc 	bl	8002a94 <HAL_InitTick>

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023c00 	.word	0x40023c00
 80056ac:	40023800 	.word	0x40023800
 80056b0:	0800ee00 	.word	0x0800ee00
 80056b4:	20000010 	.word	0x20000010
 80056b8:	20000018 	.word	0x20000018

080056bc <HAL_RCC_EnableCSS>:
=======
 80056de:	f000 f82d 	bl	800573c <HAL_RCC_GetSysClockFreq>
 80056e2:	4602      	mov	r2, r0
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	490a      	ldr	r1, [pc, #40]	; (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 80056f0:	5ccb      	ldrb	r3, [r1, r3]
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_RCC_ClockConfig+0x1c8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd f9fc 	bl	8002afc <HAL_InitTick>

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40023c00 	.word	0x40023c00
 8005714:	40023800 	.word	0x40023800
 8005718:	0800eea4 	.word	0x0800eea4
 800571c:	2000000c 	.word	0x2000000c
 8005720:	20000014 	.word	0x20000014

08005724 <HAL_RCC_EnableCSS>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
<<<<<<< HEAD
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80056c0:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <HAL_RCC_EnableCSS+0x14>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
}
 80056c6:	bf00      	nop
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	4247004c 	.word	0x4247004c

080056d4 <HAL_RCC_GetSysClockFreq>:
=======
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005728:	4b03      	ldr	r3, [pc, #12]	; (8005738 <HAL_RCC_EnableCSS+0x14>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]
}
 800572e:	bf00      	nop
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	4247004c 	.word	0x4247004c

0800573c <HAL_RCC_GetSysClockFreq>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80056d4:	b5b0      	push	{r4, r5, r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056da:	2100      	movs	r1, #0
 80056dc:	6079      	str	r1, [r7, #4]
 80056de:	2100      	movs	r1, #0
 80056e0:	60f9      	str	r1, [r7, #12]
 80056e2:	2100      	movs	r1, #0
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80056e6:	2100      	movs	r1, #0
 80056e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ea:	4952      	ldr	r1, [pc, #328]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 80056ec:	6889      	ldr	r1, [r1, #8]
 80056ee:	f001 010c 	and.w	r1, r1, #12
 80056f2:	2908      	cmp	r1, #8
 80056f4:	d00d      	beq.n	8005712 <HAL_RCC_GetSysClockFreq+0x3e>
 80056f6:	2908      	cmp	r1, #8
 80056f8:	f200 8094 	bhi.w	8005824 <HAL_RCC_GetSysClockFreq+0x150>
 80056fc:	2900      	cmp	r1, #0
 80056fe:	d002      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x32>
 8005700:	2904      	cmp	r1, #4
 8005702:	d003      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x38>
 8005704:	e08e      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x150>
=======
 800573c:	b5b0      	push	{r4, r5, r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005742:	2100      	movs	r1, #0
 8005744:	6079      	str	r1, [r7, #4]
 8005746:	2100      	movs	r1, #0
 8005748:	60f9      	str	r1, [r7, #12]
 800574a:	2100      	movs	r1, #0
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800574e:	2100      	movs	r1, #0
 8005750:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005752:	4952      	ldr	r1, [pc, #328]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 8005754:	6889      	ldr	r1, [r1, #8]
 8005756:	f001 010c 	and.w	r1, r1, #12
 800575a:	2908      	cmp	r1, #8
 800575c:	d00d      	beq.n	800577a <HAL_RCC_GetSysClockFreq+0x3e>
 800575e:	2908      	cmp	r1, #8
 8005760:	f200 8094 	bhi.w	800588c <HAL_RCC_GetSysClockFreq+0x150>
 8005764:	2900      	cmp	r1, #0
 8005766:	d002      	beq.n	800576e <HAL_RCC_GetSysClockFreq+0x32>
 8005768:	2904      	cmp	r1, #4
 800576a:	d003      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0x38>
 800576c:	e08e      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8005706:	4b4c      	ldr	r3, [pc, #304]	; (8005838 <HAL_RCC_GetSysClockFreq+0x164>)
 8005708:	60bb      	str	r3, [r7, #8]
       break;
 800570a:	e08e      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x156>
=======
 800576e:	4b4c      	ldr	r3, [pc, #304]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005770:	60bb      	str	r3, [r7, #8]
       break;
 8005772:	e08e      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x156>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 800570c:	4b4b      	ldr	r3, [pc, #300]	; (800583c <HAL_RCC_GetSysClockFreq+0x168>)
 800570e:	60bb      	str	r3, [r7, #8]
      break;
 8005710:	e08b      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x156>
=======
 8005774:	4b4b      	ldr	r3, [pc, #300]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005776:	60bb      	str	r3, [r7, #8]
      break;
 8005778:	e08b      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x156>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8005712:	4948      	ldr	r1, [pc, #288]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 8005714:	6849      	ldr	r1, [r1, #4]
 8005716:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800571a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800571c:	4945      	ldr	r1, [pc, #276]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 800571e:	6849      	ldr	r1, [r1, #4]
 8005720:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005724:	2900      	cmp	r1, #0
 8005726:	d024      	beq.n	8005772 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005728:	4942      	ldr	r1, [pc, #264]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 800572a:	6849      	ldr	r1, [r1, #4]
 800572c:	0989      	lsrs	r1, r1, #6
 800572e:	4608      	mov	r0, r1
 8005730:	f04f 0100 	mov.w	r1, #0
 8005734:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005738:	f04f 0500 	mov.w	r5, #0
 800573c:	ea00 0204 	and.w	r2, r0, r4
 8005740:	ea01 0305 	and.w	r3, r1, r5
 8005744:	493d      	ldr	r1, [pc, #244]	; (800583c <HAL_RCC_GetSysClockFreq+0x168>)
 8005746:	fb01 f003 	mul.w	r0, r1, r3
 800574a:	2100      	movs	r1, #0
 800574c:	fb01 f102 	mul.w	r1, r1, r2
 8005750:	1844      	adds	r4, r0, r1
 8005752:	493a      	ldr	r1, [pc, #232]	; (800583c <HAL_RCC_GetSysClockFreq+0x168>)
 8005754:	fba2 0101 	umull	r0, r1, r2, r1
 8005758:	1863      	adds	r3, r4, r1
 800575a:	4619      	mov	r1, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	461a      	mov	r2, r3
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	f7fb fa70 	bl	8000c48 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4613      	mov	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e04a      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0x134>
=======
 800577a:	4948      	ldr	r1, [pc, #288]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 800577c:	6849      	ldr	r1, [r1, #4]
 800577e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005782:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005784:	4945      	ldr	r1, [pc, #276]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 8005786:	6849      	ldr	r1, [r1, #4]
 8005788:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800578c:	2900      	cmp	r1, #0
 800578e:	d024      	beq.n	80057da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005790:	4942      	ldr	r1, [pc, #264]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 8005792:	6849      	ldr	r1, [r1, #4]
 8005794:	0989      	lsrs	r1, r1, #6
 8005796:	4608      	mov	r0, r1
 8005798:	f04f 0100 	mov.w	r1, #0
 800579c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80057a0:	f04f 0500 	mov.w	r5, #0
 80057a4:	ea00 0204 	and.w	r2, r0, r4
 80057a8:	ea01 0305 	and.w	r3, r1, r5
 80057ac:	493d      	ldr	r1, [pc, #244]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80057ae:	fb01 f003 	mul.w	r0, r1, r3
 80057b2:	2100      	movs	r1, #0
 80057b4:	fb01 f102 	mul.w	r1, r1, r2
 80057b8:	1844      	adds	r4, r0, r1
 80057ba:	493a      	ldr	r1, [pc, #232]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80057bc:	fba2 0101 	umull	r0, r1, r2, r1
 80057c0:	1863      	adds	r3, r4, r1
 80057c2:	4619      	mov	r1, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	f7fb fa3c 	bl	8000c48 <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4613      	mov	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e04a      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x134>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8005772:	4b30      	ldr	r3, [pc, #192]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	461a      	mov	r2, r3
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005782:	f04f 0100 	mov.w	r1, #0
 8005786:	ea02 0400 	and.w	r4, r2, r0
 800578a:	ea03 0501 	and.w	r5, r3, r1
 800578e:	4620      	mov	r0, r4
 8005790:	4629      	mov	r1, r5
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	014b      	lsls	r3, r1, #5
 800579c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057a0:	0142      	lsls	r2, r0, #5
 80057a2:	4610      	mov	r0, r2
 80057a4:	4619      	mov	r1, r3
 80057a6:	1b00      	subs	r0, r0, r4
 80057a8:	eb61 0105 	sbc.w	r1, r1, r5
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	018b      	lsls	r3, r1, #6
 80057b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057ba:	0182      	lsls	r2, r0, #6
 80057bc:	1a12      	subs	r2, r2, r0
 80057be:	eb63 0301 	sbc.w	r3, r3, r1
 80057c2:	f04f 0000 	mov.w	r0, #0
 80057c6:	f04f 0100 	mov.w	r1, #0
 80057ca:	00d9      	lsls	r1, r3, #3
 80057cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057d0:	00d0      	lsls	r0, r2, #3
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	1912      	adds	r2, r2, r4
 80057d8:	eb45 0303 	adc.w	r3, r5, r3
 80057dc:	f04f 0000 	mov.w	r0, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	0299      	lsls	r1, r3, #10
 80057e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80057ea:	0290      	lsls	r0, r2, #10
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	f7fb fa24 	bl	8000c48 <__aeabi_uldivmod>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4613      	mov	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <HAL_RCC_GetSysClockFreq+0x160>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	3301      	adds	r3, #1
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005820:	60bb      	str	r3, [r7, #8]
      break;
 8005822:	e002      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x156>
=======
 80057da:	4b30      	ldr	r3, [pc, #192]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	099b      	lsrs	r3, r3, #6
 80057e0:	461a      	mov	r2, r3
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ea:	f04f 0100 	mov.w	r1, #0
 80057ee:	ea02 0400 	and.w	r4, r2, r0
 80057f2:	ea03 0501 	and.w	r5, r3, r1
 80057f6:	4620      	mov	r0, r4
 80057f8:	4629      	mov	r1, r5
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	014b      	lsls	r3, r1, #5
 8005804:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005808:	0142      	lsls	r2, r0, #5
 800580a:	4610      	mov	r0, r2
 800580c:	4619      	mov	r1, r3
 800580e:	1b00      	subs	r0, r0, r4
 8005810:	eb61 0105 	sbc.w	r1, r1, r5
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	018b      	lsls	r3, r1, #6
 800581e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005822:	0182      	lsls	r2, r0, #6
 8005824:	1a12      	subs	r2, r2, r0
 8005826:	eb63 0301 	sbc.w	r3, r3, r1
 800582a:	f04f 0000 	mov.w	r0, #0
 800582e:	f04f 0100 	mov.w	r1, #0
 8005832:	00d9      	lsls	r1, r3, #3
 8005834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005838:	00d0      	lsls	r0, r2, #3
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	1912      	adds	r2, r2, r4
 8005840:	eb45 0303 	adc.w	r3, r5, r3
 8005844:	f04f 0000 	mov.w	r0, #0
 8005848:	f04f 0100 	mov.w	r1, #0
 800584c:	0299      	lsls	r1, r3, #10
 800584e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005852:	0290      	lsls	r0, r2, #10
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4610      	mov	r0, r2
 800585a:	4619      	mov	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	461a      	mov	r2, r3
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	f7fb f9f0 	bl	8000c48 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4613      	mov	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005870:	4b0a      	ldr	r3, [pc, #40]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	3301      	adds	r3, #1
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	fbb2 f3f3 	udiv	r3, r2, r3
 8005888:	60bb      	str	r3, [r7, #8]
      break;
 800588a:	e002      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x156>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <HAL_RCC_GetSysClockFreq+0x164>)
 8005826:	60bb      	str	r3, [r7, #8]
      break;
 8005828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800582a:	68bb      	ldr	r3, [r7, #8]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bdb0      	pop	{r4, r5, r7, pc}
 8005834:	40023800 	.word	0x40023800
 8005838:	00f42400 	.word	0x00f42400
 800583c:	017d7840 	.word	0x017d7840

08005840 <HAL_RCC_GetHCLKFreq>:
=======
 800588c:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800588e:	60bb      	str	r3, [r7, #8]
      break;
 8005890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005892:	68bb      	ldr	r3, [r7, #8]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bdb0      	pop	{r4, r5, r7, pc}
 800589c:	40023800 	.word	0x40023800
 80058a0:	00f42400 	.word	0x00f42400
 80058a4:	017d7840 	.word	0x017d7840

080058a8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005844:	4b03      	ldr	r3, [pc, #12]	; (8005854 <HAL_RCC_GetHCLKFreq+0x14>)
 8005846:	681b      	ldr	r3, [r3, #0]
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000010 	.word	0x20000010

08005858 <HAL_RCC_GetPCLK1Freq>:
=======
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	2000000c 	.word	0x2000000c

080058c0 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800585c:	f7ff fff0 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0a9b      	lsrs	r3, r3, #10
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4903      	ldr	r1, [pc, #12]	; (800587c <HAL_RCC_GetPCLK1Freq+0x24>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40023800 	.word	0x40023800
 800587c:	0800ee10 	.word	0x0800ee10

08005880 <HAL_RCC_GetPCLK2Freq>:
=======
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058c4:	f7ff fff0 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0a9b      	lsrs	r3, r3, #10
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4903      	ldr	r1, [pc, #12]	; (80058e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	0800eeb4 	.word	0x0800eeb4

080058e8 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005884:	f7ff ffdc 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005888:	4602      	mov	r2, r0
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	0b5b      	lsrs	r3, r3, #13
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	4903      	ldr	r1, [pc, #12]	; (80058a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005896:	5ccb      	ldrb	r3, [r1, r3]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40023800 	.word	0x40023800
 80058a4:	0800ee10 	.word	0x0800ee10

080058a8 <HAL_RCC_NMI_IRQHandler>:
=======
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058ec:	f7ff ffdc 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0b5b      	lsrs	r3, r3, #13
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4903      	ldr	r1, [pc, #12]	; (800590c <HAL_RCC_GetPCLK2Freq+0x24>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40023800 	.word	0x40023800
 800590c:	0800eeb4 	.word	0x0800eeb4

08005910 <HAL_RCC_NMI_IRQHandler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
<<<<<<< HEAD
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d104      	bne.n	80058c2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80058b8:	f000 f80a 	bl	80058d0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80058bc:	4b03      	ldr	r3, [pc, #12]	; (80058cc <HAL_RCC_NMI_IRQHandler+0x24>)
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	701a      	strb	r2, [r3, #0]
  }
}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800
 80058cc:	4002380e 	.word	0x4002380e

080058d0 <HAL_RCC_CSSCallback>:
=======
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d104      	bne.n	800592a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005920:	f000 f80a 	bl	8005938 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005924:	4b03      	ldr	r3, [pc, #12]	; (8005934 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005926:	2280      	movs	r2, #128	; 0x80
 8005928:	701a      	strb	r2, [r3, #0]
  }
}
 800592a:	bf00      	nop
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40023800 	.word	0x40023800
 8005934:	4002380e 	.word	0x4002380e

08005938 <HAL_RCC_CSSCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
<<<<<<< HEAD
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
=======
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_SPI_Init>:
=======
 800593c:	bf00      	nop
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_SPI_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e07b      	b.n	80059e8 <HAL_SPI_Init+0x10a>
=======
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e07b      	b.n	8005a50 <HAL_SPI_Init+0x10a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <HAL_SPI_Init+0x2c>
=======
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d108      	bne.n	8005972 <HAL_SPI_Init+0x2c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005900:	d009      	beq.n	8005916 <HAL_SPI_Init+0x38>
=======
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005968:	d009      	beq.n	800597e <HAL_SPI_Init+0x38>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	61da      	str	r2, [r3, #28]
 8005908:	e005      	b.n	8005916 <HAL_SPI_Init+0x38>
=======
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	61da      	str	r2, [r3, #28]
 8005970:	e005      	b.n	800597e <HAL_SPI_Init+0x38>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	615a      	str	r2, [r3, #20]
=======
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fc faef 	bl	8001f14 <HAL_SPI_MspInit>
=======
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fc fa9d 	bl	8001ed8 <HAL_SPI_MspInit>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594c:	601a      	str	r2, [r3, #0]
=======
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b4:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	ea42 0103 	orr.w	r1, r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
=======
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a02:	ea42 0103 	orr.w	r1, r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< HEAD
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	0c1b      	lsrs	r3, r3, #16
 80059b4:	f003 0104 	and.w	r1, r3, #4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	f003 0210 	and.w	r2, r3, #16
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	605a      	str	r2, [r3, #4]
=======
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	f003 0104 	and.w	r1, r3, #4
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f003 0210 	and.w	r2, r3, #16
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	605a      	str	r2, [r3, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_Base_Init>:
=======
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	69da      	ldr	r2, [r3, #28]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_TIM_Base_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e041      	b.n	8005a86 <HAL_TIM_Base_Init+0x96>
=======
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e041      	b.n	8005aee <HAL_TIM_Base_Init+0x96>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fc fae6 	bl	8001fe8 <HAL_TIM_Base_MspInit>
=======
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fc fa94 	bl	8001fac <HAL_TIM_Base_MspInit>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f000 fae0 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <HAL_TIM_Base_Start_IT>:
=======
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f000 fae0 	bl	800605c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_TIM_Base_Start_IT>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
=======
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d001      	beq.n	8005aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e04e      	b.n	8005b46 <HAL_TIM_Base_Start_IT+0xb6>
=======
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d001      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e04e      	b.n	8005bae <HAL_TIM_Base_Start_IT+0xb6>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a23      	ldr	r2, [pc, #140]	; (8005b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d022      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d01d      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d018      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_TIM_Base_Start_IT+0x80>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d111      	bne.n	8005b34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	d010      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0201 	orr.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b32:	e007      	b.n	8005b44 <HAL_TIM_Base_Start_IT+0xb4>
=======
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a23      	ldr	r2, [pc, #140]	; (8005bbc <HAL_TIM_Base_Start_IT+0xc4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d022      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x80>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3a:	d01d      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x80>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1f      	ldr	r2, [pc, #124]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d018      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x80>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1e      	ldr	r2, [pc, #120]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d013      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x80>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00e      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x80>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1b      	ldr	r2, [pc, #108]	; (8005bcc <HAL_TIM_Base_Start_IT+0xd4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d009      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x80>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a19      	ldr	r2, [pc, #100]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x80>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a18      	ldr	r2, [pc, #96]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d111      	bne.n	8005b9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b06      	cmp	r3, #6
 8005b88:	d010      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0201 	orr.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9a:	e007      	b.n	8005bac <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
=======
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40000400 	.word	0x40000400
 8005b5c:	40000800 	.word	0x40000800
 8005b60:	40000c00 	.word	0x40000c00
 8005b64:	40010400 	.word	0x40010400
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40001800 	.word	0x40001800

08005b70 <HAL_TIM_PWM_Init>:
=======
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40010400 	.word	0x40010400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40001800 	.word	0x40001800

08005bd8 <HAL_TIM_PWM_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e041      	b.n	8005c06 <HAL_TIM_PWM_Init+0x96>
=======
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e041      	b.n	8005c6e <HAL_TIM_PWM_Init+0x96>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fc fa04 	bl	8001fa4 <HAL_TIM_PWM_MspInit>
=======
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fc f9b2 	bl	8001f68 <HAL_TIM_PWM_MspInit>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f000 fa20 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_TIM_IRQHandler>:
=======
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4619      	mov	r1, r3
 8005c16:	4610      	mov	r0, r2
 8005c18:	f000 fa20 	bl	800605c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_TIM_IRQHandler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d122      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d11b      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f06f 0202 	mvn.w	r2, #2
 8005c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_TIM_IRQHandler+0x4a>
=======
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d122      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d11b      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f06f 0202 	mvn.w	r2, #2
 8005ca2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f9b1 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005c56:	e005      	b.n	8005c64 <HAL_TIM_IRQHandler+0x56>
=======
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f9b1 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005cbe:	e005      	b.n	8005ccc <HAL_TIM_IRQHandler+0x56>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f9a3 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f9b4 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	771a      	strb	r2, [r3, #28]
=======
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f9a3 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f9b4 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d122      	bne.n	8005cbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d11b      	bne.n	8005cbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f06f 0204 	mvn.w	r2, #4
 8005c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_TIM_IRQHandler+0x9e>
=======
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d122      	bne.n	8005d26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d11b      	bne.n	8005d26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0204 	mvn.w	r2, #4
 8005cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f987 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005d12:	e005      	b.n	8005d20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f979 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f98a 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d122      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d11b      	bne.n	8005d7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f06f 0208 	mvn.w	r2, #8
 8005d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f95d 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005d66:	e005      	b.n	8005d74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f94f 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f960 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d122      	bne.n	8005dce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b10      	cmp	r3, #16
 8005d94:	d11b      	bne.n	8005dce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f06f 0210 	mvn.w	r2, #16
 8005d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2208      	movs	r2, #8
 8005da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_TIM_IRQHandler+0x146>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f987 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005caa:	e005      	b.n	8005cb8 <HAL_TIM_IRQHandler+0xaa>
=======
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f933 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005dba:	e005      	b.n	8005dc8 <HAL_TIM_IRQHandler+0x152>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f979 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f98a 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
=======
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f925 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f936 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	771a      	strb	r2, [r3, #28]
    }
  }
<<<<<<< HEAD
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d122      	bne.n	8005d12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d11b      	bne.n	8005d12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0208 	mvn.w	r2, #8
 8005ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f95d 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005cfe:	e005      	b.n	8005d0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f94f 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f960 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d122      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d11b      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f06f 0210 	mvn.w	r2, #16
 8005d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f933 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005d52:	e005      	b.n	8005d60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f925 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f936 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10e      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f06f 0201 	mvn.w	r2, #1
 8005d8a:	611a      	str	r2, [r3, #16]
=======
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d10e      	bne.n	8005dfa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d107      	bne.n	8005dfa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f06f 0201 	mvn.w	r2, #1
 8005df2:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fc f83b 	bl	8001e08 <HAL_TIM_PeriodElapsedCallback>
=======
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7fb ffe9 	bl	8001dcc <HAL_TIM_PeriodElapsedCallback>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9c:	2b80      	cmp	r3, #128	; 0x80
 8005d9e:	d10e      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005daa:	2b80      	cmp	r3, #128	; 0x80
 8005dac:	d107      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005db6:	611a      	str	r2, [r3, #16]
=======
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	2b80      	cmp	r3, #128	; 0x80
 8005e06:	d10e      	bne.n	8005e26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e12:	2b80      	cmp	r3, #128	; 0x80
 8005e14:	d107      	bne.n	8005e26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e1e:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fcfd 	bl	80067b8 <HAL_TIMEx_BreakCallback>
=======
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fcfd 	bl	8006820 <HAL_TIMEx_BreakCallback>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d10e      	bne.n	8005dea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	d107      	bne.n	8005dea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005de2:	611a      	str	r2, [r3, #16]
=======
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d10e      	bne.n	8005e52 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	d107      	bne.n	8005e52 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e4a:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f8fb 	bl	8005fe0 <HAL_TIM_TriggerCallback>
=======
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f8fb 	bl	8006048 <HAL_TIM_TriggerCallback>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d10e      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d107      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f06f 0220 	mvn.w	r2, #32
 8005e0e:	611a      	str	r2, [r3, #16]
=======
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d10e      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d107      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f06f 0220 	mvn.w	r2, #32
 8005e76:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fcc7 	bl	80067a4 <HAL_TIMEx_CommutCallback>
=======
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fcc7 	bl	800680c <HAL_TIMEx_CommutCallback>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <HAL_TIM_PWM_ConfigChannel>:
=======
 8005e7e:	bf00      	nop
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	75fb      	strb	r3, [r7, #23]
=======
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e0ae      	b.n	8005f9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b0c      	cmp	r3, #12
 8005e4a:	f200 809f 	bhi.w	8005f8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e4e:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005f8d 	.word	0x08005f8d
 8005e5c:	08005f8d 	.word	0x08005f8d
 8005e60:	08005f8d 	.word	0x08005f8d
 8005e64:	08005ec9 	.word	0x08005ec9
 8005e68:	08005f8d 	.word	0x08005f8d
 8005e6c:	08005f8d 	.word	0x08005f8d
 8005e70:	08005f8d 	.word	0x08005f8d
 8005e74:	08005f0b 	.word	0x08005f0b
 8005e78:	08005f8d 	.word	0x08005f8d
 8005e7c:	08005f8d 	.word	0x08005f8d
 8005e80:	08005f8d 	.word	0x08005f8d
 8005e84:	08005f4b 	.word	0x08005f4b
=======
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e0ae      	b.n	8006004 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	f200 809f 	bhi.w	8005ff4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ef1 	.word	0x08005ef1
 8005ec0:	08005ff5 	.word	0x08005ff5
 8005ec4:	08005ff5 	.word	0x08005ff5
 8005ec8:	08005ff5 	.word	0x08005ff5
 8005ecc:	08005f31 	.word	0x08005f31
 8005ed0:	08005ff5 	.word	0x08005ff5
 8005ed4:	08005ff5 	.word	0x08005ff5
 8005ed8:	08005ff5 	.word	0x08005ff5
 8005edc:	08005f73 	.word	0x08005f73
 8005ee0:	08005ff5 	.word	0x08005ff5
 8005ee4:	08005ff5 	.word	0x08005ff5
 8005ee8:	08005ff5 	.word	0x08005ff5
 8005eec:	08005fb3 	.word	0x08005fb3
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68b9      	ldr	r1, [r7, #8]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f950 	bl	8006134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0208 	orr.w	r2, r2, #8
 8005ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0204 	bic.w	r2, r2, #4
 8005eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6999      	ldr	r1, [r3, #24]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	619a      	str	r2, [r3, #24]
      break;
 8005ec6:	e064      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f950 	bl	800619c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0208 	orr.w	r2, r2, #8
 8005f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0204 	bic.w	r2, r2, #4
 8005f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6999      	ldr	r1, [r3, #24]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	619a      	str	r2, [r3, #24]
      break;
 8005f2e:	e064      	b.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f9a0 	bl	8006214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6999      	ldr	r1, [r3, #24]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	021a      	lsls	r2, r3, #8
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	619a      	str	r2, [r3, #24]
      break;
 8005f08:	e043      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f9a0 	bl	800627c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6999      	ldr	r1, [r3, #24]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	021a      	lsls	r2, r3, #8
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	619a      	str	r2, [r3, #24]
      break;
 8005f70:	e043      	b.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 f9f5 	bl	8006300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0208 	orr.w	r2, r2, #8
 8005f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0204 	bic.w	r2, r2, #4
 8005f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	69d9      	ldr	r1, [r3, #28]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	61da      	str	r2, [r3, #28]
      break;
 8005f48:	e023      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 f9f5 	bl	8006368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0208 	orr.w	r2, r2, #8
 8005f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0204 	bic.w	r2, r2, #4
 8005f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69d9      	ldr	r1, [r3, #28]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	61da      	str	r2, [r3, #28]
      break;
 8005fb0:	e023      	b.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 fa49 	bl	80063e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69da      	ldr	r2, [r3, #28]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69d9      	ldr	r1, [r3, #28]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	021a      	lsls	r2, r3, #8
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	61da      	str	r2, [r3, #28]
      break;
 8005f8a:	e002      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fa49 	bl	8006450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69d9      	ldr	r1, [r3, #28]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	021a      	lsls	r2, r3, #8
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	61da      	str	r2, [r3, #28]
      break;
 8005ff2:	e002      	b.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006002:	7dfb      	ldrb	r3, [r7, #23]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
=======
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIM_IC_CaptureCallback>:
=======
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
=======
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
=======
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIM_TriggerCallback>:
=======
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIM_TriggerCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
=======
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <TIM_Base_SetConfig>:
=======
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <TIM_Base_SetConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a40      	ldr	r2, [pc, #256]	; (8006108 <TIM_Base_SetConfig+0x114>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006012:	d00f      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3d      	ldr	r2, [pc, #244]	; (800610c <TIM_Base_SetConfig+0x118>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3c      	ldr	r2, [pc, #240]	; (8006110 <TIM_Base_SetConfig+0x11c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3b      	ldr	r2, [pc, #236]	; (8006114 <TIM_Base_SetConfig+0x120>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a3a      	ldr	r2, [pc, #232]	; (8006118 <TIM_Base_SetConfig+0x124>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2f      	ldr	r2, [pc, #188]	; (8006108 <TIM_Base_SetConfig+0x114>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d02b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006054:	d027      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2c      	ldr	r2, [pc, #176]	; (800610c <TIM_Base_SetConfig+0x118>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d023      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2b      	ldr	r2, [pc, #172]	; (8006110 <TIM_Base_SetConfig+0x11c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01f      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2a      	ldr	r2, [pc, #168]	; (8006114 <TIM_Base_SetConfig+0x120>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a29      	ldr	r2, [pc, #164]	; (8006118 <TIM_Base_SetConfig+0x124>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d017      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a28      	ldr	r2, [pc, #160]	; (800611c <TIM_Base_SetConfig+0x128>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a27      	ldr	r2, [pc, #156]	; (8006120 <TIM_Base_SetConfig+0x12c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00f      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a26      	ldr	r2, [pc, #152]	; (8006124 <TIM_Base_SetConfig+0x130>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a25      	ldr	r2, [pc, #148]	; (8006128 <TIM_Base_SetConfig+0x134>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a24      	ldr	r2, [pc, #144]	; (800612c <TIM_Base_SetConfig+0x138>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a23      	ldr	r2, [pc, #140]	; (8006130 <TIM_Base_SetConfig+0x13c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
=======
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a40      	ldr	r2, [pc, #256]	; (8006170 <TIM_Base_SetConfig+0x114>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d013      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607a:	d00f      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a3d      	ldr	r2, [pc, #244]	; (8006174 <TIM_Base_SetConfig+0x118>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00b      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a3c      	ldr	r2, [pc, #240]	; (8006178 <TIM_Base_SetConfig+0x11c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d007      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a3b      	ldr	r2, [pc, #236]	; (800617c <TIM_Base_SetConfig+0x120>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a3a      	ldr	r2, [pc, #232]	; (8006180 <TIM_Base_SetConfig+0x124>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d108      	bne.n	80060ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2f      	ldr	r2, [pc, #188]	; (8006170 <TIM_Base_SetConfig+0x114>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d02b      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060bc:	d027      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2c      	ldr	r2, [pc, #176]	; (8006174 <TIM_Base_SetConfig+0x118>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d023      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2b      	ldr	r2, [pc, #172]	; (8006178 <TIM_Base_SetConfig+0x11c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01f      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2a      	ldr	r2, [pc, #168]	; (800617c <TIM_Base_SetConfig+0x120>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d01b      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a29      	ldr	r2, [pc, #164]	; (8006180 <TIM_Base_SetConfig+0x124>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d017      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a28      	ldr	r2, [pc, #160]	; (8006184 <TIM_Base_SetConfig+0x128>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a27      	ldr	r2, [pc, #156]	; (8006188 <TIM_Base_SetConfig+0x12c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00f      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a26      	ldr	r2, [pc, #152]	; (800618c <TIM_Base_SetConfig+0x130>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00b      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a25      	ldr	r2, [pc, #148]	; (8006190 <TIM_Base_SetConfig+0x134>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d007      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a24      	ldr	r2, [pc, #144]	; (8006194 <TIM_Base_SetConfig+0x138>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a23      	ldr	r2, [pc, #140]	; (8006198 <TIM_Base_SetConfig+0x13c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <TIM_Base_SetConfig+0x114>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_Base_SetConfig+0xf8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a0c      	ldr	r2, [pc, #48]	; (8006118 <TIM_Base_SetConfig+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d103      	bne.n	80060f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <TIM_Base_SetConfig+0x114>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_Base_SetConfig+0xf8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a0c      	ldr	r2, [pc, #48]	; (8006180 <TIM_Base_SetConfig+0x124>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d103      	bne.n	800615c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	615a      	str	r2, [r3, #20]
}
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40010000 	.word	0x40010000
 800610c:	40000400 	.word	0x40000400
 8006110:	40000800 	.word	0x40000800
 8006114:	40000c00 	.word	0x40000c00
 8006118:	40010400 	.word	0x40010400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800
 8006128:	40001800 	.word	0x40001800
 800612c:	40001c00 	.word	0x40001c00
 8006130:	40002000 	.word	0x40002000

08006134 <TIM_OC1_SetConfig>:
=======
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	615a      	str	r2, [r3, #20]
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40010000 	.word	0x40010000
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40010400 	.word	0x40010400
 8006184:	40014000 	.word	0x40014000
 8006188:	40014400 	.word	0x40014400
 800618c:	40014800 	.word	0x40014800
 8006190:	40001800 	.word	0x40001800
 8006194:	40001c00 	.word	0x40001c00
 8006198:	40002000 	.word	0x40002000

0800619c <TIM_OC1_SetConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
=======
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 0302 	bic.w	r3, r3, #2
 800617c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a20      	ldr	r2, [pc, #128]	; (800620c <TIM_OC1_SetConfig+0xd8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC1_SetConfig+0x64>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <TIM_OC1_SetConfig+0xdc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10c      	bne.n	80061b2 <TIM_OC1_SetConfig+0x7e>
=======
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0303 	bic.w	r3, r3, #3
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f023 0302 	bic.w	r3, r3, #2
 80061e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a20      	ldr	r2, [pc, #128]	; (8006274 <TIM_OC1_SetConfig+0xd8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_OC1_SetConfig+0x64>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <TIM_OC1_SetConfig+0xdc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d10c      	bne.n	800621a <TIM_OC1_SetConfig+0x7e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0308 	bic.w	r3, r3, #8
 800619e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 0304 	bic.w	r3, r3, #4
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a15      	ldr	r2, [pc, #84]	; (800620c <TIM_OC1_SetConfig+0xd8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC1_SetConfig+0x8e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a14      	ldr	r2, [pc, #80]	; (8006210 <TIM_OC1_SetConfig+0xdc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d111      	bne.n	80061e6 <TIM_OC1_SetConfig+0xb2>
=======
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0308 	bic.w	r3, r3, #8
 8006206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f023 0304 	bic.w	r3, r3, #4
 8006218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a15      	ldr	r2, [pc, #84]	; (8006274 <TIM_OC1_SetConfig+0xd8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_OC1_SetConfig+0x8e>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a14      	ldr	r2, [pc, #80]	; (8006278 <TIM_OC1_SetConfig+0xdc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d111      	bne.n	800624e <TIM_OC1_SetConfig+0xb2>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
=======
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	621a      	str	r2, [r3, #32]
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_OC2_SetConfig>:
=======
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	621a      	str	r2, [r3, #32]
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	40010000 	.word	0x40010000
 8006278:	40010400 	.word	0x40010400

0800627c <TIM_OC2_SetConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
=======
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f023 0210 	bic.w	r2, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0320 	bic.w	r3, r3, #32
 800625e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a22      	ldr	r2, [pc, #136]	; (80062f8 <TIM_OC2_SetConfig+0xe4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC2_SetConfig+0x68>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a21      	ldr	r2, [pc, #132]	; (80062fc <TIM_OC2_SetConfig+0xe8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d10d      	bne.n	8006298 <TIM_OC2_SetConfig+0x84>
=======
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f023 0210 	bic.w	r2, r3, #16
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f023 0320 	bic.w	r3, r3, #32
 80062c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a22      	ldr	r2, [pc, #136]	; (8006360 <TIM_OC2_SetConfig+0xe4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC2_SetConfig+0x68>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a21      	ldr	r2, [pc, #132]	; (8006364 <TIM_OC2_SetConfig+0xe8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10d      	bne.n	8006300 <TIM_OC2_SetConfig+0x84>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006296:	617b      	str	r3, [r7, #20]
=======
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062fe:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <TIM_OC2_SetConfig+0xe4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC2_SetConfig+0x94>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a16      	ldr	r2, [pc, #88]	; (80062fc <TIM_OC2_SetConfig+0xe8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d113      	bne.n	80062d0 <TIM_OC2_SetConfig+0xbc>
=======
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a17      	ldr	r2, [pc, #92]	; (8006360 <TIM_OC2_SetConfig+0xe4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_OC2_SetConfig+0x94>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a16      	ldr	r2, [pc, #88]	; (8006364 <TIM_OC2_SetConfig+0xe8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d113      	bne.n	8006338 <TIM_OC2_SetConfig+0xbc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
=======
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40010400 	.word	0x40010400

08006300 <TIM_OC3_SetConfig>:
=======
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40010000 	.word	0x40010000
 8006364:	40010400 	.word	0x40010400

08006368 <TIM_OC3_SetConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
=======
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0303 	bic.w	r3, r3, #3
 8006336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a21      	ldr	r2, [pc, #132]	; (80063e0 <TIM_OC3_SetConfig+0xe0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC3_SetConfig+0x66>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a20      	ldr	r2, [pc, #128]	; (80063e4 <TIM_OC3_SetConfig+0xe4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d10d      	bne.n	8006382 <TIM_OC3_SetConfig+0x82>
=======
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a21      	ldr	r2, [pc, #132]	; (8006448 <TIM_OC3_SetConfig+0xe0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_OC3_SetConfig+0x66>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a20      	ldr	r2, [pc, #128]	; (800644c <TIM_OC3_SetConfig+0xe4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d10d      	bne.n	80063ea <TIM_OC3_SetConfig+0x82>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800636c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <TIM_OC3_SetConfig+0xe0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_OC3_SetConfig+0x92>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <TIM_OC3_SetConfig+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d113      	bne.n	80063ba <TIM_OC3_SetConfig+0xba>
=======
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a16      	ldr	r2, [pc, #88]	; (8006448 <TIM_OC3_SetConfig+0xe0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_OC3_SetConfig+0x92>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a15      	ldr	r2, [pc, #84]	; (800644c <TIM_OC3_SetConfig+0xe4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d113      	bne.n	8006422 <TIM_OC3_SetConfig+0xba>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
=======
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	621a      	str	r2, [r3, #32]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40010400 	.word	0x40010400

080063e8 <TIM_OC4_SetConfig>:
=======
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	621a      	str	r2, [r3, #32]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40010000 	.word	0x40010000
 800644c:	40010400 	.word	0x40010400

08006450 <TIM_OC4_SetConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
=======
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	031b      	lsls	r3, r3, #12
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a12      	ldr	r2, [pc, #72]	; (800648c <TIM_OC4_SetConfig+0xa4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_OC4_SetConfig+0x68>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a11      	ldr	r2, [pc, #68]	; (8006490 <TIM_OC4_SetConfig+0xa8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d109      	bne.n	8006464 <TIM_OC4_SetConfig+0x7c>
=======
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800649a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	031b      	lsls	r3, r3, #12
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a12      	ldr	r2, [pc, #72]	; (80064f4 <TIM_OC4_SetConfig+0xa4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC4_SetConfig+0x68>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a11      	ldr	r2, [pc, #68]	; (80064f8 <TIM_OC4_SetConfig+0xa8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d109      	bne.n	80064cc <TIM_OC4_SetConfig+0x7c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	019b      	lsls	r3, r3, #6
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
=======
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	019b      	lsls	r3, r3, #6
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40010400 	.word	0x40010400

08006494 <HAL_TIMEx_PWMN_Start>:
=======
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40010400 	.word	0x40010400

080064fc <HAL_TIMEx_PWMN_Start>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
=======
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <HAL_TIMEx_PWMN_Start+0x24>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	bf14      	ite	ne
 80064b0:	2301      	movne	r3, #1
 80064b2:	2300      	moveq	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	e022      	b.n	80064fe <HAL_TIMEx_PWMN_Start+0x6a>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d109      	bne.n	80064d2 <HAL_TIMEx_PWMN_Start+0x3e>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	bf14      	ite	ne
 80064ca:	2301      	movne	r3, #1
 80064cc:	2300      	moveq	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	e015      	b.n	80064fe <HAL_TIMEx_PWMN_Start+0x6a>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d109      	bne.n	80064ec <HAL_TIMEx_PWMN_Start+0x58>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	bf14      	ite	ne
 80064e4:	2301      	movne	r3, #1
 80064e6:	2300      	moveq	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	e008      	b.n	80064fe <HAL_TIMEx_PWMN_Start+0x6a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e06d      	b.n	80065e2 <HAL_TIMEx_PWMN_Start+0x14e>
=======
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <HAL_TIMEx_PWMN_Start+0x24>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	e022      	b.n	8006566 <HAL_TIMEx_PWMN_Start+0x6a>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b04      	cmp	r3, #4
 8006524:	d109      	bne.n	800653a <HAL_TIMEx_PWMN_Start+0x3e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	bf14      	ite	ne
 8006532:	2301      	movne	r3, #1
 8006534:	2300      	moveq	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	e015      	b.n	8006566 <HAL_TIMEx_PWMN_Start+0x6a>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b08      	cmp	r3, #8
 800653e:	d109      	bne.n	8006554 <HAL_TIMEx_PWMN_Start+0x58>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	e008      	b.n	8006566 <HAL_TIMEx_PWMN_Start+0x6a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	bf14      	ite	ne
 8006560:	2301      	movne	r3, #1
 8006562:	2300      	moveq	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e06d      	b.n	800664a <HAL_TIMEx_PWMN_Start+0x14e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <HAL_TIMEx_PWMN_Start+0x82>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006514:	e013      	b.n	800653e <HAL_TIMEx_PWMN_Start+0xaa>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b04      	cmp	r3, #4
 800651a:	d104      	bne.n	8006526 <HAL_TIMEx_PWMN_Start+0x92>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006524:	e00b      	b.n	800653e <HAL_TIMEx_PWMN_Start+0xaa>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d104      	bne.n	8006536 <HAL_TIMEx_PWMN_Start+0xa2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006534:	e003      	b.n	800653e <HAL_TIMEx_PWMN_Start+0xaa>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2204      	movs	r2, #4
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f940 	bl	80067cc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a22      	ldr	r2, [pc, #136]	; (80065ec <HAL_TIMEx_PWMN_Start+0x158>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d022      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d01d      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1e      	ldr	r2, [pc, #120]	; (80065f0 <HAL_TIMEx_PWMN_Start+0x15c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d018      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1d      	ldr	r2, [pc, #116]	; (80065f4 <HAL_TIMEx_PWMN_Start+0x160>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1b      	ldr	r2, [pc, #108]	; (80065f8 <HAL_TIMEx_PWMN_Start+0x164>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00e      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1a      	ldr	r2, [pc, #104]	; (80065fc <HAL_TIMEx_PWMN_Start+0x168>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a18      	ldr	r2, [pc, #96]	; (8006600 <HAL_TIMEx_PWMN_Start+0x16c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_TIMEx_PWMN_Start+0x118>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a17      	ldr	r2, [pc, #92]	; (8006604 <HAL_TIMEx_PWMN_Start+0x170>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d111      	bne.n	80065d0 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b06      	cmp	r3, #6
 80065bc:	d010      	beq.n	80065e0 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0201 	orr.w	r2, r2, #1
 80065cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ce:	e007      	b.n	80065e0 <HAL_TIMEx_PWMN_Start+0x14c>
=======
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <HAL_TIMEx_PWMN_Start+0x82>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800657c:	e013      	b.n	80065a6 <HAL_TIMEx_PWMN_Start+0xaa>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b04      	cmp	r3, #4
 8006582:	d104      	bne.n	800658e <HAL_TIMEx_PWMN_Start+0x92>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800658c:	e00b      	b.n	80065a6 <HAL_TIMEx_PWMN_Start+0xaa>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b08      	cmp	r3, #8
 8006592:	d104      	bne.n	800659e <HAL_TIMEx_PWMN_Start+0xa2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800659c:	e003      	b.n	80065a6 <HAL_TIMEx_PWMN_Start+0xaa>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2204      	movs	r2, #4
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 f940 	bl	8006834 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a22      	ldr	r2, [pc, #136]	; (8006654 <HAL_TIMEx_PWMN_Start+0x158>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d022      	beq.n	8006614 <HAL_TIMEx_PWMN_Start+0x118>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d6:	d01d      	beq.n	8006614 <HAL_TIMEx_PWMN_Start+0x118>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <HAL_TIMEx_PWMN_Start+0x15c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d018      	beq.n	8006614 <HAL_TIMEx_PWMN_Start+0x118>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1d      	ldr	r2, [pc, #116]	; (800665c <HAL_TIMEx_PWMN_Start+0x160>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d013      	beq.n	8006614 <HAL_TIMEx_PWMN_Start+0x118>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1b      	ldr	r2, [pc, #108]	; (8006660 <HAL_TIMEx_PWMN_Start+0x164>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00e      	beq.n	8006614 <HAL_TIMEx_PWMN_Start+0x118>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a1a      	ldr	r2, [pc, #104]	; (8006664 <HAL_TIMEx_PWMN_Start+0x168>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d009      	beq.n	8006614 <HAL_TIMEx_PWMN_Start+0x118>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a18      	ldr	r2, [pc, #96]	; (8006668 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <HAL_TIMEx_PWMN_Start+0x118>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a17      	ldr	r2, [pc, #92]	; (800666c <HAL_TIMEx_PWMN_Start+0x170>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d111      	bne.n	8006638 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b06      	cmp	r3, #6
 8006624:	d010      	beq.n	8006648 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f042 0201 	orr.w	r2, r2, #1
 8006634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006636:	e007      	b.n	8006648 <HAL_TIMEx_PWMN_Start+0x14c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0201 	orr.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]
=======
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	40010400 	.word	0x40010400
 8006600:	40014000 	.word	0x40014000
 8006604:	40001800 	.word	0x40001800

08006608 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40010000 	.word	0x40010000
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	40010400 	.word	0x40010400
 8006668:	40014000 	.word	0x40014000
 800666c:	40001800 	.word	0x40001800

08006670 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
=======
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800661c:	2302      	movs	r3, #2
 800661e:	e05a      	b.n	80066d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d022      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666c:	d01d      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d018      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1b      	ldr	r2, [pc, #108]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1a      	ldr	r2, [pc, #104]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00e      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d004      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a15      	ldr	r2, [pc, #84]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10c      	bne.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	609a      	str	r2, [r3, #8]
=======
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006684:	2302      	movs	r3, #2
 8006686:	e05a      	b.n	800673e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a21      	ldr	r2, [pc, #132]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d022      	beq.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d4:	d01d      	beq.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1d      	ldr	r2, [pc, #116]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d018      	beq.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a1b      	ldr	r2, [pc, #108]	; (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d013      	beq.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a1a      	ldr	r2, [pc, #104]	; (8006758 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00e      	beq.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a18      	ldr	r2, [pc, #96]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d009      	beq.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a17      	ldr	r2, [pc, #92]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d004      	beq.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a15      	ldr	r2, [pc, #84]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d10c      	bne.n	800672c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	4313      	orrs	r3, r2
 8006722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	609a      	str	r2, [r3, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40010400 	.word	0x40010400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40001800 	.word	0x40001800

08006700 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40010000 	.word	0x40010000
 8006750:	40000400 	.word	0x40000400
 8006754:	40000800 	.word	0x40000800
 8006758:	40000c00 	.word	0x40000c00
 800675c:	40010400 	.word	0x40010400
 8006760:	40014000 	.word	0x40014000
 8006764:	40001800 	.word	0x40001800

08006768 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
=======
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006718:	2302      	movs	r3, #2
 800671a:	e03d      	b.n	8006798 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006780:	2302      	movs	r3, #2
 8006782:	e03d      	b.n	8006800 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
=======
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_TIMEx_CommutCallback>:
=======
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIMEx_CommutCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
=======
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_TIMEx_BreakCallback>:
=======
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIMEx_BreakCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
=======
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <TIM_CCxNChannelCmd>:
=======
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_CCxNChannelCmd>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
<<<<<<< HEAD
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	2204      	movs	r2, #4
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a1a      	ldr	r2, [r3, #32]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	401a      	ands	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1a      	ldr	r2, [r3, #32]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	fa01 f303 	lsl.w	r3, r1, r3
 8006804:	431a      	orrs	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_UART_Init>:
=======
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	2204      	movs	r2, #4
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1a      	ldr	r2, [r3, #32]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	43db      	mvns	r3, r3
 8006856:	401a      	ands	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1a      	ldr	r2, [r3, #32]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	fa01 f303 	lsl.w	r3, r1, r3
 800686c:	431a      	orrs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_UART_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e03f      	b.n	80068a8 <HAL_UART_Init+0x92>
=======
 800687e:	b580      	push	{r7, lr}
 8006880:	b082      	sub	sp, #8
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e03f      	b.n	8006910 <HAL_UART_Init+0x92>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fb fc35 	bl	80020ac <HAL_UART_MspInit>
=======
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fb fbe3 	bl	8002070 <HAL_UART_MspInit>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2224      	movs	r2, #36	; 0x24
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006858:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fd20 	bl	80072a0 <UART_SetConfig>
=======
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2224      	movs	r2, #36	; 0x24
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fd20 	bl	8007308 <UART_SetConfig>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800686e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695a      	ldr	r2, [r3, #20]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800687e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800688e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_UART_Transmit_IT>:
=======
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_UART_Transmit_IT>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d130      	bne.n	800692c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_UART_Transmit_IT+0x26>
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e029      	b.n	800692e <HAL_UART_Transmit_IT+0x7e>
=======
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b20      	cmp	r3, #32
 8006930:	d130      	bne.n	8006994 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_UART_Transmit_IT+0x26>
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e029      	b.n	8006996 <HAL_UART_Transmit_IT+0x7e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_UART_Transmit_IT+0x38>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e022      	b.n	800692e <HAL_UART_Transmit_IT+0x7e>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	88fa      	ldrh	r2, [r7, #6]
 80068fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2221      	movs	r2, #33	; 0x21
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006926:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <HAL_UART_Transmit_IT+0x7e>
=======
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_UART_Transmit_IT+0x38>
 800694c:	2302      	movs	r3, #2
 800694e:	e022      	b.n	8006996 <HAL_UART_Transmit_IT+0x7e>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	88fa      	ldrh	r2, [r7, #6]
 8006962:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	88fa      	ldrh	r2, [r7, #6]
 8006968:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2221      	movs	r2, #33	; 0x21
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800698e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	e000      	b.n	8006996 <HAL_UART_Transmit_IT+0x7e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800692c:	2302      	movs	r3, #2
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_UART_Receive_IT>:
=======
 8006994:	2302      	movs	r3, #2
  }
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <HAL_UART_Receive_IT>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	4613      	mov	r3, r2
 8006946:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b20      	cmp	r3, #32
 8006952:	d11d      	bne.n	8006990 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <HAL_UART_Receive_IT+0x26>
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e016      	b.n	8006992 <HAL_UART_Receive_IT+0x58>
=======
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	4613      	mov	r3, r2
 80069ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d11d      	bne.n	80069f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_UART_Receive_IT+0x26>
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e016      	b.n	80069fa <HAL_UART_Receive_IT+0x58>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_UART_Receive_IT+0x38>
 800696e:	2302      	movs	r3, #2
 8006970:	e00f      	b.n	8006992 <HAL_UART_Receive_IT+0x58>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006980:	88fb      	ldrh	r3, [r7, #6]
 8006982:	461a      	mov	r2, r3
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fab6 	bl	8006ef8 <UART_Start_Receive_IT>
 800698c:	4603      	mov	r3, r0
 800698e:	e000      	b.n	8006992 <HAL_UART_Receive_IT+0x58>
=======
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_UART_Receive_IT+0x38>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e00f      	b.n	80069fa <HAL_UART_Receive_IT+0x58>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	461a      	mov	r2, r3
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 fab6 	bl	8006f60 <UART_Start_Receive_IT>
 80069f4:	4603      	mov	r3, r0
 80069f6:	e000      	b.n	80069fa <HAL_UART_Receive_IT+0x58>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8006990:	2302      	movs	r3, #2
  }
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <HAL_UART_IRQHandler>:
=======
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <HAL_UART_IRQHandler>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800699c:	b580      	push	{r7, lr}
 800699e:	b0ba      	sub	sp, #232	; 0xe8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80069da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10f      	bne.n	8006a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d009      	beq.n	8006a02 <HAL_UART_IRQHandler+0x66>
 80069ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fb95 	bl	800712a <UART_Receive_IT>
      return;
 8006a00:	e256      	b.n	8006eb0 <HAL_UART_IRQHandler+0x514>
=======
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b0ba      	sub	sp, #232	; 0xe8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10f      	bne.n	8006a6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d009      	beq.n	8006a6a <HAL_UART_IRQHandler+0x66>
 8006a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fb95 	bl	8007192 <UART_Receive_IT>
      return;
 8006a68:	e256      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< HEAD
 8006a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 80de 	beq.w	8006bc8 <HAL_UART_IRQHandler+0x22c>
 8006a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d106      	bne.n	8006a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 80d1 	beq.w	8006bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <HAL_UART_IRQHandler+0xae>
 8006a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f043 0201 	orr.w	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 80de 	beq.w	8006c30 <HAL_UART_IRQHandler+0x22c>
 8006a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 80d1 	beq.w	8006c30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <HAL_UART_IRQHandler+0xae>
 8006a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f043 0201 	orr.w	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <HAL_UART_IRQHandler+0xd2>
 8006a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f043 0202 	orr.w	r2, r3, #2
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xd2>
 8006abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	f043 0202 	orr.w	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8006a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00b      	beq.n	8006a92 <HAL_UART_IRQHandler+0xf6>
 8006a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f043 0204 	orr.w	r2, r3, #4
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <HAL_UART_IRQHandler+0xf6>
 8006ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f043 0204 	orr.w	r2, r3, #4
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< HEAD
 8006a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d011      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x126>
 8006a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d105      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	f043 0208 	orr.w	r2, r3, #8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d011      	beq.n	8006b2a <HAL_UART_IRQHandler+0x126>
 8006b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d105      	bne.n	8006b1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f043 0208 	orr.w	r2, r3, #8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 81ed 	beq.w	8006ea6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d008      	beq.n	8006aea <HAL_UART_IRQHandler+0x14e>
 8006ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fb20 	bl	800712a <UART_Receive_IT>
=======
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 81ed 	beq.w	8006f0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <HAL_UART_IRQHandler+0x14e>
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fb20 	bl	8007192 <UART_Receive_IT>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b40      	cmp	r3, #64	; 0x40
 8006af6:	bf0c      	ite	eq
 8006af8:	2301      	moveq	r3, #1
 8006afa:	2300      	movne	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <HAL_UART_IRQHandler+0x17a>
 8006b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d04f      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x21a>
=======
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	bf0c      	ite	eq
 8006b60:	2301      	moveq	r3, #1
 8006b62:	2300      	movne	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <HAL_UART_IRQHandler+0x17a>
 8006b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d04f      	beq.n	8006c1e <HAL_UART_IRQHandler+0x21a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa28 	bl	8006f6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d141      	bne.n	8006bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3314      	adds	r3, #20
 8006b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
=======
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa28 	bl	8006fd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b40      	cmp	r3, #64	; 0x40
 8006b90:	d141      	bne.n	8006c16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3314      	adds	r3, #20
 8006b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8006b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3314      	adds	r3, #20
 8006b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
=======
 8006b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3314      	adds	r3, #20
 8006bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8006b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1d9      	bne.n	8006b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d013      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x20a>
=======
 8006bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1d9      	bne.n	8006b92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d013      	beq.n	8006c0e <HAL_UART_IRQHandler+0x20a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	4a7d      	ldr	r2, [pc, #500]	; (8006d78 <HAL_UART_IRQHandler+0x3dc>)
 8006b84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fc f977 	bl	8002e7e <HAL_DMA_Abort_IT>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d016      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba4:	e00e      	b.n	8006bc4 <HAL_UART_IRQHandler+0x228>
=======
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	4a7d      	ldr	r2, [pc, #500]	; (8006de0 <HAL_UART_IRQHandler+0x3dc>)
 8006bec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fc f977 	bl	8002ee6 <HAL_DMA_Abort_IT>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d016      	beq.n	8006c2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	e00e      	b.n	8006c2c <HAL_UART_IRQHandler+0x228>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f990 	bl	8006ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bac:	e00a      	b.n	8006bc4 <HAL_UART_IRQHandler+0x228>
=======
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f990 	bl	8006f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c14:	e00a      	b.n	8006c2c <HAL_UART_IRQHandler+0x228>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f98c 	bl	8006ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb4:	e006      	b.n	8006bc4 <HAL_UART_IRQHandler+0x228>
=======
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f98c 	bl	8006f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	e006      	b.n	8006c2c <HAL_UART_IRQHandler+0x228>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f988 	bl	8006ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bc2:	e170      	b.n	8006ea6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc4:	bf00      	nop
    return;
 8006bc6:	e16e      	b.n	8006ea6 <HAL_UART_IRQHandler+0x50a>
=======
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f988 	bl	8006f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c2a:	e170      	b.n	8006f0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	bf00      	nop
    return;
 8006c2e:	e16e      	b.n	8006f0e <HAL_UART_IRQHandler+0x50a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	f040 814a 	bne.w	8006e66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd6:	f003 0310 	and.w	r3, r3, #16
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 8143 	beq.w	8006e66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 813c 	beq.w	8006e66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60bb      	str	r3, [r7, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	60bb      	str	r3, [r7, #8]
 8006c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b40      	cmp	r3, #64	; 0x40
 8006c10:	f040 80b4 	bne.w	8006d7c <HAL_UART_IRQHandler+0x3e0>
=======
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	f040 814a 	bne.w	8006ece <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3e:	f003 0310 	and.w	r3, r3, #16
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8143 	beq.w	8006ece <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 813c 	beq.w	8006ece <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c56:	2300      	movs	r3, #0
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60bb      	str	r3, [r7, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	f040 80b4 	bne.w	8006de4 <HAL_UART_IRQHandler+0x3e0>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 8140 	beq.w	8006eaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c32:	429a      	cmp	r2, r3
 8006c34:	f080 8139 	bcs.w	8006eaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c4a:	f000 8088 	beq.w	8006d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	330c      	adds	r3, #12
 8006c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	330c      	adds	r3, #12
 8006c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1d9      	bne.n	8006c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3314      	adds	r3, #20
 8006ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cac:	f023 0301 	bic.w	r3, r3, #1
 8006cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3314      	adds	r3, #20
 8006cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e1      	bne.n	8006c9a <HAL_UART_IRQHandler+0x2fe>
=======
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8140 	beq.w	8006f12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	f080 8139 	bcs.w	8006f12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb2:	f000 8088 	beq.w	8006dc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	330c      	adds	r3, #12
 8006cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1d9      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3314      	adds	r3, #20
 8006d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e1      	bne.n	8006d02 <HAL_UART_IRQHandler+0x2fe>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3314      	adds	r3, #20
 8006cdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e3      	bne.n	8006cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d2e:	f023 0310 	bic.w	r3, r3, #16
 8006d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	330c      	adds	r3, #12
 8006d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d40:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e3      	bne.n	8006d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fc f820 	bl	8002d9e <HAL_DMA_Abort>
=======
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3314      	adds	r3, #20
 8006d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e3      	bne.n	8006d3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d96:	f023 0310 	bic.w	r3, r3, #16
 8006d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006da8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006daa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e3      	bne.n	8006d84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fc f820 	bl	8002e06 <HAL_DMA_Abort>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f8b6 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d74:	e099      	b.n	8006eaa <HAL_UART_IRQHandler+0x50e>
 8006d76:	bf00      	nop
 8006d78:	08007033 	.word	0x08007033
=======
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f8b6 	bl	8006f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ddc:	e099      	b.n	8006f12 <HAL_UART_IRQHandler+0x50e>
 8006dde:	bf00      	nop
 8006de0:	0800709b 	.word	0x0800709b
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 808b 	beq.w	8006eae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8086 	beq.w	8006eae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	330c      	adds	r3, #12
 8006da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8006dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e3      	bne.n	8006da2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3314      	adds	r3, #20
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	623b      	str	r3, [r7, #32]
   return(result);
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3314      	adds	r3, #20
 8006dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e3      	bne.n	8006dda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0310 	bic.w	r3, r3, #16
 8006e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	330c      	adds	r3, #12
 8006e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e44:	61fa      	str	r2, [r7, #28]
 8006e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	69b9      	ldr	r1, [r7, #24]
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	617b      	str	r3, [r7, #20]
   return(result);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e3      	bne.n	8006e20 <HAL_UART_IRQHandler+0x484>
=======
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 808b 	beq.w	8006f16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8086 	beq.w	8006f16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	330c      	adds	r3, #12
 8006e2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e2e:	647a      	str	r2, [r7, #68]	; 0x44
 8006e30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e3      	bne.n	8006e0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3314      	adds	r3, #20
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	623b      	str	r3, [r7, #32]
   return(result);
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	f023 0301 	bic.w	r3, r3, #1
 8006e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3314      	adds	r3, #20
 8006e62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e66:	633a      	str	r2, [r7, #48]	; 0x30
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e3      	bne.n	8006e42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0310 	bic.w	r3, r3, #16
 8006e9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006eac:	61fa      	str	r2, [r7, #28]
 8006eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	69b9      	ldr	r1, [r7, #24]
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e3      	bne.n	8006e88 <HAL_UART_IRQHandler+0x484>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8006e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f83e 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e64:	e023      	b.n	8006eae <HAL_UART_IRQHandler+0x512>
=======
 8006ec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f83e 	bl	8006f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ecc:	e023      	b.n	8006f16 <HAL_UART_IRQHandler+0x512>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8006e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d009      	beq.n	8006e86 <HAL_UART_IRQHandler+0x4ea>
 8006e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f8eb 	bl	800705a <UART_Transmit_IT>
    return;
 8006e84:	e014      	b.n	8006eb0 <HAL_UART_IRQHandler+0x514>
=======
 8006ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <HAL_UART_IRQHandler+0x4ea>
 8006eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f8eb 	bl	80070c2 <UART_Transmit_IT>
    return;
 8006eec:	e014      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 8006e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x514>
 8006e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d008      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f92b 	bl	80070fa <UART_EndTransmit_IT>
    return;
 8006ea4:	e004      	b.n	8006eb0 <HAL_UART_IRQHandler+0x514>
    return;
 8006ea6:	bf00      	nop
 8006ea8:	e002      	b.n	8006eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8006eaa:	bf00      	nop
 8006eac:	e000      	b.n	8006eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8006eae:	bf00      	nop
  }
}
 8006eb0:	37e8      	adds	r7, #232	; 0xe8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop

08006eb8 <HAL_UART_TxCpltCallback>:
=======
 8006eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00e      	beq.n	8006f18 <HAL_UART_IRQHandler+0x514>
 8006efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f92b 	bl	8007162 <UART_EndTransmit_IT>
    return;
 8006f0c:	e004      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
    return;
 8006f0e:	bf00      	nop
 8006f10:	e002      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
      return;
 8006f12:	bf00      	nop
 8006f14:	e000      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
      return;
 8006f16:	bf00      	nop
  }
}
 8006f18:	37e8      	adds	r7, #232	; 0xe8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop

08006f20 <HAL_UART_TxCpltCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
=======
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_UART_ErrorCallback>:
=======
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_UART_ErrorCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
=======
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_UARTEx_RxEventCallback>:
=======
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_UARTEx_RxEventCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	807b      	strh	r3, [r7, #2]
=======
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	807b      	strh	r3, [r7, #2]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <UART_Start_Receive_IT>:
=======
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <UART_Start_Receive_IT>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4613      	mov	r3, r2
 8006f04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	88fa      	ldrh	r2, [r7, #6]
 8006f16:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2222      	movs	r2, #34	; 0x22
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f3c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0201 	orr.w	r2, r2, #1
 8006f4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0220 	orr.w	r2, r2, #32
 8006f5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <UART_EndRxTransfer>:
=======
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	88fa      	ldrh	r2, [r7, #6]
 8006f78:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2222      	movs	r2, #34	; 0x22
 8006f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fa4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695a      	ldr	r2, [r3, #20]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f042 0220 	orr.w	r2, r2, #32
 8006fc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <UART_EndRxTransfer>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006f6c:	b480      	push	{r7}
 8006f6e:	b095      	sub	sp, #84	; 0x54
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f94:	643a      	str	r2, [r7, #64]	; 0x40
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3314      	adds	r3, #20
 8006fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3314      	adds	r3, #20
 8006fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e5      	bne.n	8006fa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d119      	bne.n	8007018 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f023 0310 	bic.w	r3, r3, #16
 8006ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007004:	61ba      	str	r2, [r7, #24]
 8007006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6979      	ldr	r1, [r7, #20]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	613b      	str	r3, [r7, #16]
   return(result);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_EndRxTransfer+0x78>
=======
 8006fd4:	b480      	push	{r7}
 8006fd6:	b095      	sub	sp, #84	; 0x54
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	330c      	adds	r3, #12
 8006fe2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	330c      	adds	r3, #12
 8006ffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ffc:	643a      	str	r2, [r7, #64]	; 0x40
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e5      	bne.n	8006fdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3314      	adds	r3, #20
 8007016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f023 0301 	bic.w	r3, r3, #1
 8007026:	64bb      	str	r3, [r7, #72]	; 0x48
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3314      	adds	r3, #20
 800702e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007030:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007038:	e841 2300 	strex	r3, r2, [r1]
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e5      	bne.n	8007010 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	2b01      	cmp	r3, #1
 800704a:	d119      	bne.n	8007080 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	e853 3f00 	ldrex	r3, [r3]
 800705a:	60bb      	str	r3, [r7, #8]
   return(result);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f023 0310 	bic.w	r3, r3, #16
 8007062:	647b      	str	r3, [r7, #68]	; 0x44
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800706c:	61ba      	str	r2, [r7, #24]
 800706e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007070:	6979      	ldr	r1, [r7, #20]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	e841 2300 	strex	r3, r2, [r1]
 8007078:	613b      	str	r3, [r7, #16]
   return(result);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e5      	bne.n	800704c <UART_EndRxTransfer+0x78>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007026:	bf00      	nop
 8007028:	3754      	adds	r7, #84	; 0x54
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <UART_DMAAbortOnError>:
=======
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800708e:	bf00      	nop
 8007090:	3754      	adds	r7, #84	; 0x54
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <UART_DMAAbortOnError>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff ff3d 	bl	8006ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <UART_Transmit_IT>:
=======
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7ff ff3d 	bl	8006f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <UART_Transmit_IT>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
=======
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b21      	cmp	r3, #33	; 0x21
 800706c:	d13e      	bne.n	80070ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007076:	d114      	bne.n	80070a2 <UART_Transmit_IT+0x48>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d110      	bne.n	80070a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007094:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	1c9a      	adds	r2, r3, #2
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	621a      	str	r2, [r3, #32]
 80070a0:	e008      	b.n	80070b4 <UART_Transmit_IT+0x5a>
=======
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b21      	cmp	r3, #33	; 0x21
 80070d4:	d13e      	bne.n	8007154 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070de:	d114      	bne.n	800710a <UART_Transmit_IT+0x48>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d110      	bne.n	800710a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	1c9a      	adds	r2, r3, #2
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	621a      	str	r2, [r3, #32]
 8007108:	e008      	b.n	800711c <UART_Transmit_IT+0x5a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	1c59      	adds	r1, r3, #1
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6211      	str	r1, [r2, #32]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29b      	uxth	r3, r3
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4619      	mov	r1, r3
 80070c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10f      	bne.n	80070e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	e000      	b.n	80070ee <UART_Transmit_IT+0x94>
=======
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	1c59      	adds	r1, r3, #1
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6211      	str	r1, [r2, #32]
 8007114:	781a      	ldrb	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29b      	uxth	r3, r3
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4619      	mov	r1, r3
 800712a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10f      	bne.n	8007150 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800713e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800714e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <UART_Transmit_IT+0x94>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80070ec:	2302      	movs	r3, #2
  }
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <UART_EndTransmit_IT>:
=======
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <UART_EndTransmit_IT>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007110:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007178:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2220      	movs	r2, #32
 800717e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff fecc 	bl	8006eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <UART_Receive_IT>:
=======
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff fecc 	bl	8006f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <UART_Receive_IT>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800712a:	b580      	push	{r7, lr}
 800712c:	b08c      	sub	sp, #48	; 0x30
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
=======
 8007192:	b580      	push	{r7, lr}
 8007194:	b08c      	sub	sp, #48	; 0x30
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b22      	cmp	r3, #34	; 0x22
 800713c:	f040 80ab 	bne.w	8007296 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007148:	d117      	bne.n	800717a <UART_Receive_IT+0x50>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d113      	bne.n	800717a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007168:	b29a      	uxth	r2, r3
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	1c9a      	adds	r2, r3, #2
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	629a      	str	r2, [r3, #40]	; 0x28
 8007178:	e026      	b.n	80071c8 <UART_Receive_IT+0x9e>
=======
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b22      	cmp	r3, #34	; 0x22
 80071a4:	f040 80ab 	bne.w	80072fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b0:	d117      	bne.n	80071e2 <UART_Receive_IT+0x50>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d113      	bne.n	80071e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	1c9a      	adds	r2, r3, #2
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	629a      	str	r2, [r3, #40]	; 0x28
 80071e0:	e026      	b.n	8007230 <UART_Receive_IT+0x9e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718c:	d007      	beq.n	800719e <UART_Receive_IT+0x74>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <UART_Receive_IT+0x82>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e008      	b.n	80071be <UART_Receive_IT+0x94>
=======
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f4:	d007      	beq.n	8007206 <UART_Receive_IT+0x74>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <UART_Receive_IT+0x82>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d106      	bne.n	8007214 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	e008      	b.n	8007226 <UART_Receive_IT+0x94>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4619      	mov	r1, r3
 80071d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d15a      	bne.n	8007292 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0220 	bic.w	r2, r2, #32
 80071ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695a      	ldr	r2, [r3, #20]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0201 	bic.w	r2, r2, #1
 800720a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007220:	b2da      	uxtb	r2, r3
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29b      	uxth	r3, r3
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	4619      	mov	r1, r3
 800723e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007240:	2b00      	cmp	r3, #0
 8007242:	d15a      	bne.n	80072fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0220 	bic.w	r2, r2, #32
 8007252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	2b01      	cmp	r3, #1
 800721a:	d135      	bne.n	8007288 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	613b      	str	r3, [r7, #16]
   return(result);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f023 0310 	bic.w	r3, r3, #16
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	330c      	adds	r3, #12
 8007240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007242:	623a      	str	r2, [r7, #32]
 8007244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	69f9      	ldr	r1, [r7, #28]
 8007248:	6a3a      	ldr	r2, [r7, #32]
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e5      	bne.n	8007222 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b10      	cmp	r3, #16
 8007262:	d10a      	bne.n	800727a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
=======
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007280:	2b01      	cmp	r3, #1
 8007282:	d135      	bne.n	80072f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	330c      	adds	r3, #12
 8007290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	613b      	str	r3, [r7, #16]
   return(result);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f023 0310 	bic.w	r3, r3, #16
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	330c      	adds	r3, #12
 80072a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072aa:	623a      	str	r2, [r7, #32]
 80072ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	69f9      	ldr	r1, [r7, #28]
 80072b0:	6a3a      	ldr	r2, [r7, #32]
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e5      	bne.n	800728a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d10a      	bne.n	80072e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fe2d 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
 8007286:	e002      	b.n	800728e <UART_Receive_IT+0x164>
=======
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff fe2d 	bl	8006f48 <HAL_UARTEx_RxEventCallback>
 80072ee:	e002      	b.n	80072f6 <UART_Receive_IT+0x164>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7fb f9f9 	bl	8002680 <HAL_UART_RxCpltCallback>
=======
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7fb f9a5 	bl	8002640 <HAL_UART_RxCpltCallback>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 800728e:	2300      	movs	r3, #0
 8007290:	e002      	b.n	8007298 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	e000      	b.n	8007298 <UART_Receive_IT+0x16e>
=======
 80072f6:	2300      	movs	r3, #0
 80072f8:	e002      	b.n	8007300 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e000      	b.n	8007300 <UART_Receive_IT+0x16e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8007296:	2302      	movs	r3, #2
  }
}
 8007298:	4618      	mov	r0, r3
 800729a:	3730      	adds	r7, #48	; 0x30
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <UART_SetConfig>:
=======
 80072fe:	2302      	movs	r3, #2
  }
}
 8007300:	4618      	mov	r0, r3
 8007302:	3730      	adds	r7, #48	; 0x30
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <UART_SetConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	b09f      	sub	sp, #124	; 0x7c
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	66f8      	str	r0, [r7, #108]	; 0x6c
=======
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	b09f      	sub	sp, #124	; 0x7c
 800730e:	af00      	add	r7, sp, #0
 8007310:	66f8      	str	r0, [r7, #108]	; 0x6c
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 80072aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b6:	68d9      	ldr	r1, [r3, #12]
 80072b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	ea40 0301 	orr.w	r3, r0, r1
 80072c0:	6113      	str	r3, [r2, #16]
=======
 8007312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800731c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731e:	68d9      	ldr	r1, [r3, #12]
 8007320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	ea40 0301 	orr.w	r3, r0, r1
 8007328:	6113      	str	r3, [r2, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 80072c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	431a      	orrs	r2, r3
 80072cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	431a      	orrs	r2, r3
 80072d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80072da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072e4:	f021 010c 	bic.w	r1, r1, #12
 80072e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072ee:	430b      	orrs	r3, r1
 80072f0:	60d3      	str	r3, [r2, #12]
=======
 800732a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	431a      	orrs	r2, r3
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	431a      	orrs	r2, r3
 800733a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	4313      	orrs	r3, r2
 8007340:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800734c:	f021 010c 	bic.w	r1, r1, #12
 8007350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007356:	430b      	orrs	r3, r1
 8007358:	60d3      	str	r3, [r2, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 80072f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fe:	6999      	ldr	r1, [r3, #24]
 8007300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	ea40 0301 	orr.w	r3, r0, r1
 8007308:	6153      	str	r3, [r2, #20]
=======
 800735a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007366:	6999      	ldr	r1, [r3, #24]
 8007368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	ea40 0301 	orr.w	r3, r0, r1
 8007370:	6153      	str	r3, [r2, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 800730a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4bc5      	ldr	r3, [pc, #788]	; (8007624 <UART_SetConfig+0x384>)
 8007310:	429a      	cmp	r2, r3
 8007312:	d004      	beq.n	800731e <UART_SetConfig+0x7e>
 8007314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	4bc3      	ldr	r3, [pc, #780]	; (8007628 <UART_SetConfig+0x388>)
 800731a:	429a      	cmp	r2, r3
 800731c:	d103      	bne.n	8007326 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800731e:	f7fe faaf 	bl	8005880 <HAL_RCC_GetPCLK2Freq>
 8007322:	6778      	str	r0, [r7, #116]	; 0x74
 8007324:	e002      	b.n	800732c <UART_SetConfig+0x8c>
=======
 8007372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4bc5      	ldr	r3, [pc, #788]	; (800768c <UART_SetConfig+0x384>)
 8007378:	429a      	cmp	r2, r3
 800737a:	d004      	beq.n	8007386 <UART_SetConfig+0x7e>
 800737c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	4bc3      	ldr	r3, [pc, #780]	; (8007690 <UART_SetConfig+0x388>)
 8007382:	429a      	cmp	r2, r3
 8007384:	d103      	bne.n	800738e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007386:	f7fe faaf 	bl	80058e8 <HAL_RCC_GetPCLK2Freq>
 800738a:	6778      	str	r0, [r7, #116]	; 0x74
 800738c:	e002      	b.n	8007394 <UART_SetConfig+0x8c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8007326:	f7fe fa97 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 800732a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800732c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007334:	f040 80b6 	bne.w	80074a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800733a:	461c      	mov	r4, r3
 800733c:	f04f 0500 	mov.w	r5, #0
 8007340:	4622      	mov	r2, r4
 8007342:	462b      	mov	r3, r5
 8007344:	1891      	adds	r1, r2, r2
 8007346:	6439      	str	r1, [r7, #64]	; 0x40
 8007348:	415b      	adcs	r3, r3
 800734a:	647b      	str	r3, [r7, #68]	; 0x44
 800734c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007350:	1912      	adds	r2, r2, r4
 8007352:	eb45 0303 	adc.w	r3, r5, r3
 8007356:	f04f 0000 	mov.w	r0, #0
 800735a:	f04f 0100 	mov.w	r1, #0
 800735e:	00d9      	lsls	r1, r3, #3
 8007360:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007364:	00d0      	lsls	r0, r2, #3
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	1911      	adds	r1, r2, r4
 800736c:	6639      	str	r1, [r7, #96]	; 0x60
 800736e:	416b      	adcs	r3, r5
 8007370:	667b      	str	r3, [r7, #100]	; 0x64
 8007372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	461a      	mov	r2, r3
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	1891      	adds	r1, r2, r2
 800737e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007380:	415b      	adcs	r3, r3
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007384:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007388:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800738c:	f7f9 fc5c 	bl	8000c48 <__aeabi_uldivmod>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4ba5      	ldr	r3, [pc, #660]	; (800762c <UART_SetConfig+0x38c>)
 8007396:	fba3 2302 	umull	r2, r3, r3, r2
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	011e      	lsls	r6, r3, #4
 800739e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a0:	461c      	mov	r4, r3
 80073a2:	f04f 0500 	mov.w	r5, #0
 80073a6:	4622      	mov	r2, r4
 80073a8:	462b      	mov	r3, r5
 80073aa:	1891      	adds	r1, r2, r2
 80073ac:	6339      	str	r1, [r7, #48]	; 0x30
 80073ae:	415b      	adcs	r3, r3
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
 80073b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80073b6:	1912      	adds	r2, r2, r4
 80073b8:	eb45 0303 	adc.w	r3, r5, r3
 80073bc:	f04f 0000 	mov.w	r0, #0
 80073c0:	f04f 0100 	mov.w	r1, #0
 80073c4:	00d9      	lsls	r1, r3, #3
 80073c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073ca:	00d0      	lsls	r0, r2, #3
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	1911      	adds	r1, r2, r4
 80073d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80073d4:	416b      	adcs	r3, r5
 80073d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	461a      	mov	r2, r3
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	1891      	adds	r1, r2, r2
 80073e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80073e6:	415b      	adcs	r3, r3
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80073f2:	f7f9 fc29 	bl	8000c48 <__aeabi_uldivmod>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4b8c      	ldr	r3, [pc, #560]	; (800762c <UART_SetConfig+0x38c>)
 80073fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	2164      	movs	r1, #100	; 0x64
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	3332      	adds	r3, #50	; 0x32
 800740e:	4a87      	ldr	r2, [pc, #540]	; (800762c <UART_SetConfig+0x38c>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800741c:	441e      	add	r6, r3
 800741e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007420:	4618      	mov	r0, r3
 8007422:	f04f 0100 	mov.w	r1, #0
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	1894      	adds	r4, r2, r2
 800742c:	623c      	str	r4, [r7, #32]
 800742e:	415b      	adcs	r3, r3
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
 8007432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007436:	1812      	adds	r2, r2, r0
 8007438:	eb41 0303 	adc.w	r3, r1, r3
 800743c:	f04f 0400 	mov.w	r4, #0
 8007440:	f04f 0500 	mov.w	r5, #0
 8007444:	00dd      	lsls	r5, r3, #3
 8007446:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800744a:	00d4      	lsls	r4, r2, #3
 800744c:	4622      	mov	r2, r4
 800744e:	462b      	mov	r3, r5
 8007450:	1814      	adds	r4, r2, r0
 8007452:	653c      	str	r4, [r7, #80]	; 0x50
 8007454:	414b      	adcs	r3, r1
 8007456:	657b      	str	r3, [r7, #84]	; 0x54
 8007458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	461a      	mov	r2, r3
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	1891      	adds	r1, r2, r2
 8007464:	61b9      	str	r1, [r7, #24]
 8007466:	415b      	adcs	r3, r3
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800746e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007472:	f7f9 fbe9 	bl	8000c48 <__aeabi_uldivmod>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4b6c      	ldr	r3, [pc, #432]	; (800762c <UART_SetConfig+0x38c>)
 800747c:	fba3 1302 	umull	r1, r3, r3, r2
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	2164      	movs	r1, #100	; 0x64
 8007484:	fb01 f303 	mul.w	r3, r1, r3
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	3332      	adds	r3, #50	; 0x32
 800748e:	4a67      	ldr	r2, [pc, #412]	; (800762c <UART_SetConfig+0x38c>)
 8007490:	fba2 2303 	umull	r2, r3, r2, r3
 8007494:	095b      	lsrs	r3, r3, #5
 8007496:	f003 0207 	and.w	r2, r3, #7
 800749a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4432      	add	r2, r6
 80074a0:	609a      	str	r2, [r3, #8]
=======
 800738e:	f7fe fa97 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8007392:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800739c:	f040 80b6 	bne.w	800750c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a2:	461c      	mov	r4, r3
 80073a4:	f04f 0500 	mov.w	r5, #0
 80073a8:	4622      	mov	r2, r4
 80073aa:	462b      	mov	r3, r5
 80073ac:	1891      	adds	r1, r2, r2
 80073ae:	6439      	str	r1, [r7, #64]	; 0x40
 80073b0:	415b      	adcs	r3, r3
 80073b2:	647b      	str	r3, [r7, #68]	; 0x44
 80073b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073b8:	1912      	adds	r2, r2, r4
 80073ba:	eb45 0303 	adc.w	r3, r5, r3
 80073be:	f04f 0000 	mov.w	r0, #0
 80073c2:	f04f 0100 	mov.w	r1, #0
 80073c6:	00d9      	lsls	r1, r3, #3
 80073c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073cc:	00d0      	lsls	r0, r2, #3
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	1911      	adds	r1, r2, r4
 80073d4:	6639      	str	r1, [r7, #96]	; 0x60
 80073d6:	416b      	adcs	r3, r5
 80073d8:	667b      	str	r3, [r7, #100]	; 0x64
 80073da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	461a      	mov	r2, r3
 80073e0:	f04f 0300 	mov.w	r3, #0
 80073e4:	1891      	adds	r1, r2, r2
 80073e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80073e8:	415b      	adcs	r3, r3
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80073f4:	f7f9 fc28 	bl	8000c48 <__aeabi_uldivmod>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4ba5      	ldr	r3, [pc, #660]	; (8007694 <UART_SetConfig+0x38c>)
 80073fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	011e      	lsls	r6, r3, #4
 8007406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007408:	461c      	mov	r4, r3
 800740a:	f04f 0500 	mov.w	r5, #0
 800740e:	4622      	mov	r2, r4
 8007410:	462b      	mov	r3, r5
 8007412:	1891      	adds	r1, r2, r2
 8007414:	6339      	str	r1, [r7, #48]	; 0x30
 8007416:	415b      	adcs	r3, r3
 8007418:	637b      	str	r3, [r7, #52]	; 0x34
 800741a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800741e:	1912      	adds	r2, r2, r4
 8007420:	eb45 0303 	adc.w	r3, r5, r3
 8007424:	f04f 0000 	mov.w	r0, #0
 8007428:	f04f 0100 	mov.w	r1, #0
 800742c:	00d9      	lsls	r1, r3, #3
 800742e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007432:	00d0      	lsls	r0, r2, #3
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	1911      	adds	r1, r2, r4
 800743a:	65b9      	str	r1, [r7, #88]	; 0x58
 800743c:	416b      	adcs	r3, r5
 800743e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	461a      	mov	r2, r3
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	1891      	adds	r1, r2, r2
 800744c:	62b9      	str	r1, [r7, #40]	; 0x28
 800744e:	415b      	adcs	r3, r3
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007456:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800745a:	f7f9 fbf5 	bl	8000c48 <__aeabi_uldivmod>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4b8c      	ldr	r3, [pc, #560]	; (8007694 <UART_SetConfig+0x38c>)
 8007464:	fba3 1302 	umull	r1, r3, r3, r2
 8007468:	095b      	lsrs	r3, r3, #5
 800746a:	2164      	movs	r1, #100	; 0x64
 800746c:	fb01 f303 	mul.w	r3, r1, r3
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	3332      	adds	r3, #50	; 0x32
 8007476:	4a87      	ldr	r2, [pc, #540]	; (8007694 <UART_SetConfig+0x38c>)
 8007478:	fba2 2303 	umull	r2, r3, r2, r3
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007484:	441e      	add	r6, r3
 8007486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007488:	4618      	mov	r0, r3
 800748a:	f04f 0100 	mov.w	r1, #0
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	1894      	adds	r4, r2, r2
 8007494:	623c      	str	r4, [r7, #32]
 8007496:	415b      	adcs	r3, r3
 8007498:	627b      	str	r3, [r7, #36]	; 0x24
 800749a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800749e:	1812      	adds	r2, r2, r0
 80074a0:	eb41 0303 	adc.w	r3, r1, r3
 80074a4:	f04f 0400 	mov.w	r4, #0
 80074a8:	f04f 0500 	mov.w	r5, #0
 80074ac:	00dd      	lsls	r5, r3, #3
 80074ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074b2:	00d4      	lsls	r4, r2, #3
 80074b4:	4622      	mov	r2, r4
 80074b6:	462b      	mov	r3, r5
 80074b8:	1814      	adds	r4, r2, r0
 80074ba:	653c      	str	r4, [r7, #80]	; 0x50
 80074bc:	414b      	adcs	r3, r1
 80074be:	657b      	str	r3, [r7, #84]	; 0x54
 80074c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	461a      	mov	r2, r3
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	1891      	adds	r1, r2, r2
 80074cc:	61b9      	str	r1, [r7, #24]
 80074ce:	415b      	adcs	r3, r3
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80074da:	f7f9 fbb5 	bl	8000c48 <__aeabi_uldivmod>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4b6c      	ldr	r3, [pc, #432]	; (8007694 <UART_SetConfig+0x38c>)
 80074e4:	fba3 1302 	umull	r1, r3, r3, r2
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	2164      	movs	r1, #100	; 0x64
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	3332      	adds	r3, #50	; 0x32
 80074f6:	4a67      	ldr	r2, [pc, #412]	; (8007694 <UART_SetConfig+0x38c>)
 80074f8:	fba2 2303 	umull	r2, r3, r2, r3
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	f003 0207 	and.w	r2, r3, #7
 8007502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4432      	add	r2, r6
 8007508:	609a      	str	r2, [r3, #8]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 80074a2:	e0b9      	b.n	8007618 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074a6:	461c      	mov	r4, r3
 80074a8:	f04f 0500 	mov.w	r5, #0
 80074ac:	4622      	mov	r2, r4
 80074ae:	462b      	mov	r3, r5
 80074b0:	1891      	adds	r1, r2, r2
 80074b2:	6139      	str	r1, [r7, #16]
 80074b4:	415b      	adcs	r3, r3
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80074bc:	1912      	adds	r2, r2, r4
 80074be:	eb45 0303 	adc.w	r3, r5, r3
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f04f 0100 	mov.w	r1, #0
 80074ca:	00d9      	lsls	r1, r3, #3
 80074cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d0:	00d0      	lsls	r0, r2, #3
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	eb12 0804 	adds.w	r8, r2, r4
 80074da:	eb43 0905 	adc.w	r9, r3, r5
 80074de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f04f 0100 	mov.w	r1, #0
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	008b      	lsls	r3, r1, #2
 80074f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074f6:	0082      	lsls	r2, r0, #2
 80074f8:	4640      	mov	r0, r8
 80074fa:	4649      	mov	r1, r9
 80074fc:	f7f9 fba4 	bl	8000c48 <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4b49      	ldr	r3, [pc, #292]	; (800762c <UART_SetConfig+0x38c>)
 8007506:	fba3 2302 	umull	r2, r3, r3, r2
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	011e      	lsls	r6, r3, #4
 800750e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007510:	4618      	mov	r0, r3
 8007512:	f04f 0100 	mov.w	r1, #0
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	1894      	adds	r4, r2, r2
 800751c:	60bc      	str	r4, [r7, #8]
 800751e:	415b      	adcs	r3, r3
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007526:	1812      	adds	r2, r2, r0
 8007528:	eb41 0303 	adc.w	r3, r1, r3
 800752c:	f04f 0400 	mov.w	r4, #0
 8007530:	f04f 0500 	mov.w	r5, #0
 8007534:	00dd      	lsls	r5, r3, #3
 8007536:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800753a:	00d4      	lsls	r4, r2, #3
 800753c:	4622      	mov	r2, r4
 800753e:	462b      	mov	r3, r5
 8007540:	1814      	adds	r4, r2, r0
 8007542:	64bc      	str	r4, [r7, #72]	; 0x48
 8007544:	414b      	adcs	r3, r1
 8007546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4618      	mov	r0, r3
 800754e:	f04f 0100 	mov.w	r1, #0
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	008b      	lsls	r3, r1, #2
 800755c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007560:	0082      	lsls	r2, r0, #2
 8007562:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007566:	f7f9 fb6f 	bl	8000c48 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4b2f      	ldr	r3, [pc, #188]	; (800762c <UART_SetConfig+0x38c>)
 8007570:	fba3 1302 	umull	r1, r3, r3, r2
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	2164      	movs	r1, #100	; 0x64
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	3332      	adds	r3, #50	; 0x32
 8007582:	4a2a      	ldr	r2, [pc, #168]	; (800762c <UART_SetConfig+0x38c>)
 8007584:	fba2 2303 	umull	r2, r3, r2, r3
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800758e:	441e      	add	r6, r3
 8007590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007592:	4618      	mov	r0, r3
 8007594:	f04f 0100 	mov.w	r1, #0
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	1894      	adds	r4, r2, r2
 800759e:	603c      	str	r4, [r7, #0]
 80075a0:	415b      	adcs	r3, r3
 80075a2:	607b      	str	r3, [r7, #4]
 80075a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a8:	1812      	adds	r2, r2, r0
 80075aa:	eb41 0303 	adc.w	r3, r1, r3
 80075ae:	f04f 0400 	mov.w	r4, #0
 80075b2:	f04f 0500 	mov.w	r5, #0
 80075b6:	00dd      	lsls	r5, r3, #3
 80075b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075bc:	00d4      	lsls	r4, r2, #3
 80075be:	4622      	mov	r2, r4
 80075c0:	462b      	mov	r3, r5
 80075c2:	eb12 0a00 	adds.w	sl, r2, r0
 80075c6:	eb43 0b01 	adc.w	fp, r3, r1
 80075ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f04f 0100 	mov.w	r1, #0
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	008b      	lsls	r3, r1, #2
 80075de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075e2:	0082      	lsls	r2, r0, #2
 80075e4:	4650      	mov	r0, sl
 80075e6:	4659      	mov	r1, fp
 80075e8:	f7f9 fb2e 	bl	8000c48 <__aeabi_uldivmod>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4b0e      	ldr	r3, [pc, #56]	; (800762c <UART_SetConfig+0x38c>)
 80075f2:	fba3 1302 	umull	r1, r3, r3, r2
 80075f6:	095b      	lsrs	r3, r3, #5
 80075f8:	2164      	movs	r1, #100	; 0x64
 80075fa:	fb01 f303 	mul.w	r3, r1, r3
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	3332      	adds	r3, #50	; 0x32
 8007604:	4a09      	ldr	r2, [pc, #36]	; (800762c <UART_SetConfig+0x38c>)
 8007606:	fba2 2303 	umull	r2, r3, r2, r3
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	f003 020f 	and.w	r2, r3, #15
 8007610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4432      	add	r2, r6
 8007616:	609a      	str	r2, [r3, #8]
}
 8007618:	bf00      	nop
 800761a:	377c      	adds	r7, #124	; 0x7c
 800761c:	46bd      	mov	sp, r7
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	bf00      	nop
 8007624:	40011000 	.word	0x40011000
 8007628:	40011400 	.word	0x40011400
 800762c:	51eb851f 	.word	0x51eb851f

08007630 <USB_CoreInit>:
=======
 800750a:	e0b9      	b.n	8007680 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800750c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750e:	461c      	mov	r4, r3
 8007510:	f04f 0500 	mov.w	r5, #0
 8007514:	4622      	mov	r2, r4
 8007516:	462b      	mov	r3, r5
 8007518:	1891      	adds	r1, r2, r2
 800751a:	6139      	str	r1, [r7, #16]
 800751c:	415b      	adcs	r3, r3
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007524:	1912      	adds	r2, r2, r4
 8007526:	eb45 0303 	adc.w	r3, r5, r3
 800752a:	f04f 0000 	mov.w	r0, #0
 800752e:	f04f 0100 	mov.w	r1, #0
 8007532:	00d9      	lsls	r1, r3, #3
 8007534:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007538:	00d0      	lsls	r0, r2, #3
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	eb12 0804 	adds.w	r8, r2, r4
 8007542:	eb43 0905 	adc.w	r9, r3, r5
 8007546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4618      	mov	r0, r3
 800754c:	f04f 0100 	mov.w	r1, #0
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	008b      	lsls	r3, r1, #2
 800755a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800755e:	0082      	lsls	r2, r0, #2
 8007560:	4640      	mov	r0, r8
 8007562:	4649      	mov	r1, r9
 8007564:	f7f9 fb70 	bl	8000c48 <__aeabi_uldivmod>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4b49      	ldr	r3, [pc, #292]	; (8007694 <UART_SetConfig+0x38c>)
 800756e:	fba3 2302 	umull	r2, r3, r3, r2
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	011e      	lsls	r6, r3, #4
 8007576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007578:	4618      	mov	r0, r3
 800757a:	f04f 0100 	mov.w	r1, #0
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	1894      	adds	r4, r2, r2
 8007584:	60bc      	str	r4, [r7, #8]
 8007586:	415b      	adcs	r3, r3
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800758e:	1812      	adds	r2, r2, r0
 8007590:	eb41 0303 	adc.w	r3, r1, r3
 8007594:	f04f 0400 	mov.w	r4, #0
 8007598:	f04f 0500 	mov.w	r5, #0
 800759c:	00dd      	lsls	r5, r3, #3
 800759e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075a2:	00d4      	lsls	r4, r2, #3
 80075a4:	4622      	mov	r2, r4
 80075a6:	462b      	mov	r3, r5
 80075a8:	1814      	adds	r4, r2, r0
 80075aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80075ac:	414b      	adcs	r3, r1
 80075ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f04f 0100 	mov.w	r1, #0
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	008b      	lsls	r3, r1, #2
 80075c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075c8:	0082      	lsls	r2, r0, #2
 80075ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80075ce:	f7f9 fb3b 	bl	8000c48 <__aeabi_uldivmod>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4b2f      	ldr	r3, [pc, #188]	; (8007694 <UART_SetConfig+0x38c>)
 80075d8:	fba3 1302 	umull	r1, r3, r3, r2
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	2164      	movs	r1, #100	; 0x64
 80075e0:	fb01 f303 	mul.w	r3, r1, r3
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	3332      	adds	r3, #50	; 0x32
 80075ea:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <UART_SetConfig+0x38c>)
 80075ec:	fba2 2303 	umull	r2, r3, r2, r3
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075f6:	441e      	add	r6, r3
 80075f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075fa:	4618      	mov	r0, r3
 80075fc:	f04f 0100 	mov.w	r1, #0
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	1894      	adds	r4, r2, r2
 8007606:	603c      	str	r4, [r7, #0]
 8007608:	415b      	adcs	r3, r3
 800760a:	607b      	str	r3, [r7, #4]
 800760c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007610:	1812      	adds	r2, r2, r0
 8007612:	eb41 0303 	adc.w	r3, r1, r3
 8007616:	f04f 0400 	mov.w	r4, #0
 800761a:	f04f 0500 	mov.w	r5, #0
 800761e:	00dd      	lsls	r5, r3, #3
 8007620:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007624:	00d4      	lsls	r4, r2, #3
 8007626:	4622      	mov	r2, r4
 8007628:	462b      	mov	r3, r5
 800762a:	eb12 0a00 	adds.w	sl, r2, r0
 800762e:	eb43 0b01 	adc.w	fp, r3, r1
 8007632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	4618      	mov	r0, r3
 8007638:	f04f 0100 	mov.w	r1, #0
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	008b      	lsls	r3, r1, #2
 8007646:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800764a:	0082      	lsls	r2, r0, #2
 800764c:	4650      	mov	r0, sl
 800764e:	4659      	mov	r1, fp
 8007650:	f7f9 fafa 	bl	8000c48 <__aeabi_uldivmod>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4b0e      	ldr	r3, [pc, #56]	; (8007694 <UART_SetConfig+0x38c>)
 800765a:	fba3 1302 	umull	r1, r3, r3, r2
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	2164      	movs	r1, #100	; 0x64
 8007662:	fb01 f303 	mul.w	r3, r1, r3
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	3332      	adds	r3, #50	; 0x32
 800766c:	4a09      	ldr	r2, [pc, #36]	; (8007694 <UART_SetConfig+0x38c>)
 800766e:	fba2 2303 	umull	r2, r3, r2, r3
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	f003 020f 	and.w	r2, r3, #15
 8007678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4432      	add	r2, r6
 800767e:	609a      	str	r2, [r3, #8]
}
 8007680:	bf00      	nop
 8007682:	377c      	adds	r7, #124	; 0x7c
 8007684:	46bd      	mov	sp, r7
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768a:	bf00      	nop
 800768c:	40011000 	.word	0x40011000
 8007690:	40011400 	.word	0x40011400
 8007694:	51eb851f 	.word	0x51eb851f

08007698 <USB_CoreInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
 8007630:	b084      	sub	sp, #16
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	f107 001c 	add.w	r0, r7, #28
 800763e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	2b01      	cmp	r3, #1
 8007646:	d122      	bne.n	800768e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800765c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007672:	2b01      	cmp	r3, #1
 8007674:	d105      	bne.n	8007682 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60da      	str	r2, [r3, #12]
=======
 8007698:	b084      	sub	sp, #16
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	f107 001c 	add.w	r0, r7, #28
 80076a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d122      	bne.n	80076f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80076c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d105      	bne.n	80076ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60da      	str	r2, [r3, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
<<<<<<< HEAD
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fb1c 	bl	8008cc0 <USB_CoreReset>
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
 800768c:	e01a      	b.n	80076c4 <USB_CoreInit+0x94>
=======
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 fb1c 	bl	8008d28 <USB_CoreReset>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]
 80076f4:	e01a      	b.n	800772c <USB_CoreInit+0x94>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
<<<<<<< HEAD
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 fb10 	bl	8008cc0 <USB_CoreReset>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d106      	bne.n	80076b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
 80076b6:	e005      	b.n	80076c4 <USB_CoreInit+0x94>
=======
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 fb10 	bl	8008d28 <USB_CoreReset>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800770c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007716:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	639a      	str	r2, [r3, #56]	; 0x38
 800771e:	e005      	b.n	800772c <USB_CoreInit+0x94>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
<<<<<<< HEAD
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  if (cfg.dma_enable == 1U)
<<<<<<< HEAD
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d10b      	bne.n	80076e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f043 0206 	orr.w	r2, r3, #6
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f043 0220 	orr.w	r2, r3, #32
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076ee:	b004      	add	sp, #16
 80076f0:	4770      	bx	lr
	...

080076f4 <USB_SetTurnaroundTime>:
=======
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	2b01      	cmp	r3, #1
 8007730:	d10b      	bne.n	800774a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f043 0206 	orr.w	r2, r3, #6
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f043 0220 	orr.w	r2, r3, #32
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007756:	b004      	add	sp, #16
 8007758:	4770      	bx	lr
	...

0800775c <USB_SetTurnaroundTime>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
<<<<<<< HEAD
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	71fb      	strb	r3, [r7, #7]
=======
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	71fb      	strb	r3, [r7, #7]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
<<<<<<< HEAD
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d165      	bne.n	80077d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4a41      	ldr	r2, [pc, #260]	; (8007810 <USB_SetTurnaroundTime+0x11c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d906      	bls.n	800771e <USB_SetTurnaroundTime+0x2a>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4a40      	ldr	r2, [pc, #256]	; (8007814 <USB_SetTurnaroundTime+0x120>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d202      	bcs.n	800771e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007718:	230f      	movs	r3, #15
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	e062      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4a3c      	ldr	r2, [pc, #240]	; (8007814 <USB_SetTurnaroundTime+0x120>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d306      	bcc.n	8007734 <USB_SetTurnaroundTime+0x40>
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	4a3b      	ldr	r2, [pc, #236]	; (8007818 <USB_SetTurnaroundTime+0x124>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d202      	bcs.n	8007734 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800772e:	230e      	movs	r3, #14
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	e057      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4a38      	ldr	r2, [pc, #224]	; (8007818 <USB_SetTurnaroundTime+0x124>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d306      	bcc.n	800774a <USB_SetTurnaroundTime+0x56>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4a37      	ldr	r2, [pc, #220]	; (800781c <USB_SetTurnaroundTime+0x128>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d202      	bcs.n	800774a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007744:	230d      	movs	r3, #13
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	e04c      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4a33      	ldr	r2, [pc, #204]	; (800781c <USB_SetTurnaroundTime+0x128>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d306      	bcc.n	8007760 <USB_SetTurnaroundTime+0x6c>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	4a32      	ldr	r2, [pc, #200]	; (8007820 <USB_SetTurnaroundTime+0x12c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d802      	bhi.n	8007760 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800775a:	230c      	movs	r3, #12
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	e041      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4a2f      	ldr	r2, [pc, #188]	; (8007820 <USB_SetTurnaroundTime+0x12c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d906      	bls.n	8007776 <USB_SetTurnaroundTime+0x82>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4a2e      	ldr	r2, [pc, #184]	; (8007824 <USB_SetTurnaroundTime+0x130>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d802      	bhi.n	8007776 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007770:	230b      	movs	r3, #11
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e036      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4a2a      	ldr	r2, [pc, #168]	; (8007824 <USB_SetTurnaroundTime+0x130>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d906      	bls.n	800778c <USB_SetTurnaroundTime+0x98>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4a29      	ldr	r2, [pc, #164]	; (8007828 <USB_SetTurnaroundTime+0x134>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d802      	bhi.n	800778c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007786:	230a      	movs	r3, #10
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e02b      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4a26      	ldr	r2, [pc, #152]	; (8007828 <USB_SetTurnaroundTime+0x134>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d906      	bls.n	80077a2 <USB_SetTurnaroundTime+0xae>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4a25      	ldr	r2, [pc, #148]	; (800782c <USB_SetTurnaroundTime+0x138>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d202      	bcs.n	80077a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800779c:	2309      	movs	r3, #9
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	e020      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4a21      	ldr	r2, [pc, #132]	; (800782c <USB_SetTurnaroundTime+0x138>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d306      	bcc.n	80077b8 <USB_SetTurnaroundTime+0xc4>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4a20      	ldr	r2, [pc, #128]	; (8007830 <USB_SetTurnaroundTime+0x13c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d802      	bhi.n	80077b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077b2:	2308      	movs	r3, #8
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e015      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4a1d      	ldr	r2, [pc, #116]	; (8007830 <USB_SetTurnaroundTime+0x13c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d906      	bls.n	80077ce <USB_SetTurnaroundTime+0xda>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4a1c      	ldr	r2, [pc, #112]	; (8007834 <USB_SetTurnaroundTime+0x140>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d202      	bcs.n	80077ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077c8:	2307      	movs	r3, #7
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e00a      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
=======
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	2b02      	cmp	r3, #2
 800776e:	d165      	bne.n	800783c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4a41      	ldr	r2, [pc, #260]	; (8007878 <USB_SetTurnaroundTime+0x11c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d906      	bls.n	8007786 <USB_SetTurnaroundTime+0x2a>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4a40      	ldr	r2, [pc, #256]	; (800787c <USB_SetTurnaroundTime+0x120>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d202      	bcs.n	8007786 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007780:	230f      	movs	r3, #15
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	e062      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4a3c      	ldr	r2, [pc, #240]	; (800787c <USB_SetTurnaroundTime+0x120>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d306      	bcc.n	800779c <USB_SetTurnaroundTime+0x40>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4a3b      	ldr	r2, [pc, #236]	; (8007880 <USB_SetTurnaroundTime+0x124>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d202      	bcs.n	800779c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007796:	230e      	movs	r3, #14
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	e057      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4a38      	ldr	r2, [pc, #224]	; (8007880 <USB_SetTurnaroundTime+0x124>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d306      	bcc.n	80077b2 <USB_SetTurnaroundTime+0x56>
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4a37      	ldr	r2, [pc, #220]	; (8007884 <USB_SetTurnaroundTime+0x128>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d202      	bcs.n	80077b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80077ac:	230d      	movs	r3, #13
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	e04c      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4a33      	ldr	r2, [pc, #204]	; (8007884 <USB_SetTurnaroundTime+0x128>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d306      	bcc.n	80077c8 <USB_SetTurnaroundTime+0x6c>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	4a32      	ldr	r2, [pc, #200]	; (8007888 <USB_SetTurnaroundTime+0x12c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d802      	bhi.n	80077c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80077c2:	230c      	movs	r3, #12
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	e041      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4a2f      	ldr	r2, [pc, #188]	; (8007888 <USB_SetTurnaroundTime+0x12c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d906      	bls.n	80077de <USB_SetTurnaroundTime+0x82>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	4a2e      	ldr	r2, [pc, #184]	; (800788c <USB_SetTurnaroundTime+0x130>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d802      	bhi.n	80077de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80077d8:	230b      	movs	r3, #11
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	e036      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	4a2a      	ldr	r2, [pc, #168]	; (800788c <USB_SetTurnaroundTime+0x130>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d906      	bls.n	80077f4 <USB_SetTurnaroundTime+0x98>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	4a29      	ldr	r2, [pc, #164]	; (8007890 <USB_SetTurnaroundTime+0x134>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d802      	bhi.n	80077f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80077ee:	230a      	movs	r3, #10
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	e02b      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4a26      	ldr	r2, [pc, #152]	; (8007890 <USB_SetTurnaroundTime+0x134>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d906      	bls.n	800780a <USB_SetTurnaroundTime+0xae>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	4a25      	ldr	r2, [pc, #148]	; (8007894 <USB_SetTurnaroundTime+0x138>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d202      	bcs.n	800780a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007804:	2309      	movs	r3, #9
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	e020      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	4a21      	ldr	r2, [pc, #132]	; (8007894 <USB_SetTurnaroundTime+0x138>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d306      	bcc.n	8007820 <USB_SetTurnaroundTime+0xc4>
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	4a20      	ldr	r2, [pc, #128]	; (8007898 <USB_SetTurnaroundTime+0x13c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d802      	bhi.n	8007820 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800781a:	2308      	movs	r3, #8
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	e015      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4a1d      	ldr	r2, [pc, #116]	; (8007898 <USB_SetTurnaroundTime+0x13c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d906      	bls.n	8007836 <USB_SetTurnaroundTime+0xda>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4a1c      	ldr	r2, [pc, #112]	; (800789c <USB_SetTurnaroundTime+0x140>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d202      	bcs.n	8007836 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007830:	2307      	movs	r3, #7
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	e00a      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
<<<<<<< HEAD
 80077ce:	2306      	movs	r3, #6
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e007      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077da:	2309      	movs	r3, #9
 80077dc:	617b      	str	r3, [r7, #20]
 80077de:	e001      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
=======
 8007836:	2306      	movs	r3, #6
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	e007      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007842:	2309      	movs	r3, #9
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	e001      	b.n	800784c <USB_SetTurnaroundTime+0xf0>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
<<<<<<< HEAD
 80077e0:	2309      	movs	r3, #9
 80077e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	029b      	lsls	r3, r3, #10
 80077f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80077fc:	431a      	orrs	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	00d8acbf 	.word	0x00d8acbf
 8007814:	00e4e1c0 	.word	0x00e4e1c0
 8007818:	00f42400 	.word	0x00f42400
 800781c:	01067380 	.word	0x01067380
 8007820:	011a499f 	.word	0x011a499f
 8007824:	01312cff 	.word	0x01312cff
 8007828:	014ca43f 	.word	0x014ca43f
 800782c:	016e3600 	.word	0x016e3600
 8007830:	01a6ab1f 	.word	0x01a6ab1f
 8007834:	01e84800 	.word	0x01e84800

08007838 <USB_EnableGlobalInt>:
=======
 8007848:	2309      	movs	r3, #9
 800784a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	029b      	lsls	r3, r3, #10
 8007860:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007864:	431a      	orrs	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	00d8acbf 	.word	0x00d8acbf
 800787c:	00e4e1c0 	.word	0x00e4e1c0
 8007880:	00f42400 	.word	0x00f42400
 8007884:	01067380 	.word	0x01067380
 8007888:	011a499f 	.word	0x011a499f
 800788c:	01312cff 	.word	0x01312cff
 8007890:	014ca43f 	.word	0x014ca43f
 8007894:	016e3600 	.word	0x016e3600
 8007898:	01a6ab1f 	.word	0x01a6ab1f
 800789c:	01e84800 	.word	0x01e84800

080078a0 <USB_EnableGlobalInt>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f043 0201 	orr.w	r2, r3, #1
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USB_DisableGlobalInt>:
=======
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f043 0201 	orr.w	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USB_DisableGlobalInt>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f023 0201 	bic.w	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USB_SetCurrentMode>:
=======
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f023 0201 	bic.w	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <USB_SetCurrentMode>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
<<<<<<< HEAD
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d115      	bne.n	80078ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60da      	str	r2, [r3, #12]
=======
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d115      	bne.n	8007932 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	60da      	str	r2, [r3, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

    do
    {
      HAL_Delay(1U);
<<<<<<< HEAD
 80078aa:	2001      	movs	r0, #1
 80078ac:	f7fb f942 	bl	8002b34 <HAL_Delay>
      ms++;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3301      	adds	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 f972 	bl	8008ba0 <USB_GetMode>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d01e      	beq.n	8007900 <USB_SetCurrentMode+0x84>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b31      	cmp	r3, #49	; 0x31
 80078c6:	d9f0      	bls.n	80078aa <USB_SetCurrentMode+0x2e>
 80078c8:	e01a      	b.n	8007900 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d115      	bne.n	80078fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	60da      	str	r2, [r3, #12]
=======
 8007912:	2001      	movs	r0, #1
 8007914:	f7fb f942 	bl	8002b9c <HAL_Delay>
      ms++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3301      	adds	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 f972 	bl	8008c08 <USB_GetMode>
 8007924:	4603      	mov	r3, r0
 8007926:	2b01      	cmp	r3, #1
 8007928:	d01e      	beq.n	8007968 <USB_SetCurrentMode+0x84>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b31      	cmp	r3, #49	; 0x31
 800792e:	d9f0      	bls.n	8007912 <USB_SetCurrentMode+0x2e>
 8007930:	e01a      	b.n	8007968 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d115      	bne.n	8007964 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60da      	str	r2, [r3, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

    do
    {
      HAL_Delay(1U);
<<<<<<< HEAD
 80078dc:	2001      	movs	r0, #1
 80078de:	f7fb f929 	bl	8002b34 <HAL_Delay>
      ms++;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f959 	bl	8008ba0 <USB_GetMode>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <USB_SetCurrentMode+0x84>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b31      	cmp	r3, #49	; 0x31
 80078f8:	d9f0      	bls.n	80078dc <USB_SetCurrentMode+0x60>
 80078fa:	e001      	b.n	8007900 <USB_SetCurrentMode+0x84>
=======
 8007944:	2001      	movs	r0, #1
 8007946:	f7fb f929 	bl	8002b9c <HAL_Delay>
      ms++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f959 	bl	8008c08 <USB_GetMode>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <USB_SetCurrentMode+0x84>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b31      	cmp	r3, #49	; 0x31
 8007960:	d9f0      	bls.n	8007944 <USB_SetCurrentMode+0x60>
 8007962:	e001      	b.n	8007968 <USB_SetCurrentMode+0x84>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80078fc:	2301      	movs	r3, #1
 80078fe:	e005      	b.n	800790c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b32      	cmp	r3, #50	; 0x32
 8007904:	d101      	bne.n	800790a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USB_DevInit>:
=======
 8007964:	2301      	movs	r3, #1
 8007966:	e005      	b.n	8007974 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b32      	cmp	r3, #50	; 0x32
 800796c:	d101      	bne.n	8007972 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USB_DevInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
 8007914:	b084      	sub	sp, #16
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800792e:	2300      	movs	r3, #0
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	e009      	b.n	8007948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3340      	adds	r3, #64	; 0x40
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	2200      	movs	r2, #0
 8007940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	3301      	adds	r3, #1
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b0e      	cmp	r3, #14
 800794c:	d9f2      	bls.n	8007934 <USB_DevInit+0x20>
=======
 800797c:	b084      	sub	sp, #16
 800797e:	b580      	push	{r7, lr}
 8007980:	b086      	sub	sp, #24
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800798a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007996:	2300      	movs	r3, #0
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	e009      	b.n	80079b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	3340      	adds	r3, #64	; 0x40
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	2200      	movs	r2, #0
 80079a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	3301      	adds	r3, #1
 80079ae:	613b      	str	r3, [r7, #16]
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	2b0e      	cmp	r3, #14
 80079b4:	d9f2      	bls.n	800799c <USB_DevInit+0x20>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
<<<<<<< HEAD
 800794e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d11c      	bne.n	800798e <USB_DevInit+0x7a>
=======
 80079b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d11c      	bne.n	80079f6 <USB_DevInit+0x7a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
<<<<<<< HEAD
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007962:	f043 0302 	orr.w	r3, r3, #2
 8007966:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	639a      	str	r2, [r3, #56]	; 0x38
 800798c:	e00b      	b.n	80079a6 <USB_DevInit+0x92>
=======
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ca:	f043 0302 	orr.w	r3, r3, #2
 80079ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
 80079f4:	e00b      	b.n	8007a0e <USB_DevInit+0x92>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
<<<<<<< HEAD
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38
=======
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
<<<<<<< HEAD
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079ac:	461a      	mov	r2, r3
 80079ae:	2300      	movs	r3, #0
 80079b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b8:	4619      	mov	r1, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c0:	461a      	mov	r2, r3
 80079c2:	680b      	ldr	r3, [r1, #0]
 80079c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d10c      	bne.n	80079e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079d2:	2100      	movs	r1, #0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f945 	bl	8007c64 <USB_SetDevSpeed>
 80079da:	e008      	b.n	80079ee <USB_DevInit+0xda>
=======
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a14:	461a      	mov	r2, r3
 8007a16:	2300      	movs	r3, #0
 8007a18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a20:	4619      	mov	r1, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a28:	461a      	mov	r2, r3
 8007a2a:	680b      	ldr	r3, [r1, #0]
 8007a2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d10c      	bne.n	8007a4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f945 	bl	8007ccc <USB_SetDevSpeed>
 8007a42:	e008      	b.n	8007a56 <USB_DevInit+0xda>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
<<<<<<< HEAD
 80079dc:	2101      	movs	r1, #1
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f940 	bl	8007c64 <USB_SetDevSpeed>
 80079e4:	e003      	b.n	80079ee <USB_DevInit+0xda>
=======
 8007a44:	2101      	movs	r1, #1
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f940 	bl	8007ccc <USB_SetDevSpeed>
 8007a4c:	e003      	b.n	8007a56 <USB_DevInit+0xda>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
<<<<<<< HEAD
 80079e6:	2103      	movs	r1, #3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f93b 	bl	8007c64 <USB_SetDevSpeed>
=======
 8007a4e:	2103      	movs	r1, #3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f93b 	bl	8007ccc <USB_SetDevSpeed>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
<<<<<<< HEAD
 80079ee:	2110      	movs	r1, #16
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f8f3 	bl	8007bdc <USB_FlushTxFifo>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f90f 	bl	8007c24 <USB_FlushRxFifo>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
=======
 8007a56:	2110      	movs	r1, #16
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f8f3 	bl	8007c44 <USB_FlushTxFifo>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f90f 	bl	8007c8c <USB_FlushRxFifo>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d001      	beq.n	8007a78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
<<<<<<< HEAD
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	461a      	mov	r2, r3
 8007a18:	2300      	movs	r3, #0
 8007a1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a22:	461a      	mov	r2, r3
 8007a24:	2300      	movs	r3, #0
 8007a26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2300      	movs	r3, #0
 8007a32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a34:	2300      	movs	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	e043      	b.n	8007ac2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a50:	d118      	bne.n	8007a84 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a64:	461a      	mov	r2, r3
 8007a66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	e013      	b.n	8007a96 <USB_DevInit+0x182>
=======
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7e:	461a      	mov	r2, r3
 8007a80:	2300      	movs	r3, #0
 8007a82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a96:	461a      	mov	r2, r3
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	e043      	b.n	8007b2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ab8:	d118      	bne.n	8007aec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007acc:	461a      	mov	r2, r3
 8007ace:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	e013      	b.n	8007afe <USB_DevInit+0x182>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
<<<<<<< HEAD
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e008      	b.n	8007a96 <USB_DevInit+0x182>
=======
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	e008      	b.n	8007afe <USB_DevInit+0x182>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
<<<<<<< HEAD
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	461a      	mov	r2, r3
 8007a92:	2300      	movs	r3, #0
 8007a94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d3b7      	bcc.n	8007a3a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	e043      	b.n	8007b58 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ae6:	d118      	bne.n	8007b1a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afa:	461a      	mov	r2, r3
 8007afc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	e013      	b.n	8007b2c <USB_DevInit+0x218>
=======
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af8:	461a      	mov	r2, r3
 8007afa:	2300      	movs	r3, #0
 8007afc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	3301      	adds	r3, #1
 8007b28:	613b      	str	r3, [r7, #16]
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d3b7      	bcc.n	8007aa2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b32:	2300      	movs	r3, #0
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	e043      	b.n	8007bc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b4e:	d118      	bne.n	8007b82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10a      	bne.n	8007b6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	461a      	mov	r2, r3
 8007b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	e013      	b.n	8007b94 <USB_DevInit+0x218>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
<<<<<<< HEAD
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b10:	461a      	mov	r2, r3
 8007b12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	e008      	b.n	8007b2c <USB_DevInit+0x218>
=======
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	e008      	b.n	8007b94 <USB_DevInit+0x218>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
<<<<<<< HEAD
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b26:	461a      	mov	r2, r3
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b38:	461a      	mov	r2, r3
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3301      	adds	r3, #1
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d3b7      	bcc.n	8007ad0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d105      	bne.n	8007b94 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	f043 0210 	orr.w	r2, r3, #16
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	619a      	str	r2, [r3, #24]
=======
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8e:	461a      	mov	r2, r3
 8007b90:	2300      	movs	r3, #0
 8007b92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d3b7      	bcc.n	8007b38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007be8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d105      	bne.n	8007bfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	f043 0210 	orr.w	r2, r3, #16
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	619a      	str	r2, [r3, #24]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
<<<<<<< HEAD
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <USB_DevInit+0x2c4>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6193      	str	r3, [r2, #24]
=======
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699a      	ldr	r2, [r3, #24]
 8007c00:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <USB_DevInit+0x2c4>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6193      	str	r3, [r2, #24]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
<<<<<<< HEAD
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f043 0208 	orr.w	r2, r3, #8
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d107      	bne.n	8007bc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bc0:	f043 0304 	orr.w	r3, r3, #4
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bd4:	b004      	add	sp, #16
 8007bd6:	4770      	bx	lr
 8007bd8:	803c3800 	.word	0x803c3800

08007bdc <USB_FlushTxFifo>:
=======
 8007c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f043 0208 	orr.w	r2, r3, #8
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d107      	bne.n	8007c30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c28:	f043 0304 	orr.w	r3, r3, #4
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c3c:	b004      	add	sp, #16
 8007c3e:	4770      	bx	lr
 8007c40:	803c3800 	.word	0x803c3800

08007c44 <USB_FlushTxFifo>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
<<<<<<< HEAD
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	019b      	lsls	r3, r3, #6
 8007bee:	f043 0220 	orr.w	r2, r3, #32
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	611a      	str	r2, [r3, #16]
=======
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	019b      	lsls	r3, r3, #6
 8007c56:	f043 0220 	orr.w	r2, r3, #32
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  do
  {
    if (++count > 200000U)
<<<<<<< HEAD
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	4a08      	ldr	r2, [pc, #32]	; (8007c20 <USB_FlushTxFifo+0x44>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d901      	bls.n	8007c06 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e006      	b.n	8007c14 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d0f1      	beq.n	8007bf6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	00030d40 	.word	0x00030d40

08007c24 <USB_FlushRxFifo>:
=======
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3301      	adds	r3, #1
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	4a08      	ldr	r2, [pc, #32]	; (8007c88 <USB_FlushTxFifo+0x44>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d901      	bls.n	8007c6e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e006      	b.n	8007c7c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d0f1      	beq.n	8007c5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	00030d40 	.word	0x00030d40

08007c8c <USB_FlushRxFifo>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2210      	movs	r2, #16
 8007c34:	611a      	str	r2, [r3, #16]
=======
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2210      	movs	r2, #16
 8007c9c:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  do
  {
    if (++count > 200000U)
<<<<<<< HEAD
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	4a08      	ldr	r2, [pc, #32]	; (8007c60 <USB_FlushRxFifo+0x3c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d901      	bls.n	8007c46 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e006      	b.n	8007c54 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d0f1      	beq.n	8007c36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	00030d40 	.word	0x00030d40

08007c64 <USB_SetDevSpeed>:
=======
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	4a08      	ldr	r2, [pc, #32]	; (8007cc8 <USB_FlushRxFifo+0x3c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e006      	b.n	8007cbc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0310 	and.w	r3, r3, #16
 8007cb6:	2b10      	cmp	r3, #16
 8007cb8:	d0f1      	beq.n	8007c9e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	00030d40 	.word	0x00030d40

08007ccc <USB_SetDevSpeed>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
<<<<<<< HEAD
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c84:	4313      	orrs	r3, r2
 8007c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USB_GetDevSpeed>:
=======
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	68f9      	ldr	r1, [r7, #12]
 8007ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cec:	4313      	orrs	r3, r2
 8007cee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USB_GetDevSpeed>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8007c96:	b480      	push	{r7}
 8007c98:	b087      	sub	sp, #28
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0306 	and.w	r3, r3, #6
 8007cae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75fb      	strb	r3, [r7, #23]
 8007cba:	e00a      	b.n	8007cd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d002      	beq.n	8007cc8 <USB_GetDevSpeed+0x32>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b06      	cmp	r3, #6
 8007cc6:	d102      	bne.n	8007cce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	75fb      	strb	r3, [r7, #23]
 8007ccc:	e001      	b.n	8007cd2 <USB_GetDevSpeed+0x3c>
=======
 8007cfe:	b480      	push	{r7}
 8007d00:	b087      	sub	sp, #28
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 0306 	and.w	r3, r3, #6
 8007d16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d102      	bne.n	8007d24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	75fb      	strb	r3, [r7, #23]
 8007d22:	e00a      	b.n	8007d3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d002      	beq.n	8007d30 <USB_GetDevSpeed+0x32>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b06      	cmp	r3, #6
 8007d2e:	d102      	bne.n	8007d36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d30:	2302      	movs	r3, #2
 8007d32:	75fb      	strb	r3, [r7, #23]
 8007d34:	e001      	b.n	8007d3a <USB_GetDevSpeed+0x3c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    speed = 0xFU;
<<<<<<< HEAD
 8007cce:	230f      	movs	r3, #15
 8007cd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	371c      	adds	r7, #28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USB_ActivateEndpoint>:
=======
 8007d36:	230f      	movs	r3, #15
 8007d38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USB_ActivateEndpoint>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d13a      	bne.n	8007d72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	69da      	ldr	r2, [r3, #28]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	68f9      	ldr	r1, [r7, #12]
 8007d16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d155      	bne.n	8007de0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	78db      	ldrb	r3, [r3, #3]
 8007d4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	059b      	lsls	r3, r3, #22
 8007d56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	e036      	b.n	8007de0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d78:	69da      	ldr	r2, [r3, #28]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 030f 	and.w	r3, r3, #15
 8007d82:	2101      	movs	r1, #1
 8007d84:	fa01 f303 	lsl.w	r3, r1, r3
 8007d88:	041b      	lsls	r3, r3, #16
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d90:	4313      	orrs	r3, r2
 8007d92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d11a      	bne.n	8007de0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	78db      	ldrb	r3, [r3, #3]
 8007dc4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	0151      	lsls	r1, r2, #5
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	440a      	add	r2, r1
 8007dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dde:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
=======
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
<<<<<<< HEAD
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d161      	bne.n	8007ed0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e22:	d11f      	bne.n	8007e64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e30:	681b      	ldr	r3, [r3, #0]
=======
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d13a      	bne.n	8007dda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	69da      	ldr	r2, [r3, #28]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f003 030f 	and.w	r3, r3, #15
 8007d74:	2101      	movs	r1, #1
 8007d76:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	68f9      	ldr	r1, [r7, #12]
 8007d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d82:	4313      	orrs	r3, r2
 8007d84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d155      	bne.n	8007e48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	78db      	ldrb	r3, [r3, #3]
 8007db6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007db8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	059b      	lsls	r3, r3, #22
 8007dbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	e036      	b.n	8007e48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de0:	69da      	ldr	r2, [r3, #28]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	2101      	movs	r1, #1
 8007dec:	fa01 f303 	lsl.w	r3, r1, r3
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d11a      	bne.n	8007e48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	78db      	ldrb	r3, [r3, #3]
 8007e2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	4313      	orrs	r3, r2
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	440a      	add	r2, r1
<<<<<<< HEAD
 8007e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	0151      	lsls	r1, r2, #5
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	440a      	add	r2, r1
 8007e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	2101      	movs	r1, #1
 8007e76:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	43db      	mvns	r3, r3
 8007e7e:	68f9      	ldr	r1, [r7, #12]
 8007e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e84:	4013      	ands	r3, r2
 8007e86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8e:	69da      	ldr	r2, [r3, #28]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	f003 030f 	and.w	r3, r3, #15
 8007e98:	2101      	movs	r1, #1
 8007e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	0159      	lsls	r1, r3, #5
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	440b      	add	r3, r1
 8007ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4b35      	ldr	r3, [pc, #212]	; (8007fa0 <USB_DeactivateEndpoint+0x1b0>)
 8007eca:	4013      	ands	r3, r2
 8007ecc:	600b      	str	r3, [r1, #0]
 8007ece:	e060      	b.n	8007f92 <USB_DeactivateEndpoint+0x1a2>
=======
 8007e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
	...

08007e58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	785b      	ldrb	r3, [r3, #1]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d161      	bne.n	8007f38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e8a:	d11f      	bne.n	8007ecc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	0151      	lsls	r1, r2, #5
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	440a      	add	r2, r1
 8007ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007eaa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	0151      	lsls	r1, r2, #5
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	440a      	add	r2, r1
 8007ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	f003 030f 	and.w	r3, r3, #15
 8007edc:	2101      	movs	r1, #1
 8007ede:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	43db      	mvns	r3, r3
 8007ee6:	68f9      	ldr	r1, [r7, #12]
 8007ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eec:	4013      	ands	r3, r2
 8007eee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	2101      	movs	r1, #1
 8007f02:	fa01 f303 	lsl.w	r3, r1, r3
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f10:	4013      	ands	r3, r2
 8007f12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	0159      	lsls	r1, r3, #5
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	440b      	add	r3, r1
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4b35      	ldr	r3, [pc, #212]	; (8008008 <USB_DeactivateEndpoint+0x1b0>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	600b      	str	r3, [r1, #0]
 8007f36:	e060      	b.n	8007ffa <USB_DeactivateEndpoint+0x1a2>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
<<<<<<< HEAD
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ee6:	d11f      	bne.n	8007f28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	0151      	lsls	r1, r2, #5
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	440a      	add	r2, r1
 8007efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	0151      	lsls	r1, r2, #5
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	440a      	add	r2, r1
 8007f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	f003 030f 	and.w	r3, r3, #15
 8007f38:	2101      	movs	r1, #1
 8007f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3e:	041b      	lsls	r3, r3, #16
 8007f40:	43db      	mvns	r3, r3
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f48:	4013      	ands	r3, r2
 8007f4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	f003 030f 	and.w	r3, r3, #15
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f62:	041b      	lsls	r3, r3, #16
 8007f64:	43db      	mvns	r3, r3
 8007f66:	68f9      	ldr	r1, [r7, #12]
 8007f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	0159      	lsls	r1, r3, #5
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	440b      	add	r3, r1
 8007f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <USB_DeactivateEndpoint+0x1b4>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	600b      	str	r3, [r1, #0]
=======
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f4e:	d11f      	bne.n	8007f90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	0151      	lsls	r1, r2, #5
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	440a      	add	r2, r1
 8007f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	0151      	lsls	r1, r2, #5
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	440a      	add	r2, r1
 8007f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa6:	041b      	lsls	r3, r3, #16
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	f003 030f 	and.w	r3, r3, #15
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fca:	041b      	lsls	r3, r3, #16
 8007fcc:	43db      	mvns	r3, r3
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	0159      	lsls	r1, r3, #5
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	440b      	add	r3, r1
 8007fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <USB_DeactivateEndpoint+0x1b4>)
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	600b      	str	r3, [r1, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
<<<<<<< HEAD
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	ec337800 	.word	0xec337800
 8007fa4:	eff37800 	.word	0xeff37800

08007fa8 <USB_EPStartXfer>:
=======
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	ec337800 	.word	0xec337800
 800800c:	eff37800 	.word	0xeff37800

08008010 <USB_EPStartXfer>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
<<<<<<< HEAD
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	; 0x28
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	61bb      	str	r3, [r7, #24]
=======
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af02      	add	r7, sp, #8
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
<<<<<<< HEAD
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	785b      	ldrb	r3, [r3, #1]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	f040 815c 	bne.w	8008282 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d132      	bne.n	8008038 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	0151      	lsls	r1, r2, #5
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	440a      	add	r2, r1
 8007fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	440a      	add	r2, r1
 800802c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008030:	0cdb      	lsrs	r3, r3, #19
 8008032:	04db      	lsls	r3, r3, #19
 8008034:	6113      	str	r3, [r2, #16]
 8008036:	e074      	b.n	8008122 <USB_EPStartXfer+0x17a>
=======
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	2b01      	cmp	r3, #1
 800802e:	f040 815c 	bne.w	80082ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d132      	bne.n	80080a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	0151      	lsls	r1, r2, #5
 800804c:	69fa      	ldr	r2, [r7, #28]
 800804e:	440a      	add	r2, r1
 8008050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008054:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008058:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800805c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800807c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	69fa      	ldr	r2, [r7, #28]
 8008092:	440a      	add	r2, r1
 8008094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008098:	0cdb      	lsrs	r3, r3, #19
 800809a:	04db      	lsls	r3, r3, #19
 800809c:	6113      	str	r3, [r2, #16]
 800809e:	e074      	b.n	800818a <USB_EPStartXfer+0x17a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
<<<<<<< HEAD
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008052:	0cdb      	lsrs	r3, r3, #19
 8008054:	04db      	lsls	r3, r3, #19
 8008056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	440a      	add	r2, r1
 800806e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800807a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008088:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	6959      	ldr	r1, [r3, #20]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	440b      	add	r3, r1
 8008094:	1e59      	subs	r1, r3, #1
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	fbb1 f3f3 	udiv	r3, r1, r3
 800809e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080a0:	4b9d      	ldr	r3, [pc, #628]	; (8008318 <USB_EPStartXfer+0x370>)
 80080a2:	400b      	ands	r3, r1
 80080a4:	69b9      	ldr	r1, [r7, #24]
 80080a6:	0148      	lsls	r0, r1, #5
 80080a8:	69f9      	ldr	r1, [r7, #28]
 80080aa:	4401      	add	r1, r0
 80080ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080b0:	4313      	orrs	r3, r2
 80080b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ca:	69b9      	ldr	r1, [r7, #24]
 80080cc:	0148      	lsls	r0, r1, #5
 80080ce:	69f9      	ldr	r1, [r7, #28]
 80080d0:	4401      	add	r1, r0
 80080d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080d6:	4313      	orrs	r3, r2
 80080d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	78db      	ldrb	r3, [r3, #3]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d11f      	bne.n	8008122 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008100:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	69fa      	ldr	r2, [r7, #28]
 8008116:	440a      	add	r2, r1
 8008118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008120:	6113      	str	r3, [r2, #16]
=======
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ba:	0cdb      	lsrs	r3, r3, #19
 80080bc:	04db      	lsls	r3, r3, #19
 80080be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	0151      	lsls	r1, r2, #5
 80080d2:	69fa      	ldr	r2, [r7, #28]
 80080d4:	440a      	add	r2, r1
 80080d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6959      	ldr	r1, [r3, #20]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	440b      	add	r3, r1
 80080fc:	1e59      	subs	r1, r3, #1
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	fbb1 f3f3 	udiv	r3, r1, r3
 8008106:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008108:	4b9d      	ldr	r3, [pc, #628]	; (8008380 <USB_EPStartXfer+0x370>)
 800810a:	400b      	ands	r3, r1
 800810c:	69b9      	ldr	r1, [r7, #24]
 800810e:	0148      	lsls	r0, r1, #5
 8008110:	69f9      	ldr	r1, [r7, #28]
 8008112:	4401      	add	r1, r0
 8008114:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008118:	4313      	orrs	r3, r2
 800811a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008128:	691a      	ldr	r2, [r3, #16]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008132:	69b9      	ldr	r1, [r7, #24]
 8008134:	0148      	lsls	r0, r1, #5
 8008136:	69f9      	ldr	r1, [r7, #28]
 8008138:	4401      	add	r1, r0
 800813a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800813e:	4313      	orrs	r3, r2
 8008140:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	78db      	ldrb	r3, [r3, #3]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d11f      	bne.n	800818a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008164:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008168:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	440a      	add	r2, r1
 8008180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008188:	6113      	str	r3, [r2, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }

    if (dma == 1U)
<<<<<<< HEAD
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d14b      	bne.n	80081c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d009      	beq.n	8008144 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813c:	461a      	mov	r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	78db      	ldrb	r3, [r3, #3]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d128      	bne.n	800819e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008158:	2b00      	cmp	r3, #0
 800815a:	d110      	bne.n	800817e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	0151      	lsls	r1, r2, #5
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	440a      	add	r2, r1
 8008172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	e00f      	b.n	800819e <USB_EPStartXfer+0x1f6>
=======
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d14b      	bne.n	8008228 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d009      	beq.n	80081ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a4:	461a      	mov	r2, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	78db      	ldrb	r3, [r3, #3]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d128      	bne.n	8008206 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d110      	bne.n	80081e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	0151      	lsls	r1, r2, #5
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	440a      	add	r2, r1
 80081da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	e00f      	b.n	8008206 <USB_EPStartXfer+0x1f6>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
<<<<<<< HEAD
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	440a      	add	r2, r1
 8008194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800819c:	6013      	str	r3, [r2, #0]
=======
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	0151      	lsls	r1, r2, #5
 80081f8:	69fa      	ldr	r2, [r7, #28]
 80081fa:	440a      	add	r2, r1
 80081fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008204:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
<<<<<<< HEAD
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	0151      	lsls	r1, r2, #5
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	440a      	add	r2, r1
 80081b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	e12f      	b.n	8008420 <USB_EPStartXfer+0x478>
=======
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	0151      	lsls	r1, r2, #5
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	440a      	add	r2, r1
 800821c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008220:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	e12f      	b.n	8008488 <USB_EPStartXfer+0x478>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
<<<<<<< HEAD
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	0151      	lsls	r1, r2, #5
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	440a      	add	r2, r1
 80081d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	78db      	ldrb	r3, [r3, #3]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d015      	beq.n	8008214 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8117 	beq.w	8008420 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	2101      	movs	r1, #1
 8008204:	fa01 f303 	lsl.w	r3, r1, r3
 8008208:	69f9      	ldr	r1, [r7, #28]
 800820a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800820e:	4313      	orrs	r3, r2
 8008210:	634b      	str	r3, [r1, #52]	; 0x34
 8008212:	e105      	b.n	8008420 <USB_EPStartXfer+0x478>
=======
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	0151      	lsls	r1, r2, #5
 800823a:	69fa      	ldr	r2, [r7, #28]
 800823c:	440a      	add	r2, r1
 800823e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008242:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008246:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	78db      	ldrb	r3, [r3, #3]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d015      	beq.n	800827c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 8117 	beq.w	8008488 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	2101      	movs	r1, #1
 800826c:	fa01 f303 	lsl.w	r3, r1, r3
 8008270:	69f9      	ldr	r1, [r7, #28]
 8008272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008276:	4313      	orrs	r3, r2
 8008278:	634b      	str	r3, [r1, #52]	; 0x34
 800827a:	e105      	b.n	8008488 <USB_EPStartXfer+0x478>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
<<<<<<< HEAD
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008220:	2b00      	cmp	r3, #0
 8008222:	d110      	bne.n	8008246 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	0151      	lsls	r1, r2, #5
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	440a      	add	r2, r1
 800823a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800823e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	e00f      	b.n	8008266 <USB_EPStartXfer+0x2be>
=======
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008288:	2b00      	cmp	r3, #0
 800828a:	d110      	bne.n	80082ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	0151      	lsls	r1, r2, #5
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	440a      	add	r2, r1
 80082a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	e00f      	b.n	80082ce <USB_EPStartXfer+0x2be>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
<<<<<<< HEAD
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	0151      	lsls	r1, r2, #5
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	440a      	add	r2, r1
 800825c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008264:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	68d9      	ldr	r1, [r3, #12]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	781a      	ldrb	r2, [r3, #0]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	b298      	uxth	r0, r3
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	4603      	mov	r3, r0
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 fa2b 	bl	80086d6 <USB_WritePacket>
 8008280:	e0ce      	b.n	8008420 <USB_EPStartXfer+0x478>
=======
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	0151      	lsls	r1, r2, #5
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	440a      	add	r2, r1
 80082c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	68d9      	ldr	r1, [r3, #12]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	781a      	ldrb	r2, [r3, #0]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	b298      	uxth	r0, r3
 80082dc:	79fb      	ldrb	r3, [r7, #7]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	4603      	mov	r3, r0
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 fa2b 	bl	800873e <USB_WritePacket>
 80082e8:	e0ce      	b.n	8008488 <USB_EPStartXfer+0x478>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
<<<<<<< HEAD
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	440a      	add	r2, r1
 8008298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800829c:	0cdb      	lsrs	r3, r3, #19
 800829e:	04db      	lsls	r3, r3, #19
 80082a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	0151      	lsls	r1, r2, #5
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	440a      	add	r2, r1
 80082b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d126      	bne.n	800831c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082e4:	69b9      	ldr	r1, [r7, #24]
 80082e6:	0148      	lsls	r0, r1, #5
 80082e8:	69f9      	ldr	r1, [r7, #28]
 80082ea:	4401      	add	r1, r0
 80082ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082f0:	4313      	orrs	r3, r2
 80082f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800830e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008312:	6113      	str	r3, [r2, #16]
 8008314:	e036      	b.n	8008384 <USB_EPStartXfer+0x3dc>
 8008316:	bf00      	nop
 8008318:	1ff80000 	.word	0x1ff80000
=======
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008304:	0cdb      	lsrs	r3, r3, #19
 8008306:	04db      	lsls	r3, r3, #19
 8008308:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	0151      	lsls	r1, r2, #5
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	440a      	add	r2, r1
 8008320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800832c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d126      	bne.n	8008384 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008342:	691a      	ldr	r2, [r3, #16]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800834c:	69b9      	ldr	r1, [r7, #24]
 800834e:	0148      	lsls	r0, r1, #5
 8008350:	69f9      	ldr	r1, [r7, #28]
 8008352:	4401      	add	r1, r0
 8008354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008358:	4313      	orrs	r3, r2
 800835a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	0151      	lsls	r1, r2, #5
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	440a      	add	r2, r1
 8008372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800837a:	6113      	str	r3, [r2, #16]
 800837c:	e036      	b.n	80083ec <USB_EPStartXfer+0x3dc>
 800837e:	bf00      	nop
 8008380:	1ff80000 	.word	0x1ff80000
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
<<<<<<< HEAD
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	695a      	ldr	r2, [r3, #20]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	4413      	add	r3, r2
 8008326:	1e5a      	subs	r2, r3, #1
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008330:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833e:	691a      	ldr	r2, [r3, #16]
 8008340:	8afb      	ldrh	r3, [r7, #22]
 8008342:	04d9      	lsls	r1, r3, #19
 8008344:	4b39      	ldr	r3, [pc, #228]	; (800842c <USB_EPStartXfer+0x484>)
 8008346:	400b      	ands	r3, r1
 8008348:	69b9      	ldr	r1, [r7, #24]
 800834a:	0148      	lsls	r0, r1, #5
 800834c:	69f9      	ldr	r1, [r7, #28]
 800834e:	4401      	add	r1, r0
 8008350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008354:	4313      	orrs	r3, r2
 8008356:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	4413      	add	r3, r2
 8008360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008364:	691a      	ldr	r2, [r3, #16]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	8af9      	ldrh	r1, [r7, #22]
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008374:	69b9      	ldr	r1, [r7, #24]
 8008376:	0148      	lsls	r0, r1, #5
 8008378:	69f9      	ldr	r1, [r7, #28]
 800837a:	4401      	add	r1, r0
 800837c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008380:	4313      	orrs	r3, r2
 8008382:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d10d      	bne.n	80083a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d009      	beq.n	80083a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	68d9      	ldr	r1, [r3, #12]
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a2:	460a      	mov	r2, r1
 80083a4:	615a      	str	r2, [r3, #20]
=======
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	695a      	ldr	r2, [r3, #20]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	4413      	add	r3, r2
 800838e:	1e5a      	subs	r2, r3, #1
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	fbb2 f3f3 	udiv	r3, r2, r3
 8008398:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	8afb      	ldrh	r3, [r7, #22]
 80083aa:	04d9      	lsls	r1, r3, #19
 80083ac:	4b39      	ldr	r3, [pc, #228]	; (8008494 <USB_EPStartXfer+0x484>)
 80083ae:	400b      	ands	r3, r1
 80083b0:	69b9      	ldr	r1, [r7, #24]
 80083b2:	0148      	lsls	r0, r1, #5
 80083b4:	69f9      	ldr	r1, [r7, #28]
 80083b6:	4401      	add	r1, r0
 80083b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083bc:	4313      	orrs	r3, r2
 80083be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	8af9      	ldrh	r1, [r7, #22]
 80083d4:	fb01 f303 	mul.w	r3, r1, r3
 80083d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083dc:	69b9      	ldr	r1, [r7, #24]
 80083de:	0148      	lsls	r0, r1, #5
 80083e0:	69f9      	ldr	r1, [r7, #28]
 80083e2:	4401      	add	r1, r0
 80083e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083e8:	4313      	orrs	r3, r2
 80083ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d10d      	bne.n	800840e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d009      	beq.n	800840e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	68d9      	ldr	r1, [r3, #12]
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	4413      	add	r3, r2
 8008406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840a:	460a      	mov	r2, r1
 800840c:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }

    if (ep->type == EP_TYPE_ISOC)
<<<<<<< HEAD
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	78db      	ldrb	r3, [r3, #3]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d128      	bne.n	8008400 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d110      	bne.n	80083e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	e00f      	b.n	8008400 <USB_EPStartXfer+0x458>
=======
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	78db      	ldrb	r3, [r3, #3]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d128      	bne.n	8008468 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008422:	2b00      	cmp	r3, #0
 8008424:	d110      	bne.n	8008448 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	4413      	add	r3, r2
 800842e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	0151      	lsls	r1, r2, #5
 8008438:	69fa      	ldr	r2, [r7, #28]
 800843a:	440a      	add	r2, r1
 800843c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008440:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	e00f      	b.n	8008468 <USB_EPStartXfer+0x458>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
<<<<<<< HEAD
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	0151      	lsls	r1, r2, #5
 80083f2:	69fa      	ldr	r2, [r7, #28]
 80083f4:	440a      	add	r2, r1
 80083f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083fe:	6013      	str	r3, [r2, #0]
=======
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	440a      	add	r2, r1
 800845e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008466:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
<<<<<<< HEAD
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	0151      	lsls	r1, r2, #5
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	440a      	add	r2, r1
 8008416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800841a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800841e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	1ff80000 	.word	0x1ff80000

08008430 <USB_EP0StartXfer>:
=======
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	440a      	add	r2, r1
 800847e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008482:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008486:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3720      	adds	r7, #32
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	1ff80000 	.word	0x1ff80000

08008498 <USB_EP0StartXfer>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
<<<<<<< HEAD
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	4613      	mov	r3, r2
 800843c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	2b01      	cmp	r3, #1
 800844e:	f040 80cd 	bne.w	80085ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d132      	bne.n	80084c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008474:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008478:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800847c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	0151      	lsls	r1, r2, #5
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	440a      	add	r2, r1
 8008494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800849c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	0151      	lsls	r1, r2, #5
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	440a      	add	r2, r1
 80084b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b8:	0cdb      	lsrs	r3, r3, #19
 80084ba:	04db      	lsls	r3, r3, #19
 80084bc:	6113      	str	r3, [r2, #16]
 80084be:	e04e      	b.n	800855e <USB_EP0StartXfer+0x12e>
=======
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	f040 80cd 	bne.w	8008654 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d132      	bne.n	8008528 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	0151      	lsls	r1, r2, #5
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	440a      	add	r2, r1
 80084d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008504:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008520:	0cdb      	lsrs	r3, r3, #19
 8008522:	04db      	lsls	r3, r3, #19
 8008524:	6113      	str	r3, [r2, #16]
 8008526:	e04e      	b.n	80085c6 <USB_EP0StartXfer+0x12e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
<<<<<<< HEAD
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084da:	0cdb      	lsrs	r3, r3, #19
 80084dc:	04db      	lsls	r3, r3, #19
 80084de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008502:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	695a      	ldr	r2, [r3, #20]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	429a      	cmp	r2, r3
 800850e:	d903      	bls.n	8008518 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	440a      	add	r2, r1
 800852e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008544:	691a      	ldr	r2, [r3, #16]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800854e:	6939      	ldr	r1, [r7, #16]
 8008550:	0148      	lsls	r0, r1, #5
 8008552:	6979      	ldr	r1, [r7, #20]
 8008554:	4401      	add	r1, r0
 8008556:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800855a:	4313      	orrs	r3, r2
 800855c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d11e      	bne.n	80085a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008578:	461a      	mov	r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	6153      	str	r3, [r2, #20]
=======
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	440a      	add	r2, r1
 800853e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008542:	0cdb      	lsrs	r3, r3, #19
 8008544:	04db      	lsls	r3, r3, #19
 8008546:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	0151      	lsls	r1, r2, #5
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	440a      	add	r2, r1
 800855e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008562:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008566:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800856a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	695a      	ldr	r2, [r3, #20]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	429a      	cmp	r2, r3
 8008576:	d903      	bls.n	8008580 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800859a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800859e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ac:	691a      	ldr	r2, [r3, #16]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085b6:	6939      	ldr	r1, [r7, #16]
 80085b8:	0148      	lsls	r0, r1, #5
 80085ba:	6979      	ldr	r1, [r7, #20]
 80085bc:	4401      	add	r1, r0
 80085be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085c2:	4313      	orrs	r3, r2
 80085c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d11e      	bne.n	800860a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d009      	beq.n	80085e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e0:	461a      	mov	r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	6153      	str	r3, [r2, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
<<<<<<< HEAD
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800859a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	e092      	b.n	80086c8 <USB_EP0StartXfer+0x298>
=======
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	0151      	lsls	r1, r2, #5
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	440a      	add	r2, r1
 80085fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008602:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	e092      	b.n	8008730 <USB_EP0StartXfer+0x298>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
<<<<<<< HEAD
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	0151      	lsls	r1, r2, #5
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	440a      	add	r2, r1
 80085b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d07e      	beq.n	80086c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f003 030f 	and.w	r3, r3, #15
 80085da:	2101      	movs	r1, #1
 80085dc:	fa01 f303 	lsl.w	r3, r1, r3
 80085e0:	6979      	ldr	r1, [r7, #20]
 80085e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085e6:	4313      	orrs	r3, r2
 80085e8:	634b      	str	r3, [r1, #52]	; 0x34
 80085ea:	e06d      	b.n	80086c8 <USB_EP0StartXfer+0x298>
=======
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	4413      	add	r3, r2
 8008612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	0151      	lsls	r1, r2, #5
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	440a      	add	r2, r1
 8008620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008624:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008628:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d07e      	beq.n	8008730 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	f003 030f 	and.w	r3, r3, #15
 8008642:	2101      	movs	r1, #1
 8008644:	fa01 f303 	lsl.w	r3, r1, r3
 8008648:	6979      	ldr	r1, [r7, #20]
 800864a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800864e:	4313      	orrs	r3, r2
 8008650:	634b      	str	r3, [r1, #52]	; 0x34
 8008652:	e06d      	b.n	8008730 <USB_EP0StartXfer+0x298>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
<<<<<<< HEAD
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	0151      	lsls	r1, r2, #5
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	440a      	add	r2, r1
 8008602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008606:	0cdb      	lsrs	r3, r3, #19
 8008608:	04db      	lsls	r3, r3, #19
 800860a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	0151      	lsls	r1, r2, #5
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	440a      	add	r2, r1
 8008622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008626:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800862a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800862e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4413      	add	r3, r2
 8008648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	0151      	lsls	r1, r2, #5
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	440a      	add	r2, r1
 8008656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800865a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800865e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866c:	691a      	ldr	r2, [r3, #16]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008676:	6939      	ldr	r1, [r7, #16]
 8008678:	0148      	lsls	r0, r1, #5
 800867a:	6979      	ldr	r1, [r7, #20]
 800867c:	4401      	add	r1, r0
 800867e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008682:	4313      	orrs	r3, r2
 8008684:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d10d      	bne.n	80086a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d009      	beq.n	80086a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	68d9      	ldr	r1, [r3, #12]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a4:	460a      	mov	r2, r1
 80086a6:	615a      	str	r2, [r3, #20]
=======
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	440a      	add	r2, r1
 800866a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800866e:	0cdb      	lsrs	r3, r3, #19
 8008670:	04db      	lsls	r3, r3, #19
 8008672:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	440a      	add	r2, r1
 800868a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008692:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008696:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d4:	691a      	ldr	r2, [r3, #16]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086de:	6939      	ldr	r1, [r7, #16]
 80086e0:	0148      	lsls	r0, r1, #5
 80086e2:	6979      	ldr	r1, [r7, #20]
 80086e4:	4401      	add	r1, r0
 80086e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086ea:	4313      	orrs	r3, r2
 80086ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d10d      	bne.n	8008710 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d009      	beq.n	8008710 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	68d9      	ldr	r1, [r3, #12]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870c:	460a      	mov	r2, r1
 800870e:	615a      	str	r2, [r3, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
<<<<<<< HEAD
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <USB_WritePacket>:
=======
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	0151      	lsls	r1, r2, #5
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	440a      	add	r2, r1
 8008726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800872a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800872e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USB_WritePacket>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
<<<<<<< HEAD
 80086d6:	b480      	push	{r7}
 80086d8:	b089      	sub	sp, #36	; 0x24
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	4611      	mov	r1, r2
 80086e2:	461a      	mov	r2, r3
 80086e4:	460b      	mov	r3, r1
 80086e6:	71fb      	strb	r3, [r7, #7]
 80086e8:	4613      	mov	r3, r2
 80086ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	61fb      	str	r3, [r7, #28]
=======
 800873e:	b480      	push	{r7}
 8008740:	b089      	sub	sp, #36	; 0x24
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	4611      	mov	r1, r2
 800874a:	461a      	mov	r2, r3
 800874c:	460b      	mov	r3, r1
 800874e:	71fb      	strb	r3, [r7, #7]
 8008750:	4613      	mov	r3, r2
 8008752:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	61fb      	str	r3, [r7, #28]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
<<<<<<< HEAD
 80086f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d123      	bne.n	8008744 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086fc:	88bb      	ldrh	r3, [r7, #4]
 80086fe:	3303      	adds	r3, #3
 8008700:	089b      	lsrs	r3, r3, #2
 8008702:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008704:	2300      	movs	r3, #0
 8008706:	61bb      	str	r3, [r7, #24]
 8008708:	e018      	b.n	800873c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	031a      	lsls	r2, r3, #12
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	4413      	add	r3, r2
 8008712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008716:	461a      	mov	r2, r3
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	3301      	adds	r3, #1
 8008722:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	3301      	adds	r3, #1
 8008728:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	3301      	adds	r3, #1
 800872e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	3301      	adds	r3, #1
 8008734:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	3301      	adds	r3, #1
 800873a:	61bb      	str	r3, [r7, #24]
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	429a      	cmp	r2, r3
 8008742:	d3e2      	bcc.n	800870a <USB_WritePacket+0x34>
=======
 800875c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008760:	2b00      	cmp	r3, #0
 8008762:	d123      	bne.n	80087ac <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008764:	88bb      	ldrh	r3, [r7, #4]
 8008766:	3303      	adds	r3, #3
 8008768:	089b      	lsrs	r3, r3, #2
 800876a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800876c:	2300      	movs	r3, #0
 800876e:	61bb      	str	r3, [r7, #24]
 8008770:	e018      	b.n	80087a4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	031a      	lsls	r2, r3, #12
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	4413      	add	r3, r2
 800877a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800877e:	461a      	mov	r2, r3
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	3301      	adds	r3, #1
 800878a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	3301      	adds	r3, #1
 8008790:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	3301      	adds	r3, #1
 8008796:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	3301      	adds	r3, #1
 800879c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	3301      	adds	r3, #1
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d3e2      	bcc.n	8008772 <USB_WritePacket+0x34>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3724      	adds	r7, #36	; 0x24
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <USB_ReadPacket>:
=======
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3724      	adds	r7, #36	; 0x24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <USB_ReadPacket>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
<<<<<<< HEAD
 8008752:	b480      	push	{r7}
 8008754:	b08b      	sub	sp, #44	; 0x2c
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	4613      	mov	r3, r2
 800875e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008768:	88fb      	ldrh	r3, [r7, #6]
 800876a:	089b      	lsrs	r3, r3, #2
 800876c:	b29b      	uxth	r3, r3
 800876e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008770:	88fb      	ldrh	r3, [r7, #6]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008778:	2300      	movs	r3, #0
 800877a:	623b      	str	r3, [r7, #32]
 800877c:	e014      	b.n	80087a8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	601a      	str	r2, [r3, #0]
    pDest++;
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	3301      	adds	r3, #1
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	3301      	adds	r3, #1
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	3301      	adds	r3, #1
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	3301      	adds	r3, #1
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	3301      	adds	r3, #1
 80087a6:	623b      	str	r3, [r7, #32]
 80087a8:	6a3a      	ldr	r2, [r7, #32]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d3e6      	bcc.n	800877e <USB_ReadPacket+0x2c>
=======
 80087ba:	b480      	push	{r7}
 80087bc:	b08b      	sub	sp, #44	; 0x2c
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	4613      	mov	r3, r2
 80087c6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80087d0:	88fb      	ldrh	r3, [r7, #6]
 80087d2:	089b      	lsrs	r3, r3, #2
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80087d8:	88fb      	ldrh	r3, [r7, #6]
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80087e0:	2300      	movs	r3, #0
 80087e2:	623b      	str	r3, [r7, #32]
 80087e4:	e014      	b.n	8008810 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	601a      	str	r2, [r3, #0]
    pDest++;
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	3301      	adds	r3, #1
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	3301      	adds	r3, #1
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	3301      	adds	r3, #1
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	3301      	adds	r3, #1
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	3301      	adds	r3, #1
 800880e:	623b      	str	r3, [r7, #32]
 8008810:	6a3a      	ldr	r2, [r7, #32]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	429a      	cmp	r2, r3
 8008816:	d3e6      	bcc.n	80087e6 <USB_ReadPacket+0x2c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
<<<<<<< HEAD
 80087b0:	8bfb      	ldrh	r3, [r7, #30]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01e      	beq.n	80087f4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c0:	461a      	mov	r2, r3
 80087c2:	f107 0310 	add.w	r3, r7, #16
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	601a      	str	r2, [r3, #0]
=======
 8008818:	8bfb      	ldrh	r3, [r7, #30]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d01e      	beq.n	800885c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008828:	461a      	mov	r2, r3
 800882a:	f107 0310 	add.w	r3, r7, #16
 800882e:	6812      	ldr	r2, [r2, #0]
 8008830:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
<<<<<<< HEAD
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	fa22 f303 	lsr.w	r3, r2, r3
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	701a      	strb	r2, [r3, #0]
      i++;
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	3301      	adds	r3, #1
 80087e0:	623b      	str	r3, [r7, #32]
      pDest++;
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	3301      	adds	r3, #1
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80087e8:	8bfb      	ldrh	r3, [r7, #30]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80087ee:	8bfb      	ldrh	r3, [r7, #30]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1ea      	bne.n	80087ca <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	372c      	adds	r7, #44	; 0x2c
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <USB_EPSetStall>:
=======
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	fa22 f303 	lsr.w	r3, r2, r3
 800883e:	b2da      	uxtb	r2, r3
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	701a      	strb	r2, [r3, #0]
      i++;
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	3301      	adds	r3, #1
 8008848:	623b      	str	r3, [r7, #32]
      pDest++;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	3301      	adds	r3, #1
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008850:	8bfb      	ldrh	r3, [r7, #30]
 8008852:	3b01      	subs	r3, #1
 8008854:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008856:	8bfb      	ldrh	r3, [r7, #30]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1ea      	bne.n	8008832 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800885e:	4618      	mov	r0, r3
 8008860:	372c      	adds	r7, #44	; 0x2c
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <USB_EPSetStall>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
 8008802:	b480      	push	{r7}
 8008804:	b085      	sub	sp, #20
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d12c      	bne.n	8008878 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	db12      	blt.n	8008856 <USB_EPSetStall+0x54>
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00f      	beq.n	8008856 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	440a      	add	r2, r1
 800884c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008850:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008854:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	0151      	lsls	r1, r2, #5
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	440a      	add	r2, r1
 800886c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	e02b      	b.n	80088d0 <USB_EPSetStall+0xce>
=======
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d12c      	bne.n	80088e0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	db12      	blt.n	80088be <USB_EPSetStall+0x54>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00f      	beq.n	80088be <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	0151      	lsls	r1, r2, #5
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	440a      	add	r2, r1
 80088b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088bc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	e02b      	b.n	8008938 <USB_EPSetStall+0xce>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
<<<<<<< HEAD
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	db12      	blt.n	80088b0 <USB_EPSetStall+0xae>
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00f      	beq.n	80088b0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088ae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	0151      	lsls	r1, r2, #5
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	440a      	add	r2, r1
 80088c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USB_EPClearStall>:
=======
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	db12      	blt.n	8008918 <USB_EPSetStall+0xae>
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00f      	beq.n	8008918 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	0151      	lsls	r1, r2, #5
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	440a      	add	r2, r1
 800890e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008912:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008916:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4413      	add	r3, r2
 8008920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	0151      	lsls	r1, r2, #5
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	440a      	add	r2, r1
 800892e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008936:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <USB_EPClearStall>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
<<<<<<< HEAD
 80088de:	b480      	push	{r7}
 80088e0:	b085      	sub	sp, #20
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d128      	bne.n	800894c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	440a      	add	r2, r1
 8008910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008918:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	78db      	ldrb	r3, [r3, #3]
 800891e:	2b03      	cmp	r3, #3
 8008920:	d003      	beq.n	800892a <USB_EPClearStall+0x4c>
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	78db      	ldrb	r3, [r3, #3]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d138      	bne.n	800899c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	4413      	add	r3, r2
 8008932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	440a      	add	r2, r1
 8008940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	e027      	b.n	800899c <USB_EPClearStall+0xbe>
=======
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d128      	bne.n	80089b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	0151      	lsls	r1, r2, #5
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	440a      	add	r2, r1
 8008978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800897c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008980:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	78db      	ldrb	r3, [r3, #3]
 8008986:	2b03      	cmp	r3, #3
 8008988:	d003      	beq.n	8008992 <USB_EPClearStall+0x4c>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	78db      	ldrb	r3, [r3, #3]
 800898e:	2b02      	cmp	r3, #2
 8008990:	d138      	bne.n	8008a04 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	e027      	b.n	8008a04 <USB_EPClearStall+0xbe>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
<<<<<<< HEAD
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	440a      	add	r2, r1
 8008962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800896a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	78db      	ldrb	r3, [r3, #3]
 8008970:	2b03      	cmp	r3, #3
 8008972:	d003      	beq.n	800897c <USB_EPClearStall+0x9e>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	78db      	ldrb	r3, [r3, #3]
 8008978:	2b02      	cmp	r3, #2
 800897a:	d10f      	bne.n	800899c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	0151      	lsls	r1, r2, #5
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	440a      	add	r2, r1
 8008992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800899a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <USB_SetDevAddress>:
=======
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	78db      	ldrb	r3, [r3, #3]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d003      	beq.n	80089e4 <USB_EPClearStall+0x9e>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	78db      	ldrb	r3, [r3, #3]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d10f      	bne.n	8008a04 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	0151      	lsls	r1, r2, #5
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	440a      	add	r2, r1
 80089fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a02:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USB_SetDevAddress>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
<<<<<<< HEAD
 80089aa:	b480      	push	{r7}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	460b      	mov	r3, r1
 80089b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089cc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	78fb      	ldrb	r3, [r7, #3]
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80089de:	68f9      	ldr	r1, [r7, #12]
 80089e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089e4:	4313      	orrs	r3, r2
 80089e6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USB_DevConnect>:
=======
 8008a12:	b480      	push	{r7}
 8008a14:	b085      	sub	sp, #20
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a30:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a34:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008a46:	68f9      	ldr	r1, [r7, #12]
 8008a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <USB_DevConnect>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a10:	f023 0303 	bic.w	r3, r3, #3
 8008a14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a24:	f023 0302 	bic.w	r3, r3, #2
 8008a28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USB_DevDisconnect>:
=======
 8008a5e:	b480      	push	{r7}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a78:	f023 0303 	bic.w	r3, r3, #3
 8008a7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a8c:	f023 0302 	bic.w	r3, r3, #2
 8008a90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USB_DevDisconnect>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a66:	f043 0302 	orr.w	r3, r3, #2
 8008a6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USB_ReadInterrupts>:
=======
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ace:	f043 0302 	orr.w	r3, r3, #2
 8008ad2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <USB_ReadInterrupts>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a92:	68fb      	ldr	r3, [r7, #12]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USB_ReadDevAllOutEpInterrupt>:
=======
 8008ae2:	b480      	push	{r7}
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4013      	ands	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008afa:	68fb      	ldr	r3, [r7, #12]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USB_ReadDevAllOutEpInterrupt>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	0c1b      	lsrs	r3, r3, #16
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USB_ReadDevAllInEpInterrupt>:
=======
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	4013      	ands	r3, r2
 8008b2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	0c1b      	lsrs	r3, r3, #16
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USB_ReadDevAllInEpInterrupt>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	4013      	ands	r3, r2
 8008af6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	b29b      	uxth	r3, r3
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USB_ReadDevOutEPInterrupt>:
=======
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	b29b      	uxth	r3, r3
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <USB_ReadDevOutEPInterrupt>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
<<<<<<< HEAD
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	4013      	ands	r3, r2
 8008b34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b36:	68bb      	ldr	r3, [r7, #8]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <USB_ReadDevInEPInterrupt>:
=======
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <USB_ReadDevInEPInterrupt>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
<<<<<<< HEAD
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	617b      	str	r3, [r7, #20]
=======
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
<<<<<<< HEAD
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b66:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	f003 030f 	and.w	r3, r3, #15
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	fa22 f303 	lsr.w	r3, r2, r3
 8008b74:	01db      	lsls	r3, r3, #7
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	4013      	ands	r3, r2
 8008b90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b92:	68bb      	ldr	r3, [r7, #8]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <USB_GetMode>:
=======
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	f003 030f 	and.w	r3, r3, #15
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bdc:	01db      	lsls	r3, r3, #7
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008be6:	78fb      	ldrb	r3, [r7, #3]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	371c      	adds	r7, #28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <USB_GetMode>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	f003 0301 	and.w	r3, r3, #1
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <USB_ActivateSetup>:
=======
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	f003 0301 	and.w	r3, r3, #1
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <USB_ActivateSetup>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008bda:	f023 0307 	bic.w	r3, r3, #7
 8008bde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <USB_EP0_OutStart>:
=======
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c42:	f023 0307 	bic.w	r3, r3, #7
 8008c46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
	...

08008c6c <USB_EP0_OutStart>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
<<<<<<< HEAD
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	333c      	adds	r3, #60	; 0x3c
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	4a26      	ldr	r2, [pc, #152]	; (8008cbc <USB_EP0_OutStart+0xb8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d90a      	bls.n	8008c3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c38:	d101      	bne.n	8008c3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e037      	b.n	8008cae <USB_EP0_OutStart+0xaa>
=======
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	460b      	mov	r3, r1
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	333c      	adds	r3, #60	; 0x3c
 8008c82:	3304      	adds	r3, #4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	4a26      	ldr	r2, [pc, #152]	; (8008d24 <USB_EP0_OutStart+0xb8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d90a      	bls.n	8008ca6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ca0:	d101      	bne.n	8008ca6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e037      	b.n	8008d16 <USB_EP0_OutStart+0xaa>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
<<<<<<< HEAD
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c44:	461a      	mov	r2, r3
 8008c46:	2300      	movs	r3, #0
 8008c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c6c:	f043 0318 	orr.w	r3, r3, #24
 8008c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d10f      	bne.n	8008cac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c92:	461a      	mov	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008caa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	4f54300a 	.word	0x4f54300a

08008cc0 <USB_CoreReset>:
=======
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cac:	461a      	mov	r2, r3
 8008cae:	2300      	movs	r3, #0
 8008cb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cd4:	f043 0318 	orr.w	r3, r3, #24
 8008cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008cec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008cee:	7afb      	ldrb	r3, [r7, #11]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d10f      	bne.n	8008d14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008d12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	371c      	adds	r7, #28
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	4f54300a 	.word	0x4f54300a

08008d28 <USB_CoreReset>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	60fb      	str	r3, [r7, #12]
=======
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
<<<<<<< HEAD
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	4a13      	ldr	r2, [pc, #76]	; (8008d20 <USB_CoreReset+0x60>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d901      	bls.n	8008cdc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e01a      	b.n	8008d12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	daf3      	bge.n	8008ccc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f043 0201 	orr.w	r2, r3, #1
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	611a      	str	r2, [r3, #16]
=======
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	4a13      	ldr	r2, [pc, #76]	; (8008d88 <USB_CoreReset+0x60>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d901      	bls.n	8008d44 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e01a      	b.n	8008d7a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	daf3      	bge.n	8008d34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f043 0201 	orr.w	r2, r3, #1
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  do
  {
    if (++count > 200000U)
<<<<<<< HEAD
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	4a09      	ldr	r2, [pc, #36]	; (8008d20 <USB_CoreReset+0x60>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d901      	bls.n	8008d04 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e006      	b.n	8008d12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d0f1      	beq.n	8008cf4 <USB_CoreReset+0x34>

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	00030d40 	.word	0x00030d40

08008d24 <USBD_CDC_Init>:
=======
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	60fb      	str	r3, [r7, #12]
 8008d62:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <USB_CoreReset+0x60>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d901      	bls.n	8008d6c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e006      	b.n	8008d7a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d0f1      	beq.n	8008d5c <USB_CoreReset+0x34>

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	00030d40 	.word	0x00030d40

08008d8c <USBD_CDC_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
=======
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
<<<<<<< HEAD
 8008d30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d34:	f002 f95c 	bl	800aff0 <USBD_static_malloc>
 8008d38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d105      	bne.n	8008d4c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e066      	b.n	8008e1a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	7c1b      	ldrb	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d119      	bne.n	8008d90 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d60:	2202      	movs	r2, #2
 8008d62:	2181      	movs	r1, #129	; 0x81
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f002 f820 	bl	800adaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d74:	2202      	movs	r2, #2
 8008d76:	2101      	movs	r1, #1
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f002 f816 	bl	800adaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2210      	movs	r2, #16
 8008d8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008d8e:	e016      	b.n	8008dbe <USBD_CDC_Init+0x9a>
=======
 8008d98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d9c:	f002 f95c 	bl	800b058 <USBD_static_malloc>
 8008da0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d105      	bne.n	8008db4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008db0:	2302      	movs	r3, #2
 8008db2:	e066      	b.n	8008e82 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	7c1b      	ldrb	r3, [r3, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d119      	bne.n	8008df8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dc8:	2202      	movs	r2, #2
 8008dca:	2181      	movs	r1, #129	; 0x81
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f002 f820 	bl	800ae12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ddc:	2202      	movs	r2, #2
 8008dde:	2101      	movs	r1, #1
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f002 f816 	bl	800ae12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2210      	movs	r2, #16
 8008df2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008df6:	e016      	b.n	8008e26 <USBD_CDC_Init+0x9a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
<<<<<<< HEAD
 8008d90:	2340      	movs	r3, #64	; 0x40
 8008d92:	2202      	movs	r2, #2
 8008d94:	2181      	movs	r1, #129	; 0x81
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f002 f807 	bl	800adaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008da2:	2340      	movs	r3, #64	; 0x40
 8008da4:	2202      	movs	r2, #2
 8008da6:	2101      	movs	r1, #1
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f001 fffe 	bl	800adaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2210      	movs	r2, #16
 8008dba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
=======
 8008df8:	2340      	movs	r3, #64	; 0x40
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	2181      	movs	r1, #129	; 0x81
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f002 f807 	bl	800ae12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e0a:	2340      	movs	r3, #64	; 0x40
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	2101      	movs	r1, #1
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 fffe 	bl	800ae12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2210      	movs	r2, #16
 8008e22:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
<<<<<<< HEAD
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	2203      	movs	r2, #3
 8008dc2:	2182      	movs	r1, #130	; 0x82
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 fff0 	bl	800adaa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7c1b      	ldrb	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d109      	bne.n	8008e08 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dfe:	2101      	movs	r1, #1
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f002 f8c1 	bl	800af88 <USBD_LL_PrepareReceive>
 8008e06:	e007      	b.n	8008e18 <USBD_CDC_Init+0xf4>
=======
 8008e26:	2308      	movs	r3, #8
 8008e28:	2203      	movs	r2, #3
 8008e2a:	2182      	movs	r1, #130	; 0x82
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 fff0 	bl	800ae12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	7c1b      	ldrb	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d109      	bne.n	8008e70 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e66:	2101      	movs	r1, #1
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f002 f8c1 	bl	800aff0 <USBD_LL_PrepareReceive>
 8008e6e:	e007      	b.n	8008e80 <USBD_CDC_Init+0xf4>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
<<<<<<< HEAD
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e0e:	2340      	movs	r3, #64	; 0x40
 8008e10:	2101      	movs	r1, #1
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f002 f8b8 	bl	800af88 <USBD_LL_PrepareReceive>
=======
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	2101      	movs	r1, #1
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f002 f8b8 	bl	800aff0 <USBD_LL_PrepareReceive>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_CDC_DeInit>:
=======
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_CDC_DeInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	70fb      	strb	r3, [r7, #3]
=======
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
<<<<<<< HEAD
 8008e2e:	2181      	movs	r1, #129	; 0x81
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 ffe0 	bl	800adf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 ffd9 	bl	800adf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008e4c:	2182      	movs	r1, #130	; 0x82
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 ffd1 	bl	800adf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00e      	beq.n	8008e8c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f002 f8c4 	bl	800b00c <USBD_static_free>
    pdev->pClassData = NULL;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <USBD_CDC_Setup>:
=======
 8008e96:	2181      	movs	r1, #129	; 0x81
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 ffe0 	bl	800ae5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f001 ffd9 	bl	800ae5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008eb4:	2182      	movs	r1, #130	; 0x82
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f001 ffd1 	bl	800ae5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00e      	beq.n	8008ef4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f002 f8c4 	bl	800b074 <USBD_static_free>
    pdev->pClassData = NULL;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <USBD_CDC_Setup>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ea8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e0af      	b.n	8009020 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d03f      	beq.n	8008f4c <USBD_CDC_Setup+0xb4>
 8008ecc:	2b20      	cmp	r3, #32
 8008ece:	f040 809f 	bne.w	8009010 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	88db      	ldrh	r3, [r3, #6]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d02e      	beq.n	8008f38 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b25b      	sxtb	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	da16      	bge.n	8008f12 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008ef0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	88d2      	ldrh	r2, [r2, #6]
 8008ef6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	88db      	ldrh	r3, [r3, #6]
 8008efc:	2b07      	cmp	r3, #7
 8008efe:	bf28      	it	cs
 8008f00:	2307      	movcs	r3, #7
 8008f02:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	89fa      	ldrh	r2, [r7, #14]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 fb19 	bl	800a542 <USBD_CtlSendData>
=======
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e0af      	b.n	8009088 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d03f      	beq.n	8008fb4 <USBD_CDC_Setup+0xb4>
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	f040 809f 	bne.w	8009078 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	88db      	ldrh	r3, [r3, #6]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d02e      	beq.n	8008fa0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	b25b      	sxtb	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	da16      	bge.n	8008f7a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008f58:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	88d2      	ldrh	r2, [r2, #6]
 8008f5e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	88db      	ldrh	r3, [r3, #6]
 8008f64:	2b07      	cmp	r3, #7
 8008f66:	bf28      	it	cs
 8008f68:	2307      	movcs	r3, #7
 8008f6a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	89fa      	ldrh	r2, [r7, #14]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f001 fb19 	bl	800a5aa <USBD_CtlSendData>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
<<<<<<< HEAD
 8008f10:	e085      	b.n	800901e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	785a      	ldrb	r2, [r3, #1]
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	88db      	ldrh	r3, [r3, #6]
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008f28:	6939      	ldr	r1, [r7, #16]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	88db      	ldrh	r3, [r3, #6]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 fb32 	bl	800a59a <USBD_CtlPrepareRx>
      break;
 8008f36:	e072      	b.n	800901e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	7850      	ldrb	r0, [r2, #1]
 8008f44:	2200      	movs	r2, #0
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	4798      	blx	r3
      break;
 8008f4a:	e068      	b.n	800901e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	785b      	ldrb	r3, [r3, #1]
 8008f50:	2b0b      	cmp	r3, #11
 8008f52:	d852      	bhi.n	8008ffa <USBD_CDC_Setup+0x162>
 8008f54:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <USBD_CDC_Setup+0xc4>)
 8008f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5a:	bf00      	nop
 8008f5c:	08008f8d 	.word	0x08008f8d
 8008f60:	08009009 	.word	0x08009009
 8008f64:	08008ffb 	.word	0x08008ffb
 8008f68:	08008ffb 	.word	0x08008ffb
 8008f6c:	08008ffb 	.word	0x08008ffb
 8008f70:	08008ffb 	.word	0x08008ffb
 8008f74:	08008ffb 	.word	0x08008ffb
 8008f78:	08008ffb 	.word	0x08008ffb
 8008f7c:	08008ffb 	.word	0x08008ffb
 8008f80:	08008ffb 	.word	0x08008ffb
 8008f84:	08008fb7 	.word	0x08008fb7
 8008f88:	08008fe1 	.word	0x08008fe1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d107      	bne.n	8008fa8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f98:	f107 030a 	add.w	r3, r7, #10
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 face 	bl	800a542 <USBD_CtlSendData>
=======
 8008f78:	e085      	b.n	8009086 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	785a      	ldrb	r2, [r3, #1]
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	88db      	ldrh	r3, [r3, #6]
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008f90:	6939      	ldr	r1, [r7, #16]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	88db      	ldrh	r3, [r3, #6]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 fb32 	bl	800a602 <USBD_CtlPrepareRx>
      break;
 8008f9e:	e072      	b.n	8009086 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	7850      	ldrb	r0, [r2, #1]
 8008fac:	2200      	movs	r2, #0
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	4798      	blx	r3
      break;
 8008fb2:	e068      	b.n	8009086 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	785b      	ldrb	r3, [r3, #1]
 8008fb8:	2b0b      	cmp	r3, #11
 8008fba:	d852      	bhi.n	8009062 <USBD_CDC_Setup+0x162>
 8008fbc:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <USBD_CDC_Setup+0xc4>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008ff5 	.word	0x08008ff5
 8008fc8:	08009071 	.word	0x08009071
 8008fcc:	08009063 	.word	0x08009063
 8008fd0:	08009063 	.word	0x08009063
 8008fd4:	08009063 	.word	0x08009063
 8008fd8:	08009063 	.word	0x08009063
 8008fdc:	08009063 	.word	0x08009063
 8008fe0:	08009063 	.word	0x08009063
 8008fe4:	08009063 	.word	0x08009063
 8008fe8:	08009063 	.word	0x08009063
 8008fec:	0800901f 	.word	0x0800901f
 8008ff0:	08009049 	.word	0x08009049
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d107      	bne.n	8009010 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009000:	f107 030a 	add.w	r3, r7, #10
 8009004:	2202      	movs	r2, #2
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 face 	bl	800a5aa <USBD_CtlSendData>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 8008fa6:	e032      	b.n	800900e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 fa58 	bl	800a460 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	75fb      	strb	r3, [r7, #23]
          break;
 8008fb4:	e02b      	b.n	800900e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d107      	bne.n	8008fd2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008fc2:	f107 030d 	add.w	r3, r7, #13
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fab9 	bl	800a542 <USBD_CtlSendData>
=======
 800900e:	e032      	b.n	8009076 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fa58 	bl	800a4c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	75fb      	strb	r3, [r7, #23]
          break;
 800901c:	e02b      	b.n	8009076 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b03      	cmp	r3, #3
 8009028:	d107      	bne.n	800903a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800902a:	f107 030d 	add.w	r3, r7, #13
 800902e:	2201      	movs	r2, #1
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fab9 	bl	800a5aa <USBD_CtlSendData>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 8008fd0:	e01d      	b.n	800900e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 fa43 	bl	800a460 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8008fde:	e016      	b.n	800900e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d00f      	beq.n	800900c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fa36 	bl	800a460 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ff8:	e008      	b.n	800900c <USBD_CDC_Setup+0x174>
=======
 8009038:	e01d      	b.n	8009076 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 fa43 	bl	800a4c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009042:	2303      	movs	r3, #3
 8009044:	75fb      	strb	r3, [r7, #23]
          break;
 8009046:	e016      	b.n	8009076 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b03      	cmp	r3, #3
 8009052:	d00f      	beq.n	8009074 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fa36 	bl	800a4c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800905c:	2303      	movs	r3, #3
 800905e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009060:	e008      	b.n	8009074 <USBD_CDC_Setup+0x174>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 fa2f 	bl	800a460 <USBD_CtlError>
          ret = USBD_FAIL;
 8009002:	2303      	movs	r3, #3
 8009004:	75fb      	strb	r3, [r7, #23]
          break;
 8009006:	e002      	b.n	800900e <USBD_CDC_Setup+0x176>
          break;
 8009008:	bf00      	nop
 800900a:	e008      	b.n	800901e <USBD_CDC_Setup+0x186>
          break;
 800900c:	bf00      	nop
      }
      break;
 800900e:	e006      	b.n	800901e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fa24 	bl	800a460 <USBD_CtlError>
      ret = USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	75fb      	strb	r3, [r7, #23]
      break;
 800901c:	bf00      	nop
  }

  return (uint8_t)ret;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_CDC_DataIn>:
=======
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 fa2f 	bl	800a4c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800906a:	2303      	movs	r3, #3
 800906c:	75fb      	strb	r3, [r7, #23]
          break;
 800906e:	e002      	b.n	8009076 <USBD_CDC_Setup+0x176>
          break;
 8009070:	bf00      	nop
 8009072:	e008      	b.n	8009086 <USBD_CDC_Setup+0x186>
          break;
 8009074:	bf00      	nop
      }
      break;
 8009076:	e006      	b.n	8009086 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f001 fa24 	bl	800a4c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8009080:	2303      	movs	r3, #3
 8009082:	75fb      	strb	r3, [r7, #23]
      break;
 8009084:	bf00      	nop
  }

  return (uint8_t)ret;
 8009086:	7dfb      	ldrb	r3, [r7, #23]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_CDC_DataIn>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800903a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009046:	2303      	movs	r3, #3
 8009048:	e04f      	b.n	80090ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009052:	78fa      	ldrb	r2, [r7, #3]
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	3318      	adds	r3, #24
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d029      	beq.n	80090bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009068:	78fa      	ldrb	r2, [r7, #3]
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	3318      	adds	r3, #24
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	78f9      	ldrb	r1, [r7, #3]
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	460b      	mov	r3, r1
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	1a5b      	subs	r3, r3, r1
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4403      	add	r3, r0
 8009088:	3344      	adds	r3, #68	; 0x44
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009090:	fb03 f301 	mul.w	r3, r3, r1
 8009094:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009096:	2b00      	cmp	r3, #0
 8009098:	d110      	bne.n	80090bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800909a:	78fa      	ldrb	r2, [r7, #3]
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	440b      	add	r3, r1
 80090a8:	3318      	adds	r3, #24
 80090aa:	2200      	movs	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80090ae:	78f9      	ldrb	r1, [r7, #3]
 80090b0:	2300      	movs	r3, #0
 80090b2:	2200      	movs	r2, #0
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 ff46 	bl	800af46 <USBD_LL_Transmit>
 80090ba:	e015      	b.n	80090e8 <USBD_CDC_DataIn+0xc0>
=======
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e04f      	b.n	8009152 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	3318      	adds	r3, #24
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d029      	beq.n	8009124 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	3318      	adds	r3, #24
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	78f9      	ldrb	r1, [r7, #3]
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	460b      	mov	r3, r1
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	1a5b      	subs	r3, r3, r1
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4403      	add	r3, r0
 80090f0:	3344      	adds	r3, #68	; 0x44
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80090f8:	fb03 f301 	mul.w	r3, r3, r1
 80090fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d110      	bne.n	8009124 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	440b      	add	r3, r1
 8009110:	3318      	adds	r3, #24
 8009112:	2200      	movs	r2, #0
 8009114:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009116:	78f9      	ldrb	r1, [r7, #3]
 8009118:	2300      	movs	r3, #0
 800911a:	2200      	movs	r2, #0
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 ff46 	bl	800afae <USBD_LL_Transmit>
 8009122:	e015      	b.n	8009150 <USBD_CDC_DataIn+0xc0>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    hcdc->TxState = 0U;
<<<<<<< HEAD
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2200      	movs	r2, #0
 80090c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00b      	beq.n	80090e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80090e4:	78fa      	ldrb	r2, [r7, #3]
 80090e6:	4798      	blx	r3
=======
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2200      	movs	r2, #0
 8009128:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	4798      	blx	r3
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_CDC_DataOut>:
=======
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_CDC_DataOut>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009104:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009110:	2303      	movs	r3, #3
 8009112:	e015      	b.n	8009140 <USBD_CDC_DataOut+0x4e>
=======
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	460b      	mov	r3, r1
 8009164:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800916c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009178:	2303      	movs	r3, #3
 800917a:	e015      	b.n	80091a8 <USBD_CDC_DataOut+0x4e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
<<<<<<< HEAD
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 ff56 	bl	800afca <USBD_LL_GetRxDataSize>
 800911e:	4602      	mov	r2, r0
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 ff56 	bl	800b032 <USBD_LL_GetRxDataSize>
 8009186:	4602      	mov	r2, r0
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
<<<<<<< HEAD
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800913a:	4611      	mov	r1, r2
 800913c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBD_CDC_EP0_RxReady>:
=======
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80091a2:	4611      	mov	r1, r2
 80091a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_CDC_EP0_RxReady>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009156:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800915e:	2303      	movs	r3, #3
 8009160:	e01b      	b.n	800919a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d015      	beq.n	8009198 <USBD_CDC_EP0_RxReady+0x50>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009172:	2bff      	cmp	r3, #255	; 0xff
 8009174:	d010      	beq.n	8009198 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009184:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800918c:	b292      	uxth	r2, r2
 800918e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	22ff      	movs	r2, #255	; 0xff
 8009194:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <USBD_CDC_GetFSCfgDesc>:
=======
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e01b      	b.n	8009202 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d015      	beq.n	8009200 <USBD_CDC_EP0_RxReady+0x50>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80091da:	2bff      	cmp	r3, #255	; 0xff
 80091dc:	d010      	beq.n	8009200 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80091ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091f4:	b292      	uxth	r2, r2
 80091f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	22ff      	movs	r2, #255	; 0xff
 80091fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <USBD_CDC_GetFSCfgDesc>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2243      	movs	r2, #67	; 0x43
 80091b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80091b2:	4b03      	ldr	r3, [pc, #12]	; (80091c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	200000a8 	.word	0x200000a8

080091c4 <USBD_CDC_GetHSCfgDesc>:
=======
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2243      	movs	r2, #67	; 0x43
 8009218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800921a:	4b03      	ldr	r3, [pc, #12]	; (8009228 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	200000a4 	.word	0x200000a4

0800922c <USBD_CDC_GetHSCfgDesc>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2243      	movs	r2, #67	; 0x43
 80091d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80091d2:	4b03      	ldr	r3, [pc, #12]	; (80091e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	20000064 	.word	0x20000064

080091e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
=======
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2243      	movs	r2, #67	; 0x43
 8009238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800923a:	4b03      	ldr	r3, [pc, #12]	; (8009248 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	20000060 	.word	0x20000060

0800924c <USBD_CDC_GetOtherSpeedCfgDesc>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2243      	movs	r2, #67	; 0x43
 80091f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80091f2:	4b03      	ldr	r3, [pc, #12]	; (8009200 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	200000ec 	.word	0x200000ec

08009204 <USBD_CDC_GetDeviceQualifierDescriptor>:
=======
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2243      	movs	r2, #67	; 0x43
 8009258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800925a:	4b03      	ldr	r3, [pc, #12]	; (8009268 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	200000e8 	.word	0x200000e8

0800926c <USBD_CDC_GetDeviceQualifierDescriptor>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
<<<<<<< HEAD
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	220a      	movs	r2, #10
 8009210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009212:	4b03      	ldr	r3, [pc, #12]	; (8009220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	20000020 	.word	0x20000020

08009224 <USBD_CDC_RegisterInterface>:
=======
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	220a      	movs	r2, #10
 8009278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800927a:	4b03      	ldr	r3, [pc, #12]	; (8009288 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	2000001c 	.word	0x2000001c

0800928c <USBD_CDC_RegisterInterface>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
<<<<<<< HEAD
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009234:	2303      	movs	r3, #3
 8009236:	e004      	b.n	8009242 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USBD_CDC_SetTxBuffer>:
=======
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800929c:	2303      	movs	r3, #3
 800929e:	e004      	b.n	80092aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <USBD_CDC_SetTxBuffer>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
<<<<<<< HEAD
 800924e:	b480      	push	{r7}
 8009250:	b087      	sub	sp, #28
 8009252:	af00      	add	r7, sp, #0
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009260:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009268:	2303      	movs	r3, #3
 800926a:	e008      	b.n	800927e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <USBD_CDC_SetRxBuffer>:
=======
 80092b6:	b480      	push	{r7}
 80092b8:	b087      	sub	sp, #28
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e008      	b.n	80092e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <USBD_CDC_SetRxBuffer>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
<<<<<<< HEAD
 800928a:	b480      	push	{r7}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800929a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e004      	b.n	80092b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USBD_CDC_TransmitPacket>:
=======
 80092f2:	b480      	push	{r7}
 80092f4:	b085      	sub	sp, #20
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009302:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800930a:	2303      	movs	r3, #3
 800930c:	e004      	b.n	8009318 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <USBD_CDC_TransmitPacket>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80092cc:	2301      	movs	r3, #1
 80092ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092da:	2303      	movs	r3, #3
 80092dc:	e01a      	b.n	8009314 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d114      	bne.n	8009312 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009306:	2181      	movs	r1, #129	; 0x81
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 fe1c 	bl	800af46 <USBD_LL_Transmit>

    ret = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_CDC_ReceivePacket>:
=======
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009332:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009334:	2301      	movs	r3, #1
 8009336:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009342:	2303      	movs	r3, #3
 8009344:	e01a      	b.n	800937c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800934c:	2b00      	cmp	r3, #0
 800934e:	d114      	bne.n	800937a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2201      	movs	r2, #1
 8009354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800936e:	2181      	movs	r1, #129	; 0x81
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 fe1c 	bl	800afae <USBD_LL_Transmit>

    ret = USBD_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800937a:	7bfb      	ldrb	r3, [r7, #15]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_CDC_ReceivePacket>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800932a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009336:	2303      	movs	r3, #3
 8009338:	e016      	b.n	8009368 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	7c1b      	ldrb	r3, [r3, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d109      	bne.n	8009356 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800934c:	2101      	movs	r1, #1
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f001 fe1a 	bl	800af88 <USBD_LL_PrepareReceive>
 8009354:	e007      	b.n	8009366 <USBD_CDC_ReceivePacket+0x4a>
=======
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009392:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800939e:	2303      	movs	r3, #3
 80093a0:	e016      	b.n	80093d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	7c1b      	ldrb	r3, [r3, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d109      	bne.n	80093be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093b4:	2101      	movs	r1, #1
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f001 fe1a 	bl	800aff0 <USBD_LL_PrepareReceive>
 80093bc:	e007      	b.n	80093ce <USBD_CDC_ReceivePacket+0x4a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
<<<<<<< HEAD
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800935c:	2340      	movs	r3, #64	; 0x40
 800935e:	2101      	movs	r1, #1
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 fe11 	bl	800af88 <USBD_LL_PrepareReceive>
=======
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093c4:	2340      	movs	r3, #64	; 0x40
 80093c6:	2101      	movs	r1, #1
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 fe11 	bl	800aff0 <USBD_LL_PrepareReceive>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
<<<<<<< HEAD
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_Init>:
=======
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
<<<<<<< HEAD
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	71fb      	strb	r3, [r7, #7]
=======
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	4613      	mov	r3, r2
 80093e4:	71fb      	strb	r3, [r7, #7]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
<<<<<<< HEAD
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <USBD_Init+0x18>
=======
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <USBD_Init+0x18>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
<<<<<<< HEAD
 8009384:	2303      	movs	r3, #3
 8009386:	e01f      	b.n	80093c8 <USBD_Init+0x58>
=======
 80093ec:	2303      	movs	r3, #3
 80093ee:	e01f      	b.n	8009430 <USBD_Init+0x58>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
<<<<<<< HEAD
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
=======
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	79fa      	ldrb	r2, [r7, #7]
 80093ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f001 fc8d 	bl	800acdc <USBD_LL_Init>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_RegisterClass>:
=======
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	79fa      	ldrb	r2, [r7, #7]
 8009422:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f001 fc8d 	bl	800ad44 <USBD_LL_Init>
 800942a:	4603      	mov	r3, r0
 800942c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800942e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_RegisterClass>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
<<<<<<< HEAD
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <USBD_RegisterClass+0x18>
=======
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <USBD_RegisterClass+0x18>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
<<<<<<< HEAD
 80093e4:	2303      	movs	r3, #3
 80093e6:	e016      	b.n	8009416 <USBD_RegisterClass+0x46>
=======
 800944c:	2303      	movs	r3, #3
 800944e:	e016      	b.n	800947e <USBD_RegisterClass+0x46>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
<<<<<<< HEAD
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
=======
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
<<<<<<< HEAD
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00b      	beq.n	8009414 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	f107 020e 	add.w	r2, r7, #14
 8009408:	4610      	mov	r0, r2
 800940a:	4798      	blx	r3
 800940c:	4602      	mov	r2, r0
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
=======
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00b      	beq.n	800947c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	f107 020e 	add.w	r2, r7, #14
 8009470:	4610      	mov	r0, r2
 8009472:	4798      	blx	r3
 8009474:	4602      	mov	r2, r0
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
#endif /* USE_USB_FS */

  return USBD_OK;
<<<<<<< HEAD
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBD_Start>:
=======
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBD_Start>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 fca4 	bl	800ad74 <USBD_LL_Start>
 800942c:	4603      	mov	r3, r0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_RunTestMode>:
=======
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 fca4 	bl	800addc <USBD_LL_Start>
 8009494:	4603      	mov	r3, r0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_RunTestMode>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
<<<<<<< HEAD
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
=======
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< HEAD
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <USBD_SetClassConfig>:
=======
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USBD_SetClassConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	460b      	mov	r3, r1
 8009456:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009458:	2303      	movs	r3, #3
 800945a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	4611      	mov	r1, r2
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_ClrClassConfig>:
=======
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80094c0:	2303      	movs	r3, #3
 80094c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d009      	beq.n	80094e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	4611      	mov	r1, r2
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	4798      	blx	r3
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_ClrClassConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	78fa      	ldrb	r2, [r7, #3]
 80094a4:	4611      	mov	r1, r2
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	4798      	blx	r3
  }

  return USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_LL_SetupStage>:
=======
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d007      	beq.n	8009512 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	78fa      	ldrb	r2, [r7, #3]
 800950c:	4611      	mov	r1, r2
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	4798      	blx	r3
  }

  return USBD_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_LL_SetupStage>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
<<<<<<< HEAD
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 ff90 	bl	800a3ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80094da:	461a      	mov	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094e8:	f003 031f 	and.w	r3, r3, #31
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d01a      	beq.n	8009526 <USBD_LL_SetupStage+0x72>
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d822      	bhi.n	800953a <USBD_LL_SetupStage+0x86>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <USBD_LL_SetupStage+0x4a>
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d00a      	beq.n	8009512 <USBD_LL_SetupStage+0x5e>
 80094fc:	e01d      	b.n	800953a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa62 	bl	80099d0 <USBD_StdDevReq>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]
      break;
 8009510:	e020      	b.n	8009554 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fac6 	bl	8009aac <USBD_StdItfReq>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]
      break;
 8009524:	e016      	b.n	8009554 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fb05 	bl	8009b3e <USBD_StdEPReq>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]
      break;
 8009538:	e00c      	b.n	8009554 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009540:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009544:	b2db      	uxtb	r3, r3
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 fc73 	bl	800ae34 <USBD_LL_StallEP>
 800954e:	4603      	mov	r3, r0
 8009550:	73fb      	strb	r3, [r7, #15]
      break;
 8009552:	bf00      	nop
  }

  return ret;
 8009554:	7bfb      	ldrb	r3, [r7, #15]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBD_LL_DataOutStage>:
=======
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 ff90 	bl	800a454 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009550:	f003 031f 	and.w	r3, r3, #31
 8009554:	2b02      	cmp	r3, #2
 8009556:	d01a      	beq.n	800958e <USBD_LL_SetupStage+0x72>
 8009558:	2b02      	cmp	r3, #2
 800955a:	d822      	bhi.n	80095a2 <USBD_LL_SetupStage+0x86>
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <USBD_LL_SetupStage+0x4a>
 8009560:	2b01      	cmp	r3, #1
 8009562:	d00a      	beq.n	800957a <USBD_LL_SetupStage+0x5e>
 8009564:	e01d      	b.n	80095a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fa62 	bl	8009a38 <USBD_StdDevReq>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]
      break;
 8009578:	e020      	b.n	80095bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fac6 	bl	8009b14 <USBD_StdItfReq>
 8009588:	4603      	mov	r3, r0
 800958a:	73fb      	strb	r3, [r7, #15]
      break;
 800958c:	e016      	b.n	80095bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fb05 	bl	8009ba6 <USBD_StdEPReq>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]
      break;
 80095a0:	e00c      	b.n	80095bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80095a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f001 fc73 	bl	800ae9c <USBD_LL_StallEP>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73fb      	strb	r3, [r7, #15]
      break;
 80095ba:	bf00      	nop
  }

  return ret;
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_LL_DataOutStage>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 800955e:	b580      	push	{r7, lr}
 8009560:	b086      	sub	sp, #24
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	460b      	mov	r3, r1
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	72fb      	strb	r3, [r7, #11]
=======
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b086      	sub	sp, #24
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	460b      	mov	r3, r1
 80095d0:	607a      	str	r2, [r7, #4]
 80095d2:	72fb      	strb	r3, [r7, #11]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
<<<<<<< HEAD
 800956c:	7afb      	ldrb	r3, [r7, #11]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d138      	bne.n	80095e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009578:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009580:	2b03      	cmp	r3, #3
 8009582:	d14a      	bne.n	800961a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	429a      	cmp	r2, r3
 800958e:	d913      	bls.n	80095b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	1ad2      	subs	r2, r2, r3
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	4293      	cmp	r3, r2
 80095a8:	bf28      	it	cs
 80095aa:	4613      	movcs	r3, r2
 80095ac:	461a      	mov	r2, r3
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f001 f80f 	bl	800a5d4 <USBD_CtlContinueRx>
 80095b6:	e030      	b.n	800961a <USBD_LL_DataOutStage+0xbc>
=======
 80095d4:	7afb      	ldrb	r3, [r7, #11]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d138      	bne.n	800964c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d14a      	bne.n	8009682 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d913      	bls.n	8009620 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	1ad2      	subs	r2, r2, r3
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	4293      	cmp	r3, r2
 8009610:	bf28      	it	cs
 8009612:	4613      	movcs	r3, r2
 8009614:	461a      	mov	r2, r3
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f001 f80f 	bl	800a63c <USBD_CtlContinueRx>
 800961e:	e030      	b.n	8009682 <USBD_LL_DataOutStage+0xbc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b03      	cmp	r3, #3
 80095c2:	d10b      	bne.n	80095dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d005      	beq.n	80095dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	4798      	blx	r3
=======
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b03      	cmp	r3, #3
 800962a:	d10b      	bne.n	8009644 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	4798      	blx	r3
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          }
        }

        (void)USBD_CtlSendStatus(pdev);
<<<<<<< HEAD
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f001 f80a 	bl	800a5f6 <USBD_CtlSendStatus>
 80095e2:	e01a      	b.n	800961a <USBD_LL_DataOutStage+0xbc>
=======
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f001 f80a 	bl	800a65e <USBD_CtlSendStatus>
 800964a:	e01a      	b.n	8009682 <USBD_LL_DataOutStage+0xbc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d114      	bne.n	800961a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00e      	beq.n	800961a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	7afa      	ldrb	r2, [r7, #11]
 8009606:	4611      	mov	r1, r2
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	4798      	blx	r3
 800960c:	4603      	mov	r3, r0
 800960e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	e000      	b.n	800961c <USBD_LL_DataOutStage+0xbe>
=======
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b03      	cmp	r3, #3
 8009656:	d114      	bne.n	8009682 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00e      	beq.n	8009682 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	7afa      	ldrb	r2, [r7, #11]
 800966e:	4611      	mov	r1, r2
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	4798      	blx	r3
 8009674:	4603      	mov	r3, r0
 8009676:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009678:	7dfb      	ldrb	r3, [r7, #23]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800967e:	7dfb      	ldrb	r3, [r7, #23]
 8009680:	e000      	b.n	8009684 <USBD_LL_DataOutStage+0xbe>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_LL_DataInStage>:
=======
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_LL_DataInStage>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	460b      	mov	r3, r1
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	72fb      	strb	r3, [r7, #11]
=======
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	460b      	mov	r3, r1
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	72fb      	strb	r3, [r7, #11]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
<<<<<<< HEAD
 8009632:	7afb      	ldrb	r3, [r7, #11]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d16b      	bne.n	8009710 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3314      	adds	r3, #20
 800963c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009644:	2b02      	cmp	r3, #2
 8009646:	d156      	bne.n	80096f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	689a      	ldr	r2, [r3, #8]
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	429a      	cmp	r2, r3
 8009652:	d914      	bls.n	800967e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	1ad2      	subs	r2, r2, r3
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	461a      	mov	r2, r3
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 ff84 	bl	800a578 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009670:	2300      	movs	r3, #0
 8009672:	2200      	movs	r2, #0
 8009674:	2100      	movs	r1, #0
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f001 fc86 	bl	800af88 <USBD_LL_PrepareReceive>
 800967c:	e03b      	b.n	80096f6 <USBD_LL_DataInStage+0xd2>
=======
 800969a:	7afb      	ldrb	r3, [r7, #11]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d16b      	bne.n	8009778 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	3314      	adds	r3, #20
 80096a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d156      	bne.n	800975e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d914      	bls.n	80096e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	1ad2      	subs	r2, r2, r3
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	461a      	mov	r2, r3
 80096d0:	6879      	ldr	r1, [r7, #4]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 ff84 	bl	800a5e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096d8:	2300      	movs	r3, #0
 80096da:	2200      	movs	r2, #0
 80096dc:	2100      	movs	r1, #0
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f001 fc86 	bl	800aff0 <USBD_LL_PrepareReceive>
 80096e4:	e03b      	b.n	800975e <USBD_LL_DataInStage+0xd2>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
<<<<<<< HEAD
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	429a      	cmp	r2, r3
 8009688:	d11c      	bne.n	80096c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009692:	429a      	cmp	r2, r3
 8009694:	d316      	bcc.n	80096c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d20f      	bcs.n	80096c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096a4:	2200      	movs	r2, #0
 80096a6:	2100      	movs	r1, #0
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 ff65 	bl	800a578 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096b6:	2300      	movs	r3, #0
 80096b8:	2200      	movs	r2, #0
 80096ba:	2100      	movs	r1, #0
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f001 fc63 	bl	800af88 <USBD_LL_PrepareReceive>
 80096c2:	e018      	b.n	80096f6 <USBD_LL_DataInStage+0xd2>
=======
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d11c      	bne.n	800972c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d316      	bcc.n	800972c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009708:	429a      	cmp	r2, r3
 800970a:	d20f      	bcs.n	800972c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800970c:	2200      	movs	r2, #0
 800970e:	2100      	movs	r1, #0
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 ff65 	bl	800a5e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800971e:	2300      	movs	r3, #0
 8009720:	2200      	movs	r2, #0
 8009722:	2100      	movs	r1, #0
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f001 fc63 	bl	800aff0 <USBD_LL_PrepareReceive>
 800972a:	e018      	b.n	800975e <USBD_LL_DataInStage+0xd2>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d10b      	bne.n	80096e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096e8:	2180      	movs	r1, #128	; 0x80
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f001 fba2 	bl	800ae34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 ff93 	bl	800a61c <USBD_CtlReceiveStatus>
=======
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b03      	cmp	r3, #3
 8009736:	d10b      	bne.n	8009750 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009750:	2180      	movs	r1, #128	; 0x80
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f001 fba2 	bl	800ae9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 ff93 	bl	800a684 <USBD_CtlReceiveStatus>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
<<<<<<< HEAD
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d122      	bne.n	8009746 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff fe98 	bl	8009436 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800970e:	e01a      	b.n	8009746 <USBD_LL_DataInStage+0x122>
=======
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009764:	2b01      	cmp	r3, #1
 8009766:	d122      	bne.n	80097ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f7ff fe98 	bl	800949e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009776:	e01a      	b.n	80097ae <USBD_LL_DataInStage+0x122>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
<<<<<<< HEAD
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b03      	cmp	r3, #3
 800971a:	d114      	bne.n	8009746 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00e      	beq.n	8009746 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	7afa      	ldrb	r2, [r7, #11]
 8009732:	4611      	mov	r1, r2
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	4798      	blx	r3
 8009738:	4603      	mov	r3, r0
 800973a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800973c:	7dfb      	ldrb	r3, [r7, #23]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	e000      	b.n	8009748 <USBD_LL_DataInStage+0x124>
=======
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b03      	cmp	r3, #3
 8009782:	d114      	bne.n	80097ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00e      	beq.n	80097ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	7afa      	ldrb	r2, [r7, #11]
 800979a:	4611      	mov	r1, r2
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	4798      	blx	r3
 80097a0:	4603      	mov	r3, r0
 80097a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	e000      	b.n	80097b0 <USBD_LL_DataInStage+0x124>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        }
      }
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3718      	adds	r7, #24
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBD_LL_Reset>:
=======
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBD_LL_Reset>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009780:	2303      	movs	r3, #3
 8009782:	e02f      	b.n	80097e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00f      	beq.n	80097ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d009      	beq.n	80097ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	6852      	ldr	r2, [r2, #4]
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	4611      	mov	r1, r2
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	4798      	blx	r3
=======
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e02f      	b.n	800984c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00f      	beq.n	8009816 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d009      	beq.n	8009816 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	6852      	ldr	r2, [r2, #4]
 800980e:	b2d2      	uxtb	r2, r2
 8009810:	4611      	mov	r1, r2
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
<<<<<<< HEAD
 80097ae:	2340      	movs	r3, #64	; 0x40
 80097b0:	2200      	movs	r2, #0
 80097b2:	2100      	movs	r1, #0
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 faf8 	bl	800adaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2240      	movs	r2, #64	; 0x40
 80097c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097ca:	2340      	movs	r3, #64	; 0x40
 80097cc:	2200      	movs	r2, #0
 80097ce:	2180      	movs	r1, #128	; 0x80
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 faea 	bl	800adaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2240      	movs	r2, #64	; 0x40
 80097e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBD_LL_SetSpeed>:
=======
 8009816:	2340      	movs	r3, #64	; 0x40
 8009818:	2200      	movs	r2, #0
 800981a:	2100      	movs	r1, #0
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 faf8 	bl	800ae12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2240      	movs	r2, #64	; 0x40
 800982e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009832:	2340      	movs	r3, #64	; 0x40
 8009834:	2200      	movs	r2, #0
 8009836:	2180      	movs	r1, #128	; 0x80
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 faea 	bl	800ae12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2240      	movs	r2, #64	; 0x40
 8009848:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_LL_SetSpeed>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
<<<<<<< HEAD
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USBD_LL_Suspend>:
=======
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <USBD_LL_Suspend>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800981a:	b2da      	uxtb	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2204      	movs	r2, #4
 8009826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USBD_LL_Resume>:
=======
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009882:	b2da      	uxtb	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2204      	movs	r2, #4
 800988e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <USBD_LL_Resume>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b04      	cmp	r3, #4
 800984a:	d106      	bne.n	800985a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009852:	b2da      	uxtb	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USBD_LL_SOF>:
=======
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d106      	bne.n	80098c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <USBD_LL_SOF>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800987a:	2303      	movs	r3, #3
 800987c:	e012      	b.n	80098a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b03      	cmp	r3, #3
 8009888:	d10b      	bne.n	80098a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d005      	beq.n	80098a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	4798      	blx	r3
=======
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e012      	b.n	800990c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d10b      	bne.n	800990a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d005      	beq.n	800990a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4798      	blx	r3
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_LL_IsoINIncomplete>:
=======
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_LL_IsoINIncomplete>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
<<<<<<< HEAD
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e014      	b.n	80098f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d10d      	bne.n	80098ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d007      	beq.n	80098ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	78fa      	ldrb	r2, [r7, #3]
 80098e8:	4611      	mov	r1, r2
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	4798      	blx	r3
=======
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800992a:	2303      	movs	r3, #3
 800992c:	e014      	b.n	8009958 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b03      	cmp	r3, #3
 8009938:	d10d      	bne.n	8009956 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	78fa      	ldrb	r2, [r7, #3]
 8009950:	4611      	mov	r1, r2
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	4798      	blx	r3
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_LL_IsoOUTIncomplete>:
=======
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBD_LL_IsoOUTIncomplete>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
<<<<<<< HEAD
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800990e:	2303      	movs	r3, #3
 8009910:	e014      	b.n	800993c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b03      	cmp	r3, #3
 800991c:	d10d      	bne.n	800993a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	2b00      	cmp	r3, #0
 8009928:	d007      	beq.n	800993a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	78fa      	ldrb	r2, [r7, #3]
 8009934:	4611      	mov	r1, r2
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
=======
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009976:	2303      	movs	r3, #3
 8009978:	e014      	b.n	80099a4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b03      	cmp	r3, #3
 8009984:	d10d      	bne.n	80099a2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998e:	2b00      	cmp	r3, #0
 8009990:	d007      	beq.n	80099a2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	78fa      	ldrb	r2, [r7, #3]
 800999c:	4611      	mov	r1, r2
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	4798      	blx	r3
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_LL_DevConnected>:
=======
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_LL_DevConnected>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
=======
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< HEAD
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <USBD_LL_DevDisconnected>:
=======
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <USBD_LL_DevDisconnected>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800995a:	b580      	push	{r7, lr}
 800995c:	b082      	sub	sp, #8
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009970:	2b00      	cmp	r3, #0
 8009972:	d009      	beq.n	8009988 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6852      	ldr	r2, [r2, #4]
 8009980:	b2d2      	uxtb	r2, r2
 8009982:	4611      	mov	r1, r2
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	4798      	blx	r3
  }

  return USBD_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <SWAPBYTE>:
=======
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d009      	beq.n	80099f0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	6852      	ldr	r2, [r2, #4]
 80099e8:	b2d2      	uxtb	r2, r2
 80099ea:	4611      	mov	r1, r2
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	4798      	blx	r3
  }

  return USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <SWAPBYTE>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
<<<<<<< HEAD
 8009992:	b480      	push	{r7}
 8009994:	b087      	sub	sp, #28
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	3301      	adds	r3, #1
 80099a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099b0:	8a3b      	ldrh	r3, [r7, #16]
 80099b2:	021b      	lsls	r3, r3, #8
 80099b4:	b21a      	sxth	r2, r3
 80099b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	b21b      	sxth	r3, r3
 80099be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099c0:	89fb      	ldrh	r3, [r7, #14]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
	...

080099d0 <USBD_StdDevReq>:
=======
 80099fa:	b480      	push	{r7}
 80099fc:	b087      	sub	sp, #28
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a18:	8a3b      	ldrh	r3, [r7, #16]
 8009a1a:	021b      	lsls	r3, r3, #8
 8009a1c:	b21a      	sxth	r2, r3
 8009a1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	b21b      	sxth	r3, r3
 8009a26:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a28:	89fb      	ldrh	r3, [r7, #14]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
	...

08009a38 <USBD_StdDevReq>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	d005      	beq.n	80099f6 <USBD_StdDevReq+0x26>
 80099ea:	2b40      	cmp	r3, #64	; 0x40
 80099ec:	d853      	bhi.n	8009a96 <USBD_StdDevReq+0xc6>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00b      	beq.n	8009a0a <USBD_StdDevReq+0x3a>
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d14f      	bne.n	8009a96 <USBD_StdDevReq+0xc6>
=======
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a4e:	2b40      	cmp	r3, #64	; 0x40
 8009a50:	d005      	beq.n	8009a5e <USBD_StdDevReq+0x26>
 8009a52:	2b40      	cmp	r3, #64	; 0x40
 8009a54:	d853      	bhi.n	8009afe <USBD_StdDevReq+0xc6>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00b      	beq.n	8009a72 <USBD_StdDevReq+0x3a>
 8009a5a:	2b20      	cmp	r3, #32
 8009a5c:	d14f      	bne.n	8009afe <USBD_StdDevReq+0xc6>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
<<<<<<< HEAD
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	4798      	blx	r3
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]
      break;
 8009a08:	e04a      	b.n	8009aa0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	2b09      	cmp	r3, #9
 8009a10:	d83b      	bhi.n	8009a8a <USBD_StdDevReq+0xba>
 8009a12:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <USBD_StdDevReq+0x48>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009a6d 	.word	0x08009a6d
 8009a1c:	08009a81 	.word	0x08009a81
 8009a20:	08009a8b 	.word	0x08009a8b
 8009a24:	08009a77 	.word	0x08009a77
 8009a28:	08009a8b 	.word	0x08009a8b
 8009a2c:	08009a4b 	.word	0x08009a4b
 8009a30:	08009a41 	.word	0x08009a41
 8009a34:	08009a8b 	.word	0x08009a8b
 8009a38:	08009a63 	.word	0x08009a63
 8009a3c:	08009a55 	.word	0x08009a55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f9de 	bl	8009e04 <USBD_GetDescriptor>
          break;
 8009a48:	e024      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fb43 	bl	800a0d8 <USBD_SetAddress>
          break;
 8009a52:	e01f      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fb82 	bl	800a160 <USBD_SetConfig>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
          break;
 8009a60:	e018      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fc21 	bl	800a2ac <USBD_GetConfig>
          break;
 8009a6a:	e013      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fc52 	bl	800a318 <USBD_GetStatus>
          break;
 8009a74:	e00e      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fc81 	bl	800a380 <USBD_SetFeature>
          break;
 8009a7e:	e009      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fc90 	bl	800a3a8 <USBD_ClrFeature>
          break;
 8009a88:	e004      	b.n	8009a94 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fce7 	bl	800a460 <USBD_CtlError>
          break;
 8009a92:	bf00      	nop
      }
      break;
 8009a94:	e004      	b.n	8009aa0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fce1 	bl	800a460 <USBD_CtlError>
      break;
 8009a9e:	bf00      	nop
  }

  return ret;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop

08009aac <USBD_StdItfReq>:
=======
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a70:	e04a      	b.n	8009b08 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	2b09      	cmp	r3, #9
 8009a78:	d83b      	bhi.n	8009af2 <USBD_StdDevReq+0xba>
 8009a7a:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <USBD_StdDevReq+0x48>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009ad5 	.word	0x08009ad5
 8009a84:	08009ae9 	.word	0x08009ae9
 8009a88:	08009af3 	.word	0x08009af3
 8009a8c:	08009adf 	.word	0x08009adf
 8009a90:	08009af3 	.word	0x08009af3
 8009a94:	08009ab3 	.word	0x08009ab3
 8009a98:	08009aa9 	.word	0x08009aa9
 8009a9c:	08009af3 	.word	0x08009af3
 8009aa0:	08009acb 	.word	0x08009acb
 8009aa4:	08009abd 	.word	0x08009abd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f9de 	bl	8009e6c <USBD_GetDescriptor>
          break;
 8009ab0:	e024      	b.n	8009afc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fb43 	bl	800a140 <USBD_SetAddress>
          break;
 8009aba:	e01f      	b.n	8009afc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fb82 	bl	800a1c8 <USBD_SetConfig>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]
          break;
 8009ac8:	e018      	b.n	8009afc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fc21 	bl	800a314 <USBD_GetConfig>
          break;
 8009ad2:	e013      	b.n	8009afc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fc52 	bl	800a380 <USBD_GetStatus>
          break;
 8009adc:	e00e      	b.n	8009afc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fc81 	bl	800a3e8 <USBD_SetFeature>
          break;
 8009ae6:	e009      	b.n	8009afc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fc90 	bl	800a410 <USBD_ClrFeature>
          break;
 8009af0:	e004      	b.n	8009afc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fce7 	bl	800a4c8 <USBD_CtlError>
          break;
 8009afa:	bf00      	nop
      }
      break;
 8009afc:	e004      	b.n	8009b08 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fce1 	bl	800a4c8 <USBD_CtlError>
      break;
 8009b06:	bf00      	nop
  }

  return ret;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop

08009b14 <USBD_StdItfReq>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ac2:	2b40      	cmp	r3, #64	; 0x40
 8009ac4:	d005      	beq.n	8009ad2 <USBD_StdItfReq+0x26>
 8009ac6:	2b40      	cmp	r3, #64	; 0x40
 8009ac8:	d82f      	bhi.n	8009b2a <USBD_StdItfReq+0x7e>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <USBD_StdItfReq+0x26>
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d12b      	bne.n	8009b2a <USBD_StdItfReq+0x7e>
=======
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b2a:	2b40      	cmp	r3, #64	; 0x40
 8009b2c:	d005      	beq.n	8009b3a <USBD_StdItfReq+0x26>
 8009b2e:	2b40      	cmp	r3, #64	; 0x40
 8009b30:	d82f      	bhi.n	8009b92 <USBD_StdItfReq+0x7e>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <USBD_StdItfReq+0x26>
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d12b      	bne.n	8009b92 <USBD_StdItfReq+0x7e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
<<<<<<< HEAD
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	3b01      	subs	r3, #1
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d81d      	bhi.n	8009b1c <USBD_StdItfReq+0x70>
=======
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d81d      	bhi.n	8009b84 <USBD_StdItfReq+0x70>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
<<<<<<< HEAD
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	889b      	ldrh	r3, [r3, #4]
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d813      	bhi.n	8009b12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	4798      	blx	r3
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	88db      	ldrh	r3, [r3, #6]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d110      	bne.n	8009b26 <USBD_StdItfReq+0x7a>
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10d      	bne.n	8009b26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fd73 	bl	800a5f6 <USBD_CtlSendStatus>
=======
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	889b      	ldrh	r3, [r3, #4]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d813      	bhi.n	8009b7a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	4798      	blx	r3
 8009b60:	4603      	mov	r3, r0
 8009b62:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	88db      	ldrh	r3, [r3, #6]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d110      	bne.n	8009b8e <USBD_StdItfReq+0x7a>
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10d      	bne.n	8009b8e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fd73 	bl	800a65e <USBD_CtlSendStatus>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
<<<<<<< HEAD
 8009b10:	e009      	b.n	8009b26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fca3 	bl	800a460 <USBD_CtlError>
          break;
 8009b1a:	e004      	b.n	8009b26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fc9e 	bl	800a460 <USBD_CtlError>
          break;
 8009b24:	e000      	b.n	8009b28 <USBD_StdItfReq+0x7c>
          break;
 8009b26:	bf00      	nop
      }
      break;
 8009b28:	e004      	b.n	8009b34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fc97 	bl	800a460 <USBD_CtlError>
      break;
 8009b32:	bf00      	nop
  }

  return ret;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_StdEPReq>:
=======
 8009b78:	e009      	b.n	8009b8e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fca3 	bl	800a4c8 <USBD_CtlError>
          break;
 8009b82:	e004      	b.n	8009b8e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fc9e 	bl	800a4c8 <USBD_CtlError>
          break;
 8009b8c:	e000      	b.n	8009b90 <USBD_StdItfReq+0x7c>
          break;
 8009b8e:	bf00      	nop
      }
      break;
 8009b90:	e004      	b.n	8009b9c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fc97 	bl	800a4c8 <USBD_CtlError>
      break;
 8009b9a:	bf00      	nop
  }

  return ret;
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBD_StdEPReq>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	889b      	ldrh	r3, [r3, #4]
 8009b50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b5a:	2b40      	cmp	r3, #64	; 0x40
 8009b5c:	d007      	beq.n	8009b6e <USBD_StdEPReq+0x30>
 8009b5e:	2b40      	cmp	r3, #64	; 0x40
 8009b60:	f200 8145 	bhi.w	8009dee <USBD_StdEPReq+0x2b0>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00c      	beq.n	8009b82 <USBD_StdEPReq+0x44>
 8009b68:	2b20      	cmp	r3, #32
 8009b6a:	f040 8140 	bne.w	8009dee <USBD_StdEPReq+0x2b0>
=======
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	889b      	ldrh	r3, [r3, #4]
 8009bb8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bc2:	2b40      	cmp	r3, #64	; 0x40
 8009bc4:	d007      	beq.n	8009bd6 <USBD_StdEPReq+0x30>
 8009bc6:	2b40      	cmp	r3, #64	; 0x40
 8009bc8:	f200 8145 	bhi.w	8009e56 <USBD_StdEPReq+0x2b0>
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00c      	beq.n	8009bea <USBD_StdEPReq+0x44>
 8009bd0:	2b20      	cmp	r3, #32
 8009bd2:	f040 8140 	bne.w	8009e56 <USBD_StdEPReq+0x2b0>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
<<<<<<< HEAD
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b80:	e13a      	b.n	8009df8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	785b      	ldrb	r3, [r3, #1]
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d007      	beq.n	8009b9a <USBD_StdEPReq+0x5c>
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	f300 8129 	bgt.w	8009de2 <USBD_StdEPReq+0x2a4>
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d07f      	beq.n	8009c94 <USBD_StdEPReq+0x156>
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d03c      	beq.n	8009c12 <USBD_StdEPReq+0xd4>
 8009b98:	e123      	b.n	8009de2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d002      	beq.n	8009bac <USBD_StdEPReq+0x6e>
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d016      	beq.n	8009bd8 <USBD_StdEPReq+0x9a>
 8009baa:	e02c      	b.n	8009c06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00d      	beq.n	8009bce <USBD_StdEPReq+0x90>
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b80      	cmp	r3, #128	; 0x80
 8009bb6:	d00a      	beq.n	8009bce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 f939 	bl	800ae34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bc2:	2180      	movs	r1, #128	; 0x80
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 f935 	bl	800ae34 <USBD_LL_StallEP>
 8009bca:	bf00      	nop
=======
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	4798      	blx	r3
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]
      break;
 8009be8:	e13a      	b.n	8009e60 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d007      	beq.n	8009c02 <USBD_StdEPReq+0x5c>
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	f300 8129 	bgt.w	8009e4a <USBD_StdEPReq+0x2a4>
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d07f      	beq.n	8009cfc <USBD_StdEPReq+0x156>
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d03c      	beq.n	8009c7a <USBD_StdEPReq+0xd4>
 8009c00:	e123      	b.n	8009e4a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d002      	beq.n	8009c14 <USBD_StdEPReq+0x6e>
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d016      	beq.n	8009c40 <USBD_StdEPReq+0x9a>
 8009c12:	e02c      	b.n	8009c6e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00d      	beq.n	8009c36 <USBD_StdEPReq+0x90>
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	2b80      	cmp	r3, #128	; 0x80
 8009c1e:	d00a      	beq.n	8009c36 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 f939 	bl	800ae9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c2a:	2180      	movs	r1, #128	; 0x80
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 f935 	bl	800ae9c <USBD_LL_StallEP>
 8009c32:	bf00      	nop
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 8009bcc:	e020      	b.n	8009c10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc45 	bl	800a460 <USBD_CtlError>
              break;
 8009bd6:	e01b      	b.n	8009c10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	885b      	ldrh	r3, [r3, #2]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10e      	bne.n	8009bfe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <USBD_StdEPReq+0xc0>
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	2b80      	cmp	r3, #128	; 0x80
 8009bea:	d008      	beq.n	8009bfe <USBD_StdEPReq+0xc0>
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	88db      	ldrh	r3, [r3, #6]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d104      	bne.n	8009bfe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 f91b 	bl	800ae34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fcf9 	bl	800a5f6 <USBD_CtlSendStatus>

              break;
 8009c04:	e004      	b.n	8009c10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fc29 	bl	800a460 <USBD_CtlError>
              break;
 8009c0e:	bf00      	nop
          }
          break;
 8009c10:	e0ec      	b.n	8009dec <USBD_StdEPReq+0x2ae>
=======
 8009c34:	e020      	b.n	8009c78 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fc45 	bl	800a4c8 <USBD_CtlError>
              break;
 8009c3e:	e01b      	b.n	8009c78 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	885b      	ldrh	r3, [r3, #2]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10e      	bne.n	8009c66 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00b      	beq.n	8009c66 <USBD_StdEPReq+0xc0>
 8009c4e:	7bbb      	ldrb	r3, [r7, #14]
 8009c50:	2b80      	cmp	r3, #128	; 0x80
 8009c52:	d008      	beq.n	8009c66 <USBD_StdEPReq+0xc0>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	88db      	ldrh	r3, [r3, #6]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d104      	bne.n	8009c66 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f001 f91b 	bl	800ae9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fcf9 	bl	800a65e <USBD_CtlSendStatus>

              break;
 8009c6c:	e004      	b.n	8009c78 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fc29 	bl	800a4c8 <USBD_CtlError>
              break;
 8009c76:	bf00      	nop
          }
          break;
 8009c78:	e0ec      	b.n	8009e54 <USBD_StdEPReq+0x2ae>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
<<<<<<< HEAD
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d002      	beq.n	8009c24 <USBD_StdEPReq+0xe6>
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d016      	beq.n	8009c50 <USBD_StdEPReq+0x112>
 8009c22:	e030      	b.n	8009c86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00d      	beq.n	8009c46 <USBD_StdEPReq+0x108>
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
 8009c2c:	2b80      	cmp	r3, #128	; 0x80
 8009c2e:	d00a      	beq.n	8009c46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 f8fd 	bl	800ae34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c3a:	2180      	movs	r1, #128	; 0x80
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f001 f8f9 	bl	800ae34 <USBD_LL_StallEP>
 8009c42:	bf00      	nop
=======
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d002      	beq.n	8009c8c <USBD_StdEPReq+0xe6>
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	d016      	beq.n	8009cb8 <USBD_StdEPReq+0x112>
 8009c8a:	e030      	b.n	8009cee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00d      	beq.n	8009cae <USBD_StdEPReq+0x108>
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	2b80      	cmp	r3, #128	; 0x80
 8009c96:	d00a      	beq.n	8009cae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 f8fd 	bl	800ae9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ca2:	2180      	movs	r1, #128	; 0x80
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 f8f9 	bl	800ae9c <USBD_LL_StallEP>
 8009caa:	bf00      	nop
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 8009c44:	e025      	b.n	8009c92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fc09 	bl	800a460 <USBD_CtlError>
              break;
 8009c4e:	e020      	b.n	8009c92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	885b      	ldrh	r3, [r3, #2]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11b      	bne.n	8009c90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d004      	beq.n	8009c6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f001 f903 	bl	800ae72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fcc2 	bl	800a5f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009c84:	e004      	b.n	8009c90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fbe9 	bl	800a460 <USBD_CtlError>
              break;
 8009c8e:	e000      	b.n	8009c92 <USBD_StdEPReq+0x154>
              break;
 8009c90:	bf00      	nop
          }
          break;
 8009c92:	e0ab      	b.n	8009dec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d002      	beq.n	8009ca6 <USBD_StdEPReq+0x168>
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d032      	beq.n	8009d0a <USBD_StdEPReq+0x1cc>
 8009ca4:	e097      	b.n	8009dd6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d007      	beq.n	8009cbc <USBD_StdEPReq+0x17e>
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	2b80      	cmp	r3, #128	; 0x80
 8009cb0:	d004      	beq.n	8009cbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fbd3 	bl	800a460 <USBD_CtlError>
                break;
 8009cba:	e091      	b.n	8009de0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	da0b      	bge.n	8009cdc <USBD_StdEPReq+0x19e>
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	3310      	adds	r3, #16
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	3304      	adds	r3, #4
 8009cda:	e00b      	b.n	8009cf4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fc1d 	bl	800a542 <USBD_CtlSendData>
              break;
 8009d08:	e06a      	b.n	8009de0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da11      	bge.n	8009d36 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	f003 020f 	and.w	r2, r3, #15
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	3324      	adds	r3, #36	; 0x24
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d117      	bne.n	8009d5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fb96 	bl	800a460 <USBD_CtlError>
                  break;
 8009d34:	e054      	b.n	8009de0 <USBD_StdEPReq+0x2a2>
=======
 8009cac:	e025      	b.n	8009cfa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fc09 	bl	800a4c8 <USBD_CtlError>
              break;
 8009cb6:	e020      	b.n	8009cfa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	885b      	ldrh	r3, [r3, #2]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d11b      	bne.n	8009cf8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d004      	beq.n	8009cd4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 f903 	bl	800aeda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fcc2 	bl	800a65e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	4798      	blx	r3
 8009ce8:	4603      	mov	r3, r0
 8009cea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009cec:	e004      	b.n	8009cf8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fbe9 	bl	800a4c8 <USBD_CtlError>
              break;
 8009cf6:	e000      	b.n	8009cfa <USBD_StdEPReq+0x154>
              break;
 8009cf8:	bf00      	nop
          }
          break;
 8009cfa:	e0ab      	b.n	8009e54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d002      	beq.n	8009d0e <USBD_StdEPReq+0x168>
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d032      	beq.n	8009d72 <USBD_StdEPReq+0x1cc>
 8009d0c:	e097      	b.n	8009e3e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d007      	beq.n	8009d24 <USBD_StdEPReq+0x17e>
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b80      	cmp	r3, #128	; 0x80
 8009d18:	d004      	beq.n	8009d24 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fbd3 	bl	800a4c8 <USBD_CtlError>
                break;
 8009d22:	e091      	b.n	8009e48 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	da0b      	bge.n	8009d44 <USBD_StdEPReq+0x19e>
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	3310      	adds	r3, #16
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	4413      	add	r3, r2
 8009d40:	3304      	adds	r3, #4
 8009d42:	e00b      	b.n	8009d5c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	4413      	add	r3, r2
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2202      	movs	r2, #2
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fc1d 	bl	800a5aa <USBD_CtlSendData>
              break;
 8009d70:	e06a      	b.n	8009e48 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	da11      	bge.n	8009d9e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
 8009d7c:	f003 020f 	and.w	r2, r3, #15
 8009d80:	6879      	ldr	r1, [r7, #4]
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	440b      	add	r3, r1
 8009d8c:	3324      	adds	r3, #36	; 0x24
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d117      	bne.n	8009dc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fb96 	bl	800a4c8 <USBD_CtlError>
                  break;
 8009d9c:	e054      	b.n	8009e48 <USBD_StdEPReq+0x2a2>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
<<<<<<< HEAD
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	f003 020f 	and.w	r2, r3, #15
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	440b      	add	r3, r1
 8009d48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d104      	bne.n	8009d5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fb83 	bl	800a460 <USBD_CtlError>
                  break;
 8009d5a:	e041      	b.n	8009de0 <USBD_StdEPReq+0x2a2>
=======
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	f003 020f 	and.w	r2, r3, #15
 8009da4:	6879      	ldr	r1, [r7, #4]
 8009da6:	4613      	mov	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	440b      	add	r3, r1
 8009db0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009db4:	881b      	ldrh	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d104      	bne.n	8009dc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fb83 	bl	800a4c8 <USBD_CtlError>
                  break;
 8009dc2:	e041      	b.n	8009e48 <USBD_StdEPReq+0x2a2>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
<<<<<<< HEAD
 8009d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	da0b      	bge.n	8009d7c <USBD_StdEPReq+0x23e>
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	3310      	adds	r3, #16
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	4413      	add	r3, r2
 8009d78:	3304      	adds	r3, #4
 8009d7a:	e00b      	b.n	8009d94 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
 8009d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	4413      	add	r3, r2
 8009d92:	3304      	adds	r3, #4
 8009d94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <USBD_StdEPReq+0x264>
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
 8009d9e:	2b80      	cmp	r3, #128	; 0x80
 8009da0:	d103      	bne.n	8009daa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	2200      	movs	r2, #0
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	e00e      	b.n	8009dc8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f001 f87e 	bl	800aeb0 <USBD_LL_IsStallEP>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	e002      	b.n	8009dc8 <USBD_StdEPReq+0x28a>
=======
 8009dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	da0b      	bge.n	8009de4 <USBD_StdEPReq+0x23e>
 8009dcc:	7bbb      	ldrb	r3, [r7, #14]
 8009dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	3310      	adds	r3, #16
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	4413      	add	r3, r2
 8009de0:	3304      	adds	r3, #4
 8009de2:	e00b      	b.n	8009dfc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dea:	4613      	mov	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	4413      	add	r3, r2
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <USBD_StdEPReq+0x264>
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	2b80      	cmp	r3, #128	; 0x80
 8009e08:	d103      	bne.n	8009e12 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	e00e      	b.n	8009e30 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e12:	7bbb      	ldrb	r3, [r7, #14]
 8009e14:	4619      	mov	r1, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 f87e 	bl	800af18 <USBD_LL_IsStallEP>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2201      	movs	r2, #1
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	e002      	b.n	8009e30 <USBD_StdEPReq+0x28a>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
              }
              else
              {
                pep->status = 0x0000U;
<<<<<<< HEAD
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fbb7 	bl	800a542 <USBD_CtlSendData>
              break;
 8009dd4:	e004      	b.n	8009de0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fb41 	bl	800a460 <USBD_CtlError>
              break;
 8009dde:	bf00      	nop
          }
          break;
 8009de0:	e004      	b.n	8009dec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fb3b 	bl	800a460 <USBD_CtlError>
          break;
 8009dea:	bf00      	nop
      }
      break;
 8009dec:	e004      	b.n	8009df8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fb35 	bl	800a460 <USBD_CtlError>
      break;
 8009df6:	bf00      	nop
  }

  return ret;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <USBD_GetDescriptor>:
=======
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2202      	movs	r2, #2
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fbb7 	bl	800a5aa <USBD_CtlSendData>
              break;
 8009e3c:	e004      	b.n	8009e48 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fb41 	bl	800a4c8 <USBD_CtlError>
              break;
 8009e46:	bf00      	nop
          }
          break;
 8009e48:	e004      	b.n	8009e54 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fb3b 	bl	800a4c8 <USBD_CtlError>
          break;
 8009e52:	bf00      	nop
      }
      break;
 8009e54:	e004      	b.n	8009e60 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fb35 	bl	800a4c8 <USBD_CtlError>
      break;
 8009e5e:	bf00      	nop
  }

  return ret;
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
	...

08009e6c <USBD_GetDescriptor>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	0a1b      	lsrs	r3, r3, #8
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	3b01      	subs	r3, #1
 8009e24:	2b06      	cmp	r3, #6
 8009e26:	f200 8128 	bhi.w	800a07a <USBD_GetDescriptor+0x276>
 8009e2a:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <USBD_GetDescriptor+0x2c>)
 8009e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e30:	08009e4d 	.word	0x08009e4d
 8009e34:	08009e65 	.word	0x08009e65
 8009e38:	08009ea5 	.word	0x08009ea5
 8009e3c:	0800a07b 	.word	0x0800a07b
 8009e40:	0800a07b 	.word	0x0800a07b
 8009e44:	0800a01b 	.word	0x0800a01b
 8009e48:	0800a047 	.word	0x0800a047
=======
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e76:	2300      	movs	r3, #0
 8009e78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	885b      	ldrh	r3, [r3, #2]
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	2b06      	cmp	r3, #6
 8009e8e:	f200 8128 	bhi.w	800a0e2 <USBD_GetDescriptor+0x276>
 8009e92:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <USBD_GetDescriptor+0x2c>)
 8009e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e98:	08009eb5 	.word	0x08009eb5
 8009e9c:	08009ecd 	.word	0x08009ecd
 8009ea0:	08009f0d 	.word	0x08009f0d
 8009ea4:	0800a0e3 	.word	0x0800a0e3
 8009ea8:	0800a0e3 	.word	0x0800a0e3
 8009eac:	0800a083 	.word	0x0800a083
 8009eb0:	0800a0af 	.word	0x0800a0af
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
<<<<<<< HEAD
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	7c12      	ldrb	r2, [r2, #16]
 8009e58:	f107 0108 	add.w	r1, r7, #8
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	4798      	blx	r3
 8009e60:	60f8      	str	r0, [r7, #12]
      break;
 8009e62:	e112      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	7c1b      	ldrb	r3, [r3, #16]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10d      	bne.n	8009e88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e74:	f107 0208 	add.w	r2, r7, #8
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4798      	blx	r3
 8009e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3301      	adds	r3, #1
 8009e82:	2202      	movs	r2, #2
 8009e84:	701a      	strb	r2, [r3, #0]
=======
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	7c12      	ldrb	r2, [r2, #16]
 8009ec0:	f107 0108 	add.w	r1, r7, #8
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	4798      	blx	r3
 8009ec8:	60f8      	str	r0, [r7, #12]
      break;
 8009eca:	e112      	b.n	800a0f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	7c1b      	ldrb	r3, [r3, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10d      	bne.n	8009ef0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009edc:	f107 0208 	add.w	r2, r7, #8
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	4798      	blx	r3
 8009ee4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	2202      	movs	r2, #2
 8009eec:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
<<<<<<< HEAD
 8009e86:	e100      	b.n	800a08a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	f107 0208 	add.w	r2, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	701a      	strb	r2, [r3, #0]
      break;
 8009ea2:	e0f2      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	885b      	ldrh	r3, [r3, #2]
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	f200 80ac 	bhi.w	800a008 <USBD_GetDescriptor+0x204>
 8009eb0:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <USBD_GetDescriptor+0xb4>)
 8009eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb6:	bf00      	nop
 8009eb8:	08009ed1 	.word	0x08009ed1
 8009ebc:	08009f05 	.word	0x08009f05
 8009ec0:	08009f39 	.word	0x08009f39
 8009ec4:	08009f6d 	.word	0x08009f6d
 8009ec8:	08009fa1 	.word	0x08009fa1
 8009ecc:	08009fd5 	.word	0x08009fd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	7c12      	ldrb	r2, [r2, #16]
 8009ee8:	f107 0108 	add.w	r1, r7, #8
 8009eec:	4610      	mov	r0, r2
 8009eee:	4798      	blx	r3
 8009ef0:	60f8      	str	r0, [r7, #12]
=======
 8009eee:	e100      	b.n	800a0f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	f107 0208 	add.w	r2, r7, #8
 8009efc:	4610      	mov	r0, r2
 8009efe:	4798      	blx	r3
 8009f00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	2202      	movs	r2, #2
 8009f08:	701a      	strb	r2, [r3, #0]
      break;
 8009f0a:	e0f2      	b.n	800a0f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	885b      	ldrh	r3, [r3, #2]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b05      	cmp	r3, #5
 8009f14:	f200 80ac 	bhi.w	800a070 <USBD_GetDescriptor+0x204>
 8009f18:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <USBD_GetDescriptor+0xb4>)
 8009f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1e:	bf00      	nop
 8009f20:	08009f39 	.word	0x08009f39
 8009f24:	08009f6d 	.word	0x08009f6d
 8009f28:	08009fa1 	.word	0x08009fa1
 8009f2c:	08009fd5 	.word	0x08009fd5
 8009f30:	0800a009 	.word	0x0800a009
 8009f34:	0800a03d 	.word	0x0800a03d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	7c12      	ldrb	r2, [r2, #16]
 8009f50:	f107 0108 	add.w	r1, r7, #8
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
 8009f58:	60f8      	str	r0, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009ef2:	e091      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fab2 	bl	800a460 <USBD_CtlError>
            err++;
 8009efc:	7afb      	ldrb	r3, [r7, #11]
 8009efe:	3301      	adds	r3, #1
 8009f00:	72fb      	strb	r3, [r7, #11]
          break;
 8009f02:	e089      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	7c12      	ldrb	r2, [r2, #16]
 8009f1c:	f107 0108 	add.w	r1, r7, #8
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	60f8      	str	r0, [r7, #12]
=======
 8009f5a:	e091      	b.n	800a080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fab2 	bl	800a4c8 <USBD_CtlError>
            err++;
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	3301      	adds	r3, #1
 8009f68:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6a:	e089      	b.n	800a080 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	7c12      	ldrb	r2, [r2, #16]
 8009f84:	f107 0108 	add.w	r1, r7, #8
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	60f8      	str	r0, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009f26:	e077      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fa98 	bl	800a460 <USBD_CtlError>
            err++;
 8009f30:	7afb      	ldrb	r3, [r7, #11]
 8009f32:	3301      	adds	r3, #1
 8009f34:	72fb      	strb	r3, [r7, #11]
          break;
 8009f36:	e06f      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	7c12      	ldrb	r2, [r2, #16]
 8009f50:	f107 0108 	add.w	r1, r7, #8
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
 8009f58:	60f8      	str	r0, [r7, #12]
=======
 8009f8e:	e077      	b.n	800a080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa98 	bl	800a4c8 <USBD_CtlError>
            err++;
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f9e:	e06f      	b.n	800a080 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	7c12      	ldrb	r2, [r2, #16]
 8009fb8:	f107 0108 	add.w	r1, r7, #8
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4798      	blx	r3
 8009fc0:	60f8      	str	r0, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009f5a:	e05d      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fa7e 	bl	800a460 <USBD_CtlError>
            err++;
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	3301      	adds	r3, #1
 8009f68:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6a:	e055      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	7c12      	ldrb	r2, [r2, #16]
 8009f84:	f107 0108 	add.w	r1, r7, #8
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	60f8      	str	r0, [r7, #12]
=======
 8009fc2:	e05d      	b.n	800a080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fa7e 	bl	800a4c8 <USBD_CtlError>
            err++;
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fd2:	e055      	b.n	800a080 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	7c12      	ldrb	r2, [r2, #16]
 8009fec:	f107 0108 	add.w	r1, r7, #8
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	4798      	blx	r3
 8009ff4:	60f8      	str	r0, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009f8e:	e043      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa64 	bl	800a460 <USBD_CtlError>
            err++;
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f9e:	e03b      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	7c12      	ldrb	r2, [r2, #16]
 8009fb8:	f107 0108 	add.w	r1, r7, #8
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4798      	blx	r3
 8009fc0:	60f8      	str	r0, [r7, #12]
=======
 8009ff6:	e043      	b.n	800a080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fa64 	bl	800a4c8 <USBD_CtlError>
            err++;
 800a000:	7afb      	ldrb	r3, [r7, #11]
 800a002:	3301      	adds	r3, #1
 800a004:	72fb      	strb	r3, [r7, #11]
          break;
 800a006:	e03b      	b.n	800a080 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00b      	beq.n	800a02c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	7c12      	ldrb	r2, [r2, #16]
 800a020:	f107 0108 	add.w	r1, r7, #8
 800a024:	4610      	mov	r0, r2
 800a026:	4798      	blx	r3
 800a028:	60f8      	str	r0, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009fc2:	e029      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fa4a 	bl	800a460 <USBD_CtlError>
            err++;
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fd2:	e021      	b.n	800a018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	7c12      	ldrb	r2, [r2, #16]
 8009fec:	f107 0108 	add.w	r1, r7, #8
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	4798      	blx	r3
 8009ff4:	60f8      	str	r0, [r7, #12]
=======
 800a02a:	e029      	b.n	800a080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fa4a 	bl	800a4c8 <USBD_CtlError>
            err++;
 800a034:	7afb      	ldrb	r3, [r7, #11]
 800a036:	3301      	adds	r3, #1
 800a038:	72fb      	strb	r3, [r7, #11]
          break;
 800a03a:	e021      	b.n	800a080 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00b      	beq.n	800a060 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	7c12      	ldrb	r2, [r2, #16]
 800a054:	f107 0108 	add.w	r1, r7, #8
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
 800a05c:	60f8      	str	r0, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 8009ff6:	e00f      	b.n	800a018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fa30 	bl	800a460 <USBD_CtlError>
            err++;
 800a000:	7afb      	ldrb	r3, [r7, #11]
 800a002:	3301      	adds	r3, #1
 800a004:	72fb      	strb	r3, [r7, #11]
          break;
 800a006:	e007      	b.n	800a018 <USBD_GetDescriptor+0x214>
=======
 800a05e:	e00f      	b.n	800a080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fa30 	bl	800a4c8 <USBD_CtlError>
            err++;
 800a068:	7afb      	ldrb	r3, [r7, #11]
 800a06a:	3301      	adds	r3, #1
 800a06c:	72fb      	strb	r3, [r7, #11]
          break;
 800a06e:	e007      	b.n	800a080 <USBD_GetDescriptor+0x214>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fa28 	bl	800a460 <USBD_CtlError>
          err++;
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	3301      	adds	r3, #1
 800a014:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a016:	bf00      	nop
      }
      break;
 800a018:	e037      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	7c1b      	ldrb	r3, [r3, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d109      	bne.n	800a036 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02a:	f107 0208 	add.w	r2, r7, #8
 800a02e:	4610      	mov	r0, r2
 800a030:	4798      	blx	r3
 800a032:	60f8      	str	r0, [r7, #12]
=======
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fa28 	bl	800a4c8 <USBD_CtlError>
          err++;
 800a078:	7afb      	ldrb	r3, [r7, #11]
 800a07a:	3301      	adds	r3, #1
 800a07c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a07e:	bf00      	nop
      }
      break;
 800a080:	e037      	b.n	800a0f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	7c1b      	ldrb	r3, [r3, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d109      	bne.n	800a09e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a092:	f107 0208 	add.w	r2, r7, #8
 800a096:	4610      	mov	r0, r2
 800a098:	4798      	blx	r3
 800a09a:	60f8      	str	r0, [r7, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 800a034:	e029      	b.n	800a08a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fa11 	bl	800a460 <USBD_CtlError>
        err++;
 800a03e:	7afb      	ldrb	r3, [r7, #11]
 800a040:	3301      	adds	r3, #1
 800a042:	72fb      	strb	r3, [r7, #11]
      break;
 800a044:	e021      	b.n	800a08a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	7c1b      	ldrb	r3, [r3, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10d      	bne.n	800a06a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a056:	f107 0208 	add.w	r2, r7, #8
 800a05a:	4610      	mov	r0, r2
 800a05c:	4798      	blx	r3
 800a05e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3301      	adds	r3, #1
 800a064:	2207      	movs	r2, #7
 800a066:	701a      	strb	r2, [r3, #0]
=======
 800a09c:	e029      	b.n	800a0f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fa11 	bl	800a4c8 <USBD_CtlError>
        err++;
 800a0a6:	7afb      	ldrb	r3, [r7, #11]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a0ac:	e021      	b.n	800a0f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	7c1b      	ldrb	r3, [r3, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10d      	bne.n	800a0d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0be:	f107 0208 	add.w	r2, r7, #8
 800a0c2:	4610      	mov	r0, r2
 800a0c4:	4798      	blx	r3
 800a0c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	2207      	movs	r2, #7
 800a0ce:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 800a068:	e00f      	b.n	800a08a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f9f7 	bl	800a460 <USBD_CtlError>
        err++;
 800a072:	7afb      	ldrb	r3, [r7, #11]
 800a074:	3301      	adds	r3, #1
 800a076:	72fb      	strb	r3, [r7, #11]
      break;
 800a078:	e007      	b.n	800a08a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f9ef 	bl	800a460 <USBD_CtlError>
      err++;
 800a082:	7afb      	ldrb	r3, [r7, #11]
 800a084:	3301      	adds	r3, #1
 800a086:	72fb      	strb	r3, [r7, #11]
      break;
 800a088:	bf00      	nop
  }

  if (err != 0U)
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d11e      	bne.n	800a0ce <USBD_GetDescriptor+0x2ca>
=======
 800a0d0:	e00f      	b.n	800a0f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f9f7 	bl	800a4c8 <USBD_CtlError>
        err++;
 800a0da:	7afb      	ldrb	r3, [r7, #11]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	72fb      	strb	r3, [r7, #11]
      break;
 800a0e0:	e007      	b.n	800a0f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f9ef 	bl	800a4c8 <USBD_CtlError>
      err++;
 800a0ea:	7afb      	ldrb	r3, [r7, #11]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a0f0:	bf00      	nop
  }

  if (err != 0U)
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d11e      	bne.n	800a136 <USBD_GetDescriptor+0x2ca>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    return;
  }

  if (req->wLength != 0U)
<<<<<<< HEAD
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	88db      	ldrh	r3, [r3, #6]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d016      	beq.n	800a0c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a098:	893b      	ldrh	r3, [r7, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00e      	beq.n	800a0bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	88da      	ldrh	r2, [r3, #6]
 800a0a2:	893b      	ldrh	r3, [r7, #8]
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	bf28      	it	cs
 800a0a8:	4613      	movcs	r3, r2
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0ae:	893b      	ldrh	r3, [r7, #8]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	68f9      	ldr	r1, [r7, #12]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fa44 	bl	800a542 <USBD_CtlSendData>
 800a0ba:	e009      	b.n	800a0d0 <USBD_GetDescriptor+0x2cc>
=======
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	88db      	ldrh	r3, [r3, #6]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d016      	beq.n	800a12e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a100:	893b      	ldrh	r3, [r7, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00e      	beq.n	800a124 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	88da      	ldrh	r2, [r3, #6]
 800a10a:	893b      	ldrh	r3, [r7, #8]
 800a10c:	4293      	cmp	r3, r2
 800a10e:	bf28      	it	cs
 800a110:	4613      	movcs	r3, r2
 800a112:	b29b      	uxth	r3, r3
 800a114:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a116:	893b      	ldrh	r3, [r7, #8]
 800a118:	461a      	mov	r2, r3
 800a11a:	68f9      	ldr	r1, [r7, #12]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa44 	bl	800a5aa <USBD_CtlSendData>
 800a122:	e009      	b.n	800a138 <USBD_GetDescriptor+0x2cc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f9ce 	bl	800a460 <USBD_CtlError>
 800a0c4:	e004      	b.n	800a0d0 <USBD_GetDescriptor+0x2cc>
=======
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f9ce 	bl	800a4c8 <USBD_CtlError>
 800a12c:	e004      	b.n	800a138 <USBD_GetDescriptor+0x2cc>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
<<<<<<< HEAD
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fa95 	bl	800a5f6 <USBD_CtlSendStatus>
 800a0cc:	e000      	b.n	800a0d0 <USBD_GetDescriptor+0x2cc>
    return;
 800a0ce:	bf00      	nop
  }
}
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop

0800a0d8 <USBD_SetAddress>:
=======
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa95 	bl	800a65e <USBD_CtlSendStatus>
 800a134:	e000      	b.n	800a138 <USBD_GetDescriptor+0x2cc>
    return;
 800a136:	bf00      	nop
  }
}
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop

0800a140 <USBD_SetAddress>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	889b      	ldrh	r3, [r3, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d131      	bne.n	800a14e <USBD_SetAddress+0x76>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	88db      	ldrh	r3, [r3, #6]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d12d      	bne.n	800a14e <USBD_SetAddress+0x76>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	885b      	ldrh	r3, [r3, #2]
 800a0f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a0f8:	d829      	bhi.n	800a14e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a104:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d104      	bne.n	800a11c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f9a3 	bl	800a460 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11a:	e01d      	b.n	800a158 <USBD_SetAddress+0x80>
=======
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	889b      	ldrh	r3, [r3, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d131      	bne.n	800a1b6 <USBD_SetAddress+0x76>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	88db      	ldrh	r3, [r3, #6]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d12d      	bne.n	800a1b6 <USBD_SetAddress+0x76>
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	885b      	ldrh	r3, [r3, #2]
 800a15e:	2b7f      	cmp	r3, #127	; 0x7f
 800a160:	d829      	bhi.n	800a1b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	885b      	ldrh	r3, [r3, #2]
 800a166:	b2db      	uxtb	r3, r3
 800a168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a16c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b03      	cmp	r3, #3
 800a178:	d104      	bne.n	800a184 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f9a3 	bl	800a4c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a182:	e01d      	b.n	800a1c0 <USBD_SetAddress+0x80>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      pdev->dev_address = dev_addr;
<<<<<<< HEAD
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	7bfa      	ldrb	r2, [r7, #15]
 800a120:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a124:	7bfb      	ldrb	r3, [r7, #15]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 feed 	bl	800af08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa61 	bl	800a5f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d004      	beq.n	800a144 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2202      	movs	r2, #2
 800a13e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a142:	e009      	b.n	800a158 <USBD_SetAddress+0x80>
=======
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	7bfa      	ldrb	r2, [r7, #15]
 800a188:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 feed 	bl	800af70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fa61 	bl	800a65e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d004      	beq.n	800a1ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1aa:	e009      	b.n	800a1c0 <USBD_SetAddress+0x80>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a14c:	e004      	b.n	800a158 <USBD_SetAddress+0x80>
=======
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1b4:	e004      	b.n	800a1c0 <USBD_SetAddress+0x80>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f985 	bl	800a460 <USBD_CtlError>
  }
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_SetConfig>:
=======
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f985 	bl	800a4c8 <USBD_CtlError>
  }
}
 800a1be:	bf00      	nop
 800a1c0:	bf00      	nop
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBD_SetConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	885b      	ldrh	r3, [r3, #2]
 800a172:	b2da      	uxtb	r2, r3
 800a174:	4b4c      	ldr	r3, [pc, #304]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a176:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a178:	4b4b      	ldr	r3, [pc, #300]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d905      	bls.n	800a18c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f96c 	bl	800a460 <USBD_CtlError>
    return USBD_FAIL;
 800a188:	2303      	movs	r3, #3
 800a18a:	e088      	b.n	800a29e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b02      	cmp	r3, #2
 800a196:	d002      	beq.n	800a19e <USBD_SetConfig+0x3e>
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d025      	beq.n	800a1e8 <USBD_SetConfig+0x88>
 800a19c:	e071      	b.n	800a282 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a19e:	4b42      	ldr	r3, [pc, #264]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d01c      	beq.n	800a1e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a1a6:	4b40      	ldr	r3, [pc, #256]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1b0:	4b3d      	ldr	r3, [pc, #244]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff f948 	bl	800944c <USBD_SetClassConfig>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d004      	beq.n	800a1d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f949 	bl	800a460 <USBD_CtlError>
=======
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	885b      	ldrh	r3, [r3, #2]
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	4b4c      	ldr	r3, [pc, #304]	; (800a310 <USBD_SetConfig+0x148>)
 800a1de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1e0:	4b4b      	ldr	r3, [pc, #300]	; (800a310 <USBD_SetConfig+0x148>)
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d905      	bls.n	800a1f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f96c 	bl	800a4c8 <USBD_CtlError>
    return USBD_FAIL;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e088      	b.n	800a306 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d002      	beq.n	800a206 <USBD_SetConfig+0x3e>
 800a200:	2b03      	cmp	r3, #3
 800a202:	d025      	beq.n	800a250 <USBD_SetConfig+0x88>
 800a204:	e071      	b.n	800a2ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a206:	4b42      	ldr	r3, [pc, #264]	; (800a310 <USBD_SetConfig+0x148>)
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d01c      	beq.n	800a248 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a20e:	4b40      	ldr	r3, [pc, #256]	; (800a310 <USBD_SetConfig+0x148>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	461a      	mov	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a218:	4b3d      	ldr	r3, [pc, #244]	; (800a310 <USBD_SetConfig+0x148>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff f948 	bl	80094b4 <USBD_SetClassConfig>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d004      	beq.n	800a238 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f949 	bl	800a4c8 <USBD_CtlError>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< HEAD
 800a1ce:	e065      	b.n	800a29c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fa10 	bl	800a5f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2203      	movs	r2, #3
 800a1da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1de:	e05d      	b.n	800a29c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fa08 	bl	800a5f6 <USBD_CtlSendStatus>
      break;
 800a1e6:	e059      	b.n	800a29c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1e8:	4b2f      	ldr	r3, [pc, #188]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d112      	bne.n	800a216 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a1f8:	4b2b      	ldr	r3, [pc, #172]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a202:	4b29      	ldr	r3, [pc, #164]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff f93b 	bl	8009484 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f9f1 	bl	800a5f6 <USBD_CtlSendStatus>
=======
 800a236:	e065      	b.n	800a304 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fa10 	bl	800a65e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2203      	movs	r2, #3
 800a242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a246:	e05d      	b.n	800a304 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fa08 	bl	800a65e <USBD_CtlSendStatus>
      break;
 800a24e:	e059      	b.n	800a304 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a250:	4b2f      	ldr	r3, [pc, #188]	; (800a310 <USBD_SetConfig+0x148>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d112      	bne.n	800a27e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2202      	movs	r2, #2
 800a25c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a260:	4b2b      	ldr	r3, [pc, #172]	; (800a310 <USBD_SetConfig+0x148>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	461a      	mov	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a26a:	4b29      	ldr	r3, [pc, #164]	; (800a310 <USBD_SetConfig+0x148>)
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7ff f93b 	bl	80094ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f9f1 	bl	800a65e <USBD_CtlSendStatus>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
<<<<<<< HEAD
 800a214:	e042      	b.n	800a29c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a216:	4b24      	ldr	r3, [pc, #144]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	429a      	cmp	r2, r3
 800a222:	d02a      	beq.n	800a27a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7ff f929 	bl	8009484 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a232:	4b1d      	ldr	r3, [pc, #116]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a23c:	4b1a      	ldr	r3, [pc, #104]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff f902 	bl	800944c <USBD_SetClassConfig>
 800a248:	4603      	mov	r3, r0
 800a24a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00f      	beq.n	800a272 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f903 	bl	800a460 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff f90e 	bl	8009484 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a270:	e014      	b.n	800a29c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f9bf 	bl	800a5f6 <USBD_CtlSendStatus>
      break;
 800a278:	e010      	b.n	800a29c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f9bb 	bl	800a5f6 <USBD_CtlSendStatus>
      break;
 800a280:	e00c      	b.n	800a29c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f8eb 	bl	800a460 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a28a:	4b07      	ldr	r3, [pc, #28]	; (800a2a8 <USBD_SetConfig+0x148>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff f8f7 	bl	8009484 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a296:	2303      	movs	r3, #3
 800a298:	73fb      	strb	r3, [r7, #15]
      break;
 800a29a:	bf00      	nop
  }

  return ret;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200004b1 	.word	0x200004b1

0800a2ac <USBD_GetConfig>:
=======
 800a27c:	e042      	b.n	800a304 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a27e:	4b24      	ldr	r3, [pc, #144]	; (800a310 <USBD_SetConfig+0x148>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d02a      	beq.n	800a2e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	b2db      	uxtb	r3, r3
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff f929 	bl	80094ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a29a:	4b1d      	ldr	r3, [pc, #116]	; (800a310 <USBD_SetConfig+0x148>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2a4:	4b1a      	ldr	r3, [pc, #104]	; (800a310 <USBD_SetConfig+0x148>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7ff f902 	bl	80094b4 <USBD_SetClassConfig>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00f      	beq.n	800a2da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f903 	bl	800a4c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff f90e 	bl	80094ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a2d8:	e014      	b.n	800a304 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f9bf 	bl	800a65e <USBD_CtlSendStatus>
      break;
 800a2e0:	e010      	b.n	800a304 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f9bb 	bl	800a65e <USBD_CtlSendStatus>
      break;
 800a2e8:	e00c      	b.n	800a304 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f8eb 	bl	800a4c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2f2:	4b07      	ldr	r3, [pc, #28]	; (800a310 <USBD_SetConfig+0x148>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff f8f7 	bl	80094ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2fe:	2303      	movs	r3, #3
 800a300:	73fb      	strb	r3, [r7, #15]
      break;
 800a302:	bf00      	nop
  }

  return ret;
 800a304:	7bfb      	ldrb	r3, [r7, #15]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	200004a9 	.word	0x200004a9

0800a314 <USBD_GetConfig>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	88db      	ldrh	r3, [r3, #6]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d004      	beq.n	800a2c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f8cd 	bl	800a460 <USBD_CtlError>
=======
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	88db      	ldrh	r3, [r3, #6]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d004      	beq.n	800a330 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f8cd 	bl	800a4c8 <USBD_CtlError>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
<<<<<<< HEAD
 800a2c6:	e023      	b.n	800a310 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	dc02      	bgt.n	800a2da <USBD_GetConfig+0x2e>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	dc03      	bgt.n	800a2e0 <USBD_GetConfig+0x34>
 800a2d8:	e015      	b.n	800a306 <USBD_GetConfig+0x5a>
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d00b      	beq.n	800a2f6 <USBD_GetConfig+0x4a>
 800a2de:	e012      	b.n	800a306 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f927 	bl	800a542 <USBD_CtlSendData>
        break;
 800a2f4:	e00c      	b.n	800a310 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f91f 	bl	800a542 <USBD_CtlSendData>
        break;
 800a304:	e004      	b.n	800a310 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f8a9 	bl	800a460 <USBD_CtlError>
        break;
 800a30e:	bf00      	nop
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_GetStatus>:
=======
 800a32e:	e023      	b.n	800a378 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b02      	cmp	r3, #2
 800a33a:	dc02      	bgt.n	800a342 <USBD_GetConfig+0x2e>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dc03      	bgt.n	800a348 <USBD_GetConfig+0x34>
 800a340:	e015      	b.n	800a36e <USBD_GetConfig+0x5a>
 800a342:	2b03      	cmp	r3, #3
 800a344:	d00b      	beq.n	800a35e <USBD_GetConfig+0x4a>
 800a346:	e012      	b.n	800a36e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3308      	adds	r3, #8
 800a352:	2201      	movs	r2, #1
 800a354:	4619      	mov	r1, r3
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f927 	bl	800a5aa <USBD_CtlSendData>
        break;
 800a35c:	e00c      	b.n	800a378 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	3304      	adds	r3, #4
 800a362:	2201      	movs	r2, #1
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f91f 	bl	800a5aa <USBD_CtlSendData>
        break;
 800a36c:	e004      	b.n	800a378 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f8a9 	bl	800a4c8 <USBD_CtlError>
        break;
 800a376:	bf00      	nop
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_GetStatus>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	3b01      	subs	r3, #1
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d81e      	bhi.n	800a36e <USBD_GetStatus+0x56>
=======
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a390:	b2db      	uxtb	r3, r3
 800a392:	3b01      	subs	r3, #1
 800a394:	2b02      	cmp	r3, #2
 800a396:	d81e      	bhi.n	800a3d6 <USBD_GetStatus+0x56>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
<<<<<<< HEAD
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	88db      	ldrh	r3, [r3, #6]
 800a334:	2b02      	cmp	r3, #2
 800a336:	d004      	beq.n	800a342 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f890 	bl	800a460 <USBD_CtlError>
        break;
 800a340:	e01a      	b.n	800a378 <USBD_GetStatus+0x60>
=======
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	88db      	ldrh	r3, [r3, #6]
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d004      	beq.n	800a3aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f890 	bl	800a4c8 <USBD_CtlError>
        break;
 800a3a8:	e01a      	b.n	800a3e0 <USBD_GetStatus+0x60>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
<<<<<<< HEAD
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	60da      	str	r2, [r3, #12]
=======
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	60da      	str	r2, [r3, #12]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
<<<<<<< HEAD
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d005      	beq.n	800a35e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f043 0202 	orr.w	r2, r3, #2
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	330c      	adds	r3, #12
 800a362:	2202      	movs	r2, #2
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f8eb 	bl	800a542 <USBD_CtlSendData>
      break;
 800a36c:	e004      	b.n	800a378 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f875 	bl	800a460 <USBD_CtlError>
      break;
 800a376:	bf00      	nop
  }
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_SetFeature>:
=======
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f043 0202 	orr.w	r2, r3, #2
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	330c      	adds	r3, #12
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f8eb 	bl	800a5aa <USBD_CtlSendData>
      break;
 800a3d4:	e004      	b.n	800a3e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f875 	bl	800a4c8 <USBD_CtlError>
      break;
 800a3de:	bf00      	nop
  }
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBD_SetFeature>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	885b      	ldrh	r3, [r3, #2]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d106      	bne.n	800a3a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f92b 	bl	800a5f6 <USBD_CtlSendStatus>
  }
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_ClrFeature>:
=======
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	885b      	ldrh	r3, [r3, #2]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d106      	bne.n	800a408 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f92b 	bl	800a65e <USBD_CtlSendStatus>
  }
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_ClrFeature>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d80b      	bhi.n	800a3d8 <USBD_ClrFeature+0x30>
=======
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a420:	b2db      	uxtb	r3, r3
 800a422:	3b01      	subs	r3, #1
 800a424:	2b02      	cmp	r3, #2
 800a426:	d80b      	bhi.n	800a440 <USBD_ClrFeature+0x30>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
<<<<<<< HEAD
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	885b      	ldrh	r3, [r3, #2]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d10c      	bne.n	800a3e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f910 	bl	800a5f6 <USBD_CtlSendStatus>
      }
      break;
 800a3d6:	e004      	b.n	800a3e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f840 	bl	800a460 <USBD_CtlError>
      break;
 800a3e0:	e000      	b.n	800a3e4 <USBD_ClrFeature+0x3c>
      break;
 800a3e2:	bf00      	nop
  }
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBD_ParseSetupRequest>:
=======
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	885b      	ldrh	r3, [r3, #2]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d10c      	bne.n	800a44a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f910 	bl	800a65e <USBD_CtlSendStatus>
      }
      break;
 800a43e:	e004      	b.n	800a44a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f840 	bl	800a4c8 <USBD_CtlError>
      break;
 800a448:	e000      	b.n	800a44c <USBD_ClrFeature+0x3c>
      break;
 800a44a:	bf00      	nop
  }
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBD_ParseSetupRequest>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
<<<<<<< HEAD
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	781a      	ldrb	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3301      	adds	r3, #1
 800a406:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	781a      	ldrb	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3301      	adds	r3, #1
 800a414:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff fabb 	bl	8009992 <SWAPBYTE>
 800a41c:	4603      	mov	r3, r0
 800a41e:	461a      	mov	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	3301      	adds	r3, #1
 800a428:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3301      	adds	r3, #1
 800a42e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f7ff faae 	bl	8009992 <SWAPBYTE>
 800a436:	4603      	mov	r3, r0
 800a438:	461a      	mov	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3301      	adds	r3, #1
 800a442:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3301      	adds	r3, #1
 800a448:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7ff faa1 	bl	8009992 <SWAPBYTE>
 800a450:	4603      	mov	r3, r0
 800a452:	461a      	mov	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	80da      	strh	r2, [r3, #6]
}
 800a458:	bf00      	nop
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_CtlError>:
=======
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	781a      	ldrb	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3301      	adds	r3, #1
 800a46e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	781a      	ldrb	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3301      	adds	r3, #1
 800a47c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f7ff fabb 	bl	80099fa <SWAPBYTE>
 800a484:	4603      	mov	r3, r0
 800a486:	461a      	mov	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	3301      	adds	r3, #1
 800a490:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3301      	adds	r3, #1
 800a496:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f7ff faae 	bl	80099fa <SWAPBYTE>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f7ff faa1 	bl	80099fa <SWAPBYTE>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	80da      	strh	r2, [r3, #6]
}
 800a4c0:	bf00      	nop
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_CtlError>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a46a:	2180      	movs	r1, #128	; 0x80
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fce1 	bl	800ae34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a472:	2100      	movs	r1, #0
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fcdd 	bl	800ae34 <USBD_LL_StallEP>
}
 800a47a:	bf00      	nop
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_GetString>:
=======
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4d2:	2180      	movs	r1, #128	; 0x80
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fce1 	bl	800ae9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4da:	2100      	movs	r1, #0
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fcdd 	bl	800ae9c <USBD_LL_StallEP>
}
 800a4e2:	bf00      	nop
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_GetString>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
<<<<<<< HEAD
 800a482:	b580      	push	{r7, lr}
 800a484:	b086      	sub	sp, #24
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	60b9      	str	r1, [r7, #8]
 800a48c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a48e:	2300      	movs	r3, #0
 800a490:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d036      	beq.n	800a506 <USBD_GetString+0x84>
=======
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b086      	sub	sp, #24
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d036      	beq.n	800a56e <USBD_GetString+0x84>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
    return;
  }

  pdesc = desc;
<<<<<<< HEAD
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a49c:	6938      	ldr	r0, [r7, #16]
 800a49e:	f000 f836 	bl	800a50e <USBD_GetLen>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a4b0:	7dfb      	ldrb	r3, [r7, #23]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	7812      	ldrb	r2, [r2, #0]
 800a4ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4bc:	7dfb      	ldrb	r3, [r7, #23]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	2203      	movs	r2, #3
 800a4ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a4d2:	e013      	b.n	800a4fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4413      	add	r3, r2
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	7812      	ldrb	r2, [r2, #0]
 800a4de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	613b      	str	r3, [r7, #16]
    idx++;
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a4ec:	7dfb      	ldrb	r3, [r7, #23]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800a4f6:	7dfb      	ldrb	r3, [r7, #23]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e7      	bne.n	800a4d4 <USBD_GetString+0x52>
 800a504:	e000      	b.n	800a508 <USBD_GetString+0x86>
    return;
 800a506:	bf00      	nop
  }
}
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <USBD_GetLen>:
=======
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a504:	6938      	ldr	r0, [r7, #16]
 800a506:	f000 f836 	bl	800a576 <USBD_GetLen>
 800a50a:	4603      	mov	r3, r0
 800a50c:	3301      	adds	r3, #1
 800a50e:	b29b      	uxth	r3, r3
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	b29a      	uxth	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	4413      	add	r3, r2
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	7812      	ldrb	r2, [r2, #0]
 800a522:	701a      	strb	r2, [r3, #0]
  idx++;
 800a524:	7dfb      	ldrb	r3, [r7, #23]
 800a526:	3301      	adds	r3, #1
 800a528:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	4413      	add	r3, r2
 800a530:	2203      	movs	r2, #3
 800a532:	701a      	strb	r2, [r3, #0]
  idx++;
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	3301      	adds	r3, #1
 800a538:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a53a:	e013      	b.n	800a564 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	4413      	add	r3, r2
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	7812      	ldrb	r2, [r2, #0]
 800a546:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	3301      	adds	r3, #1
 800a54c:	613b      	str	r3, [r7, #16]
    idx++;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	3301      	adds	r3, #1
 800a552:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	4413      	add	r3, r2
 800a55a:	2200      	movs	r2, #0
 800a55c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
 800a560:	3301      	adds	r3, #1
 800a562:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1e7      	bne.n	800a53c <USBD_GetString+0x52>
 800a56c:	e000      	b.n	800a570 <USBD_GetString+0x86>
    return;
 800a56e:	bf00      	nop
  }
}
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBD_GetLen>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
<<<<<<< HEAD
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a51e:	e005      	b.n	800a52c <USBD_GetLen+0x1e>
  {
    len++;
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	3301      	adds	r3, #1
 800a524:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	3301      	adds	r3, #1
 800a52a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1f5      	bne.n	800a520 <USBD_GetLen+0x12>
  }

  return len;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <USBD_CtlSendData>:
=======
 800a576:	b480      	push	{r7}
 800a578:	b085      	sub	sp, #20
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a586:	e005      	b.n	800a594 <USBD_GetLen+0x1e>
  {
    len++;
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	3301      	adds	r3, #1
 800a58c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	3301      	adds	r3, #1
 800a592:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1f5      	bne.n	800a588 <USBD_GetLen+0x12>
  }

  return len;
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <USBD_CtlSendData>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	60f8      	str	r0, [r7, #12]
 800a54a:	60b9      	str	r1, [r7, #8]
 800a54c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2202      	movs	r2, #2
 800a552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	619a      	str	r2, [r3, #24]
=======
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	619a      	str	r2, [r3, #24]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
<<<<<<< HEAD
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	61da      	str	r2, [r3, #28]
=======
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	61da      	str	r2, [r3, #28]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
<<<<<<< HEAD
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	2100      	movs	r1, #0
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 fcec 	bl	800af46 <USBD_LL_Transmit>

  return USBD_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_CtlContinueSendData>:
=======
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 fcec 	bl	800afae <USBD_LL_Transmit>

  return USBD_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_CtlContinueSendData>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	2100      	movs	r1, #0
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 fcdb 	bl	800af46 <USBD_LL_Transmit>

  return USBD_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_CtlPrepareRx>:
=======
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 fcdb 	bl	800afae <USBD_LL_Transmit>

  return USBD_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <USBD_CtlPrepareRx>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	60b9      	str	r1, [r7, #8]
 800a5a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
=======
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	60f8      	str	r0, [r7, #12]
 800a60a:	60b9      	str	r1, [r7, #8]
 800a60c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2203      	movs	r2, #3
 800a612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
<<<<<<< HEAD
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
=======
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
<<<<<<< HEAD
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 fcdf 	bl	800af88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_CtlContinueRx>:
=======
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	2100      	movs	r1, #0
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 fcdf 	bl	800aff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <USBD_CtlContinueRx>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
<<<<<<< HEAD
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 fcce 	bl	800af88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBD_CtlSendStatus>:
=======
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	2100      	movs	r1, #0
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f000 fcce 	bl	800aff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBD_CtlSendStatus>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2204      	movs	r2, #4
 800a602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a606:	2300      	movs	r3, #0
 800a608:	2200      	movs	r2, #0
 800a60a:	2100      	movs	r1, #0
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fc9a 	bl	800af46 <USBD_LL_Transmit>

  return USBD_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_CtlReceiveStatus>:
=======
 800a65e:	b580      	push	{r7, lr}
 800a660:	b082      	sub	sp, #8
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2204      	movs	r2, #4
 800a66a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a66e:	2300      	movs	r3, #0
 800a670:	2200      	movs	r2, #0
 800a672:	2100      	movs	r1, #0
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fc9a 	bl	800afae <USBD_LL_Transmit>

  return USBD_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_CtlReceiveStatus>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2205      	movs	r2, #5
 800a628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a62c:	2300      	movs	r3, #0
 800a62e:	2200      	movs	r2, #0
 800a630:	2100      	movs	r1, #0
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fca8 	bl	800af88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <MX_USB_DEVICE_Init>:
=======
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2205      	movs	r2, #5
 800a690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a694:	2300      	movs	r3, #0
 800a696:	2200      	movs	r2, #0
 800a698:	2100      	movs	r1, #0
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fca8 	bl	800aff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
	...

0800a6ac <MX_USB_DEVICE_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
<<<<<<< HEAD
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
=======
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	af00      	add	r7, sp, #0
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
<<<<<<< HEAD
 800a648:	2200      	movs	r2, #0
 800a64a:	4912      	ldr	r1, [pc, #72]	; (800a694 <MX_USB_DEVICE_Init+0x50>)
 800a64c:	4812      	ldr	r0, [pc, #72]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a64e:	f7fe fe8f 	bl	8009370 <USBD_Init>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a658:	f7f6 ff94 	bl	8001584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a65c:	490f      	ldr	r1, [pc, #60]	; (800a69c <MX_USB_DEVICE_Init+0x58>)
 800a65e:	480e      	ldr	r0, [pc, #56]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a660:	f7fe feb6 	bl	80093d0 <USBD_RegisterClass>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a66a:	f7f6 ff8b 	bl	8001584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a66e:	490c      	ldr	r1, [pc, #48]	; (800a6a0 <MX_USB_DEVICE_Init+0x5c>)
 800a670:	4809      	ldr	r0, [pc, #36]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a672:	f7fe fdd7 	bl	8009224 <USBD_CDC_RegisterInterface>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a67c:	f7f6 ff82 	bl	8001584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a680:	4805      	ldr	r0, [pc, #20]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a682:	f7fe fecc 	bl	800941e <USBD_Start>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a68c:	f7f6 ff7a 	bl	8001584 <Error_Handler>
=======
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4912      	ldr	r1, [pc, #72]	; (800a6fc <MX_USB_DEVICE_Init+0x50>)
 800a6b4:	4812      	ldr	r0, [pc, #72]	; (800a700 <MX_USB_DEVICE_Init+0x54>)
 800a6b6:	f7fe fe8f 	bl	80093d8 <USBD_Init>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a6c0:	f7f6 ff60 	bl	8001584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a6c4:	490f      	ldr	r1, [pc, #60]	; (800a704 <MX_USB_DEVICE_Init+0x58>)
 800a6c6:	480e      	ldr	r0, [pc, #56]	; (800a700 <MX_USB_DEVICE_Init+0x54>)
 800a6c8:	f7fe feb6 	bl	8009438 <USBD_RegisterClass>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a6d2:	f7f6 ff57 	bl	8001584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a6d6:	490c      	ldr	r1, [pc, #48]	; (800a708 <MX_USB_DEVICE_Init+0x5c>)
 800a6d8:	4809      	ldr	r0, [pc, #36]	; (800a700 <MX_USB_DEVICE_Init+0x54>)
 800a6da:	f7fe fdd7 	bl	800928c <USBD_CDC_RegisterInterface>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a6e4:	f7f6 ff4e 	bl	8001584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a6e8:	4805      	ldr	r0, [pc, #20]	; (800a700 <MX_USB_DEVICE_Init+0x54>)
 800a6ea:	f7fe fecc 	bl	8009486 <USBD_Start>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a6f4:	f7f6 ff46 	bl	8001584 <Error_Handler>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
<<<<<<< HEAD
 800a690:	bf00      	nop
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20000144 	.word	0x20000144
 800a698:	20000974 	.word	0x20000974
 800a69c:	2000002c 	.word	0x2000002c
 800a6a0:	20000130 	.word	0x20000130

0800a6a4 <CDC_Init_FS>:
=======
 800a6f8:	bf00      	nop
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	20000140 	.word	0x20000140
 800a700:	20000970 	.word	0x20000970
 800a704:	20000028 	.word	0x20000028
 800a708:	2000012c 	.word	0x2000012c

0800a70c <CDC_Init_FS>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
<<<<<<< HEAD
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	4905      	ldr	r1, [pc, #20]	; (800a6c0 <CDC_Init_FS+0x1c>)
 800a6ac:	4805      	ldr	r0, [pc, #20]	; (800a6c4 <CDC_Init_FS+0x20>)
 800a6ae:	f7fe fdce 	bl	800924e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a6b2:	4905      	ldr	r1, [pc, #20]	; (800a6c8 <CDC_Init_FS+0x24>)
 800a6b4:	4803      	ldr	r0, [pc, #12]	; (800a6c4 <CDC_Init_FS+0x20>)
 800a6b6:	f7fe fde8 	bl	800928a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a6ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20001444 	.word	0x20001444
 800a6c4:	20000974 	.word	0x20000974
 800a6c8:	20000c44 	.word	0x20000c44

0800a6cc <CDC_DeInit_FS>:
=======
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a710:	2200      	movs	r2, #0
 800a712:	4905      	ldr	r1, [pc, #20]	; (800a728 <CDC_Init_FS+0x1c>)
 800a714:	4805      	ldr	r0, [pc, #20]	; (800a72c <CDC_Init_FS+0x20>)
 800a716:	f7fe fdce 	bl	80092b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a71a:	4905      	ldr	r1, [pc, #20]	; (800a730 <CDC_Init_FS+0x24>)
 800a71c:	4803      	ldr	r0, [pc, #12]	; (800a72c <CDC_Init_FS+0x20>)
 800a71e:	f7fe fde8 	bl	80092f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a722:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a724:	4618      	mov	r0, r3
 800a726:	bd80      	pop	{r7, pc}
 800a728:	20001440 	.word	0x20001440
 800a72c:	20000970 	.word	0x20000970
 800a730:	20000c40 	.word	0x20000c40

0800a734 <CDC_DeInit_FS>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
<<<<<<< HEAD
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a6d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <CDC_Control_FS>:
=======
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a738:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <CDC_Control_FS>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
<<<<<<< HEAD
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	6039      	str	r1, [r7, #0]
 800a6e6:	71fb      	strb	r3, [r7, #7]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	2b23      	cmp	r3, #35	; 0x23
 800a6f0:	d84a      	bhi.n	800a788 <CDC_Control_FS+0xac>
 800a6f2:	a201      	add	r2, pc, #4	; (adr r2, 800a6f8 <CDC_Control_FS+0x1c>)
 800a6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f8:	0800a789 	.word	0x0800a789
 800a6fc:	0800a789 	.word	0x0800a789
 800a700:	0800a789 	.word	0x0800a789
 800a704:	0800a789 	.word	0x0800a789
 800a708:	0800a789 	.word	0x0800a789
 800a70c:	0800a789 	.word	0x0800a789
 800a710:	0800a789 	.word	0x0800a789
 800a714:	0800a789 	.word	0x0800a789
 800a718:	0800a789 	.word	0x0800a789
 800a71c:	0800a789 	.word	0x0800a789
 800a720:	0800a789 	.word	0x0800a789
 800a724:	0800a789 	.word	0x0800a789
 800a728:	0800a789 	.word	0x0800a789
 800a72c:	0800a789 	.word	0x0800a789
 800a730:	0800a789 	.word	0x0800a789
 800a734:	0800a789 	.word	0x0800a789
 800a738:	0800a789 	.word	0x0800a789
 800a73c:	0800a789 	.word	0x0800a789
 800a740:	0800a789 	.word	0x0800a789
 800a744:	0800a789 	.word	0x0800a789
 800a748:	0800a789 	.word	0x0800a789
 800a74c:	0800a789 	.word	0x0800a789
 800a750:	0800a789 	.word	0x0800a789
 800a754:	0800a789 	.word	0x0800a789
 800a758:	0800a789 	.word	0x0800a789
 800a75c:	0800a789 	.word	0x0800a789
 800a760:	0800a789 	.word	0x0800a789
 800a764:	0800a789 	.word	0x0800a789
 800a768:	0800a789 	.word	0x0800a789
 800a76c:	0800a789 	.word	0x0800a789
 800a770:	0800a789 	.word	0x0800a789
 800a774:	0800a789 	.word	0x0800a789
 800a778:	0800a789 	.word	0x0800a789
 800a77c:	0800a789 	.word	0x0800a789
 800a780:	0800a789 	.word	0x0800a789
 800a784:	0800a789 	.word	0x0800a789
=======
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	6039      	str	r1, [r7, #0]
 800a74e:	71fb      	strb	r3, [r7, #7]
 800a750:	4613      	mov	r3, r2
 800a752:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	2b23      	cmp	r3, #35	; 0x23
 800a758:	d84a      	bhi.n	800a7f0 <CDC_Control_FS+0xac>
 800a75a:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <CDC_Control_FS+0x1c>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a7f1 	.word	0x0800a7f1
 800a764:	0800a7f1 	.word	0x0800a7f1
 800a768:	0800a7f1 	.word	0x0800a7f1
 800a76c:	0800a7f1 	.word	0x0800a7f1
 800a770:	0800a7f1 	.word	0x0800a7f1
 800a774:	0800a7f1 	.word	0x0800a7f1
 800a778:	0800a7f1 	.word	0x0800a7f1
 800a77c:	0800a7f1 	.word	0x0800a7f1
 800a780:	0800a7f1 	.word	0x0800a7f1
 800a784:	0800a7f1 	.word	0x0800a7f1
 800a788:	0800a7f1 	.word	0x0800a7f1
 800a78c:	0800a7f1 	.word	0x0800a7f1
 800a790:	0800a7f1 	.word	0x0800a7f1
 800a794:	0800a7f1 	.word	0x0800a7f1
 800a798:	0800a7f1 	.word	0x0800a7f1
 800a79c:	0800a7f1 	.word	0x0800a7f1
 800a7a0:	0800a7f1 	.word	0x0800a7f1
 800a7a4:	0800a7f1 	.word	0x0800a7f1
 800a7a8:	0800a7f1 	.word	0x0800a7f1
 800a7ac:	0800a7f1 	.word	0x0800a7f1
 800a7b0:	0800a7f1 	.word	0x0800a7f1
 800a7b4:	0800a7f1 	.word	0x0800a7f1
 800a7b8:	0800a7f1 	.word	0x0800a7f1
 800a7bc:	0800a7f1 	.word	0x0800a7f1
 800a7c0:	0800a7f1 	.word	0x0800a7f1
 800a7c4:	0800a7f1 	.word	0x0800a7f1
 800a7c8:	0800a7f1 	.word	0x0800a7f1
 800a7cc:	0800a7f1 	.word	0x0800a7f1
 800a7d0:	0800a7f1 	.word	0x0800a7f1
 800a7d4:	0800a7f1 	.word	0x0800a7f1
 800a7d8:	0800a7f1 	.word	0x0800a7f1
 800a7dc:	0800a7f1 	.word	0x0800a7f1
 800a7e0:	0800a7f1 	.word	0x0800a7f1
 800a7e4:	0800a7f1 	.word	0x0800a7f1
 800a7e8:	0800a7f1 	.word	0x0800a7f1
 800a7ec:	0800a7f1 	.word	0x0800a7f1
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    case CDC_SEND_BREAK:

    break;

  default:
    break;
<<<<<<< HEAD
 800a788:	bf00      	nop
  }

  return (USBD_OK);
 800a78a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <CDC_Receive_FS>:
=======
 800a7f0:	bf00      	nop
  }

  return (USBD_OK);
 800a7f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <CDC_Receive_FS>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
<<<<<<< HEAD
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	4805      	ldr	r0, [pc, #20]	; (800a7bc <CDC_Receive_FS+0x24>)
 800a7a6:	f7fe fd70 	bl	800928a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a7aa:	4804      	ldr	r0, [pc, #16]	; (800a7bc <CDC_Receive_FS+0x24>)
 800a7ac:	f7fe fdb6 	bl	800931c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a7b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000974 	.word	0x20000974

0800a7c0 <CDC_Transmit_FS>:
=======
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a80a:	6879      	ldr	r1, [r7, #4]
 800a80c:	4805      	ldr	r0, [pc, #20]	; (800a824 <CDC_Receive_FS+0x24>)
 800a80e:	f7fe fd70 	bl	80092f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a812:	4804      	ldr	r0, [pc, #16]	; (800a824 <CDC_Receive_FS+0x24>)
 800a814:	f7fe fdb6 	bl	8009384 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a818:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20000970 	.word	0x20000970

0800a828 <CDC_Transmit_FS>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
<<<<<<< HEAD
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7d0:	4b0d      	ldr	r3, [pc, #52]	; (800a808 <CDC_Transmit_FS+0x48>)
 800a7d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e00b      	b.n	800a7fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a7e6:	887b      	ldrh	r3, [r7, #2]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4806      	ldr	r0, [pc, #24]	; (800a808 <CDC_Transmit_FS+0x48>)
 800a7ee:	f7fe fd2e 	bl	800924e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7f2:	4805      	ldr	r0, [pc, #20]	; (800a808 <CDC_Transmit_FS+0x48>)
 800a7f4:	f7fe fd62 	bl	80092bc <USBD_CDC_TransmitPacket>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20000974 	.word	0x20000974

0800a80c <CDC_TransmitCplt_FS>:
=======
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	460b      	mov	r3, r1
 800a832:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a838:	4b0d      	ldr	r3, [pc, #52]	; (800a870 <CDC_Transmit_FS+0x48>)
 800a83a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a83e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a846:	2b00      	cmp	r3, #0
 800a848:	d001      	beq.n	800a84e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e00b      	b.n	800a866 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a84e:	887b      	ldrh	r3, [r7, #2]
 800a850:	461a      	mov	r2, r3
 800a852:	6879      	ldr	r1, [r7, #4]
 800a854:	4806      	ldr	r0, [pc, #24]	; (800a870 <CDC_Transmit_FS+0x48>)
 800a856:	f7fe fd2e 	bl	80092b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a85a:	4805      	ldr	r0, [pc, #20]	; (800a870 <CDC_Transmit_FS+0x48>)
 800a85c:	f7fe fd62 	bl	8009324 <USBD_CDC_TransmitPacket>
 800a860:	4603      	mov	r3, r0
 800a862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a864:	7bfb      	ldrb	r3, [r7, #15]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	20000970 	.word	0x20000970

0800a874 <CDC_TransmitCplt_FS>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
<<<<<<< HEAD
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	4613      	mov	r3, r2
 800a818:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	75fb      	strb	r3, [r7, #23]
=======
 800a874:	b480      	push	{r7}
 800a876:	b087      	sub	sp, #28
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	4613      	mov	r3, r2
 800a880:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
<<<<<<< HEAD
 800a81e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a822:	4618      	mov	r0, r3
 800a824:	371c      	adds	r7, #28
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
	...

0800a830 <USBD_FS_DeviceDescriptor>:
=======
 800a886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	371c      	adds	r7, #28
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
	...

0800a898 <USBD_FS_DeviceDescriptor>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	6039      	str	r1, [r7, #0]
 800a83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2212      	movs	r2, #18
 800a840:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a842:	4b03      	ldr	r3, [pc, #12]	; (800a850 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	20000160 	.word	0x20000160

0800a854 <USBD_FS_LangIDStrDescriptor>:
=======
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6039      	str	r1, [r7, #0]
 800a8a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2212      	movs	r2, #18
 800a8a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a8aa:	4b03      	ldr	r3, [pc, #12]	; (800a8b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	2000015c 	.word	0x2000015c

0800a8bc <USBD_FS_LangIDStrDescriptor>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	4603      	mov	r3, r0
 800a85c:	6039      	str	r1, [r7, #0]
 800a85e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2204      	movs	r2, #4
 800a864:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a866:	4b03      	ldr	r3, [pc, #12]	; (800a874 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	20000174 	.word	0x20000174

0800a878 <USBD_FS_ProductStrDescriptor>:
=======
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	6039      	str	r1, [r7, #0]
 800a8c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2204      	movs	r2, #4
 800a8cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8ce:	4b03      	ldr	r3, [pc, #12]	; (800a8dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	20000170 	.word	0x20000170

0800a8e0 <USBD_FS_ProductStrDescriptor>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	6039      	str	r1, [r7, #0]
 800a882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d105      	bne.n	800a896 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	4907      	ldr	r1, [pc, #28]	; (800a8ac <USBD_FS_ProductStrDescriptor+0x34>)
 800a88e:	4808      	ldr	r0, [pc, #32]	; (800a8b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a890:	f7ff fdf7 	bl	800a482 <USBD_GetString>
 800a894:	e004      	b.n	800a8a0 <USBD_FS_ProductStrDescriptor+0x28>
=======
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	6039      	str	r1, [r7, #0]
 800a8ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d105      	bne.n	800a8fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	4907      	ldr	r1, [pc, #28]	; (800a914 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8f6:	4808      	ldr	r0, [pc, #32]	; (800a918 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8f8:	f7ff fdf7 	bl	800a4ea <USBD_GetString>
 800a8fc:	e004      	b.n	800a908 <USBD_FS_ProductStrDescriptor+0x28>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	4904      	ldr	r1, [pc, #16]	; (800a8ac <USBD_FS_ProductStrDescriptor+0x34>)
 800a89a:	4805      	ldr	r0, [pc, #20]	; (800a8b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a89c:	f7ff fdf1 	bl	800a482 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a0:	4b02      	ldr	r3, [pc, #8]	; (800a8ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	20001c44 	.word	0x20001c44
 800a8b0:	0800edc8 	.word	0x0800edc8

0800a8b4 <USBD_FS_ManufacturerStrDescriptor>:
=======
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	4904      	ldr	r1, [pc, #16]	; (800a914 <USBD_FS_ProductStrDescriptor+0x34>)
 800a902:	4805      	ldr	r0, [pc, #20]	; (800a918 <USBD_FS_ProductStrDescriptor+0x38>)
 800a904:	f7ff fdf1 	bl	800a4ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800a908:	4b02      	ldr	r3, [pc, #8]	; (800a914 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	20001c40 	.word	0x20001c40
 800a918:	0800ee6c 	.word	0x0800ee6c

0800a91c <USBD_FS_ManufacturerStrDescriptor>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	6039      	str	r1, [r7, #0]
 800a8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	4904      	ldr	r1, [pc, #16]	; (800a8d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a8c4:	4804      	ldr	r0, [pc, #16]	; (800a8d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a8c6:	f7ff fddc 	bl	800a482 <USBD_GetString>
  return USBD_StrDesc;
 800a8ca:	4b02      	ldr	r3, [pc, #8]	; (800a8d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	20001c44 	.word	0x20001c44
 800a8d8:	0800edd8 	.word	0x0800edd8

0800a8dc <USBD_FS_SerialStrDescriptor>:
=======
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	4603      	mov	r3, r0
 800a924:	6039      	str	r1, [r7, #0]
 800a926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	4904      	ldr	r1, [pc, #16]	; (800a93c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a92c:	4804      	ldr	r0, [pc, #16]	; (800a940 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a92e:	f7ff fddc 	bl	800a4ea <USBD_GetString>
  return USBD_StrDesc;
 800a932:	4b02      	ldr	r3, [pc, #8]	; (800a93c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a934:	4618      	mov	r0, r3
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20001c40 	.word	0x20001c40
 800a940:	0800ee7c 	.word	0x0800ee7c

0800a944 <USBD_FS_SerialStrDescriptor>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	6039      	str	r1, [r7, #0]
 800a8e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	221a      	movs	r2, #26
 800a8ec:	801a      	strh	r2, [r3, #0]
=======
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	6039      	str	r1, [r7, #0]
 800a94e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	221a      	movs	r2, #26
 800a954:	801a      	strh	r2, [r3, #0]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
<<<<<<< HEAD
 800a8ee:	f000 f843 	bl	800a978 <Get_SerialNum>
=======
 800a956:	f000 f843 	bl	800a9e0 <Get_SerialNum>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
<<<<<<< HEAD
 800a8f2:	4b02      	ldr	r3, [pc, #8]	; (800a8fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20000178 	.word	0x20000178

0800a900 <USBD_FS_ConfigStrDescriptor>:
=======
 800a95a:	4b02      	ldr	r3, [pc, #8]	; (800a964 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20000174 	.word	0x20000174

0800a968 <USBD_FS_ConfigStrDescriptor>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	4603      	mov	r3, r0
 800a908:	6039      	str	r1, [r7, #0]
 800a90a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a90c:	79fb      	ldrb	r3, [r7, #7]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d105      	bne.n	800a91e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	4907      	ldr	r1, [pc, #28]	; (800a934 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a916:	4808      	ldr	r0, [pc, #32]	; (800a938 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a918:	f7ff fdb3 	bl	800a482 <USBD_GetString>
 800a91c:	e004      	b.n	800a928 <USBD_FS_ConfigStrDescriptor+0x28>
=======
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	4603      	mov	r3, r0
 800a970:	6039      	str	r1, [r7, #0]
 800a972:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a974:	79fb      	ldrb	r3, [r7, #7]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d105      	bne.n	800a986 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	4907      	ldr	r1, [pc, #28]	; (800a99c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a97e:	4808      	ldr	r0, [pc, #32]	; (800a9a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a980:	f7ff fdb3 	bl	800a4ea <USBD_GetString>
 800a984:	e004      	b.n	800a990 <USBD_FS_ConfigStrDescriptor+0x28>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	4904      	ldr	r1, [pc, #16]	; (800a934 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a922:	4805      	ldr	r0, [pc, #20]	; (800a938 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a924:	f7ff fdad 	bl	800a482 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a928:	4b02      	ldr	r3, [pc, #8]	; (800a934 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20001c44 	.word	0x20001c44
 800a938:	0800ede4 	.word	0x0800ede4

0800a93c <USBD_FS_InterfaceStrDescriptor>:
=======
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	4904      	ldr	r1, [pc, #16]	; (800a99c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a98a:	4805      	ldr	r0, [pc, #20]	; (800a9a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a98c:	f7ff fdad 	bl	800a4ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800a990:	4b02      	ldr	r3, [pc, #8]	; (800a99c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	20001c40 	.word	0x20001c40
 800a9a0:	0800ee88 	.word	0x0800ee88

0800a9a4 <USBD_FS_InterfaceStrDescriptor>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	6039      	str	r1, [r7, #0]
 800a946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d105      	bne.n	800a95a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	4907      	ldr	r1, [pc, #28]	; (800a970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a952:	4808      	ldr	r0, [pc, #32]	; (800a974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a954:	f7ff fd95 	bl	800a482 <USBD_GetString>
 800a958:	e004      	b.n	800a964 <USBD_FS_InterfaceStrDescriptor+0x28>
=======
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	6039      	str	r1, [r7, #0]
 800a9ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9b0:	79fb      	ldrb	r3, [r7, #7]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d105      	bne.n	800a9c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	4907      	ldr	r1, [pc, #28]	; (800a9d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9ba:	4808      	ldr	r0, [pc, #32]	; (800a9dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9bc:	f7ff fd95 	bl	800a4ea <USBD_GetString>
 800a9c0:	e004      	b.n	800a9cc <USBD_FS_InterfaceStrDescriptor+0x28>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	4904      	ldr	r1, [pc, #16]	; (800a970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a95e:	4805      	ldr	r0, [pc, #20]	; (800a974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a960:	f7ff fd8f 	bl	800a482 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a964:	4b02      	ldr	r3, [pc, #8]	; (800a970 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	20001c44 	.word	0x20001c44
 800a974:	0800edf0 	.word	0x0800edf0

0800a978 <Get_SerialNum>:
=======
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	4904      	ldr	r1, [pc, #16]	; (800a9d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9c6:	4805      	ldr	r0, [pc, #20]	; (800a9dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9c8:	f7ff fd8f 	bl	800a4ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9cc:	4b02      	ldr	r3, [pc, #8]	; (800a9d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	20001c40 	.word	0x20001c40
 800a9dc:	0800ee94 	.word	0x0800ee94

0800a9e0 <Get_SerialNum>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
<<<<<<< HEAD
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a97e:	4b0f      	ldr	r3, [pc, #60]	; (800a9bc <Get_SerialNum+0x44>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a984:	4b0e      	ldr	r3, [pc, #56]	; (800a9c0 <Get_SerialNum+0x48>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a98a:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <Get_SerialNum+0x4c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4413      	add	r3, r2
 800a996:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d009      	beq.n	800a9b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a99e:	2208      	movs	r2, #8
 800a9a0:	4909      	ldr	r1, [pc, #36]	; (800a9c8 <Get_SerialNum+0x50>)
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 f814 	bl	800a9d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a9a8:	2204      	movs	r2, #4
 800a9aa:	4908      	ldr	r1, [pc, #32]	; (800a9cc <Get_SerialNum+0x54>)
 800a9ac:	68b8      	ldr	r0, [r7, #8]
 800a9ae:	f000 f80f 	bl	800a9d0 <IntToUnicode>
  }
}
 800a9b2:	bf00      	nop
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	1fff7a10 	.word	0x1fff7a10
 800a9c0:	1fff7a14 	.word	0x1fff7a14
 800a9c4:	1fff7a18 	.word	0x1fff7a18
 800a9c8:	2000017a 	.word	0x2000017a
 800a9cc:	2000018a 	.word	0x2000018a

0800a9d0 <IntToUnicode>:
=======
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <Get_SerialNum+0x44>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a9ec:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <Get_SerialNum+0x48>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a9f2:	4b0e      	ldr	r3, [pc, #56]	; (800aa2c <Get_SerialNum+0x4c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d009      	beq.n	800aa1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa06:	2208      	movs	r2, #8
 800aa08:	4909      	ldr	r1, [pc, #36]	; (800aa30 <Get_SerialNum+0x50>)
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 f814 	bl	800aa38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa10:	2204      	movs	r2, #4
 800aa12:	4908      	ldr	r1, [pc, #32]	; (800aa34 <Get_SerialNum+0x54>)
 800aa14:	68b8      	ldr	r0, [r7, #8]
 800aa16:	f000 f80f 	bl	800aa38 <IntToUnicode>
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	1fff7a10 	.word	0x1fff7a10
 800aa28:	1fff7a14 	.word	0x1fff7a14
 800aa2c:	1fff7a18 	.word	0x1fff7a18
 800aa30:	20000176 	.word	0x20000176
 800aa34:	20000186 	.word	0x20000186

0800aa38 <IntToUnicode>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
<<<<<<< HEAD
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	75fb      	strb	r3, [r7, #23]
 800a9e6:	e027      	b.n	800aa38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	0f1b      	lsrs	r3, r3, #28
 800a9ec:	2b09      	cmp	r3, #9
 800a9ee:	d80b      	bhi.n	800aa08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	0f1b      	lsrs	r3, r3, #28
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	7dfb      	ldrb	r3, [r7, #23]
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	440b      	add	r3, r1
 800aa00:	3230      	adds	r2, #48	; 0x30
 800aa02:	b2d2      	uxtb	r2, r2
 800aa04:	701a      	strb	r2, [r3, #0]
 800aa06:	e00a      	b.n	800aa1e <IntToUnicode+0x4e>
=======
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	4613      	mov	r3, r2
 800aa44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]
 800aa4e:	e027      	b.n	800aaa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	0f1b      	lsrs	r3, r3, #28
 800aa54:	2b09      	cmp	r3, #9
 800aa56:	d80b      	bhi.n	800aa70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	0f1b      	lsrs	r3, r3, #28
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
 800aa60:	005b      	lsls	r3, r3, #1
 800aa62:	4619      	mov	r1, r3
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	440b      	add	r3, r1
 800aa68:	3230      	adds	r2, #48	; 0x30
 800aa6a:	b2d2      	uxtb	r2, r2
 800aa6c:	701a      	strb	r2, [r3, #0]
 800aa6e:	e00a      	b.n	800aa86 <IntToUnicode+0x4e>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< HEAD
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	0f1b      	lsrs	r3, r3, #28
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	4619      	mov	r1, r3
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	440b      	add	r3, r1
 800aa18:	3237      	adds	r2, #55	; 0x37
 800aa1a:	b2d2      	uxtb	r2, r2
 800aa1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	011b      	lsls	r3, r3, #4
 800aa22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	3301      	adds	r3, #1
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	2200      	movs	r2, #0
 800aa30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
 800aa34:	3301      	adds	r3, #1
 800aa36:	75fb      	strb	r3, [r7, #23]
 800aa38:	7dfa      	ldrb	r2, [r7, #23]
 800aa3a:	79fb      	ldrb	r3, [r7, #7]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d3d3      	bcc.n	800a9e8 <IntToUnicode+0x18>
  }
}
 800aa40:	bf00      	nop
 800aa42:	bf00      	nop
 800aa44:	371c      	adds	r7, #28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
	...

0800aa50 <HAL_PCD_MspInit>:
=======
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	0f1b      	lsrs	r3, r3, #28
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	005b      	lsls	r3, r3, #1
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	440b      	add	r3, r1
 800aa80:	3237      	adds	r2, #55	; 0x37
 800aa82:	b2d2      	uxtb	r2, r2
 800aa84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	011b      	lsls	r3, r3, #4
 800aa8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa8c:	7dfb      	ldrb	r3, [r7, #23]
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	3301      	adds	r3, #1
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	4413      	add	r3, r2
 800aa96:	2200      	movs	r2, #0
 800aa98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	75fb      	strb	r3, [r7, #23]
 800aaa0:	7dfa      	ldrb	r2, [r7, #23]
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d3d3      	bcc.n	800aa50 <IntToUnicode+0x18>
  }
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	371c      	adds	r7, #28
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
	...

0800aab8 <HAL_PCD_MspInit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
<<<<<<< HEAD
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b08a      	sub	sp, #40	; 0x28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa58:	f107 0314 	add.w	r3, r7, #20
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	605a      	str	r2, [r3, #4]
 800aa62:	609a      	str	r2, [r3, #8]
 800aa64:	60da      	str	r2, [r3, #12]
 800aa66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa70:	d13a      	bne.n	800aae8 <HAL_PCD_MspInit+0x98>
=======
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b08a      	sub	sp, #40	; 0x28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aac0:	f107 0314 	add.w	r3, r7, #20
 800aac4:	2200      	movs	r2, #0
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	605a      	str	r2, [r3, #4]
 800aaca:	609a      	str	r2, [r3, #8]
 800aacc:	60da      	str	r2, [r3, #12]
 800aace:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aad8:	d13a      	bne.n	800ab50 <HAL_PCD_MspInit+0x98>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 800aa72:	2300      	movs	r3, #0
 800aa74:	613b      	str	r3, [r7, #16]
 800aa76:	4b1e      	ldr	r3, [pc, #120]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7a:	4a1d      	ldr	r2, [pc, #116]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aa7c:	f043 0301 	orr.w	r3, r3, #1
 800aa80:	6313      	str	r3, [r2, #48]	; 0x30
 800aa82:	4b1b      	ldr	r3, [pc, #108]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	613b      	str	r3, [r7, #16]
 800aa8c:	693b      	ldr	r3, [r7, #16]
=======
 800aada:	2300      	movs	r3, #0
 800aadc:	613b      	str	r3, [r7, #16]
 800aade:	4b1e      	ldr	r3, [pc, #120]	; (800ab58 <HAL_PCD_MspInit+0xa0>)
 800aae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae2:	4a1d      	ldr	r2, [pc, #116]	; (800ab58 <HAL_PCD_MspInit+0xa0>)
 800aae4:	f043 0301 	orr.w	r3, r3, #1
 800aae8:	6313      	str	r3, [r2, #48]	; 0x30
 800aaea:	4b1b      	ldr	r3, [pc, #108]	; (800ab58 <HAL_PCD_MspInit+0xa0>)
 800aaec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaee:	f003 0301 	and.w	r3, r3, #1
 800aaf2:	613b      	str	r3, [r7, #16]
 800aaf4:	693b      	ldr	r3, [r7, #16]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
 800aa8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aa92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa94:	2302      	movs	r3, #2
 800aa96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aaa0:	230a      	movs	r3, #10
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaa4:	f107 0314 	add.w	r3, r7, #20
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4812      	ldr	r0, [pc, #72]	; (800aaf4 <HAL_PCD_MspInit+0xa4>)
 800aaac:	f7f8 fa0a 	bl	8002ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aab0:	4b0f      	ldr	r3, [pc, #60]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab4:	4a0e      	ldr	r2, [pc, #56]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaba:	6353      	str	r3, [r2, #52]	; 0x34
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	4b0b      	ldr	r3, [pc, #44]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac4:	4a0a      	ldr	r2, [pc, #40]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aaca:	6453      	str	r3, [r2, #68]	; 0x44
 800aacc:	4b08      	ldr	r3, [pc, #32]	; (800aaf0 <HAL_PCD_MspInit+0xa0>)
 800aace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aad8:	2200      	movs	r2, #0
 800aada:	2100      	movs	r1, #0
 800aadc:	2043      	movs	r0, #67	; 0x43
 800aade:	f7f8 f928 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aae2:	2043      	movs	r0, #67	; 0x43
 800aae4:	f7f8 f941 	bl	8002d6a <HAL_NVIC_EnableIRQ>
=======
 800aaf6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aafa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aafc:	2302      	movs	r3, #2
 800aafe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab00:	2300      	movs	r3, #0
 800ab02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab04:	2303      	movs	r3, #3
 800ab06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab08:	230a      	movs	r3, #10
 800ab0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab0c:	f107 0314 	add.w	r3, r7, #20
 800ab10:	4619      	mov	r1, r3
 800ab12:	4812      	ldr	r0, [pc, #72]	; (800ab5c <HAL_PCD_MspInit+0xa4>)
 800ab14:	f7f8 fa0a 	bl	8002f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab18:	4b0f      	ldr	r3, [pc, #60]	; (800ab58 <HAL_PCD_MspInit+0xa0>)
 800ab1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab1c:	4a0e      	ldr	r2, [pc, #56]	; (800ab58 <HAL_PCD_MspInit+0xa0>)
 800ab1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab22:	6353      	str	r3, [r2, #52]	; 0x34
 800ab24:	2300      	movs	r3, #0
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <HAL_PCD_MspInit+0xa0>)
 800ab2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab2c:	4a0a      	ldr	r2, [pc, #40]	; (800ab58 <HAL_PCD_MspInit+0xa0>)
 800ab2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab32:	6453      	str	r3, [r2, #68]	; 0x44
 800ab34:	4b08      	ldr	r3, [pc, #32]	; (800ab58 <HAL_PCD_MspInit+0xa0>)
 800ab36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab3c:	60fb      	str	r3, [r7, #12]
 800ab3e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab40:	2200      	movs	r2, #0
 800ab42:	2100      	movs	r1, #0
 800ab44:	2043      	movs	r0, #67	; 0x43
 800ab46:	f7f8 f928 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab4a:	2043      	movs	r0, #67	; 0x43
 800ab4c:	f7f8 f941 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
<<<<<<< HEAD
 800aae8:	bf00      	nop
 800aaea:	3728      	adds	r7, #40	; 0x28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	40023800 	.word	0x40023800
 800aaf4:	40020000 	.word	0x40020000

0800aaf8 <HAL_PCD_SetupStageCallback>:
=======
 800ab50:	bf00      	nop
 800ab52:	3728      	adds	r7, #40	; 0x28
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	40023800 	.word	0x40023800
 800ab5c:	40020000 	.word	0x40020000

0800ab60 <HAL_PCD_SetupStageCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f7fe fcd0 	bl	80094b4 <USBD_LL_SetupStage>
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <HAL_PCD_DataOutStageCallback>:
=======
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab74:	4619      	mov	r1, r3
 800ab76:	4610      	mov	r0, r2
 800ab78:	f7fe fcd0 	bl	800951c <USBD_LL_SetupStage>
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <HAL_PCD_DataOutStageCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ab2e:	78fa      	ldrb	r2, [r7, #3]
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	4613      	mov	r3, r2
 800ab34:	00db      	lsls	r3, r3, #3
 800ab36:	1a9b      	subs	r3, r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	440b      	add	r3, r1
 800ab3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	78fb      	ldrb	r3, [r7, #3]
 800ab44:	4619      	mov	r1, r3
 800ab46:	f7fe fd0a 	bl	800955e <USBD_LL_DataOutStage>
}
 800ab4a:	bf00      	nop
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <HAL_PCD_DataInStageCallback>:
=======
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ab96:	78fa      	ldrb	r2, [r7, #3]
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	1a9b      	subs	r3, r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	440b      	add	r3, r1
 800aba4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	78fb      	ldrb	r3, [r7, #3]
 800abac:	4619      	mov	r1, r3
 800abae:	f7fe fd0a 	bl	80095c6 <USBD_LL_DataOutStage>
}
 800abb2:	bf00      	nop
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <HAL_PCD_DataInStageCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ab64:	78fa      	ldrb	r2, [r7, #3]
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	1a9b      	subs	r3, r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	440b      	add	r3, r1
 800ab72:	3348      	adds	r3, #72	; 0x48
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	78fb      	ldrb	r3, [r7, #3]
 800ab78:	4619      	mov	r1, r3
 800ab7a:	f7fe fd53 	bl	8009624 <USBD_LL_DataInStage>
}
 800ab7e:	bf00      	nop
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <HAL_PCD_SOFCallback>:
=======
 800abba:	b580      	push	{r7, lr}
 800abbc:	b082      	sub	sp, #8
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	460b      	mov	r3, r1
 800abc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800abcc:	78fa      	ldrb	r2, [r7, #3]
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	4613      	mov	r3, r2
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	1a9b      	subs	r3, r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	440b      	add	r3, r1
 800abda:	3348      	adds	r3, #72	; 0x48
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	78fb      	ldrb	r3, [r7, #3]
 800abe0:	4619      	mov	r1, r3
 800abe2:	f7fe fd53 	bl	800968c <USBD_LL_DataInStage>
}
 800abe6:	bf00      	nop
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <HAL_PCD_SOFCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b082      	sub	sp, #8
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fe fe67 	bl	8009868 <USBD_LL_SOF>
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <HAL_PCD_ResetCallback>:
=======
 800abee:	b580      	push	{r7, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fe fe67 	bl	80098d0 <USBD_LL_SOF>
}
 800ac02:	bf00      	nop
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <HAL_PCD_ResetCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abaa:	2301      	movs	r3, #1
 800abac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d102      	bne.n	800abbc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]
 800abba:	e008      	b.n	800abce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d102      	bne.n	800abca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800abc4:	2301      	movs	r3, #1
 800abc6:	73fb      	strb	r3, [r7, #15]
 800abc8:	e001      	b.n	800abce <HAL_PCD_ResetCallback+0x2c>
=======
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac12:	2301      	movs	r3, #1
 800ac14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d102      	bne.n	800ac24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]
 800ac22:	e008      	b.n	800ac36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d102      	bne.n	800ac32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	73fb      	strb	r3, [r7, #15]
 800ac30:	e001      	b.n	800ac36 <HAL_PCD_ResetCallback+0x2c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    Error_Handler();
<<<<<<< HEAD
 800abca:	f7f6 fcdb 	bl	8001584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abd4:	7bfa      	ldrb	r2, [r7, #15]
 800abd6:	4611      	mov	r1, r2
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fe fe07 	bl	80097ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fe fdb3 	bl	8009750 <USBD_LL_Reset>
}
 800abea:	bf00      	nop
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <HAL_PCD_SuspendCallback>:
=======
 800ac32:	f7f6 fca7 	bl	8001584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac3c:	7bfa      	ldrb	r2, [r7, #15]
 800ac3e:	4611      	mov	r1, r2
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe fe07 	bl	8009854 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fe fdb3 	bl	80097b8 <USBD_LL_Reset>
}
 800ac52:	bf00      	nop
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
	...

0800ac5c <HAL_PCD_SuspendCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe fe02 	bl	800980c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	6812      	ldr	r2, [r2, #0]
 800ac16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac1a:	f043 0301 	orr.w	r3, r3, #1
 800ac1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d005      	beq.n	800ac34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac28:	4b04      	ldr	r3, [pc, #16]	; (800ac3c <HAL_PCD_SuspendCallback+0x48>)
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	4a03      	ldr	r2, [pc, #12]	; (800ac3c <HAL_PCD_SuspendCallback+0x48>)
 800ac2e:	f043 0306 	orr.w	r3, r3, #6
 800ac32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	e000ed00 	.word	0xe000ed00

0800ac40 <HAL_PCD_ResumeCallback>:
=======
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe fe02 	bl	8009874 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6812      	ldr	r2, [r2, #0]
 800ac7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac82:	f043 0301 	orr.w	r3, r3, #1
 800ac86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a1b      	ldr	r3, [r3, #32]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d005      	beq.n	800ac9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac90:	4b04      	ldr	r3, [pc, #16]	; (800aca4 <HAL_PCD_SuspendCallback+0x48>)
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	4a03      	ldr	r2, [pc, #12]	; (800aca4 <HAL_PCD_SuspendCallback+0x48>)
 800ac96:	f043 0306 	orr.w	r3, r3, #6
 800ac9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	e000ed00 	.word	0xe000ed00

0800aca8 <HAL_PCD_ResumeCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
=======
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< HEAD
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe fdf2 	bl	8009838 <USBD_LL_Resume>
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_PCD_ISOOUTIncompleteCallback>:
=======
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fdf2 	bl	80098a0 <USBD_LL_Resume>
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <HAL_PCD_ISOOUTIncompleteCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	460b      	mov	r3, r1
 800ac66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac6e:	78fa      	ldrb	r2, [r7, #3]
 800ac70:	4611      	mov	r1, r2
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fe fe40 	bl	80098f8 <USBD_LL_IsoOUTIncomplete>
}
 800ac78:	bf00      	nop
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_PCD_ISOINIncompleteCallback>:
=======
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acd6:	78fa      	ldrb	r2, [r7, #3]
 800acd8:	4611      	mov	r1, r2
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fe fe40 	bl	8009960 <USBD_LL_IsoOUTIncomplete>
}
 800ace0:	bf00      	nop
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <HAL_PCD_ISOINIncompleteCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac92:	78fa      	ldrb	r2, [r7, #3]
 800ac94:	4611      	mov	r1, r2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fe fe08 	bl	80098ac <USBD_LL_IsoINIncomplete>
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <HAL_PCD_ConnectCallback>:
=======
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acfa:	78fa      	ldrb	r2, [r7, #3]
 800acfc:	4611      	mov	r1, r2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fe fe08 	bl	8009914 <USBD_LL_IsoINIncomplete>
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <HAL_PCD_ConnectCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fe46 	bl	8009944 <USBD_LL_DevConnected>
}
 800acb8:	bf00      	nop
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_PCD_DisconnectCallback>:
=======
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fe fe46 	bl	80099ac <USBD_LL_DevConnected>
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_PCD_DisconnectCallback>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe fe43 	bl	800995a <USBD_LL_DevDisconnected>
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_LL_Init>:
=======
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe fe43 	bl	80099c2 <USBD_LL_DevDisconnected>
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBD_LL_Init>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d13c      	bne.n	800ad66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800acec:	4a20      	ldr	r2, [pc, #128]	; (800ad70 <USBD_LL_Init+0x94>)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a1e      	ldr	r2, [pc, #120]	; (800ad70 <USBD_LL_Init+0x94>)
 800acf8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800acfc:	4b1c      	ldr	r3, [pc, #112]	; (800ad70 <USBD_LL_Init+0x94>)
 800acfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ad02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad04:	4b1a      	ldr	r3, [pc, #104]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad06:	2204      	movs	r2, #4
 800ad08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad0a:	4b19      	ldr	r3, [pc, #100]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad0c:	2202      	movs	r2, #2
 800ad0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad10:	4b17      	ldr	r3, [pc, #92]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad16:	4b16      	ldr	r3, [pc, #88]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad18:	2202      	movs	r2, #2
 800ad1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad1c:	4b14      	ldr	r3, [pc, #80]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ad28:	4b11      	ldr	r3, [pc, #68]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ad2e:	4b10      	ldr	r3, [pc, #64]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ad34:	4b0e      	ldr	r3, [pc, #56]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ad3a:	480d      	ldr	r0, [pc, #52]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad3c:	f7f8 ffdc 	bl	8003cf8 <HAL_PCD_Init>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ad46:	f7f6 fc1d 	bl	8001584 <Error_Handler>
=======
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d13c      	bne.n	800adce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ad54:	4a20      	ldr	r2, [pc, #128]	; (800add8 <USBD_LL_Init+0x94>)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a1e      	ldr	r2, [pc, #120]	; (800add8 <USBD_LL_Init+0x94>)
 800ad60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad64:	4b1c      	ldr	r3, [pc, #112]	; (800add8 <USBD_LL_Init+0x94>)
 800ad66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ad6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad6c:	4b1a      	ldr	r3, [pc, #104]	; (800add8 <USBD_LL_Init+0x94>)
 800ad6e:	2204      	movs	r2, #4
 800ad70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad72:	4b19      	ldr	r3, [pc, #100]	; (800add8 <USBD_LL_Init+0x94>)
 800ad74:	2202      	movs	r2, #2
 800ad76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad78:	4b17      	ldr	r3, [pc, #92]	; (800add8 <USBD_LL_Init+0x94>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad7e:	4b16      	ldr	r3, [pc, #88]	; (800add8 <USBD_LL_Init+0x94>)
 800ad80:	2202      	movs	r2, #2
 800ad82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad84:	4b14      	ldr	r3, [pc, #80]	; (800add8 <USBD_LL_Init+0x94>)
 800ad86:	2200      	movs	r2, #0
 800ad88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ad8a:	4b13      	ldr	r3, [pc, #76]	; (800add8 <USBD_LL_Init+0x94>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ad90:	4b11      	ldr	r3, [pc, #68]	; (800add8 <USBD_LL_Init+0x94>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ad96:	4b10      	ldr	r3, [pc, #64]	; (800add8 <USBD_LL_Init+0x94>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ad9c:	4b0e      	ldr	r3, [pc, #56]	; (800add8 <USBD_LL_Init+0x94>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ada2:	480d      	ldr	r0, [pc, #52]	; (800add8 <USBD_LL_Init+0x94>)
 800ada4:	f7f8 ffdc 	bl	8003d60 <HAL_PCD_Init>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d001      	beq.n	800adb2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800adae:	f7f6 fbe9 	bl	8001584 <Error_Handler>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
<<<<<<< HEAD
 800ad4a:	2180      	movs	r1, #128	; 0x80
 800ad4c:	4808      	ldr	r0, [pc, #32]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad4e:	f7fa f93a 	bl	8004fc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ad52:	2240      	movs	r2, #64	; 0x40
 800ad54:	2100      	movs	r1, #0
 800ad56:	4806      	ldr	r0, [pc, #24]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad58:	f7fa f8ee 	bl	8004f38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ad5c:	2280      	movs	r2, #128	; 0x80
 800ad5e:	2101      	movs	r1, #1
 800ad60:	4803      	ldr	r0, [pc, #12]	; (800ad70 <USBD_LL_Init+0x94>)
 800ad62:	f7fa f8e9 	bl	8004f38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20001e44 	.word	0x20001e44

0800ad74 <USBD_LL_Start>:
=======
 800adb2:	2180      	movs	r1, #128	; 0x80
 800adb4:	4808      	ldr	r0, [pc, #32]	; (800add8 <USBD_LL_Init+0x94>)
 800adb6:	f7fa f93a 	bl	800502e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800adba:	2240      	movs	r2, #64	; 0x40
 800adbc:	2100      	movs	r1, #0
 800adbe:	4806      	ldr	r0, [pc, #24]	; (800add8 <USBD_LL_Init+0x94>)
 800adc0:	f7fa f8ee 	bl	8004fa0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800adc4:	2280      	movs	r2, #128	; 0x80
 800adc6:	2101      	movs	r1, #1
 800adc8:	4803      	ldr	r0, [pc, #12]	; (800add8 <USBD_LL_Init+0x94>)
 800adca:	f7fa f8e9 	bl	8004fa0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	20001e40 	.word	0x20001e40

0800addc <USBD_LL_Start>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7f9 f8d1 	bl	8003f32 <HAL_PCD_Start>
 800ad90:	4603      	mov	r3, r0
 800ad92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 f942 	bl	800b020 <USBD_Get_USB_Status>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USBD_LL_OpenEP>:
=======
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7f9 f8d1 	bl	8003f9a <HAL_PCD_Start>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 f942 	bl	800b088 <USBD_Get_USB_Status>
 800ae04:	4603      	mov	r3, r0
 800ae06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBD_LL_OpenEP>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
<<<<<<< HEAD
 800adaa:	b580      	push	{r7, lr}
 800adac:	b084      	sub	sp, #16
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	4608      	mov	r0, r1
 800adb4:	4611      	mov	r1, r2
 800adb6:	461a      	mov	r2, r3
 800adb8:	4603      	mov	r3, r0
 800adba:	70fb      	strb	r3, [r7, #3]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70bb      	strb	r3, [r7, #2]
 800adc0:	4613      	mov	r3, r2
 800adc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800add2:	78bb      	ldrb	r3, [r7, #2]
 800add4:	883a      	ldrh	r2, [r7, #0]
 800add6:	78f9      	ldrb	r1, [r7, #3]
 800add8:	f7f9 fcb5 	bl	8004746 <HAL_PCD_EP_Open>
 800addc:	4603      	mov	r3, r0
 800adde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 f91c 	bl	800b020 <USBD_Get_USB_Status>
 800ade8:	4603      	mov	r3, r0
 800adea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adec:	7bbb      	ldrb	r3, [r7, #14]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_LL_CloseEP>:
=======
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	4608      	mov	r0, r1
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	461a      	mov	r2, r3
 800ae20:	4603      	mov	r3, r0
 800ae22:	70fb      	strb	r3, [r7, #3]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70bb      	strb	r3, [r7, #2]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae3a:	78bb      	ldrb	r3, [r7, #2]
 800ae3c:	883a      	ldrh	r2, [r7, #0]
 800ae3e:	78f9      	ldrb	r1, [r7, #3]
 800ae40:	f7f9 fcb5 	bl	80047ae <HAL_PCD_EP_Open>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 f91c 	bl	800b088 <USBD_Get_USB_Status>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBD_LL_CloseEP>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b084      	sub	sp, #16
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	460b      	mov	r3, r1
 800ae00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae10:	78fa      	ldrb	r2, [r7, #3]
 800ae12:	4611      	mov	r1, r2
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7f9 fcfe 	bl	8004816 <HAL_PCD_EP_Close>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 f8fd 	bl	800b020 <USBD_Get_USB_Status>
 800ae26:	4603      	mov	r3, r0
 800ae28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_LL_StallEP>:
=======
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b084      	sub	sp, #16
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	460b      	mov	r3, r1
 800ae68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae78:	78fa      	ldrb	r2, [r7, #3]
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7f9 fcfe 	bl	800487e <HAL_PCD_EP_Close>
 800ae82:	4603      	mov	r3, r0
 800ae84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 f8fd 	bl	800b088 <USBD_Get_USB_Status>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_LL_StallEP>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae4e:	78fa      	ldrb	r2, [r7, #3]
 800ae50:	4611      	mov	r1, r2
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7f9 fdd6 	bl	8004a04 <HAL_PCD_EP_SetStall>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 f8de 	bl	800b020 <USBD_Get_USB_Status>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBD_LL_ClearStallEP>:
=======
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aeb6:	78fa      	ldrb	r2, [r7, #3]
 800aeb8:	4611      	mov	r1, r2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7f9 fdd6 	bl	8004a6c <HAL_PCD_EP_SetStall>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 f8de 	bl	800b088 <USBD_Get_USB_Status>
 800aecc:	4603      	mov	r3, r0
 800aece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <USBD_LL_ClearStallEP>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae8c:	78fa      	ldrb	r2, [r7, #3]
 800ae8e:	4611      	mov	r1, r2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f9 fe1b 	bl	8004acc <HAL_PCD_EP_ClrStall>
 800ae96:	4603      	mov	r3, r0
 800ae98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 f8bf 	bl	800b020 <USBD_Get_USB_Status>
 800aea2:	4603      	mov	r3, r0
 800aea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aea6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBD_LL_IsStallEP>:
=======
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	460b      	mov	r3, r1
 800aee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aef4:	78fa      	ldrb	r2, [r7, #3]
 800aef6:	4611      	mov	r1, r2
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7f9 fe1b 	bl	8004b34 <HAL_PCD_EP_ClrStall>
 800aefe:	4603      	mov	r3, r0
 800af00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af02:	7bfb      	ldrb	r3, [r7, #15]
 800af04:	4618      	mov	r0, r3
 800af06:	f000 f8bf 	bl	800b088 <USBD_Get_USB_Status>
 800af0a:	4603      	mov	r3, r0
 800af0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_LL_IsStallEP>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aec2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	da0b      	bge.n	800aee4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aecc:	78fb      	ldrb	r3, [r7, #3]
 800aece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	4613      	mov	r3, r2
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	1a9b      	subs	r3, r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	440b      	add	r3, r1
 800aede:	333e      	adds	r3, #62	; 0x3e
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	e00b      	b.n	800aefc <USBD_LL_IsStallEP+0x4c>
=======
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af30:	2b00      	cmp	r3, #0
 800af32:	da0b      	bge.n	800af4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af3a:	68f9      	ldr	r1, [r7, #12]
 800af3c:	4613      	mov	r3, r2
 800af3e:	00db      	lsls	r3, r3, #3
 800af40:	1a9b      	subs	r3, r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	440b      	add	r3, r1
 800af46:	333e      	adds	r3, #62	; 0x3e
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	e00b      	b.n	800af64 <USBD_LL_IsStallEP+0x4c>
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
<<<<<<< HEAD
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	4613      	mov	r3, r2
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	1a9b      	subs	r3, r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	440b      	add	r3, r1
 800aef6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aefa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <USBD_LL_SetUSBAddress>:
=======
 800af4c:	78fb      	ldrb	r3, [r7, #3]
 800af4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af52:	68f9      	ldr	r1, [r7, #12]
 800af54:	4613      	mov	r3, r2
 800af56:	00db      	lsls	r3, r3, #3
 800af58:	1a9b      	subs	r3, r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	440b      	add	r3, r1
 800af5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af64:	4618      	mov	r0, r3
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <USBD_LL_SetUSBAddress>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
<<<<<<< HEAD
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af22:	78fa      	ldrb	r2, [r7, #3]
 800af24:	4611      	mov	r1, r2
 800af26:	4618      	mov	r0, r3
 800af28:	f7f9 fbe8 	bl	80046fc <HAL_PCD_SetAddress>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	4618      	mov	r0, r3
 800af34:	f000 f874 	bl	800b020 <USBD_Get_USB_Status>
 800af38:	4603      	mov	r3, r0
 800af3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <USBD_LL_Transmit>:
=======
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af7c:	2300      	movs	r3, #0
 800af7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af8a:	78fa      	ldrb	r2, [r7, #3]
 800af8c:	4611      	mov	r1, r2
 800af8e:	4618      	mov	r0, r3
 800af90:	f7f9 fbe8 	bl	8004764 <HAL_PCD_SetAddress>
 800af94:	4603      	mov	r3, r0
 800af96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f874 	bl	800b088 <USBD_Get_USB_Status>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBD_LL_Transmit>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< HEAD
 800af46:	b580      	push	{r7, lr}
 800af48:	b086      	sub	sp, #24
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	603b      	str	r3, [r7, #0]
 800af52:	460b      	mov	r3, r1
 800af54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af64:	7af9      	ldrb	r1, [r7, #11]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	f7f9 fd01 	bl	8004970 <HAL_PCD_EP_Transmit>
 800af6e:	4603      	mov	r3, r0
 800af70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	4618      	mov	r0, r3
 800af76:	f000 f853 	bl	800b020 <USBD_Get_USB_Status>
 800af7a:	4603      	mov	r3, r0
 800af7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_LL_PrepareReceive>:
=======
 800afae:	b580      	push	{r7, lr}
 800afb0:	b086      	sub	sp, #24
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	603b      	str	r3, [r7, #0]
 800afba:	460b      	mov	r3, r1
 800afbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afcc:	7af9      	ldrb	r1, [r7, #11]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	f7f9 fd01 	bl	80049d8 <HAL_PCD_EP_Transmit>
 800afd6:	4603      	mov	r3, r0
 800afd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afda:	7dfb      	ldrb	r3, [r7, #23]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 f853 	bl	800b088 <USBD_Get_USB_Status>
 800afe2:	4603      	mov	r3, r0
 800afe4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afe6:	7dbb      	ldrb	r3, [r7, #22]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_LL_PrepareReceive>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
<<<<<<< HEAD
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	607a      	str	r2, [r7, #4]
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	460b      	mov	r3, r1
 800af96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afa6:	7af9      	ldrb	r1, [r7, #11]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	f7f9 fc7d 	bl	80048aa <HAL_PCD_EP_Receive>
 800afb0:	4603      	mov	r3, r0
 800afb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb4:	7dfb      	ldrb	r3, [r7, #23]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 f832 	bl	800b020 <USBD_Get_USB_Status>
 800afbc:	4603      	mov	r3, r0
 800afbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afc0:	7dbb      	ldrb	r3, [r7, #22]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3718      	adds	r7, #24
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <USBD_LL_GetRxDataSize>:
=======
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	607a      	str	r2, [r7, #4]
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	460b      	mov	r3, r1
 800affe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b004:	2300      	movs	r3, #0
 800b006:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b00e:	7af9      	ldrb	r1, [r7, #11]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	f7f9 fc7d 	bl	8004912 <HAL_PCD_EP_Receive>
 800b018:	4603      	mov	r3, r0
 800b01a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
 800b01e:	4618      	mov	r0, r3
 800b020:	f000 f832 	bl	800b088 <USBD_Get_USB_Status>
 800b024:	4603      	mov	r3, r0
 800b026:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b028:	7dbb      	ldrb	r3, [r7, #22]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_LL_GetRxDataSize>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800afca:	b580      	push	{r7, lr}
 800afcc:	b082      	sub	sp, #8
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	460b      	mov	r3, r1
 800afd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afdc:	78fa      	ldrb	r2, [r7, #3]
 800afde:	4611      	mov	r1, r2
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7f9 fcad 	bl	8004940 <HAL_PCD_EP_GetRxCount>
 800afe6:	4603      	mov	r3, r0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_static_malloc>:
=======
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	460b      	mov	r3, r1
 800b03c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b044:	78fa      	ldrb	r2, [r7, #3]
 800b046:	4611      	mov	r1, r2
 800b048:	4618      	mov	r0, r3
 800b04a:	f7f9 fcad 	bl	80049a8 <HAL_PCD_EP_GetRxCount>
 800b04e:	4603      	mov	r3, r0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_static_malloc>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
<<<<<<< HEAD
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aff8:	4b03      	ldr	r3, [pc, #12]	; (800b008 <USBD_static_malloc+0x18>)
}
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	200004b4 	.word	0x200004b4

0800b00c <USBD_static_free>:
=======
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b060:	4b03      	ldr	r3, [pc, #12]	; (800b070 <USBD_static_malloc+0x18>)
}
 800b062:	4618      	mov	r0, r3
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	200004ac 	.word	0x200004ac

0800b074 <USBD_static_free>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
<<<<<<< HEAD
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]

}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <USBD_Get_USB_Status>:
=======
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]

}
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <USBD_Get_USB_Status>:
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
<<<<<<< HEAD
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	4603      	mov	r3, r0
 800b028:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b02e:	79fb      	ldrb	r3, [r7, #7]
 800b030:	2b03      	cmp	r3, #3
 800b032:	d817      	bhi.n	800b064 <USBD_Get_USB_Status+0x44>
 800b034:	a201      	add	r2, pc, #4	; (adr r2, 800b03c <USBD_Get_USB_Status+0x1c>)
 800b036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03a:	bf00      	nop
 800b03c:	0800b04d 	.word	0x0800b04d
 800b040:	0800b053 	.word	0x0800b053
 800b044:	0800b059 	.word	0x0800b059
 800b048:	0800b05f 	.word	0x0800b05f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	73fb      	strb	r3, [r7, #15]
    break;
 800b050:	e00b      	b.n	800b06a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b052:	2303      	movs	r3, #3
 800b054:	73fb      	strb	r3, [r7, #15]
    break;
 800b056:	e008      	b.n	800b06a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b058:	2301      	movs	r3, #1
 800b05a:	73fb      	strb	r3, [r7, #15]
    break;
 800b05c:	e005      	b.n	800b06a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b05e:	2303      	movs	r3, #3
 800b060:	73fb      	strb	r3, [r7, #15]
    break;
 800b062:	e002      	b.n	800b06a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b064:	2303      	movs	r3, #3
 800b066:	73fb      	strb	r3, [r7, #15]
    break;
 800b068:	bf00      	nop
  }
  return usb_status;
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <pow>:
 800b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	ec59 8b10 	vmov	r8, r9, d0
 800b080:	ec57 6b11 	vmov	r6, r7, d1
 800b084:	f000 f8a8 	bl	800b1d8 <__ieee754_pow>
 800b088:	4b4e      	ldr	r3, [pc, #312]	; (800b1c4 <pow+0x14c>)
 800b08a:	f993 3000 	ldrsb.w	r3, [r3]
 800b08e:	3301      	adds	r3, #1
 800b090:	ec55 4b10 	vmov	r4, r5, d0
 800b094:	d015      	beq.n	800b0c2 <pow+0x4a>
 800b096:	4632      	mov	r2, r6
 800b098:	463b      	mov	r3, r7
 800b09a:	4630      	mov	r0, r6
 800b09c:	4639      	mov	r1, r7
 800b09e:	f7f5 fd45 	bl	8000b2c <__aeabi_dcmpun>
 800b0a2:	b970      	cbnz	r0, 800b0c2 <pow+0x4a>
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	4640      	mov	r0, r8
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	f7f5 fd3e 	bl	8000b2c <__aeabi_dcmpun>
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	b148      	cbz	r0, 800b0ca <pow+0x52>
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	f7f5 fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d17d      	bne.n	800b1be <pow+0x146>
 800b0c2:	ec45 4b10 	vmov	d0, r4, r5
 800b0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	f7f5 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0d2:	b1e0      	cbz	r0, 800b10e <pow+0x96>
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d16c      	bne.n	800b1be <pow+0x146>
 800b0e4:	ec47 6b10 	vmov	d0, r6, r7
 800b0e8:	f000 fe55 	bl	800bd96 <finite>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d0e8      	beq.n	800b0c2 <pow+0x4a>
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	f7f5 fcf0 	bl	8000adc <__aeabi_dcmplt>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d0e0      	beq.n	800b0c2 <pow+0x4a>
 800b100:	f000 ff70 	bl	800bfe4 <__errno>
 800b104:	2321      	movs	r3, #33	; 0x21
 800b106:	6003      	str	r3, [r0, #0]
 800b108:	2400      	movs	r4, #0
 800b10a:	4d2f      	ldr	r5, [pc, #188]	; (800b1c8 <pow+0x150>)
 800b10c:	e7d9      	b.n	800b0c2 <pow+0x4a>
 800b10e:	ec45 4b10 	vmov	d0, r4, r5
 800b112:	f000 fe40 	bl	800bd96 <finite>
 800b116:	bbb8      	cbnz	r0, 800b188 <pow+0x110>
 800b118:	ec49 8b10 	vmov	d0, r8, r9
 800b11c:	f000 fe3b 	bl	800bd96 <finite>
 800b120:	b390      	cbz	r0, 800b188 <pow+0x110>
 800b122:	ec47 6b10 	vmov	d0, r6, r7
 800b126:	f000 fe36 	bl	800bd96 <finite>
 800b12a:	b368      	cbz	r0, 800b188 <pow+0x110>
 800b12c:	4622      	mov	r2, r4
 800b12e:	462b      	mov	r3, r5
 800b130:	4620      	mov	r0, r4
 800b132:	4629      	mov	r1, r5
 800b134:	f7f5 fcfa 	bl	8000b2c <__aeabi_dcmpun>
 800b138:	b160      	cbz	r0, 800b154 <pow+0xdc>
 800b13a:	f000 ff53 	bl	800bfe4 <__errno>
 800b13e:	2321      	movs	r3, #33	; 0x21
 800b140:	6003      	str	r3, [r0, #0]
 800b142:	2200      	movs	r2, #0
 800b144:	2300      	movs	r3, #0
 800b146:	4610      	mov	r0, r2
 800b148:	4619      	mov	r1, r3
 800b14a:	f7f5 fb7f 	bl	800084c <__aeabi_ddiv>
 800b14e:	4604      	mov	r4, r0
 800b150:	460d      	mov	r5, r1
 800b152:	e7b6      	b.n	800b0c2 <pow+0x4a>
 800b154:	f000 ff46 	bl	800bfe4 <__errno>
 800b158:	2322      	movs	r3, #34	; 0x22
 800b15a:	6003      	str	r3, [r0, #0]
 800b15c:	2200      	movs	r2, #0
 800b15e:	2300      	movs	r3, #0
 800b160:	4640      	mov	r0, r8
 800b162:	4649      	mov	r1, r9
 800b164:	f7f5 fcba 	bl	8000adc <__aeabi_dcmplt>
 800b168:	2400      	movs	r4, #0
 800b16a:	b158      	cbz	r0, 800b184 <pow+0x10c>
 800b16c:	ec47 6b10 	vmov	d0, r6, r7
 800b170:	f000 fe26 	bl	800bdc0 <rint>
 800b174:	4632      	mov	r2, r6
 800b176:	ec51 0b10 	vmov	r0, r1, d0
 800b17a:	463b      	mov	r3, r7
 800b17c:	f7f5 fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b180:	2800      	cmp	r0, #0
 800b182:	d0c2      	beq.n	800b10a <pow+0x92>
 800b184:	4d11      	ldr	r5, [pc, #68]	; (800b1cc <pow+0x154>)
 800b186:	e79c      	b.n	800b0c2 <pow+0x4a>
 800b188:	2200      	movs	r2, #0
 800b18a:	2300      	movs	r3, #0
 800b18c:	4620      	mov	r0, r4
 800b18e:	4629      	mov	r1, r5
 800b190:	f7f5 fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b194:	2800      	cmp	r0, #0
 800b196:	d094      	beq.n	800b0c2 <pow+0x4a>
 800b198:	ec49 8b10 	vmov	d0, r8, r9
 800b19c:	f000 fdfb 	bl	800bd96 <finite>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d08e      	beq.n	800b0c2 <pow+0x4a>
 800b1a4:	ec47 6b10 	vmov	d0, r6, r7
 800b1a8:	f000 fdf5 	bl	800bd96 <finite>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d088      	beq.n	800b0c2 <pow+0x4a>
 800b1b0:	f000 ff18 	bl	800bfe4 <__errno>
 800b1b4:	2322      	movs	r3, #34	; 0x22
 800b1b6:	6003      	str	r3, [r0, #0]
 800b1b8:	2400      	movs	r4, #0
 800b1ba:	2500      	movs	r5, #0
 800b1bc:	e781      	b.n	800b0c2 <pow+0x4a>
 800b1be:	4d04      	ldr	r5, [pc, #16]	; (800b1d0 <pow+0x158>)
 800b1c0:	2400      	movs	r4, #0
 800b1c2:	e77e      	b.n	800b0c2 <pow+0x4a>
 800b1c4:	20000192 	.word	0x20000192
 800b1c8:	fff00000 	.word	0xfff00000
 800b1cc:	7ff00000 	.word	0x7ff00000
 800b1d0:	3ff00000 	.word	0x3ff00000
 800b1d4:	00000000 	.word	0x00000000

0800b1d8 <__ieee754_pow>:
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	ed2d 8b06 	vpush	{d8-d10}
 800b1e0:	b08d      	sub	sp, #52	; 0x34
 800b1e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b1e6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b1ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b1ee:	ea56 0100 	orrs.w	r1, r6, r0
 800b1f2:	ec53 2b10 	vmov	r2, r3, d0
 800b1f6:	f000 84d1 	beq.w	800bb9c <__ieee754_pow+0x9c4>
 800b1fa:	497f      	ldr	r1, [pc, #508]	; (800b3f8 <__ieee754_pow+0x220>)
 800b1fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b200:	428c      	cmp	r4, r1
 800b202:	ee10 8a10 	vmov	r8, s0
 800b206:	4699      	mov	r9, r3
 800b208:	dc09      	bgt.n	800b21e <__ieee754_pow+0x46>
 800b20a:	d103      	bne.n	800b214 <__ieee754_pow+0x3c>
 800b20c:	b97a      	cbnz	r2, 800b22e <__ieee754_pow+0x56>
 800b20e:	42a6      	cmp	r6, r4
 800b210:	dd02      	ble.n	800b218 <__ieee754_pow+0x40>
 800b212:	e00c      	b.n	800b22e <__ieee754_pow+0x56>
 800b214:	428e      	cmp	r6, r1
 800b216:	dc02      	bgt.n	800b21e <__ieee754_pow+0x46>
 800b218:	428e      	cmp	r6, r1
 800b21a:	d110      	bne.n	800b23e <__ieee754_pow+0x66>
 800b21c:	b178      	cbz	r0, 800b23e <__ieee754_pow+0x66>
 800b21e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b222:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b226:	ea54 0308 	orrs.w	r3, r4, r8
 800b22a:	f000 84b7 	beq.w	800bb9c <__ieee754_pow+0x9c4>
 800b22e:	4873      	ldr	r0, [pc, #460]	; (800b3fc <__ieee754_pow+0x224>)
 800b230:	b00d      	add	sp, #52	; 0x34
 800b232:	ecbd 8b06 	vpop	{d8-d10}
 800b236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23a:	f000 bdb9 	b.w	800bdb0 <nan>
 800b23e:	f1b9 0f00 	cmp.w	r9, #0
 800b242:	da36      	bge.n	800b2b2 <__ieee754_pow+0xda>
 800b244:	496e      	ldr	r1, [pc, #440]	; (800b400 <__ieee754_pow+0x228>)
 800b246:	428e      	cmp	r6, r1
 800b248:	dc51      	bgt.n	800b2ee <__ieee754_pow+0x116>
 800b24a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b24e:	428e      	cmp	r6, r1
 800b250:	f340 84af 	ble.w	800bbb2 <__ieee754_pow+0x9da>
 800b254:	1531      	asrs	r1, r6, #20
 800b256:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b25a:	2914      	cmp	r1, #20
 800b25c:	dd0f      	ble.n	800b27e <__ieee754_pow+0xa6>
 800b25e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b262:	fa20 fc01 	lsr.w	ip, r0, r1
 800b266:	fa0c f101 	lsl.w	r1, ip, r1
 800b26a:	4281      	cmp	r1, r0
 800b26c:	f040 84a1 	bne.w	800bbb2 <__ieee754_pow+0x9da>
 800b270:	f00c 0c01 	and.w	ip, ip, #1
 800b274:	f1cc 0102 	rsb	r1, ip, #2
 800b278:	9100      	str	r1, [sp, #0]
 800b27a:	b180      	cbz	r0, 800b29e <__ieee754_pow+0xc6>
 800b27c:	e059      	b.n	800b332 <__ieee754_pow+0x15a>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d155      	bne.n	800b32e <__ieee754_pow+0x156>
 800b282:	f1c1 0114 	rsb	r1, r1, #20
 800b286:	fa46 fc01 	asr.w	ip, r6, r1
 800b28a:	fa0c f101 	lsl.w	r1, ip, r1
 800b28e:	42b1      	cmp	r1, r6
 800b290:	f040 848c 	bne.w	800bbac <__ieee754_pow+0x9d4>
 800b294:	f00c 0c01 	and.w	ip, ip, #1
 800b298:	f1cc 0102 	rsb	r1, ip, #2
 800b29c:	9100      	str	r1, [sp, #0]
 800b29e:	4959      	ldr	r1, [pc, #356]	; (800b404 <__ieee754_pow+0x22c>)
 800b2a0:	428e      	cmp	r6, r1
 800b2a2:	d12d      	bne.n	800b300 <__ieee754_pow+0x128>
 800b2a4:	2f00      	cmp	r7, #0
 800b2a6:	da79      	bge.n	800b39c <__ieee754_pow+0x1c4>
 800b2a8:	4956      	ldr	r1, [pc, #344]	; (800b404 <__ieee754_pow+0x22c>)
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	f7f5 face 	bl	800084c <__aeabi_ddiv>
 800b2b0:	e016      	b.n	800b2e0 <__ieee754_pow+0x108>
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	9100      	str	r1, [sp, #0]
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d13b      	bne.n	800b332 <__ieee754_pow+0x15a>
 800b2ba:	494f      	ldr	r1, [pc, #316]	; (800b3f8 <__ieee754_pow+0x220>)
 800b2bc:	428e      	cmp	r6, r1
 800b2be:	d1ee      	bne.n	800b29e <__ieee754_pow+0xc6>
 800b2c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b2c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b2c8:	ea53 0308 	orrs.w	r3, r3, r8
 800b2cc:	f000 8466 	beq.w	800bb9c <__ieee754_pow+0x9c4>
 800b2d0:	4b4d      	ldr	r3, [pc, #308]	; (800b408 <__ieee754_pow+0x230>)
 800b2d2:	429c      	cmp	r4, r3
 800b2d4:	dd0d      	ble.n	800b2f2 <__ieee754_pow+0x11a>
 800b2d6:	2f00      	cmp	r7, #0
 800b2d8:	f280 8464 	bge.w	800bba4 <__ieee754_pow+0x9cc>
 800b2dc:	2000      	movs	r0, #0
 800b2de:	2100      	movs	r1, #0
 800b2e0:	ec41 0b10 	vmov	d0, r0, r1
 800b2e4:	b00d      	add	sp, #52	; 0x34
 800b2e6:	ecbd 8b06 	vpop	{d8-d10}
 800b2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ee:	2102      	movs	r1, #2
 800b2f0:	e7e0      	b.n	800b2b4 <__ieee754_pow+0xdc>
 800b2f2:	2f00      	cmp	r7, #0
 800b2f4:	daf2      	bge.n	800b2dc <__ieee754_pow+0x104>
 800b2f6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b2fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b2fe:	e7ef      	b.n	800b2e0 <__ieee754_pow+0x108>
 800b300:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b304:	d104      	bne.n	800b310 <__ieee754_pow+0x138>
 800b306:	4610      	mov	r0, r2
 800b308:	4619      	mov	r1, r3
 800b30a:	f7f5 f975 	bl	80005f8 <__aeabi_dmul>
 800b30e:	e7e7      	b.n	800b2e0 <__ieee754_pow+0x108>
 800b310:	493e      	ldr	r1, [pc, #248]	; (800b40c <__ieee754_pow+0x234>)
 800b312:	428f      	cmp	r7, r1
 800b314:	d10d      	bne.n	800b332 <__ieee754_pow+0x15a>
 800b316:	f1b9 0f00 	cmp.w	r9, #0
 800b31a:	db0a      	blt.n	800b332 <__ieee754_pow+0x15a>
 800b31c:	ec43 2b10 	vmov	d0, r2, r3
 800b320:	b00d      	add	sp, #52	; 0x34
 800b322:	ecbd 8b06 	vpop	{d8-d10}
 800b326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32a:	f000 bc77 	b.w	800bc1c <__ieee754_sqrt>
 800b32e:	2100      	movs	r1, #0
 800b330:	9100      	str	r1, [sp, #0]
 800b332:	ec43 2b10 	vmov	d0, r2, r3
 800b336:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b33a:	f000 fd23 	bl	800bd84 <fabs>
 800b33e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b342:	ec51 0b10 	vmov	r0, r1, d0
 800b346:	f1b8 0f00 	cmp.w	r8, #0
 800b34a:	d12a      	bne.n	800b3a2 <__ieee754_pow+0x1ca>
 800b34c:	b12c      	cbz	r4, 800b35a <__ieee754_pow+0x182>
 800b34e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b404 <__ieee754_pow+0x22c>
 800b352:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b356:	45e6      	cmp	lr, ip
 800b358:	d123      	bne.n	800b3a2 <__ieee754_pow+0x1ca>
 800b35a:	2f00      	cmp	r7, #0
 800b35c:	da05      	bge.n	800b36a <__ieee754_pow+0x192>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	2000      	movs	r0, #0
 800b364:	4927      	ldr	r1, [pc, #156]	; (800b404 <__ieee754_pow+0x22c>)
 800b366:	f7f5 fa71 	bl	800084c <__aeabi_ddiv>
 800b36a:	f1b9 0f00 	cmp.w	r9, #0
 800b36e:	dab7      	bge.n	800b2e0 <__ieee754_pow+0x108>
 800b370:	9b00      	ldr	r3, [sp, #0]
 800b372:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b376:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b37a:	4323      	orrs	r3, r4
 800b37c:	d108      	bne.n	800b390 <__ieee754_pow+0x1b8>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4610      	mov	r0, r2
 800b384:	4619      	mov	r1, r3
 800b386:	f7f4 ff7f 	bl	8000288 <__aeabi_dsub>
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	e78d      	b.n	800b2ac <__ieee754_pow+0xd4>
 800b390:	9b00      	ldr	r3, [sp, #0]
 800b392:	2b01      	cmp	r3, #1
 800b394:	d1a4      	bne.n	800b2e0 <__ieee754_pow+0x108>
 800b396:	4602      	mov	r2, r0
 800b398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b39c:	4610      	mov	r0, r2
 800b39e:	4619      	mov	r1, r3
 800b3a0:	e79e      	b.n	800b2e0 <__ieee754_pow+0x108>
 800b3a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b3a6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800b3aa:	950a      	str	r5, [sp, #40]	; 0x28
 800b3ac:	9d00      	ldr	r5, [sp, #0]
 800b3ae:	46ac      	mov	ip, r5
 800b3b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b3b2:	ea5c 0505 	orrs.w	r5, ip, r5
 800b3b6:	d0e4      	beq.n	800b382 <__ieee754_pow+0x1aa>
 800b3b8:	4b15      	ldr	r3, [pc, #84]	; (800b410 <__ieee754_pow+0x238>)
 800b3ba:	429e      	cmp	r6, r3
 800b3bc:	f340 80fc 	ble.w	800b5b8 <__ieee754_pow+0x3e0>
 800b3c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b3c4:	429e      	cmp	r6, r3
 800b3c6:	4b10      	ldr	r3, [pc, #64]	; (800b408 <__ieee754_pow+0x230>)
 800b3c8:	dd07      	ble.n	800b3da <__ieee754_pow+0x202>
 800b3ca:	429c      	cmp	r4, r3
 800b3cc:	dc0a      	bgt.n	800b3e4 <__ieee754_pow+0x20c>
 800b3ce:	2f00      	cmp	r7, #0
 800b3d0:	da84      	bge.n	800b2dc <__ieee754_pow+0x104>
 800b3d2:	a307      	add	r3, pc, #28	; (adr r3, 800b3f0 <__ieee754_pow+0x218>)
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	e795      	b.n	800b306 <__ieee754_pow+0x12e>
 800b3da:	429c      	cmp	r4, r3
 800b3dc:	dbf7      	blt.n	800b3ce <__ieee754_pow+0x1f6>
 800b3de:	4b09      	ldr	r3, [pc, #36]	; (800b404 <__ieee754_pow+0x22c>)
 800b3e0:	429c      	cmp	r4, r3
 800b3e2:	dd17      	ble.n	800b414 <__ieee754_pow+0x23c>
 800b3e4:	2f00      	cmp	r7, #0
 800b3e6:	dcf4      	bgt.n	800b3d2 <__ieee754_pow+0x1fa>
 800b3e8:	e778      	b.n	800b2dc <__ieee754_pow+0x104>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	8800759c 	.word	0x8800759c
 800b3f4:	7e37e43c 	.word	0x7e37e43c
 800b3f8:	7ff00000 	.word	0x7ff00000
 800b3fc:	0800f0d0 	.word	0x0800f0d0
 800b400:	433fffff 	.word	0x433fffff
 800b404:	3ff00000 	.word	0x3ff00000
 800b408:	3fefffff 	.word	0x3fefffff
 800b40c:	3fe00000 	.word	0x3fe00000
 800b410:	41e00000 	.word	0x41e00000
 800b414:	4b64      	ldr	r3, [pc, #400]	; (800b5a8 <__ieee754_pow+0x3d0>)
 800b416:	2200      	movs	r2, #0
 800b418:	f7f4 ff36 	bl	8000288 <__aeabi_dsub>
 800b41c:	a356      	add	r3, pc, #344	; (adr r3, 800b578 <__ieee754_pow+0x3a0>)
 800b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b422:	4604      	mov	r4, r0
 800b424:	460d      	mov	r5, r1
 800b426:	f7f5 f8e7 	bl	80005f8 <__aeabi_dmul>
 800b42a:	a355      	add	r3, pc, #340	; (adr r3, 800b580 <__ieee754_pow+0x3a8>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	4606      	mov	r6, r0
 800b432:	460f      	mov	r7, r1
 800b434:	4620      	mov	r0, r4
 800b436:	4629      	mov	r1, r5
 800b438:	f7f5 f8de 	bl	80005f8 <__aeabi_dmul>
 800b43c:	4b5b      	ldr	r3, [pc, #364]	; (800b5ac <__ieee754_pow+0x3d4>)
 800b43e:	4682      	mov	sl, r0
 800b440:	468b      	mov	fp, r1
 800b442:	2200      	movs	r2, #0
 800b444:	4620      	mov	r0, r4
 800b446:	4629      	mov	r1, r5
 800b448:	f7f5 f8d6 	bl	80005f8 <__aeabi_dmul>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	a14d      	add	r1, pc, #308	; (adr r1, 800b588 <__ieee754_pow+0x3b0>)
 800b452:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b456:	f7f4 ff17 	bl	8000288 <__aeabi_dsub>
 800b45a:	4622      	mov	r2, r4
 800b45c:	462b      	mov	r3, r5
 800b45e:	f7f5 f8cb 	bl	80005f8 <__aeabi_dmul>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	2000      	movs	r0, #0
 800b468:	4951      	ldr	r1, [pc, #324]	; (800b5b0 <__ieee754_pow+0x3d8>)
 800b46a:	f7f4 ff0d 	bl	8000288 <__aeabi_dsub>
 800b46e:	4622      	mov	r2, r4
 800b470:	4680      	mov	r8, r0
 800b472:	4689      	mov	r9, r1
 800b474:	462b      	mov	r3, r5
 800b476:	4620      	mov	r0, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	f7f5 f8bd 	bl	80005f8 <__aeabi_dmul>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4640      	mov	r0, r8
 800b484:	4649      	mov	r1, r9
 800b486:	f7f5 f8b7 	bl	80005f8 <__aeabi_dmul>
 800b48a:	a341      	add	r3, pc, #260	; (adr r3, 800b590 <__ieee754_pow+0x3b8>)
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	f7f5 f8b2 	bl	80005f8 <__aeabi_dmul>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	4650      	mov	r0, sl
 800b49a:	4659      	mov	r1, fp
 800b49c:	f7f4 fef4 	bl	8000288 <__aeabi_dsub>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	4689      	mov	r9, r1
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	4639      	mov	r1, r7
 800b4ac:	f7f4 feee 	bl	800028c <__adddf3>
 800b4b0:	2400      	movs	r4, #0
 800b4b2:	4632      	mov	r2, r6
 800b4b4:	463b      	mov	r3, r7
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	f7f4 fee5 	bl	8000288 <__aeabi_dsub>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4640      	mov	r0, r8
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	f7f4 fedf 	bl	8000288 <__aeabi_dsub>
 800b4ca:	9b00      	ldr	r3, [sp, #0]
 800b4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	4682      	mov	sl, r0
 800b4d4:	468b      	mov	fp, r1
 800b4d6:	f040 81f1 	bne.w	800b8bc <__ieee754_pow+0x6e4>
 800b4da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b598 <__ieee754_pow+0x3c0>
 800b4de:	eeb0 8a47 	vmov.f32	s16, s14
 800b4e2:	eef0 8a67 	vmov.f32	s17, s15
 800b4e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b4ea:	2600      	movs	r6, #0
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	463b      	mov	r3, r7
 800b4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4f4:	f7f4 fec8 	bl	8000288 <__aeabi_dsub>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	f7f5 f87c 	bl	80005f8 <__aeabi_dmul>
 800b500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b504:	4680      	mov	r8, r0
 800b506:	4689      	mov	r9, r1
 800b508:	4650      	mov	r0, sl
 800b50a:	4659      	mov	r1, fp
 800b50c:	f7f5 f874 	bl	80005f8 <__aeabi_dmul>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4640      	mov	r0, r8
 800b516:	4649      	mov	r1, r9
 800b518:	f7f4 feb8 	bl	800028c <__adddf3>
 800b51c:	4632      	mov	r2, r6
 800b51e:	463b      	mov	r3, r7
 800b520:	4680      	mov	r8, r0
 800b522:	4689      	mov	r9, r1
 800b524:	4620      	mov	r0, r4
 800b526:	4629      	mov	r1, r5
 800b528:	f7f5 f866 	bl	80005f8 <__aeabi_dmul>
 800b52c:	460b      	mov	r3, r1
 800b52e:	4604      	mov	r4, r0
 800b530:	460d      	mov	r5, r1
 800b532:	4602      	mov	r2, r0
 800b534:	4649      	mov	r1, r9
 800b536:	4640      	mov	r0, r8
 800b538:	f7f4 fea8 	bl	800028c <__adddf3>
 800b53c:	4b1d      	ldr	r3, [pc, #116]	; (800b5b4 <__ieee754_pow+0x3dc>)
 800b53e:	4299      	cmp	r1, r3
 800b540:	ec45 4b19 	vmov	d9, r4, r5
 800b544:	4606      	mov	r6, r0
 800b546:	460f      	mov	r7, r1
 800b548:	468b      	mov	fp, r1
 800b54a:	f340 82fe 	ble.w	800bb4a <__ieee754_pow+0x972>
 800b54e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b552:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b556:	4303      	orrs	r3, r0
 800b558:	f000 81f0 	beq.w	800b93c <__ieee754_pow+0x764>
 800b55c:	a310      	add	r3, pc, #64	; (adr r3, 800b5a0 <__ieee754_pow+0x3c8>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	ec51 0b18 	vmov	r0, r1, d8
 800b566:	f7f5 f847 	bl	80005f8 <__aeabi_dmul>
 800b56a:	a30d      	add	r3, pc, #52	; (adr r3, 800b5a0 <__ieee754_pow+0x3c8>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	e6cb      	b.n	800b30a <__ieee754_pow+0x132>
 800b572:	bf00      	nop
 800b574:	f3af 8000 	nop.w
 800b578:	60000000 	.word	0x60000000
 800b57c:	3ff71547 	.word	0x3ff71547
 800b580:	f85ddf44 	.word	0xf85ddf44
 800b584:	3e54ae0b 	.word	0x3e54ae0b
 800b588:	55555555 	.word	0x55555555
 800b58c:	3fd55555 	.word	0x3fd55555
 800b590:	652b82fe 	.word	0x652b82fe
 800b594:	3ff71547 	.word	0x3ff71547
 800b598:	00000000 	.word	0x00000000
 800b59c:	bff00000 	.word	0xbff00000
 800b5a0:	8800759c 	.word	0x8800759c
 800b5a4:	7e37e43c 	.word	0x7e37e43c
 800b5a8:	3ff00000 	.word	0x3ff00000
 800b5ac:	3fd00000 	.word	0x3fd00000
 800b5b0:	3fe00000 	.word	0x3fe00000
 800b5b4:	408fffff 	.word	0x408fffff
 800b5b8:	4bd7      	ldr	r3, [pc, #860]	; (800b918 <__ieee754_pow+0x740>)
 800b5ba:	ea03 0309 	and.w	r3, r3, r9
 800b5be:	2200      	movs	r2, #0
 800b5c0:	b92b      	cbnz	r3, 800b5ce <__ieee754_pow+0x3f6>
 800b5c2:	4bd6      	ldr	r3, [pc, #856]	; (800b91c <__ieee754_pow+0x744>)
 800b5c4:	f7f5 f818 	bl	80005f8 <__aeabi_dmul>
 800b5c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	1523      	asrs	r3, r4, #20
 800b5d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5d4:	4413      	add	r3, r2
 800b5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d8:	4bd1      	ldr	r3, [pc, #836]	; (800b920 <__ieee754_pow+0x748>)
 800b5da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b5de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b5e2:	429c      	cmp	r4, r3
 800b5e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b5e8:	dd08      	ble.n	800b5fc <__ieee754_pow+0x424>
 800b5ea:	4bce      	ldr	r3, [pc, #824]	; (800b924 <__ieee754_pow+0x74c>)
 800b5ec:	429c      	cmp	r4, r3
 800b5ee:	f340 8163 	ble.w	800b8b8 <__ieee754_pow+0x6e0>
 800b5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b5fc:	2400      	movs	r4, #0
 800b5fe:	00e3      	lsls	r3, r4, #3
 800b600:	930b      	str	r3, [sp, #44]	; 0x2c
 800b602:	4bc9      	ldr	r3, [pc, #804]	; (800b928 <__ieee754_pow+0x750>)
 800b604:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b608:	ed93 7b00 	vldr	d7, [r3]
 800b60c:	4629      	mov	r1, r5
 800b60e:	ec53 2b17 	vmov	r2, r3, d7
 800b612:	eeb0 8a47 	vmov.f32	s16, s14
 800b616:	eef0 8a67 	vmov.f32	s17, s15
 800b61a:	4682      	mov	sl, r0
 800b61c:	f7f4 fe34 	bl	8000288 <__aeabi_dsub>
 800b620:	4652      	mov	r2, sl
 800b622:	4606      	mov	r6, r0
 800b624:	460f      	mov	r7, r1
 800b626:	462b      	mov	r3, r5
 800b628:	ec51 0b18 	vmov	r0, r1, d8
 800b62c:	f7f4 fe2e 	bl	800028c <__adddf3>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	2000      	movs	r0, #0
 800b636:	49bd      	ldr	r1, [pc, #756]	; (800b92c <__ieee754_pow+0x754>)
 800b638:	f7f5 f908 	bl	800084c <__aeabi_ddiv>
 800b63c:	ec41 0b19 	vmov	d9, r0, r1
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	4630      	mov	r0, r6
 800b646:	4639      	mov	r1, r7
 800b648:	f7f4 ffd6 	bl	80005f8 <__aeabi_dmul>
 800b64c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b650:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b654:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b658:	2300      	movs	r3, #0
 800b65a:	9304      	str	r3, [sp, #16]
 800b65c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b660:	46ab      	mov	fp, r5
 800b662:	106d      	asrs	r5, r5, #1
 800b664:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b668:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b66c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b670:	2200      	movs	r2, #0
 800b672:	4640      	mov	r0, r8
 800b674:	4649      	mov	r1, r9
 800b676:	4614      	mov	r4, r2
 800b678:	461d      	mov	r5, r3
 800b67a:	f7f4 ffbd 	bl	80005f8 <__aeabi_dmul>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	f7f4 fdff 	bl	8000288 <__aeabi_dsub>
 800b68a:	ec53 2b18 	vmov	r2, r3, d8
 800b68e:	4606      	mov	r6, r0
 800b690:	460f      	mov	r7, r1
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 fdf7 	bl	8000288 <__aeabi_dsub>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4650      	mov	r0, sl
 800b6a0:	4659      	mov	r1, fp
 800b6a2:	f7f4 fdf1 	bl	8000288 <__aeabi_dsub>
 800b6a6:	4642      	mov	r2, r8
 800b6a8:	464b      	mov	r3, r9
 800b6aa:	f7f4 ffa5 	bl	80005f8 <__aeabi_dmul>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	f7f4 fde7 	bl	8000288 <__aeabi_dsub>
 800b6ba:	ec53 2b19 	vmov	r2, r3, d9
 800b6be:	f7f4 ff9b 	bl	80005f8 <__aeabi_dmul>
 800b6c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6c6:	ec41 0b18 	vmov	d8, r0, r1
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f7f4 ff93 	bl	80005f8 <__aeabi_dmul>
 800b6d2:	a37d      	add	r3, pc, #500	; (adr r3, 800b8c8 <__ieee754_pow+0x6f0>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	4604      	mov	r4, r0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	f7f4 ff8c 	bl	80005f8 <__aeabi_dmul>
 800b6e0:	a37b      	add	r3, pc, #492	; (adr r3, 800b8d0 <__ieee754_pow+0x6f8>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fdd1 	bl	800028c <__adddf3>
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	f7f4 ff83 	bl	80005f8 <__aeabi_dmul>
 800b6f2:	a379      	add	r3, pc, #484	; (adr r3, 800b8d8 <__ieee754_pow+0x700>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f7f4 fdc8 	bl	800028c <__adddf3>
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	462b      	mov	r3, r5
 800b700:	f7f4 ff7a 	bl	80005f8 <__aeabi_dmul>
 800b704:	a376      	add	r3, pc, #472	; (adr r3, 800b8e0 <__ieee754_pow+0x708>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	f7f4 fdbf 	bl	800028c <__adddf3>
 800b70e:	4622      	mov	r2, r4
 800b710:	462b      	mov	r3, r5
 800b712:	f7f4 ff71 	bl	80005f8 <__aeabi_dmul>
 800b716:	a374      	add	r3, pc, #464	; (adr r3, 800b8e8 <__ieee754_pow+0x710>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f7f4 fdb6 	bl	800028c <__adddf3>
 800b720:	4622      	mov	r2, r4
 800b722:	462b      	mov	r3, r5
 800b724:	f7f4 ff68 	bl	80005f8 <__aeabi_dmul>
 800b728:	a371      	add	r3, pc, #452	; (adr r3, 800b8f0 <__ieee754_pow+0x718>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 fdad 	bl	800028c <__adddf3>
 800b732:	4622      	mov	r2, r4
 800b734:	4606      	mov	r6, r0
 800b736:	460f      	mov	r7, r1
 800b738:	462b      	mov	r3, r5
 800b73a:	4620      	mov	r0, r4
 800b73c:	4629      	mov	r1, r5
 800b73e:	f7f4 ff5b 	bl	80005f8 <__aeabi_dmul>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	f7f4 ff55 	bl	80005f8 <__aeabi_dmul>
 800b74e:	4642      	mov	r2, r8
 800b750:	4604      	mov	r4, r0
 800b752:	460d      	mov	r5, r1
 800b754:	464b      	mov	r3, r9
 800b756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b75a:	f7f4 fd97 	bl	800028c <__adddf3>
 800b75e:	ec53 2b18 	vmov	r2, r3, d8
 800b762:	f7f4 ff49 	bl	80005f8 <__aeabi_dmul>
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	f7f4 fd8f 	bl	800028c <__adddf3>
 800b76e:	4642      	mov	r2, r8
 800b770:	4682      	mov	sl, r0
 800b772:	468b      	mov	fp, r1
 800b774:	464b      	mov	r3, r9
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f4 ff3d 	bl	80005f8 <__aeabi_dmul>
 800b77e:	4b6c      	ldr	r3, [pc, #432]	; (800b930 <__ieee754_pow+0x758>)
 800b780:	2200      	movs	r2, #0
 800b782:	4606      	mov	r6, r0
 800b784:	460f      	mov	r7, r1
 800b786:	f7f4 fd81 	bl	800028c <__adddf3>
 800b78a:	4652      	mov	r2, sl
 800b78c:	465b      	mov	r3, fp
 800b78e:	f7f4 fd7d 	bl	800028c <__adddf3>
 800b792:	9c04      	ldr	r4, [sp, #16]
 800b794:	460d      	mov	r5, r1
 800b796:	4622      	mov	r2, r4
 800b798:	460b      	mov	r3, r1
 800b79a:	4640      	mov	r0, r8
 800b79c:	4649      	mov	r1, r9
 800b79e:	f7f4 ff2b 	bl	80005f8 <__aeabi_dmul>
 800b7a2:	4b63      	ldr	r3, [pc, #396]	; (800b930 <__ieee754_pow+0x758>)
 800b7a4:	4680      	mov	r8, r0
 800b7a6:	4689      	mov	r9, r1
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	f7f4 fd6b 	bl	8000288 <__aeabi_dsub>
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	f7f4 fd67 	bl	8000288 <__aeabi_dsub>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4650      	mov	r0, sl
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	f7f4 fd61 	bl	8000288 <__aeabi_dsub>
 800b7c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7ca:	f7f4 ff15 	bl	80005f8 <__aeabi_dmul>
 800b7ce:	4622      	mov	r2, r4
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	460f      	mov	r7, r1
 800b7d4:	462b      	mov	r3, r5
 800b7d6:	ec51 0b18 	vmov	r0, r1, d8
 800b7da:	f7f4 ff0d 	bl	80005f8 <__aeabi_dmul>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f4 fd51 	bl	800028c <__adddf3>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	460f      	mov	r7, r1
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	4649      	mov	r1, r9
 800b7f6:	f7f4 fd49 	bl	800028c <__adddf3>
 800b7fa:	9c04      	ldr	r4, [sp, #16]
 800b7fc:	a33e      	add	r3, pc, #248	; (adr r3, 800b8f8 <__ieee754_pow+0x720>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	4620      	mov	r0, r4
 800b804:	460d      	mov	r5, r1
 800b806:	f7f4 fef7 	bl	80005f8 <__aeabi_dmul>
 800b80a:	4642      	mov	r2, r8
 800b80c:	ec41 0b18 	vmov	d8, r0, r1
 800b810:	464b      	mov	r3, r9
 800b812:	4620      	mov	r0, r4
 800b814:	4629      	mov	r1, r5
 800b816:	f7f4 fd37 	bl	8000288 <__aeabi_dsub>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	4630      	mov	r0, r6
 800b820:	4639      	mov	r1, r7
 800b822:	f7f4 fd31 	bl	8000288 <__aeabi_dsub>
 800b826:	a336      	add	r3, pc, #216	; (adr r3, 800b900 <__ieee754_pow+0x728>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f7f4 fee4 	bl	80005f8 <__aeabi_dmul>
 800b830:	a335      	add	r3, pc, #212	; (adr r3, 800b908 <__ieee754_pow+0x730>)
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	4606      	mov	r6, r0
 800b838:	460f      	mov	r7, r1
 800b83a:	4620      	mov	r0, r4
 800b83c:	4629      	mov	r1, r5
 800b83e:	f7f4 fedb 	bl	80005f8 <__aeabi_dmul>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4630      	mov	r0, r6
 800b848:	4639      	mov	r1, r7
 800b84a:	f7f4 fd1f 	bl	800028c <__adddf3>
 800b84e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b850:	4b38      	ldr	r3, [pc, #224]	; (800b934 <__ieee754_pow+0x75c>)
 800b852:	4413      	add	r3, r2
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f7f4 fd18 	bl	800028c <__adddf3>
 800b85c:	4682      	mov	sl, r0
 800b85e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b860:	468b      	mov	fp, r1
 800b862:	f7f4 fe5f 	bl	8000524 <__aeabi_i2d>
 800b866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b868:	4b33      	ldr	r3, [pc, #204]	; (800b938 <__ieee754_pow+0x760>)
 800b86a:	4413      	add	r3, r2
 800b86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b870:	4606      	mov	r6, r0
 800b872:	460f      	mov	r7, r1
 800b874:	4652      	mov	r2, sl
 800b876:	465b      	mov	r3, fp
 800b878:	ec51 0b18 	vmov	r0, r1, d8
 800b87c:	f7f4 fd06 	bl	800028c <__adddf3>
 800b880:	4642      	mov	r2, r8
 800b882:	464b      	mov	r3, r9
 800b884:	f7f4 fd02 	bl	800028c <__adddf3>
 800b888:	4632      	mov	r2, r6
 800b88a:	463b      	mov	r3, r7
 800b88c:	f7f4 fcfe 	bl	800028c <__adddf3>
 800b890:	9c04      	ldr	r4, [sp, #16]
 800b892:	4632      	mov	r2, r6
 800b894:	463b      	mov	r3, r7
 800b896:	4620      	mov	r0, r4
 800b898:	460d      	mov	r5, r1
 800b89a:	f7f4 fcf5 	bl	8000288 <__aeabi_dsub>
 800b89e:	4642      	mov	r2, r8
 800b8a0:	464b      	mov	r3, r9
 800b8a2:	f7f4 fcf1 	bl	8000288 <__aeabi_dsub>
 800b8a6:	ec53 2b18 	vmov	r2, r3, d8
 800b8aa:	f7f4 fced 	bl	8000288 <__aeabi_dsub>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4650      	mov	r0, sl
 800b8b4:	4659      	mov	r1, fp
 800b8b6:	e606      	b.n	800b4c6 <__ieee754_pow+0x2ee>
 800b8b8:	2401      	movs	r4, #1
 800b8ba:	e6a0      	b.n	800b5fe <__ieee754_pow+0x426>
 800b8bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b910 <__ieee754_pow+0x738>
 800b8c0:	e60d      	b.n	800b4de <__ieee754_pow+0x306>
 800b8c2:	bf00      	nop
 800b8c4:	f3af 8000 	nop.w
 800b8c8:	4a454eef 	.word	0x4a454eef
 800b8cc:	3fca7e28 	.word	0x3fca7e28
 800b8d0:	93c9db65 	.word	0x93c9db65
 800b8d4:	3fcd864a 	.word	0x3fcd864a
 800b8d8:	a91d4101 	.word	0xa91d4101
 800b8dc:	3fd17460 	.word	0x3fd17460
 800b8e0:	518f264d 	.word	0x518f264d
 800b8e4:	3fd55555 	.word	0x3fd55555
 800b8e8:	db6fabff 	.word	0xdb6fabff
 800b8ec:	3fdb6db6 	.word	0x3fdb6db6
 800b8f0:	33333303 	.word	0x33333303
 800b8f4:	3fe33333 	.word	0x3fe33333
 800b8f8:	e0000000 	.word	0xe0000000
 800b8fc:	3feec709 	.word	0x3feec709
 800b900:	dc3a03fd 	.word	0xdc3a03fd
 800b904:	3feec709 	.word	0x3feec709
 800b908:	145b01f5 	.word	0x145b01f5
 800b90c:	be3e2fe0 	.word	0xbe3e2fe0
 800b910:	00000000 	.word	0x00000000
 800b914:	3ff00000 	.word	0x3ff00000
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	43400000 	.word	0x43400000
 800b920:	0003988e 	.word	0x0003988e
 800b924:	000bb679 	.word	0x000bb679
 800b928:	0800ee18 	.word	0x0800ee18
 800b92c:	3ff00000 	.word	0x3ff00000
 800b930:	40080000 	.word	0x40080000
 800b934:	0800ee38 	.word	0x0800ee38
 800b938:	0800ee28 	.word	0x0800ee28
 800b93c:	a3b5      	add	r3, pc, #724	; (adr r3, 800bc14 <__ieee754_pow+0xa3c>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	4640      	mov	r0, r8
 800b944:	4649      	mov	r1, r9
 800b946:	f7f4 fca1 	bl	800028c <__adddf3>
 800b94a:	4622      	mov	r2, r4
 800b94c:	ec41 0b1a 	vmov	d10, r0, r1
 800b950:	462b      	mov	r3, r5
 800b952:	4630      	mov	r0, r6
 800b954:	4639      	mov	r1, r7
 800b956:	f7f4 fc97 	bl	8000288 <__aeabi_dsub>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	ec51 0b1a 	vmov	r0, r1, d10
 800b962:	f7f5 f8d9 	bl	8000b18 <__aeabi_dcmpgt>
 800b966:	2800      	cmp	r0, #0
 800b968:	f47f adf8 	bne.w	800b55c <__ieee754_pow+0x384>
 800b96c:	4aa4      	ldr	r2, [pc, #656]	; (800bc00 <__ieee754_pow+0xa28>)
 800b96e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b972:	4293      	cmp	r3, r2
 800b974:	f340 810b 	ble.w	800bb8e <__ieee754_pow+0x9b6>
 800b978:	151b      	asrs	r3, r3, #20
 800b97a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b97e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b982:	fa4a f303 	asr.w	r3, sl, r3
 800b986:	445b      	add	r3, fp
 800b988:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b98c:	4e9d      	ldr	r6, [pc, #628]	; (800bc04 <__ieee754_pow+0xa2c>)
 800b98e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b992:	4116      	asrs	r6, r2
 800b994:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b998:	2000      	movs	r0, #0
 800b99a:	ea23 0106 	bic.w	r1, r3, r6
 800b99e:	f1c2 0214 	rsb	r2, r2, #20
 800b9a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b9a6:	fa4a fa02 	asr.w	sl, sl, r2
 800b9aa:	f1bb 0f00 	cmp.w	fp, #0
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	bfb8      	it	lt
 800b9b8:	f1ca 0a00 	rsblt	sl, sl, #0
 800b9bc:	f7f4 fc64 	bl	8000288 <__aeabi_dsub>
 800b9c0:	ec41 0b19 	vmov	d9, r0, r1
 800b9c4:	4642      	mov	r2, r8
 800b9c6:	464b      	mov	r3, r9
 800b9c8:	ec51 0b19 	vmov	r0, r1, d9
 800b9cc:	f7f4 fc5e 	bl	800028c <__adddf3>
 800b9d0:	2400      	movs	r4, #0
 800b9d2:	a379      	add	r3, pc, #484	; (adr r3, 800bbb8 <__ieee754_pow+0x9e0>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	4620      	mov	r0, r4
 800b9da:	460d      	mov	r5, r1
 800b9dc:	f7f4 fe0c 	bl	80005f8 <__aeabi_dmul>
 800b9e0:	ec53 2b19 	vmov	r2, r3, d9
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	460f      	mov	r7, r1
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	f7f4 fc4c 	bl	8000288 <__aeabi_dsub>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	f7f4 fc46 	bl	8000288 <__aeabi_dsub>
 800b9fc:	a370      	add	r3, pc, #448	; (adr r3, 800bbc0 <__ieee754_pow+0x9e8>)
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	f7f4 fdf9 	bl	80005f8 <__aeabi_dmul>
 800ba06:	a370      	add	r3, pc, #448	; (adr r3, 800bbc8 <__ieee754_pow+0x9f0>)
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	4689      	mov	r9, r1
 800ba10:	4620      	mov	r0, r4
 800ba12:	4629      	mov	r1, r5
 800ba14:	f7f4 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4649      	mov	r1, r9
 800ba20:	f7f4 fc34 	bl	800028c <__adddf3>
 800ba24:	4604      	mov	r4, r0
 800ba26:	460d      	mov	r5, r1
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	4639      	mov	r1, r7
 800ba30:	f7f4 fc2c 	bl	800028c <__adddf3>
 800ba34:	4632      	mov	r2, r6
 800ba36:	463b      	mov	r3, r7
 800ba38:	4680      	mov	r8, r0
 800ba3a:	4689      	mov	r9, r1
 800ba3c:	f7f4 fc24 	bl	8000288 <__aeabi_dsub>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	4620      	mov	r0, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	f7f4 fc1e 	bl	8000288 <__aeabi_dsub>
 800ba4c:	4642      	mov	r2, r8
 800ba4e:	4606      	mov	r6, r0
 800ba50:	460f      	mov	r7, r1
 800ba52:	464b      	mov	r3, r9
 800ba54:	4640      	mov	r0, r8
 800ba56:	4649      	mov	r1, r9
 800ba58:	f7f4 fdce 	bl	80005f8 <__aeabi_dmul>
 800ba5c:	a35c      	add	r3, pc, #368	; (adr r3, 800bbd0 <__ieee754_pow+0x9f8>)
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	4604      	mov	r4, r0
 800ba64:	460d      	mov	r5, r1
 800ba66:	f7f4 fdc7 	bl	80005f8 <__aeabi_dmul>
 800ba6a:	a35b      	add	r3, pc, #364	; (adr r3, 800bbd8 <__ieee754_pow+0xa00>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	f7f4 fc0a 	bl	8000288 <__aeabi_dsub>
 800ba74:	4622      	mov	r2, r4
 800ba76:	462b      	mov	r3, r5
 800ba78:	f7f4 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ba7c:	a358      	add	r3, pc, #352	; (adr r3, 800bbe0 <__ieee754_pow+0xa08>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	f7f4 fc03 	bl	800028c <__adddf3>
 800ba86:	4622      	mov	r2, r4
 800ba88:	462b      	mov	r3, r5
 800ba8a:	f7f4 fdb5 	bl	80005f8 <__aeabi_dmul>
 800ba8e:	a356      	add	r3, pc, #344	; (adr r3, 800bbe8 <__ieee754_pow+0xa10>)
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	f7f4 fbf8 	bl	8000288 <__aeabi_dsub>
 800ba98:	4622      	mov	r2, r4
 800ba9a:	462b      	mov	r3, r5
 800ba9c:	f7f4 fdac 	bl	80005f8 <__aeabi_dmul>
 800baa0:	a353      	add	r3, pc, #332	; (adr r3, 800bbf0 <__ieee754_pow+0xa18>)
 800baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa6:	f7f4 fbf1 	bl	800028c <__adddf3>
 800baaa:	4622      	mov	r2, r4
 800baac:	462b      	mov	r3, r5
 800baae:	f7f4 fda3 	bl	80005f8 <__aeabi_dmul>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	4640      	mov	r0, r8
 800bab8:	4649      	mov	r1, r9
 800baba:	f7f4 fbe5 	bl	8000288 <__aeabi_dsub>
 800babe:	4604      	mov	r4, r0
 800bac0:	460d      	mov	r5, r1
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4640      	mov	r0, r8
 800bac8:	4649      	mov	r1, r9
 800baca:	f7f4 fd95 	bl	80005f8 <__aeabi_dmul>
 800bace:	2200      	movs	r2, #0
 800bad0:	ec41 0b19 	vmov	d9, r0, r1
 800bad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bad8:	4620      	mov	r0, r4
 800bada:	4629      	mov	r1, r5
 800badc:	f7f4 fbd4 	bl	8000288 <__aeabi_dsub>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	ec51 0b19 	vmov	r0, r1, d9
 800bae8:	f7f4 feb0 	bl	800084c <__aeabi_ddiv>
 800baec:	4632      	mov	r2, r6
 800baee:	4604      	mov	r4, r0
 800baf0:	460d      	mov	r5, r1
 800baf2:	463b      	mov	r3, r7
 800baf4:	4640      	mov	r0, r8
 800baf6:	4649      	mov	r1, r9
 800baf8:	f7f4 fd7e 	bl	80005f8 <__aeabi_dmul>
 800bafc:	4632      	mov	r2, r6
 800bafe:	463b      	mov	r3, r7
 800bb00:	f7f4 fbc4 	bl	800028c <__adddf3>
 800bb04:	4602      	mov	r2, r0
 800bb06:	460b      	mov	r3, r1
 800bb08:	4620      	mov	r0, r4
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	f7f4 fbbc 	bl	8000288 <__aeabi_dsub>
 800bb10:	4642      	mov	r2, r8
 800bb12:	464b      	mov	r3, r9
 800bb14:	f7f4 fbb8 	bl	8000288 <__aeabi_dsub>
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	493a      	ldr	r1, [pc, #232]	; (800bc08 <__ieee754_pow+0xa30>)
 800bb1e:	2000      	movs	r0, #0
 800bb20:	f7f4 fbb2 	bl	8000288 <__aeabi_dsub>
 800bb24:	e9cd 0100 	strd	r0, r1, [sp]
 800bb28:	9b01      	ldr	r3, [sp, #4]
 800bb2a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bb2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb32:	da2f      	bge.n	800bb94 <__ieee754_pow+0x9bc>
 800bb34:	4650      	mov	r0, sl
 800bb36:	ed9d 0b00 	vldr	d0, [sp]
 800bb3a:	f000 f9cd 	bl	800bed8 <scalbn>
 800bb3e:	ec51 0b10 	vmov	r0, r1, d0
 800bb42:	ec53 2b18 	vmov	r2, r3, d8
 800bb46:	f7ff bbe0 	b.w	800b30a <__ieee754_pow+0x132>
 800bb4a:	4b30      	ldr	r3, [pc, #192]	; (800bc0c <__ieee754_pow+0xa34>)
 800bb4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bb50:	429e      	cmp	r6, r3
 800bb52:	f77f af0b 	ble.w	800b96c <__ieee754_pow+0x794>
 800bb56:	4b2e      	ldr	r3, [pc, #184]	; (800bc10 <__ieee754_pow+0xa38>)
 800bb58:	440b      	add	r3, r1
 800bb5a:	4303      	orrs	r3, r0
 800bb5c:	d00b      	beq.n	800bb76 <__ieee754_pow+0x99e>
 800bb5e:	a326      	add	r3, pc, #152	; (adr r3, 800bbf8 <__ieee754_pow+0xa20>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	ec51 0b18 	vmov	r0, r1, d8
 800bb68:	f7f4 fd46 	bl	80005f8 <__aeabi_dmul>
 800bb6c:	a322      	add	r3, pc, #136	; (adr r3, 800bbf8 <__ieee754_pow+0xa20>)
 800bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb72:	f7ff bbca 	b.w	800b30a <__ieee754_pow+0x132>
 800bb76:	4622      	mov	r2, r4
 800bb78:	462b      	mov	r3, r5
 800bb7a:	f7f4 fb85 	bl	8000288 <__aeabi_dsub>
 800bb7e:	4642      	mov	r2, r8
 800bb80:	464b      	mov	r3, r9
 800bb82:	f7f4 ffbf 	bl	8000b04 <__aeabi_dcmpge>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	f43f aef0 	beq.w	800b96c <__ieee754_pow+0x794>
 800bb8c:	e7e7      	b.n	800bb5e <__ieee754_pow+0x986>
 800bb8e:	f04f 0a00 	mov.w	sl, #0
 800bb92:	e717      	b.n	800b9c4 <__ieee754_pow+0x7ec>
 800bb94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	e7d2      	b.n	800bb42 <__ieee754_pow+0x96a>
 800bb9c:	491a      	ldr	r1, [pc, #104]	; (800bc08 <__ieee754_pow+0xa30>)
 800bb9e:	2000      	movs	r0, #0
 800bba0:	f7ff bb9e 	b.w	800b2e0 <__ieee754_pow+0x108>
 800bba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bba8:	f7ff bb9a 	b.w	800b2e0 <__ieee754_pow+0x108>
 800bbac:	9000      	str	r0, [sp, #0]
 800bbae:	f7ff bb76 	b.w	800b29e <__ieee754_pow+0xc6>
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	f7ff bb60 	b.w	800b278 <__ieee754_pow+0xa0>
 800bbb8:	00000000 	.word	0x00000000
 800bbbc:	3fe62e43 	.word	0x3fe62e43
 800bbc0:	fefa39ef 	.word	0xfefa39ef
 800bbc4:	3fe62e42 	.word	0x3fe62e42
 800bbc8:	0ca86c39 	.word	0x0ca86c39
 800bbcc:	be205c61 	.word	0xbe205c61
 800bbd0:	72bea4d0 	.word	0x72bea4d0
 800bbd4:	3e663769 	.word	0x3e663769
 800bbd8:	c5d26bf1 	.word	0xc5d26bf1
 800bbdc:	3ebbbd41 	.word	0x3ebbbd41
 800bbe0:	af25de2c 	.word	0xaf25de2c
 800bbe4:	3f11566a 	.word	0x3f11566a
 800bbe8:	16bebd93 	.word	0x16bebd93
 800bbec:	3f66c16c 	.word	0x3f66c16c
 800bbf0:	5555553e 	.word	0x5555553e
 800bbf4:	3fc55555 	.word	0x3fc55555
 800bbf8:	c2f8f359 	.word	0xc2f8f359
 800bbfc:	01a56e1f 	.word	0x01a56e1f
 800bc00:	3fe00000 	.word	0x3fe00000
 800bc04:	000fffff 	.word	0x000fffff
 800bc08:	3ff00000 	.word	0x3ff00000
 800bc0c:	4090cbff 	.word	0x4090cbff
 800bc10:	3f6f3400 	.word	0x3f6f3400
 800bc14:	652b82fe 	.word	0x652b82fe
 800bc18:	3c971547 	.word	0x3c971547

0800bc1c <__ieee754_sqrt>:
 800bc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc20:	ec55 4b10 	vmov	r4, r5, d0
 800bc24:	4e56      	ldr	r6, [pc, #344]	; (800bd80 <__ieee754_sqrt+0x164>)
 800bc26:	43ae      	bics	r6, r5
 800bc28:	ee10 0a10 	vmov	r0, s0
 800bc2c:	ee10 3a10 	vmov	r3, s0
 800bc30:	4629      	mov	r1, r5
 800bc32:	462a      	mov	r2, r5
 800bc34:	d110      	bne.n	800bc58 <__ieee754_sqrt+0x3c>
 800bc36:	ee10 2a10 	vmov	r2, s0
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	f7f4 fcdc 	bl	80005f8 <__aeabi_dmul>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	4620      	mov	r0, r4
 800bc46:	4629      	mov	r1, r5
 800bc48:	f7f4 fb20 	bl	800028c <__adddf3>
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	460d      	mov	r5, r1
 800bc50:	ec45 4b10 	vmov	d0, r4, r5
 800bc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc58:	2d00      	cmp	r5, #0
 800bc5a:	dc10      	bgt.n	800bc7e <__ieee754_sqrt+0x62>
 800bc5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc60:	4330      	orrs	r0, r6
 800bc62:	d0f5      	beq.n	800bc50 <__ieee754_sqrt+0x34>
 800bc64:	b15d      	cbz	r5, 800bc7e <__ieee754_sqrt+0x62>
 800bc66:	ee10 2a10 	vmov	r2, s0
 800bc6a:	462b      	mov	r3, r5
 800bc6c:	ee10 0a10 	vmov	r0, s0
 800bc70:	f7f4 fb0a 	bl	8000288 <__aeabi_dsub>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	f7f4 fde8 	bl	800084c <__aeabi_ddiv>
 800bc7c:	e7e6      	b.n	800bc4c <__ieee754_sqrt+0x30>
 800bc7e:	1509      	asrs	r1, r1, #20
 800bc80:	d076      	beq.n	800bd70 <__ieee754_sqrt+0x154>
 800bc82:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bc86:	07ce      	lsls	r6, r1, #31
 800bc88:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bc8c:	bf5e      	ittt	pl
 800bc8e:	0fda      	lsrpl	r2, r3, #31
 800bc90:	005b      	lslpl	r3, r3, #1
 800bc92:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bc96:	0fda      	lsrs	r2, r3, #31
 800bc98:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bc9c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bca0:	2000      	movs	r0, #0
 800bca2:	106d      	asrs	r5, r5, #1
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	f04f 0e16 	mov.w	lr, #22
 800bcaa:	4684      	mov	ip, r0
 800bcac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcb0:	eb0c 0401 	add.w	r4, ip, r1
 800bcb4:	4294      	cmp	r4, r2
 800bcb6:	bfde      	ittt	le
 800bcb8:	1b12      	suble	r2, r2, r4
 800bcba:	eb04 0c01 	addle.w	ip, r4, r1
 800bcbe:	1840      	addle	r0, r0, r1
 800bcc0:	0052      	lsls	r2, r2, #1
 800bcc2:	f1be 0e01 	subs.w	lr, lr, #1
 800bcc6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bcca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bcce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bcd2:	d1ed      	bne.n	800bcb0 <__ieee754_sqrt+0x94>
 800bcd4:	4671      	mov	r1, lr
 800bcd6:	2720      	movs	r7, #32
 800bcd8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bcdc:	4562      	cmp	r2, ip
 800bcde:	eb04 060e 	add.w	r6, r4, lr
 800bce2:	dc02      	bgt.n	800bcea <__ieee754_sqrt+0xce>
 800bce4:	d113      	bne.n	800bd0e <__ieee754_sqrt+0xf2>
 800bce6:	429e      	cmp	r6, r3
 800bce8:	d811      	bhi.n	800bd0e <__ieee754_sqrt+0xf2>
 800bcea:	2e00      	cmp	r6, #0
 800bcec:	eb06 0e04 	add.w	lr, r6, r4
 800bcf0:	da43      	bge.n	800bd7a <__ieee754_sqrt+0x15e>
 800bcf2:	f1be 0f00 	cmp.w	lr, #0
 800bcf6:	db40      	blt.n	800bd7a <__ieee754_sqrt+0x15e>
 800bcf8:	f10c 0801 	add.w	r8, ip, #1
 800bcfc:	eba2 020c 	sub.w	r2, r2, ip
 800bd00:	429e      	cmp	r6, r3
 800bd02:	bf88      	it	hi
 800bd04:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bd08:	1b9b      	subs	r3, r3, r6
 800bd0a:	4421      	add	r1, r4
 800bd0c:	46c4      	mov	ip, r8
 800bd0e:	0052      	lsls	r2, r2, #1
 800bd10:	3f01      	subs	r7, #1
 800bd12:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bd16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bd1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd1e:	d1dd      	bne.n	800bcdc <__ieee754_sqrt+0xc0>
 800bd20:	4313      	orrs	r3, r2
 800bd22:	d006      	beq.n	800bd32 <__ieee754_sqrt+0x116>
 800bd24:	1c4c      	adds	r4, r1, #1
 800bd26:	bf13      	iteet	ne
 800bd28:	3101      	addne	r1, #1
 800bd2a:	3001      	addeq	r0, #1
 800bd2c:	4639      	moveq	r1, r7
 800bd2e:	f021 0101 	bicne.w	r1, r1, #1
 800bd32:	1043      	asrs	r3, r0, #1
 800bd34:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bd38:	0849      	lsrs	r1, r1, #1
 800bd3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bd3e:	07c2      	lsls	r2, r0, #31
 800bd40:	bf48      	it	mi
 800bd42:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bd46:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	463d      	mov	r5, r7
 800bd4e:	e77f      	b.n	800bc50 <__ieee754_sqrt+0x34>
 800bd50:	0ada      	lsrs	r2, r3, #11
 800bd52:	3815      	subs	r0, #21
 800bd54:	055b      	lsls	r3, r3, #21
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	d0fa      	beq.n	800bd50 <__ieee754_sqrt+0x134>
 800bd5a:	02d7      	lsls	r7, r2, #11
 800bd5c:	d50a      	bpl.n	800bd74 <__ieee754_sqrt+0x158>
 800bd5e:	f1c1 0420 	rsb	r4, r1, #32
 800bd62:	fa23 f404 	lsr.w	r4, r3, r4
 800bd66:	1e4d      	subs	r5, r1, #1
 800bd68:	408b      	lsls	r3, r1
 800bd6a:	4322      	orrs	r2, r4
 800bd6c:	1b41      	subs	r1, r0, r5
 800bd6e:	e788      	b.n	800bc82 <__ieee754_sqrt+0x66>
 800bd70:	4608      	mov	r0, r1
 800bd72:	e7f0      	b.n	800bd56 <__ieee754_sqrt+0x13a>
 800bd74:	0052      	lsls	r2, r2, #1
 800bd76:	3101      	adds	r1, #1
 800bd78:	e7ef      	b.n	800bd5a <__ieee754_sqrt+0x13e>
 800bd7a:	46e0      	mov	r8, ip
 800bd7c:	e7be      	b.n	800bcfc <__ieee754_sqrt+0xe0>
 800bd7e:	bf00      	nop
 800bd80:	7ff00000 	.word	0x7ff00000

0800bd84 <fabs>:
 800bd84:	ec51 0b10 	vmov	r0, r1, d0
 800bd88:	ee10 2a10 	vmov	r2, s0
 800bd8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd90:	ec43 2b10 	vmov	d0, r2, r3
 800bd94:	4770      	bx	lr

0800bd96 <finite>:
 800bd96:	b082      	sub	sp, #8
 800bd98:	ed8d 0b00 	vstr	d0, [sp]
 800bd9c:	9801      	ldr	r0, [sp, #4]
 800bd9e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bda2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bda6:	0fc0      	lsrs	r0, r0, #31
 800bda8:	b002      	add	sp, #8
 800bdaa:	4770      	bx	lr
 800bdac:	0000      	movs	r0, r0
	...

0800bdb0 <nan>:
 800bdb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bdb8 <nan+0x8>
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	00000000 	.word	0x00000000
 800bdbc:	7ff80000 	.word	0x7ff80000

0800bdc0 <rint>:
 800bdc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdc2:	ec51 0b10 	vmov	r0, r1, d0
 800bdc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bdca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800bdce:	2e13      	cmp	r6, #19
 800bdd0:	ee10 4a10 	vmov	r4, s0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800bdda:	dc58      	bgt.n	800be8e <rint+0xce>
 800bddc:	2e00      	cmp	r6, #0
 800bdde:	da2b      	bge.n	800be38 <rint+0x78>
 800bde0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bde4:	4302      	orrs	r2, r0
 800bde6:	d023      	beq.n	800be30 <rint+0x70>
 800bde8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800bdec:	4302      	orrs	r2, r0
 800bdee:	4254      	negs	r4, r2
 800bdf0:	4314      	orrs	r4, r2
 800bdf2:	0c4b      	lsrs	r3, r1, #17
 800bdf4:	0b24      	lsrs	r4, r4, #12
 800bdf6:	045b      	lsls	r3, r3, #17
 800bdf8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800bdfc:	ea44 0103 	orr.w	r1, r4, r3
 800be00:	4b32      	ldr	r3, [pc, #200]	; (800becc <rint+0x10c>)
 800be02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800be06:	e9d3 6700 	ldrd	r6, r7, [r3]
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	4630      	mov	r0, r6
 800be10:	4639      	mov	r1, r7
 800be12:	f7f4 fa3b 	bl	800028c <__adddf3>
 800be16:	e9cd 0100 	strd	r0, r1, [sp]
 800be1a:	463b      	mov	r3, r7
 800be1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be20:	4632      	mov	r2, r6
 800be22:	f7f4 fa31 	bl	8000288 <__aeabi_dsub>
 800be26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be2a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800be2e:	4639      	mov	r1, r7
 800be30:	ec41 0b10 	vmov	d0, r0, r1
 800be34:	b003      	add	sp, #12
 800be36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be38:	4a25      	ldr	r2, [pc, #148]	; (800bed0 <rint+0x110>)
 800be3a:	4132      	asrs	r2, r6
 800be3c:	ea01 0702 	and.w	r7, r1, r2
 800be40:	4307      	orrs	r7, r0
 800be42:	d0f5      	beq.n	800be30 <rint+0x70>
 800be44:	0851      	lsrs	r1, r2, #1
 800be46:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800be4a:	4314      	orrs	r4, r2
 800be4c:	d00c      	beq.n	800be68 <rint+0xa8>
 800be4e:	ea23 0201 	bic.w	r2, r3, r1
 800be52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800be56:	2e13      	cmp	r6, #19
 800be58:	fa43 f606 	asr.w	r6, r3, r6
 800be5c:	bf0c      	ite	eq
 800be5e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800be62:	2400      	movne	r4, #0
 800be64:	ea42 0306 	orr.w	r3, r2, r6
 800be68:	4918      	ldr	r1, [pc, #96]	; (800becc <rint+0x10c>)
 800be6a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800be6e:	4622      	mov	r2, r4
 800be70:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be74:	4620      	mov	r0, r4
 800be76:	4629      	mov	r1, r5
 800be78:	f7f4 fa08 	bl	800028c <__adddf3>
 800be7c:	e9cd 0100 	strd	r0, r1, [sp]
 800be80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be84:	4622      	mov	r2, r4
 800be86:	462b      	mov	r3, r5
 800be88:	f7f4 f9fe 	bl	8000288 <__aeabi_dsub>
 800be8c:	e7d0      	b.n	800be30 <rint+0x70>
 800be8e:	2e33      	cmp	r6, #51	; 0x33
 800be90:	dd07      	ble.n	800bea2 <rint+0xe2>
 800be92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800be96:	d1cb      	bne.n	800be30 <rint+0x70>
 800be98:	ee10 2a10 	vmov	r2, s0
 800be9c:	f7f4 f9f6 	bl	800028c <__adddf3>
 800bea0:	e7c6      	b.n	800be30 <rint+0x70>
 800bea2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bea6:	f04f 36ff 	mov.w	r6, #4294967295
 800beaa:	40d6      	lsrs	r6, r2
 800beac:	4230      	tst	r0, r6
 800beae:	d0bf      	beq.n	800be30 <rint+0x70>
 800beb0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800beb4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800beb8:	bf1f      	itttt	ne
 800beba:	ea24 0101 	bicne.w	r1, r4, r1
 800bebe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800bec2:	fa44 f202 	asrne.w	r2, r4, r2
 800bec6:	ea41 0402 	orrne.w	r4, r1, r2
 800beca:	e7cd      	b.n	800be68 <rint+0xa8>
 800becc:	0800ee48 	.word	0x0800ee48
 800bed0:	000fffff 	.word	0x000fffff
 800bed4:	00000000 	.word	0x00000000

0800bed8 <scalbn>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	ec55 4b10 	vmov	r4, r5, d0
 800bede:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bee2:	4606      	mov	r6, r0
 800bee4:	462b      	mov	r3, r5
 800bee6:	b99a      	cbnz	r2, 800bf10 <scalbn+0x38>
 800bee8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800beec:	4323      	orrs	r3, r4
 800beee:	d036      	beq.n	800bf5e <scalbn+0x86>
 800bef0:	4b39      	ldr	r3, [pc, #228]	; (800bfd8 <scalbn+0x100>)
 800bef2:	4629      	mov	r1, r5
 800bef4:	ee10 0a10 	vmov	r0, s0
 800bef8:	2200      	movs	r2, #0
 800befa:	f7f4 fb7d 	bl	80005f8 <__aeabi_dmul>
 800befe:	4b37      	ldr	r3, [pc, #220]	; (800bfdc <scalbn+0x104>)
 800bf00:	429e      	cmp	r6, r3
 800bf02:	4604      	mov	r4, r0
 800bf04:	460d      	mov	r5, r1
 800bf06:	da10      	bge.n	800bf2a <scalbn+0x52>
 800bf08:	a32b      	add	r3, pc, #172	; (adr r3, 800bfb8 <scalbn+0xe0>)
 800bf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0e:	e03a      	b.n	800bf86 <scalbn+0xae>
 800bf10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bf14:	428a      	cmp	r2, r1
 800bf16:	d10c      	bne.n	800bf32 <scalbn+0x5a>
 800bf18:	ee10 2a10 	vmov	r2, s0
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	4629      	mov	r1, r5
 800bf20:	f7f4 f9b4 	bl	800028c <__adddf3>
 800bf24:	4604      	mov	r4, r0
 800bf26:	460d      	mov	r5, r1
 800bf28:	e019      	b.n	800bf5e <scalbn+0x86>
 800bf2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf2e:	460b      	mov	r3, r1
 800bf30:	3a36      	subs	r2, #54	; 0x36
 800bf32:	4432      	add	r2, r6
 800bf34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bf38:	428a      	cmp	r2, r1
 800bf3a:	dd08      	ble.n	800bf4e <scalbn+0x76>
 800bf3c:	2d00      	cmp	r5, #0
 800bf3e:	a120      	add	r1, pc, #128	; (adr r1, 800bfc0 <scalbn+0xe8>)
 800bf40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf44:	da1c      	bge.n	800bf80 <scalbn+0xa8>
 800bf46:	a120      	add	r1, pc, #128	; (adr r1, 800bfc8 <scalbn+0xf0>)
 800bf48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf4c:	e018      	b.n	800bf80 <scalbn+0xa8>
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	dd08      	ble.n	800bf64 <scalbn+0x8c>
 800bf52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf5e:	ec45 4b10 	vmov	d0, r4, r5
 800bf62:	bd70      	pop	{r4, r5, r6, pc}
 800bf64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bf68:	da19      	bge.n	800bf9e <scalbn+0xc6>
 800bf6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bf6e:	429e      	cmp	r6, r3
 800bf70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bf74:	dd0a      	ble.n	800bf8c <scalbn+0xb4>
 800bf76:	a112      	add	r1, pc, #72	; (adr r1, 800bfc0 <scalbn+0xe8>)
 800bf78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1e2      	bne.n	800bf46 <scalbn+0x6e>
 800bf80:	a30f      	add	r3, pc, #60	; (adr r3, 800bfc0 <scalbn+0xe8>)
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	f7f4 fb37 	bl	80005f8 <__aeabi_dmul>
 800bf8a:	e7cb      	b.n	800bf24 <scalbn+0x4c>
 800bf8c:	a10a      	add	r1, pc, #40	; (adr r1, 800bfb8 <scalbn+0xe0>)
 800bf8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0b8      	beq.n	800bf08 <scalbn+0x30>
 800bf96:	a10e      	add	r1, pc, #56	; (adr r1, 800bfd0 <scalbn+0xf8>)
 800bf98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf9c:	e7b4      	b.n	800bf08 <scalbn+0x30>
 800bf9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bfa2:	3236      	adds	r2, #54	; 0x36
 800bfa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bfa8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bfac:	4620      	mov	r0, r4
 800bfae:	4b0c      	ldr	r3, [pc, #48]	; (800bfe0 <scalbn+0x108>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	e7e8      	b.n	800bf86 <scalbn+0xae>
 800bfb4:	f3af 8000 	nop.w
 800bfb8:	c2f8f359 	.word	0xc2f8f359
 800bfbc:	01a56e1f 	.word	0x01a56e1f
 800bfc0:	8800759c 	.word	0x8800759c
 800bfc4:	7e37e43c 	.word	0x7e37e43c
 800bfc8:	8800759c 	.word	0x8800759c
 800bfcc:	fe37e43c 	.word	0xfe37e43c
 800bfd0:	c2f8f359 	.word	0xc2f8f359
 800bfd4:	81a56e1f 	.word	0x81a56e1f
 800bfd8:	43500000 	.word	0x43500000
 800bfdc:	ffff3cb0 	.word	0xffff3cb0
 800bfe0:	3c900000 	.word	0x3c900000

0800bfe4 <__errno>:
 800bfe4:	4b01      	ldr	r3, [pc, #4]	; (800bfec <__errno+0x8>)
 800bfe6:	6818      	ldr	r0, [r3, #0]
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	20000194 	.word	0x20000194

0800bff0 <__libc_init_array>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	4d0d      	ldr	r5, [pc, #52]	; (800c028 <__libc_init_array+0x38>)
 800bff4:	4c0d      	ldr	r4, [pc, #52]	; (800c02c <__libc_init_array+0x3c>)
 800bff6:	1b64      	subs	r4, r4, r5
 800bff8:	10a4      	asrs	r4, r4, #2
 800bffa:	2600      	movs	r6, #0
 800bffc:	42a6      	cmp	r6, r4
 800bffe:	d109      	bne.n	800c014 <__libc_init_array+0x24>
 800c000:	4d0b      	ldr	r5, [pc, #44]	; (800c030 <__libc_init_array+0x40>)
 800c002:	4c0c      	ldr	r4, [pc, #48]	; (800c034 <__libc_init_array+0x44>)
 800c004:	f002 fec2 	bl	800ed8c <_init>
 800c008:	1b64      	subs	r4, r4, r5
 800c00a:	10a4      	asrs	r4, r4, #2
 800c00c:	2600      	movs	r6, #0
 800c00e:	42a6      	cmp	r6, r4
 800c010:	d105      	bne.n	800c01e <__libc_init_array+0x2e>
 800c012:	bd70      	pop	{r4, r5, r6, pc}
 800c014:	f855 3b04 	ldr.w	r3, [r5], #4
 800c018:	4798      	blx	r3
 800c01a:	3601      	adds	r6, #1
 800c01c:	e7ee      	b.n	800bffc <__libc_init_array+0xc>
 800c01e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c022:	4798      	blx	r3
 800c024:	3601      	adds	r6, #1
 800c026:	e7f2      	b.n	800c00e <__libc_init_array+0x1e>
 800c028:	0800f244 	.word	0x0800f244
 800c02c:	0800f244 	.word	0x0800f244
 800c030:	0800f244 	.word	0x0800f244
 800c034:	0800f248 	.word	0x0800f248

0800c038 <memset>:
 800c038:	4402      	add	r2, r0
 800c03a:	4603      	mov	r3, r0
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d100      	bne.n	800c042 <memset+0xa>
 800c040:	4770      	bx	lr
 800c042:	f803 1b01 	strb.w	r1, [r3], #1
 800c046:	e7f9      	b.n	800c03c <memset+0x4>

0800c048 <__cvt>:
 800c048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c04c:	ec55 4b10 	vmov	r4, r5, d0
 800c050:	2d00      	cmp	r5, #0
 800c052:	460e      	mov	r6, r1
 800c054:	4619      	mov	r1, r3
 800c056:	462b      	mov	r3, r5
 800c058:	bfbb      	ittet	lt
 800c05a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c05e:	461d      	movlt	r5, r3
 800c060:	2300      	movge	r3, #0
 800c062:	232d      	movlt	r3, #45	; 0x2d
 800c064:	700b      	strb	r3, [r1, #0]
 800c066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c068:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c06c:	4691      	mov	r9, r2
 800c06e:	f023 0820 	bic.w	r8, r3, #32
 800c072:	bfbc      	itt	lt
 800c074:	4622      	movlt	r2, r4
 800c076:	4614      	movlt	r4, r2
 800c078:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c07c:	d005      	beq.n	800c08a <__cvt+0x42>
 800c07e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c082:	d100      	bne.n	800c086 <__cvt+0x3e>
 800c084:	3601      	adds	r6, #1
 800c086:	2102      	movs	r1, #2
 800c088:	e000      	b.n	800c08c <__cvt+0x44>
 800c08a:	2103      	movs	r1, #3
 800c08c:	ab03      	add	r3, sp, #12
 800c08e:	9301      	str	r3, [sp, #4]
 800c090:	ab02      	add	r3, sp, #8
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	ec45 4b10 	vmov	d0, r4, r5
 800c098:	4653      	mov	r3, sl
 800c09a:	4632      	mov	r2, r6
 800c09c:	f000 fcf8 	bl	800ca90 <_dtoa_r>
 800c0a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	d102      	bne.n	800c0ae <__cvt+0x66>
 800c0a8:	f019 0f01 	tst.w	r9, #1
 800c0ac:	d022      	beq.n	800c0f4 <__cvt+0xac>
 800c0ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0b2:	eb07 0906 	add.w	r9, r7, r6
 800c0b6:	d110      	bne.n	800c0da <__cvt+0x92>
 800c0b8:	783b      	ldrb	r3, [r7, #0]
 800c0ba:	2b30      	cmp	r3, #48	; 0x30
 800c0bc:	d10a      	bne.n	800c0d4 <__cvt+0x8c>
 800c0be:	2200      	movs	r2, #0
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7f4 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0ca:	b918      	cbnz	r0, 800c0d4 <__cvt+0x8c>
 800c0cc:	f1c6 0601 	rsb	r6, r6, #1
 800c0d0:	f8ca 6000 	str.w	r6, [sl]
 800c0d4:	f8da 3000 	ldr.w	r3, [sl]
 800c0d8:	4499      	add	r9, r3
 800c0da:	2200      	movs	r2, #0
 800c0dc:	2300      	movs	r3, #0
 800c0de:	4620      	mov	r0, r4
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	f7f4 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0e6:	b108      	cbz	r0, 800c0ec <__cvt+0xa4>
 800c0e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c0ec:	2230      	movs	r2, #48	; 0x30
 800c0ee:	9b03      	ldr	r3, [sp, #12]
 800c0f0:	454b      	cmp	r3, r9
 800c0f2:	d307      	bcc.n	800c104 <__cvt+0xbc>
 800c0f4:	9b03      	ldr	r3, [sp, #12]
 800c0f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0f8:	1bdb      	subs	r3, r3, r7
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	6013      	str	r3, [r2, #0]
 800c0fe:	b004      	add	sp, #16
 800c100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c104:	1c59      	adds	r1, r3, #1
 800c106:	9103      	str	r1, [sp, #12]
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	e7f0      	b.n	800c0ee <__cvt+0xa6>

0800c10c <__exponent>:
 800c10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c10e:	4603      	mov	r3, r0
 800c110:	2900      	cmp	r1, #0
 800c112:	bfb8      	it	lt
 800c114:	4249      	neglt	r1, r1
 800c116:	f803 2b02 	strb.w	r2, [r3], #2
 800c11a:	bfb4      	ite	lt
 800c11c:	222d      	movlt	r2, #45	; 0x2d
 800c11e:	222b      	movge	r2, #43	; 0x2b
 800c120:	2909      	cmp	r1, #9
 800c122:	7042      	strb	r2, [r0, #1]
 800c124:	dd2a      	ble.n	800c17c <__exponent+0x70>
 800c126:	f10d 0407 	add.w	r4, sp, #7
 800c12a:	46a4      	mov	ip, r4
 800c12c:	270a      	movs	r7, #10
 800c12e:	46a6      	mov	lr, r4
 800c130:	460a      	mov	r2, r1
 800c132:	fb91 f6f7 	sdiv	r6, r1, r7
 800c136:	fb07 1516 	mls	r5, r7, r6, r1
 800c13a:	3530      	adds	r5, #48	; 0x30
 800c13c:	2a63      	cmp	r2, #99	; 0x63
 800c13e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c142:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c146:	4631      	mov	r1, r6
 800c148:	dcf1      	bgt.n	800c12e <__exponent+0x22>
 800c14a:	3130      	adds	r1, #48	; 0x30
 800c14c:	f1ae 0502 	sub.w	r5, lr, #2
 800c150:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c154:	1c44      	adds	r4, r0, #1
 800c156:	4629      	mov	r1, r5
 800c158:	4561      	cmp	r1, ip
 800c15a:	d30a      	bcc.n	800c172 <__exponent+0x66>
 800c15c:	f10d 0209 	add.w	r2, sp, #9
 800c160:	eba2 020e 	sub.w	r2, r2, lr
 800c164:	4565      	cmp	r5, ip
 800c166:	bf88      	it	hi
 800c168:	2200      	movhi	r2, #0
 800c16a:	4413      	add	r3, r2
 800c16c:	1a18      	subs	r0, r3, r0
 800c16e:	b003      	add	sp, #12
 800c170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c172:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c176:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c17a:	e7ed      	b.n	800c158 <__exponent+0x4c>
 800c17c:	2330      	movs	r3, #48	; 0x30
 800c17e:	3130      	adds	r1, #48	; 0x30
 800c180:	7083      	strb	r3, [r0, #2]
 800c182:	70c1      	strb	r1, [r0, #3]
 800c184:	1d03      	adds	r3, r0, #4
 800c186:	e7f1      	b.n	800c16c <__exponent+0x60>

0800c188 <_printf_float>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	ed2d 8b02 	vpush	{d8}
 800c190:	b08d      	sub	sp, #52	; 0x34
 800c192:	460c      	mov	r4, r1
 800c194:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c198:	4616      	mov	r6, r2
 800c19a:	461f      	mov	r7, r3
 800c19c:	4605      	mov	r5, r0
 800c19e:	f001 fa63 	bl	800d668 <_localeconv_r>
 800c1a2:	f8d0 a000 	ldr.w	sl, [r0]
 800c1a6:	4650      	mov	r0, sl
 800c1a8:	f7f4 f812 	bl	80001d0 <strlen>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	9305      	str	r3, [sp, #20]
 800c1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c1b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c1bc:	3307      	adds	r3, #7
 800c1be:	f023 0307 	bic.w	r3, r3, #7
 800c1c2:	f103 0208 	add.w	r2, r3, #8
 800c1c6:	f8c8 2000 	str.w	r2, [r8]
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c1d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c1d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c1da:	9307      	str	r3, [sp, #28]
 800c1dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800c1e0:	ee08 0a10 	vmov	s16, r0
 800c1e4:	4b9f      	ldr	r3, [pc, #636]	; (800c464 <_printf_float+0x2dc>)
 800c1e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ee:	f7f4 fc9d 	bl	8000b2c <__aeabi_dcmpun>
 800c1f2:	bb88      	cbnz	r0, 800c258 <_printf_float+0xd0>
 800c1f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1f8:	4b9a      	ldr	r3, [pc, #616]	; (800c464 <_printf_float+0x2dc>)
 800c1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c1fe:	f7f4 fc77 	bl	8000af0 <__aeabi_dcmple>
 800c202:	bb48      	cbnz	r0, 800c258 <_printf_float+0xd0>
 800c204:	2200      	movs	r2, #0
 800c206:	2300      	movs	r3, #0
 800c208:	4640      	mov	r0, r8
 800c20a:	4649      	mov	r1, r9
 800c20c:	f7f4 fc66 	bl	8000adc <__aeabi_dcmplt>
 800c210:	b110      	cbz	r0, 800c218 <_printf_float+0x90>
 800c212:	232d      	movs	r3, #45	; 0x2d
 800c214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c218:	4b93      	ldr	r3, [pc, #588]	; (800c468 <_printf_float+0x2e0>)
 800c21a:	4894      	ldr	r0, [pc, #592]	; (800c46c <_printf_float+0x2e4>)
 800c21c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c220:	bf94      	ite	ls
 800c222:	4698      	movls	r8, r3
 800c224:	4680      	movhi	r8, r0
 800c226:	2303      	movs	r3, #3
 800c228:	6123      	str	r3, [r4, #16]
 800c22a:	9b05      	ldr	r3, [sp, #20]
 800c22c:	f023 0204 	bic.w	r2, r3, #4
 800c230:	6022      	str	r2, [r4, #0]
 800c232:	f04f 0900 	mov.w	r9, #0
 800c236:	9700      	str	r7, [sp, #0]
 800c238:	4633      	mov	r3, r6
 800c23a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c23c:	4621      	mov	r1, r4
 800c23e:	4628      	mov	r0, r5
 800c240:	f000 f9d8 	bl	800c5f4 <_printf_common>
 800c244:	3001      	adds	r0, #1
 800c246:	f040 8090 	bne.w	800c36a <_printf_float+0x1e2>
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	b00d      	add	sp, #52	; 0x34
 800c250:	ecbd 8b02 	vpop	{d8}
 800c254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c258:	4642      	mov	r2, r8
 800c25a:	464b      	mov	r3, r9
 800c25c:	4640      	mov	r0, r8
 800c25e:	4649      	mov	r1, r9
 800c260:	f7f4 fc64 	bl	8000b2c <__aeabi_dcmpun>
 800c264:	b140      	cbz	r0, 800c278 <_printf_float+0xf0>
 800c266:	464b      	mov	r3, r9
 800c268:	2b00      	cmp	r3, #0
 800c26a:	bfbc      	itt	lt
 800c26c:	232d      	movlt	r3, #45	; 0x2d
 800c26e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c272:	487f      	ldr	r0, [pc, #508]	; (800c470 <_printf_float+0x2e8>)
 800c274:	4b7f      	ldr	r3, [pc, #508]	; (800c474 <_printf_float+0x2ec>)
 800c276:	e7d1      	b.n	800c21c <_printf_float+0x94>
 800c278:	6863      	ldr	r3, [r4, #4]
 800c27a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c27e:	9206      	str	r2, [sp, #24]
 800c280:	1c5a      	adds	r2, r3, #1
 800c282:	d13f      	bne.n	800c304 <_printf_float+0x17c>
 800c284:	2306      	movs	r3, #6
 800c286:	6063      	str	r3, [r4, #4]
 800c288:	9b05      	ldr	r3, [sp, #20]
 800c28a:	6861      	ldr	r1, [r4, #4]
 800c28c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c290:	2300      	movs	r3, #0
 800c292:	9303      	str	r3, [sp, #12]
 800c294:	ab0a      	add	r3, sp, #40	; 0x28
 800c296:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c29a:	ab09      	add	r3, sp, #36	; 0x24
 800c29c:	ec49 8b10 	vmov	d0, r8, r9
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	6022      	str	r2, [r4, #0]
 800c2a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f7ff fecd 	bl	800c048 <__cvt>
 800c2ae:	9b06      	ldr	r3, [sp, #24]
 800c2b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2b2:	2b47      	cmp	r3, #71	; 0x47
 800c2b4:	4680      	mov	r8, r0
 800c2b6:	d108      	bne.n	800c2ca <_printf_float+0x142>
 800c2b8:	1cc8      	adds	r0, r1, #3
 800c2ba:	db02      	blt.n	800c2c2 <_printf_float+0x13a>
 800c2bc:	6863      	ldr	r3, [r4, #4]
 800c2be:	4299      	cmp	r1, r3
 800c2c0:	dd41      	ble.n	800c346 <_printf_float+0x1be>
 800c2c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800c2c6:	fa5f fb8b 	uxtb.w	fp, fp
 800c2ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c2ce:	d820      	bhi.n	800c312 <_printf_float+0x18a>
 800c2d0:	3901      	subs	r1, #1
 800c2d2:	465a      	mov	r2, fp
 800c2d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c2d8:	9109      	str	r1, [sp, #36]	; 0x24
 800c2da:	f7ff ff17 	bl	800c10c <__exponent>
 800c2de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2e0:	1813      	adds	r3, r2, r0
 800c2e2:	2a01      	cmp	r2, #1
 800c2e4:	4681      	mov	r9, r0
 800c2e6:	6123      	str	r3, [r4, #16]
 800c2e8:	dc02      	bgt.n	800c2f0 <_printf_float+0x168>
 800c2ea:	6822      	ldr	r2, [r4, #0]
 800c2ec:	07d2      	lsls	r2, r2, #31
 800c2ee:	d501      	bpl.n	800c2f4 <_printf_float+0x16c>
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	6123      	str	r3, [r4, #16]
 800c2f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d09c      	beq.n	800c236 <_printf_float+0xae>
 800c2fc:	232d      	movs	r3, #45	; 0x2d
 800c2fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c302:	e798      	b.n	800c236 <_printf_float+0xae>
 800c304:	9a06      	ldr	r2, [sp, #24]
 800c306:	2a47      	cmp	r2, #71	; 0x47
 800c308:	d1be      	bne.n	800c288 <_printf_float+0x100>
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1bc      	bne.n	800c288 <_printf_float+0x100>
 800c30e:	2301      	movs	r3, #1
 800c310:	e7b9      	b.n	800c286 <_printf_float+0xfe>
 800c312:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c316:	d118      	bne.n	800c34a <_printf_float+0x1c2>
 800c318:	2900      	cmp	r1, #0
 800c31a:	6863      	ldr	r3, [r4, #4]
 800c31c:	dd0b      	ble.n	800c336 <_printf_float+0x1ae>
 800c31e:	6121      	str	r1, [r4, #16]
 800c320:	b913      	cbnz	r3, 800c328 <_printf_float+0x1a0>
 800c322:	6822      	ldr	r2, [r4, #0]
 800c324:	07d0      	lsls	r0, r2, #31
 800c326:	d502      	bpl.n	800c32e <_printf_float+0x1a6>
 800c328:	3301      	adds	r3, #1
 800c32a:	440b      	add	r3, r1
 800c32c:	6123      	str	r3, [r4, #16]
 800c32e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c330:	f04f 0900 	mov.w	r9, #0
 800c334:	e7de      	b.n	800c2f4 <_printf_float+0x16c>
 800c336:	b913      	cbnz	r3, 800c33e <_printf_float+0x1b6>
 800c338:	6822      	ldr	r2, [r4, #0]
 800c33a:	07d2      	lsls	r2, r2, #31
 800c33c:	d501      	bpl.n	800c342 <_printf_float+0x1ba>
 800c33e:	3302      	adds	r3, #2
 800c340:	e7f4      	b.n	800c32c <_printf_float+0x1a4>
 800c342:	2301      	movs	r3, #1
 800c344:	e7f2      	b.n	800c32c <_printf_float+0x1a4>
 800c346:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c34c:	4299      	cmp	r1, r3
 800c34e:	db05      	blt.n	800c35c <_printf_float+0x1d4>
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	6121      	str	r1, [r4, #16]
 800c354:	07d8      	lsls	r0, r3, #31
 800c356:	d5ea      	bpl.n	800c32e <_printf_float+0x1a6>
 800c358:	1c4b      	adds	r3, r1, #1
 800c35a:	e7e7      	b.n	800c32c <_printf_float+0x1a4>
 800c35c:	2900      	cmp	r1, #0
 800c35e:	bfd4      	ite	le
 800c360:	f1c1 0202 	rsble	r2, r1, #2
 800c364:	2201      	movgt	r2, #1
 800c366:	4413      	add	r3, r2
 800c368:	e7e0      	b.n	800c32c <_printf_float+0x1a4>
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	055a      	lsls	r2, r3, #21
 800c36e:	d407      	bmi.n	800c380 <_printf_float+0x1f8>
 800c370:	6923      	ldr	r3, [r4, #16]
 800c372:	4642      	mov	r2, r8
 800c374:	4631      	mov	r1, r6
 800c376:	4628      	mov	r0, r5
 800c378:	47b8      	blx	r7
 800c37a:	3001      	adds	r0, #1
 800c37c:	d12c      	bne.n	800c3d8 <_printf_float+0x250>
 800c37e:	e764      	b.n	800c24a <_printf_float+0xc2>
 800c380:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c384:	f240 80e0 	bls.w	800c548 <_printf_float+0x3c0>
 800c388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c38c:	2200      	movs	r2, #0
 800c38e:	2300      	movs	r3, #0
 800c390:	f7f4 fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c394:	2800      	cmp	r0, #0
 800c396:	d034      	beq.n	800c402 <_printf_float+0x27a>
 800c398:	4a37      	ldr	r2, [pc, #220]	; (800c478 <_printf_float+0x2f0>)
 800c39a:	2301      	movs	r3, #1
 800c39c:	4631      	mov	r1, r6
 800c39e:	4628      	mov	r0, r5
 800c3a0:	47b8      	blx	r7
 800c3a2:	3001      	adds	r0, #1
 800c3a4:	f43f af51 	beq.w	800c24a <_printf_float+0xc2>
 800c3a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	db02      	blt.n	800c3b6 <_printf_float+0x22e>
 800c3b0:	6823      	ldr	r3, [r4, #0]
 800c3b2:	07d8      	lsls	r0, r3, #31
 800c3b4:	d510      	bpl.n	800c3d8 <_printf_float+0x250>
 800c3b6:	ee18 3a10 	vmov	r3, s16
 800c3ba:	4652      	mov	r2, sl
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4628      	mov	r0, r5
 800c3c0:	47b8      	blx	r7
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	f43f af41 	beq.w	800c24a <_printf_float+0xc2>
 800c3c8:	f04f 0800 	mov.w	r8, #0
 800c3cc:	f104 091a 	add.w	r9, r4, #26
 800c3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	4543      	cmp	r3, r8
 800c3d6:	dc09      	bgt.n	800c3ec <_printf_float+0x264>
 800c3d8:	6823      	ldr	r3, [r4, #0]
 800c3da:	079b      	lsls	r3, r3, #30
 800c3dc:	f100 8105 	bmi.w	800c5ea <_printf_float+0x462>
 800c3e0:	68e0      	ldr	r0, [r4, #12]
 800c3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e4:	4298      	cmp	r0, r3
 800c3e6:	bfb8      	it	lt
 800c3e8:	4618      	movlt	r0, r3
 800c3ea:	e730      	b.n	800c24e <_printf_float+0xc6>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	464a      	mov	r2, r9
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	47b8      	blx	r7
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	f43f af27 	beq.w	800c24a <_printf_float+0xc2>
 800c3fc:	f108 0801 	add.w	r8, r8, #1
 800c400:	e7e6      	b.n	800c3d0 <_printf_float+0x248>
 800c402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c404:	2b00      	cmp	r3, #0
 800c406:	dc39      	bgt.n	800c47c <_printf_float+0x2f4>
 800c408:	4a1b      	ldr	r2, [pc, #108]	; (800c478 <_printf_float+0x2f0>)
 800c40a:	2301      	movs	r3, #1
 800c40c:	4631      	mov	r1, r6
 800c40e:	4628      	mov	r0, r5
 800c410:	47b8      	blx	r7
 800c412:	3001      	adds	r0, #1
 800c414:	f43f af19 	beq.w	800c24a <_printf_float+0xc2>
 800c418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c41c:	4313      	orrs	r3, r2
 800c41e:	d102      	bne.n	800c426 <_printf_float+0x29e>
 800c420:	6823      	ldr	r3, [r4, #0]
 800c422:	07d9      	lsls	r1, r3, #31
 800c424:	d5d8      	bpl.n	800c3d8 <_printf_float+0x250>
 800c426:	ee18 3a10 	vmov	r3, s16
 800c42a:	4652      	mov	r2, sl
 800c42c:	4631      	mov	r1, r6
 800c42e:	4628      	mov	r0, r5
 800c430:	47b8      	blx	r7
 800c432:	3001      	adds	r0, #1
 800c434:	f43f af09 	beq.w	800c24a <_printf_float+0xc2>
 800c438:	f04f 0900 	mov.w	r9, #0
 800c43c:	f104 0a1a 	add.w	sl, r4, #26
 800c440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c442:	425b      	negs	r3, r3
 800c444:	454b      	cmp	r3, r9
 800c446:	dc01      	bgt.n	800c44c <_printf_float+0x2c4>
 800c448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c44a:	e792      	b.n	800c372 <_printf_float+0x1ea>
 800c44c:	2301      	movs	r3, #1
 800c44e:	4652      	mov	r2, sl
 800c450:	4631      	mov	r1, r6
 800c452:	4628      	mov	r0, r5
 800c454:	47b8      	blx	r7
 800c456:	3001      	adds	r0, #1
 800c458:	f43f aef7 	beq.w	800c24a <_printf_float+0xc2>
 800c45c:	f109 0901 	add.w	r9, r9, #1
 800c460:	e7ee      	b.n	800c440 <_printf_float+0x2b8>
 800c462:	bf00      	nop
 800c464:	7fefffff 	.word	0x7fefffff
 800c468:	0800ee5c 	.word	0x0800ee5c
 800c46c:	0800ee60 	.word	0x0800ee60
 800c470:	0800ee68 	.word	0x0800ee68
 800c474:	0800ee64 	.word	0x0800ee64
 800c478:	0800ee6c 	.word	0x0800ee6c
 800c47c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c47e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c480:	429a      	cmp	r2, r3
 800c482:	bfa8      	it	ge
 800c484:	461a      	movge	r2, r3
 800c486:	2a00      	cmp	r2, #0
 800c488:	4691      	mov	r9, r2
 800c48a:	dc37      	bgt.n	800c4fc <_printf_float+0x374>
 800c48c:	f04f 0b00 	mov.w	fp, #0
 800c490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c494:	f104 021a 	add.w	r2, r4, #26
 800c498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c49a:	9305      	str	r3, [sp, #20]
 800c49c:	eba3 0309 	sub.w	r3, r3, r9
 800c4a0:	455b      	cmp	r3, fp
 800c4a2:	dc33      	bgt.n	800c50c <_printf_float+0x384>
 800c4a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	db3b      	blt.n	800c524 <_printf_float+0x39c>
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	07da      	lsls	r2, r3, #31
 800c4b0:	d438      	bmi.n	800c524 <_printf_float+0x39c>
 800c4b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4b4:	9b05      	ldr	r3, [sp, #20]
 800c4b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	eba2 0901 	sub.w	r9, r2, r1
 800c4be:	4599      	cmp	r9, r3
 800c4c0:	bfa8      	it	ge
 800c4c2:	4699      	movge	r9, r3
 800c4c4:	f1b9 0f00 	cmp.w	r9, #0
 800c4c8:	dc35      	bgt.n	800c536 <_printf_float+0x3ae>
 800c4ca:	f04f 0800 	mov.w	r8, #0
 800c4ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4d2:	f104 0a1a 	add.w	sl, r4, #26
 800c4d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4da:	1a9b      	subs	r3, r3, r2
 800c4dc:	eba3 0309 	sub.w	r3, r3, r9
 800c4e0:	4543      	cmp	r3, r8
 800c4e2:	f77f af79 	ble.w	800c3d8 <_printf_float+0x250>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	4652      	mov	r2, sl
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	47b8      	blx	r7
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	f43f aeaa 	beq.w	800c24a <_printf_float+0xc2>
 800c4f6:	f108 0801 	add.w	r8, r8, #1
 800c4fa:	e7ec      	b.n	800c4d6 <_printf_float+0x34e>
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	4631      	mov	r1, r6
 800c500:	4642      	mov	r2, r8
 800c502:	4628      	mov	r0, r5
 800c504:	47b8      	blx	r7
 800c506:	3001      	adds	r0, #1
 800c508:	d1c0      	bne.n	800c48c <_printf_float+0x304>
 800c50a:	e69e      	b.n	800c24a <_printf_float+0xc2>
 800c50c:	2301      	movs	r3, #1
 800c50e:	4631      	mov	r1, r6
 800c510:	4628      	mov	r0, r5
 800c512:	9205      	str	r2, [sp, #20]
 800c514:	47b8      	blx	r7
 800c516:	3001      	adds	r0, #1
 800c518:	f43f ae97 	beq.w	800c24a <_printf_float+0xc2>
 800c51c:	9a05      	ldr	r2, [sp, #20]
 800c51e:	f10b 0b01 	add.w	fp, fp, #1
 800c522:	e7b9      	b.n	800c498 <_printf_float+0x310>
 800c524:	ee18 3a10 	vmov	r3, s16
 800c528:	4652      	mov	r2, sl
 800c52a:	4631      	mov	r1, r6
 800c52c:	4628      	mov	r0, r5
 800c52e:	47b8      	blx	r7
 800c530:	3001      	adds	r0, #1
 800c532:	d1be      	bne.n	800c4b2 <_printf_float+0x32a>
 800c534:	e689      	b.n	800c24a <_printf_float+0xc2>
 800c536:	9a05      	ldr	r2, [sp, #20]
 800c538:	464b      	mov	r3, r9
 800c53a:	4442      	add	r2, r8
 800c53c:	4631      	mov	r1, r6
 800c53e:	4628      	mov	r0, r5
 800c540:	47b8      	blx	r7
 800c542:	3001      	adds	r0, #1
 800c544:	d1c1      	bne.n	800c4ca <_printf_float+0x342>
 800c546:	e680      	b.n	800c24a <_printf_float+0xc2>
 800c548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c54a:	2a01      	cmp	r2, #1
 800c54c:	dc01      	bgt.n	800c552 <_printf_float+0x3ca>
 800c54e:	07db      	lsls	r3, r3, #31
 800c550:	d538      	bpl.n	800c5c4 <_printf_float+0x43c>
 800c552:	2301      	movs	r3, #1
 800c554:	4642      	mov	r2, r8
 800c556:	4631      	mov	r1, r6
 800c558:	4628      	mov	r0, r5
 800c55a:	47b8      	blx	r7
 800c55c:	3001      	adds	r0, #1
 800c55e:	f43f ae74 	beq.w	800c24a <_printf_float+0xc2>
 800c562:	ee18 3a10 	vmov	r3, s16
 800c566:	4652      	mov	r2, sl
 800c568:	4631      	mov	r1, r6
 800c56a:	4628      	mov	r0, r5
 800c56c:	47b8      	blx	r7
 800c56e:	3001      	adds	r0, #1
 800c570:	f43f ae6b 	beq.w	800c24a <_printf_float+0xc2>
 800c574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c578:	2200      	movs	r2, #0
 800c57a:	2300      	movs	r3, #0
 800c57c:	f7f4 faa4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c580:	b9d8      	cbnz	r0, 800c5ba <_printf_float+0x432>
 800c582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c584:	f108 0201 	add.w	r2, r8, #1
 800c588:	3b01      	subs	r3, #1
 800c58a:	4631      	mov	r1, r6
 800c58c:	4628      	mov	r0, r5
 800c58e:	47b8      	blx	r7
 800c590:	3001      	adds	r0, #1
 800c592:	d10e      	bne.n	800c5b2 <_printf_float+0x42a>
 800c594:	e659      	b.n	800c24a <_printf_float+0xc2>
 800c596:	2301      	movs	r3, #1
 800c598:	4652      	mov	r2, sl
 800c59a:	4631      	mov	r1, r6
 800c59c:	4628      	mov	r0, r5
 800c59e:	47b8      	blx	r7
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	f43f ae52 	beq.w	800c24a <_printf_float+0xc2>
 800c5a6:	f108 0801 	add.w	r8, r8, #1
 800c5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	4543      	cmp	r3, r8
 800c5b0:	dcf1      	bgt.n	800c596 <_printf_float+0x40e>
 800c5b2:	464b      	mov	r3, r9
 800c5b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c5b8:	e6dc      	b.n	800c374 <_printf_float+0x1ec>
 800c5ba:	f04f 0800 	mov.w	r8, #0
 800c5be:	f104 0a1a 	add.w	sl, r4, #26
 800c5c2:	e7f2      	b.n	800c5aa <_printf_float+0x422>
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	4642      	mov	r2, r8
 800c5c8:	e7df      	b.n	800c58a <_printf_float+0x402>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	464a      	mov	r2, r9
 800c5ce:	4631      	mov	r1, r6
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	47b8      	blx	r7
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	f43f ae38 	beq.w	800c24a <_printf_float+0xc2>
 800c5da:	f108 0801 	add.w	r8, r8, #1
 800c5de:	68e3      	ldr	r3, [r4, #12]
 800c5e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5e2:	1a5b      	subs	r3, r3, r1
 800c5e4:	4543      	cmp	r3, r8
 800c5e6:	dcf0      	bgt.n	800c5ca <_printf_float+0x442>
 800c5e8:	e6fa      	b.n	800c3e0 <_printf_float+0x258>
 800c5ea:	f04f 0800 	mov.w	r8, #0
 800c5ee:	f104 0919 	add.w	r9, r4, #25
 800c5f2:	e7f4      	b.n	800c5de <_printf_float+0x456>

0800c5f4 <_printf_common>:
 800c5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f8:	4616      	mov	r6, r2
 800c5fa:	4699      	mov	r9, r3
 800c5fc:	688a      	ldr	r2, [r1, #8]
 800c5fe:	690b      	ldr	r3, [r1, #16]
 800c600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c604:	4293      	cmp	r3, r2
 800c606:	bfb8      	it	lt
 800c608:	4613      	movlt	r3, r2
 800c60a:	6033      	str	r3, [r6, #0]
 800c60c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c610:	4607      	mov	r7, r0
 800c612:	460c      	mov	r4, r1
 800c614:	b10a      	cbz	r2, 800c61a <_printf_common+0x26>
 800c616:	3301      	adds	r3, #1
 800c618:	6033      	str	r3, [r6, #0]
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	0699      	lsls	r1, r3, #26
 800c61e:	bf42      	ittt	mi
 800c620:	6833      	ldrmi	r3, [r6, #0]
 800c622:	3302      	addmi	r3, #2
 800c624:	6033      	strmi	r3, [r6, #0]
 800c626:	6825      	ldr	r5, [r4, #0]
 800c628:	f015 0506 	ands.w	r5, r5, #6
 800c62c:	d106      	bne.n	800c63c <_printf_common+0x48>
 800c62e:	f104 0a19 	add.w	sl, r4, #25
 800c632:	68e3      	ldr	r3, [r4, #12]
 800c634:	6832      	ldr	r2, [r6, #0]
 800c636:	1a9b      	subs	r3, r3, r2
 800c638:	42ab      	cmp	r3, r5
 800c63a:	dc26      	bgt.n	800c68a <_printf_common+0x96>
 800c63c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c640:	1e13      	subs	r3, r2, #0
 800c642:	6822      	ldr	r2, [r4, #0]
 800c644:	bf18      	it	ne
 800c646:	2301      	movne	r3, #1
 800c648:	0692      	lsls	r2, r2, #26
 800c64a:	d42b      	bmi.n	800c6a4 <_printf_common+0xb0>
 800c64c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c650:	4649      	mov	r1, r9
 800c652:	4638      	mov	r0, r7
 800c654:	47c0      	blx	r8
 800c656:	3001      	adds	r0, #1
 800c658:	d01e      	beq.n	800c698 <_printf_common+0xa4>
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	68e5      	ldr	r5, [r4, #12]
 800c65e:	6832      	ldr	r2, [r6, #0]
 800c660:	f003 0306 	and.w	r3, r3, #6
 800c664:	2b04      	cmp	r3, #4
 800c666:	bf08      	it	eq
 800c668:	1aad      	subeq	r5, r5, r2
 800c66a:	68a3      	ldr	r3, [r4, #8]
 800c66c:	6922      	ldr	r2, [r4, #16]
 800c66e:	bf0c      	ite	eq
 800c670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c674:	2500      	movne	r5, #0
 800c676:	4293      	cmp	r3, r2
 800c678:	bfc4      	itt	gt
 800c67a:	1a9b      	subgt	r3, r3, r2
 800c67c:	18ed      	addgt	r5, r5, r3
 800c67e:	2600      	movs	r6, #0
 800c680:	341a      	adds	r4, #26
 800c682:	42b5      	cmp	r5, r6
 800c684:	d11a      	bne.n	800c6bc <_printf_common+0xc8>
 800c686:	2000      	movs	r0, #0
 800c688:	e008      	b.n	800c69c <_printf_common+0xa8>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4652      	mov	r2, sl
 800c68e:	4649      	mov	r1, r9
 800c690:	4638      	mov	r0, r7
 800c692:	47c0      	blx	r8
 800c694:	3001      	adds	r0, #1
 800c696:	d103      	bne.n	800c6a0 <_printf_common+0xac>
 800c698:	f04f 30ff 	mov.w	r0, #4294967295
 800c69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a0:	3501      	adds	r5, #1
 800c6a2:	e7c6      	b.n	800c632 <_printf_common+0x3e>
 800c6a4:	18e1      	adds	r1, r4, r3
 800c6a6:	1c5a      	adds	r2, r3, #1
 800c6a8:	2030      	movs	r0, #48	; 0x30
 800c6aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6ae:	4422      	add	r2, r4
 800c6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6b8:	3302      	adds	r3, #2
 800c6ba:	e7c7      	b.n	800c64c <_printf_common+0x58>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	4622      	mov	r2, r4
 800c6c0:	4649      	mov	r1, r9
 800c6c2:	4638      	mov	r0, r7
 800c6c4:	47c0      	blx	r8
 800c6c6:	3001      	adds	r0, #1
 800c6c8:	d0e6      	beq.n	800c698 <_printf_common+0xa4>
 800c6ca:	3601      	adds	r6, #1
 800c6cc:	e7d9      	b.n	800c682 <_printf_common+0x8e>
	...

0800c6d0 <_printf_i>:
 800c6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	4691      	mov	r9, r2
 800c6d8:	7e27      	ldrb	r7, [r4, #24]
 800c6da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c6dc:	2f78      	cmp	r7, #120	; 0x78
 800c6de:	4680      	mov	r8, r0
 800c6e0:	469a      	mov	sl, r3
 800c6e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6e6:	d807      	bhi.n	800c6f8 <_printf_i+0x28>
 800c6e8:	2f62      	cmp	r7, #98	; 0x62
 800c6ea:	d80a      	bhi.n	800c702 <_printf_i+0x32>
 800c6ec:	2f00      	cmp	r7, #0
 800c6ee:	f000 80d8 	beq.w	800c8a2 <_printf_i+0x1d2>
 800c6f2:	2f58      	cmp	r7, #88	; 0x58
 800c6f4:	f000 80a3 	beq.w	800c83e <_printf_i+0x16e>
 800c6f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c6fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c700:	e03a      	b.n	800c778 <_printf_i+0xa8>
 800c702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c706:	2b15      	cmp	r3, #21
 800c708:	d8f6      	bhi.n	800c6f8 <_printf_i+0x28>
 800c70a:	a001      	add	r0, pc, #4	; (adr r0, 800c710 <_printf_i+0x40>)
 800c70c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c710:	0800c769 	.word	0x0800c769
 800c714:	0800c77d 	.word	0x0800c77d
 800c718:	0800c6f9 	.word	0x0800c6f9
 800c71c:	0800c6f9 	.word	0x0800c6f9
 800c720:	0800c6f9 	.word	0x0800c6f9
 800c724:	0800c6f9 	.word	0x0800c6f9
 800c728:	0800c77d 	.word	0x0800c77d
 800c72c:	0800c6f9 	.word	0x0800c6f9
 800c730:	0800c6f9 	.word	0x0800c6f9
 800c734:	0800c6f9 	.word	0x0800c6f9
 800c738:	0800c6f9 	.word	0x0800c6f9
 800c73c:	0800c889 	.word	0x0800c889
 800c740:	0800c7ad 	.word	0x0800c7ad
 800c744:	0800c86b 	.word	0x0800c86b
 800c748:	0800c6f9 	.word	0x0800c6f9
 800c74c:	0800c6f9 	.word	0x0800c6f9
 800c750:	0800c8ab 	.word	0x0800c8ab
 800c754:	0800c6f9 	.word	0x0800c6f9
 800c758:	0800c7ad 	.word	0x0800c7ad
 800c75c:	0800c6f9 	.word	0x0800c6f9
 800c760:	0800c6f9 	.word	0x0800c6f9
 800c764:	0800c873 	.word	0x0800c873
 800c768:	680b      	ldr	r3, [r1, #0]
 800c76a:	1d1a      	adds	r2, r3, #4
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	600a      	str	r2, [r1, #0]
 800c770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c778:	2301      	movs	r3, #1
 800c77a:	e0a3      	b.n	800c8c4 <_printf_i+0x1f4>
 800c77c:	6825      	ldr	r5, [r4, #0]
 800c77e:	6808      	ldr	r0, [r1, #0]
 800c780:	062e      	lsls	r6, r5, #24
 800c782:	f100 0304 	add.w	r3, r0, #4
 800c786:	d50a      	bpl.n	800c79e <_printf_i+0xce>
 800c788:	6805      	ldr	r5, [r0, #0]
 800c78a:	600b      	str	r3, [r1, #0]
 800c78c:	2d00      	cmp	r5, #0
 800c78e:	da03      	bge.n	800c798 <_printf_i+0xc8>
 800c790:	232d      	movs	r3, #45	; 0x2d
 800c792:	426d      	negs	r5, r5
 800c794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c798:	485e      	ldr	r0, [pc, #376]	; (800c914 <_printf_i+0x244>)
 800c79a:	230a      	movs	r3, #10
 800c79c:	e019      	b.n	800c7d2 <_printf_i+0x102>
 800c79e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c7a2:	6805      	ldr	r5, [r0, #0]
 800c7a4:	600b      	str	r3, [r1, #0]
 800c7a6:	bf18      	it	ne
 800c7a8:	b22d      	sxthne	r5, r5
 800c7aa:	e7ef      	b.n	800c78c <_printf_i+0xbc>
 800c7ac:	680b      	ldr	r3, [r1, #0]
 800c7ae:	6825      	ldr	r5, [r4, #0]
 800c7b0:	1d18      	adds	r0, r3, #4
 800c7b2:	6008      	str	r0, [r1, #0]
 800c7b4:	0628      	lsls	r0, r5, #24
 800c7b6:	d501      	bpl.n	800c7bc <_printf_i+0xec>
 800c7b8:	681d      	ldr	r5, [r3, #0]
 800c7ba:	e002      	b.n	800c7c2 <_printf_i+0xf2>
 800c7bc:	0669      	lsls	r1, r5, #25
 800c7be:	d5fb      	bpl.n	800c7b8 <_printf_i+0xe8>
 800c7c0:	881d      	ldrh	r5, [r3, #0]
 800c7c2:	4854      	ldr	r0, [pc, #336]	; (800c914 <_printf_i+0x244>)
 800c7c4:	2f6f      	cmp	r7, #111	; 0x6f
 800c7c6:	bf0c      	ite	eq
 800c7c8:	2308      	moveq	r3, #8
 800c7ca:	230a      	movne	r3, #10
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7d2:	6866      	ldr	r6, [r4, #4]
 800c7d4:	60a6      	str	r6, [r4, #8]
 800c7d6:	2e00      	cmp	r6, #0
 800c7d8:	bfa2      	ittt	ge
 800c7da:	6821      	ldrge	r1, [r4, #0]
 800c7dc:	f021 0104 	bicge.w	r1, r1, #4
 800c7e0:	6021      	strge	r1, [r4, #0]
 800c7e2:	b90d      	cbnz	r5, 800c7e8 <_printf_i+0x118>
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	d04d      	beq.n	800c884 <_printf_i+0x1b4>
 800c7e8:	4616      	mov	r6, r2
 800c7ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800c7ee:	fb03 5711 	mls	r7, r3, r1, r5
 800c7f2:	5dc7      	ldrb	r7, [r0, r7]
 800c7f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c7f8:	462f      	mov	r7, r5
 800c7fa:	42bb      	cmp	r3, r7
 800c7fc:	460d      	mov	r5, r1
 800c7fe:	d9f4      	bls.n	800c7ea <_printf_i+0x11a>
 800c800:	2b08      	cmp	r3, #8
 800c802:	d10b      	bne.n	800c81c <_printf_i+0x14c>
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	07df      	lsls	r7, r3, #31
 800c808:	d508      	bpl.n	800c81c <_printf_i+0x14c>
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	6861      	ldr	r1, [r4, #4]
 800c80e:	4299      	cmp	r1, r3
 800c810:	bfde      	ittt	le
 800c812:	2330      	movle	r3, #48	; 0x30
 800c814:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c81c:	1b92      	subs	r2, r2, r6
 800c81e:	6122      	str	r2, [r4, #16]
 800c820:	f8cd a000 	str.w	sl, [sp]
 800c824:	464b      	mov	r3, r9
 800c826:	aa03      	add	r2, sp, #12
 800c828:	4621      	mov	r1, r4
 800c82a:	4640      	mov	r0, r8
 800c82c:	f7ff fee2 	bl	800c5f4 <_printf_common>
 800c830:	3001      	adds	r0, #1
 800c832:	d14c      	bne.n	800c8ce <_printf_i+0x1fe>
 800c834:	f04f 30ff 	mov.w	r0, #4294967295
 800c838:	b004      	add	sp, #16
 800c83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83e:	4835      	ldr	r0, [pc, #212]	; (800c914 <_printf_i+0x244>)
 800c840:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	680e      	ldr	r6, [r1, #0]
 800c848:	061f      	lsls	r7, r3, #24
 800c84a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c84e:	600e      	str	r6, [r1, #0]
 800c850:	d514      	bpl.n	800c87c <_printf_i+0x1ac>
 800c852:	07d9      	lsls	r1, r3, #31
 800c854:	bf44      	itt	mi
 800c856:	f043 0320 	orrmi.w	r3, r3, #32
 800c85a:	6023      	strmi	r3, [r4, #0]
 800c85c:	b91d      	cbnz	r5, 800c866 <_printf_i+0x196>
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	f023 0320 	bic.w	r3, r3, #32
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	2310      	movs	r3, #16
 800c868:	e7b0      	b.n	800c7cc <_printf_i+0xfc>
 800c86a:	6823      	ldr	r3, [r4, #0]
 800c86c:	f043 0320 	orr.w	r3, r3, #32
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	2378      	movs	r3, #120	; 0x78
 800c874:	4828      	ldr	r0, [pc, #160]	; (800c918 <_printf_i+0x248>)
 800c876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c87a:	e7e3      	b.n	800c844 <_printf_i+0x174>
 800c87c:	065e      	lsls	r6, r3, #25
 800c87e:	bf48      	it	mi
 800c880:	b2ad      	uxthmi	r5, r5
 800c882:	e7e6      	b.n	800c852 <_printf_i+0x182>
 800c884:	4616      	mov	r6, r2
 800c886:	e7bb      	b.n	800c800 <_printf_i+0x130>
 800c888:	680b      	ldr	r3, [r1, #0]
 800c88a:	6826      	ldr	r6, [r4, #0]
 800c88c:	6960      	ldr	r0, [r4, #20]
 800c88e:	1d1d      	adds	r5, r3, #4
 800c890:	600d      	str	r5, [r1, #0]
 800c892:	0635      	lsls	r5, r6, #24
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	d501      	bpl.n	800c89c <_printf_i+0x1cc>
 800c898:	6018      	str	r0, [r3, #0]
 800c89a:	e002      	b.n	800c8a2 <_printf_i+0x1d2>
 800c89c:	0671      	lsls	r1, r6, #25
 800c89e:	d5fb      	bpl.n	800c898 <_printf_i+0x1c8>
 800c8a0:	8018      	strh	r0, [r3, #0]
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	6123      	str	r3, [r4, #16]
 800c8a6:	4616      	mov	r6, r2
 800c8a8:	e7ba      	b.n	800c820 <_printf_i+0x150>
 800c8aa:	680b      	ldr	r3, [r1, #0]
 800c8ac:	1d1a      	adds	r2, r3, #4
 800c8ae:	600a      	str	r2, [r1, #0]
 800c8b0:	681e      	ldr	r6, [r3, #0]
 800c8b2:	6862      	ldr	r2, [r4, #4]
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f7f3 fc92 	bl	80001e0 <memchr>
 800c8bc:	b108      	cbz	r0, 800c8c2 <_printf_i+0x1f2>
 800c8be:	1b80      	subs	r0, r0, r6
 800c8c0:	6060      	str	r0, [r4, #4]
 800c8c2:	6863      	ldr	r3, [r4, #4]
 800c8c4:	6123      	str	r3, [r4, #16]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8cc:	e7a8      	b.n	800c820 <_printf_i+0x150>
 800c8ce:	6923      	ldr	r3, [r4, #16]
 800c8d0:	4632      	mov	r2, r6
 800c8d2:	4649      	mov	r1, r9
 800c8d4:	4640      	mov	r0, r8
 800c8d6:	47d0      	blx	sl
 800c8d8:	3001      	adds	r0, #1
 800c8da:	d0ab      	beq.n	800c834 <_printf_i+0x164>
 800c8dc:	6823      	ldr	r3, [r4, #0]
 800c8de:	079b      	lsls	r3, r3, #30
 800c8e0:	d413      	bmi.n	800c90a <_printf_i+0x23a>
 800c8e2:	68e0      	ldr	r0, [r4, #12]
 800c8e4:	9b03      	ldr	r3, [sp, #12]
 800c8e6:	4298      	cmp	r0, r3
 800c8e8:	bfb8      	it	lt
 800c8ea:	4618      	movlt	r0, r3
 800c8ec:	e7a4      	b.n	800c838 <_printf_i+0x168>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	4632      	mov	r2, r6
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	47d0      	blx	sl
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	d09b      	beq.n	800c834 <_printf_i+0x164>
 800c8fc:	3501      	adds	r5, #1
 800c8fe:	68e3      	ldr	r3, [r4, #12]
 800c900:	9903      	ldr	r1, [sp, #12]
 800c902:	1a5b      	subs	r3, r3, r1
 800c904:	42ab      	cmp	r3, r5
 800c906:	dcf2      	bgt.n	800c8ee <_printf_i+0x21e>
 800c908:	e7eb      	b.n	800c8e2 <_printf_i+0x212>
 800c90a:	2500      	movs	r5, #0
 800c90c:	f104 0619 	add.w	r6, r4, #25
 800c910:	e7f5      	b.n	800c8fe <_printf_i+0x22e>
 800c912:	bf00      	nop
 800c914:	0800ee6e 	.word	0x0800ee6e
 800c918:	0800ee7f 	.word	0x0800ee7f

0800c91c <siprintf>:
 800c91c:	b40e      	push	{r1, r2, r3}
 800c91e:	b500      	push	{lr}
 800c920:	b09c      	sub	sp, #112	; 0x70
 800c922:	ab1d      	add	r3, sp, #116	; 0x74
 800c924:	9002      	str	r0, [sp, #8]
 800c926:	9006      	str	r0, [sp, #24]
 800c928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c92c:	4809      	ldr	r0, [pc, #36]	; (800c954 <siprintf+0x38>)
 800c92e:	9107      	str	r1, [sp, #28]
 800c930:	9104      	str	r1, [sp, #16]
 800c932:	4909      	ldr	r1, [pc, #36]	; (800c958 <siprintf+0x3c>)
 800c934:	f853 2b04 	ldr.w	r2, [r3], #4
 800c938:	9105      	str	r1, [sp, #20]
 800c93a:	6800      	ldr	r0, [r0, #0]
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	a902      	add	r1, sp, #8
 800c940:	f001 fb40 	bl	800dfc4 <_svfiprintf_r>
 800c944:	9b02      	ldr	r3, [sp, #8]
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
 800c94a:	b01c      	add	sp, #112	; 0x70
 800c94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c950:	b003      	add	sp, #12
 800c952:	4770      	bx	lr
 800c954:	20000194 	.word	0x20000194
 800c958:	ffff0208 	.word	0xffff0208

0800c95c <strcat>:
 800c95c:	b510      	push	{r4, lr}
 800c95e:	4602      	mov	r2, r0
 800c960:	7814      	ldrb	r4, [r2, #0]
 800c962:	4613      	mov	r3, r2
 800c964:	3201      	adds	r2, #1
 800c966:	2c00      	cmp	r4, #0
 800c968:	d1fa      	bne.n	800c960 <strcat+0x4>
 800c96a:	3b01      	subs	r3, #1
 800c96c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c970:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c974:	2a00      	cmp	r2, #0
 800c976:	d1f9      	bne.n	800c96c <strcat+0x10>
 800c978:	bd10      	pop	{r4, pc}

0800c97a <quorem>:
 800c97a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97e:	6903      	ldr	r3, [r0, #16]
 800c980:	690c      	ldr	r4, [r1, #16]
 800c982:	42a3      	cmp	r3, r4
 800c984:	4607      	mov	r7, r0
 800c986:	f2c0 8081 	blt.w	800ca8c <quorem+0x112>
 800c98a:	3c01      	subs	r4, #1
 800c98c:	f101 0814 	add.w	r8, r1, #20
 800c990:	f100 0514 	add.w	r5, r0, #20
 800c994:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c998:	9301      	str	r3, [sp, #4]
 800c99a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c99e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c9aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9b2:	d331      	bcc.n	800ca18 <quorem+0x9e>
 800c9b4:	f04f 0e00 	mov.w	lr, #0
 800c9b8:	4640      	mov	r0, r8
 800c9ba:	46ac      	mov	ip, r5
 800c9bc:	46f2      	mov	sl, lr
 800c9be:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9c2:	b293      	uxth	r3, r2
 800c9c4:	fb06 e303 	mla	r3, r6, r3, lr
 800c9c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	ebaa 0303 	sub.w	r3, sl, r3
 800c9d2:	0c12      	lsrs	r2, r2, #16
 800c9d4:	f8dc a000 	ldr.w	sl, [ip]
 800c9d8:	fb06 e202 	mla	r2, r6, r2, lr
 800c9dc:	fa13 f38a 	uxtah	r3, r3, sl
 800c9e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9e4:	fa1f fa82 	uxth.w	sl, r2
 800c9e8:	f8dc 2000 	ldr.w	r2, [ip]
 800c9ec:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c9f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9fa:	4581      	cmp	r9, r0
 800c9fc:	f84c 3b04 	str.w	r3, [ip], #4
 800ca00:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca04:	d2db      	bcs.n	800c9be <quorem+0x44>
 800ca06:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca0a:	b92b      	cbnz	r3, 800ca18 <quorem+0x9e>
 800ca0c:	9b01      	ldr	r3, [sp, #4]
 800ca0e:	3b04      	subs	r3, #4
 800ca10:	429d      	cmp	r5, r3
 800ca12:	461a      	mov	r2, r3
 800ca14:	d32e      	bcc.n	800ca74 <quorem+0xfa>
 800ca16:	613c      	str	r4, [r7, #16]
 800ca18:	4638      	mov	r0, r7
 800ca1a:	f001 f8bd 	bl	800db98 <__mcmp>
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	db24      	blt.n	800ca6c <quorem+0xf2>
 800ca22:	3601      	adds	r6, #1
 800ca24:	4628      	mov	r0, r5
 800ca26:	f04f 0c00 	mov.w	ip, #0
 800ca2a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca2e:	f8d0 e000 	ldr.w	lr, [r0]
 800ca32:	b293      	uxth	r3, r2
 800ca34:	ebac 0303 	sub.w	r3, ip, r3
 800ca38:	0c12      	lsrs	r2, r2, #16
 800ca3a:	fa13 f38e 	uxtah	r3, r3, lr
 800ca3e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca4c:	45c1      	cmp	r9, r8
 800ca4e:	f840 3b04 	str.w	r3, [r0], #4
 800ca52:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca56:	d2e8      	bcs.n	800ca2a <quorem+0xb0>
 800ca58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca60:	b922      	cbnz	r2, 800ca6c <quorem+0xf2>
 800ca62:	3b04      	subs	r3, #4
 800ca64:	429d      	cmp	r5, r3
 800ca66:	461a      	mov	r2, r3
 800ca68:	d30a      	bcc.n	800ca80 <quorem+0x106>
 800ca6a:	613c      	str	r4, [r7, #16]
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	b003      	add	sp, #12
 800ca70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca74:	6812      	ldr	r2, [r2, #0]
 800ca76:	3b04      	subs	r3, #4
 800ca78:	2a00      	cmp	r2, #0
 800ca7a:	d1cc      	bne.n	800ca16 <quorem+0x9c>
 800ca7c:	3c01      	subs	r4, #1
 800ca7e:	e7c7      	b.n	800ca10 <quorem+0x96>
 800ca80:	6812      	ldr	r2, [r2, #0]
 800ca82:	3b04      	subs	r3, #4
 800ca84:	2a00      	cmp	r2, #0
 800ca86:	d1f0      	bne.n	800ca6a <quorem+0xf0>
 800ca88:	3c01      	subs	r4, #1
 800ca8a:	e7eb      	b.n	800ca64 <quorem+0xea>
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	e7ee      	b.n	800ca6e <quorem+0xf4>

0800ca90 <_dtoa_r>:
 800ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca94:	ed2d 8b02 	vpush	{d8}
 800ca98:	ec57 6b10 	vmov	r6, r7, d0
 800ca9c:	b095      	sub	sp, #84	; 0x54
 800ca9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800caa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800caa4:	9105      	str	r1, [sp, #20]
 800caa6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800caaa:	4604      	mov	r4, r0
 800caac:	9209      	str	r2, [sp, #36]	; 0x24
 800caae:	930f      	str	r3, [sp, #60]	; 0x3c
 800cab0:	b975      	cbnz	r5, 800cad0 <_dtoa_r+0x40>
 800cab2:	2010      	movs	r0, #16
 800cab4:	f000 fddc 	bl	800d670 <malloc>
 800cab8:	4602      	mov	r2, r0
 800caba:	6260      	str	r0, [r4, #36]	; 0x24
 800cabc:	b920      	cbnz	r0, 800cac8 <_dtoa_r+0x38>
 800cabe:	4bb2      	ldr	r3, [pc, #712]	; (800cd88 <_dtoa_r+0x2f8>)
 800cac0:	21ea      	movs	r1, #234	; 0xea
 800cac2:	48b2      	ldr	r0, [pc, #712]	; (800cd8c <_dtoa_r+0x2fc>)
 800cac4:	f001 fb8e 	bl	800e1e4 <__assert_func>
 800cac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cacc:	6005      	str	r5, [r0, #0]
 800cace:	60c5      	str	r5, [r0, #12]
 800cad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cad2:	6819      	ldr	r1, [r3, #0]
 800cad4:	b151      	cbz	r1, 800caec <_dtoa_r+0x5c>
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	604a      	str	r2, [r1, #4]
 800cada:	2301      	movs	r3, #1
 800cadc:	4093      	lsls	r3, r2
 800cade:	608b      	str	r3, [r1, #8]
 800cae0:	4620      	mov	r0, r4
 800cae2:	f000 fe1b 	bl	800d71c <_Bfree>
 800cae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	1e3b      	subs	r3, r7, #0
 800caee:	bfb9      	ittee	lt
 800caf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800caf4:	9303      	strlt	r3, [sp, #12]
 800caf6:	2300      	movge	r3, #0
 800caf8:	f8c8 3000 	strge.w	r3, [r8]
 800cafc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cb00:	4ba3      	ldr	r3, [pc, #652]	; (800cd90 <_dtoa_r+0x300>)
 800cb02:	bfbc      	itt	lt
 800cb04:	2201      	movlt	r2, #1
 800cb06:	f8c8 2000 	strlt.w	r2, [r8]
 800cb0a:	ea33 0309 	bics.w	r3, r3, r9
 800cb0e:	d11b      	bne.n	800cb48 <_dtoa_r+0xb8>
 800cb10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb12:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb1c:	4333      	orrs	r3, r6
 800cb1e:	f000 857a 	beq.w	800d616 <_dtoa_r+0xb86>
 800cb22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb24:	b963      	cbnz	r3, 800cb40 <_dtoa_r+0xb0>
 800cb26:	4b9b      	ldr	r3, [pc, #620]	; (800cd94 <_dtoa_r+0x304>)
 800cb28:	e024      	b.n	800cb74 <_dtoa_r+0xe4>
 800cb2a:	4b9b      	ldr	r3, [pc, #620]	; (800cd98 <_dtoa_r+0x308>)
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	3308      	adds	r3, #8
 800cb30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb32:	6013      	str	r3, [r2, #0]
 800cb34:	9800      	ldr	r0, [sp, #0]
 800cb36:	b015      	add	sp, #84	; 0x54
 800cb38:	ecbd 8b02 	vpop	{d8}
 800cb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb40:	4b94      	ldr	r3, [pc, #592]	; (800cd94 <_dtoa_r+0x304>)
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	3303      	adds	r3, #3
 800cb46:	e7f3      	b.n	800cb30 <_dtoa_r+0xa0>
 800cb48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	ec51 0b17 	vmov	r0, r1, d7
 800cb52:	2300      	movs	r3, #0
 800cb54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cb58:	f7f3 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	b158      	cbz	r0, 800cb78 <_dtoa_r+0xe8>
 800cb60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb62:	2301      	movs	r3, #1
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 8551 	beq.w	800d610 <_dtoa_r+0xb80>
 800cb6e:	488b      	ldr	r0, [pc, #556]	; (800cd9c <_dtoa_r+0x30c>)
 800cb70:	6018      	str	r0, [r3, #0]
 800cb72:	1e43      	subs	r3, r0, #1
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	e7dd      	b.n	800cb34 <_dtoa_r+0xa4>
 800cb78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cb7c:	aa12      	add	r2, sp, #72	; 0x48
 800cb7e:	a913      	add	r1, sp, #76	; 0x4c
 800cb80:	4620      	mov	r0, r4
 800cb82:	f001 f8ad 	bl	800dce0 <__d2b>
 800cb86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb8a:	4683      	mov	fp, r0
 800cb8c:	2d00      	cmp	r5, #0
 800cb8e:	d07c      	beq.n	800cc8a <_dtoa_r+0x1fa>
 800cb90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cb96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cb9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cba2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cba6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cbaa:	4b7d      	ldr	r3, [pc, #500]	; (800cda0 <_dtoa_r+0x310>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	4630      	mov	r0, r6
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	f7f3 fb69 	bl	8000288 <__aeabi_dsub>
 800cbb6:	a36e      	add	r3, pc, #440	; (adr r3, 800cd70 <_dtoa_r+0x2e0>)
 800cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbc:	f7f3 fd1c 	bl	80005f8 <__aeabi_dmul>
 800cbc0:	a36d      	add	r3, pc, #436	; (adr r3, 800cd78 <_dtoa_r+0x2e8>)
 800cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc6:	f7f3 fb61 	bl	800028c <__adddf3>
 800cbca:	4606      	mov	r6, r0
 800cbcc:	4628      	mov	r0, r5
 800cbce:	460f      	mov	r7, r1
 800cbd0:	f7f3 fca8 	bl	8000524 <__aeabi_i2d>
 800cbd4:	a36a      	add	r3, pc, #424	; (adr r3, 800cd80 <_dtoa_r+0x2f0>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	f7f3 fd0d 	bl	80005f8 <__aeabi_dmul>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	f7f3 fb51 	bl	800028c <__adddf3>
 800cbea:	4606      	mov	r6, r0
 800cbec:	460f      	mov	r7, r1
 800cbee:	f7f3 ffb3 	bl	8000b58 <__aeabi_d2iz>
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	4682      	mov	sl, r0
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	4639      	mov	r1, r7
 800cbfc:	f7f3 ff6e 	bl	8000adc <__aeabi_dcmplt>
 800cc00:	b148      	cbz	r0, 800cc16 <_dtoa_r+0x186>
 800cc02:	4650      	mov	r0, sl
 800cc04:	f7f3 fc8e 	bl	8000524 <__aeabi_i2d>
 800cc08:	4632      	mov	r2, r6
 800cc0a:	463b      	mov	r3, r7
 800cc0c:	f7f3 ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc10:	b908      	cbnz	r0, 800cc16 <_dtoa_r+0x186>
 800cc12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc16:	f1ba 0f16 	cmp.w	sl, #22
 800cc1a:	d854      	bhi.n	800ccc6 <_dtoa_r+0x236>
 800cc1c:	4b61      	ldr	r3, [pc, #388]	; (800cda4 <_dtoa_r+0x314>)
 800cc1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc2a:	f7f3 ff57 	bl	8000adc <__aeabi_dcmplt>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d04b      	beq.n	800ccca <_dtoa_r+0x23a>
 800cc32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc36:	2300      	movs	r3, #0
 800cc38:	930e      	str	r3, [sp, #56]	; 0x38
 800cc3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc3c:	1b5d      	subs	r5, r3, r5
 800cc3e:	1e6b      	subs	r3, r5, #1
 800cc40:	9304      	str	r3, [sp, #16]
 800cc42:	bf43      	ittte	mi
 800cc44:	2300      	movmi	r3, #0
 800cc46:	f1c5 0801 	rsbmi	r8, r5, #1
 800cc4a:	9304      	strmi	r3, [sp, #16]
 800cc4c:	f04f 0800 	movpl.w	r8, #0
 800cc50:	f1ba 0f00 	cmp.w	sl, #0
 800cc54:	db3b      	blt.n	800ccce <_dtoa_r+0x23e>
 800cc56:	9b04      	ldr	r3, [sp, #16]
 800cc58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cc5c:	4453      	add	r3, sl
 800cc5e:	9304      	str	r3, [sp, #16]
 800cc60:	2300      	movs	r3, #0
 800cc62:	9306      	str	r3, [sp, #24]
 800cc64:	9b05      	ldr	r3, [sp, #20]
 800cc66:	2b09      	cmp	r3, #9
 800cc68:	d869      	bhi.n	800cd3e <_dtoa_r+0x2ae>
 800cc6a:	2b05      	cmp	r3, #5
 800cc6c:	bfc4      	itt	gt
 800cc6e:	3b04      	subgt	r3, #4
 800cc70:	9305      	strgt	r3, [sp, #20]
 800cc72:	9b05      	ldr	r3, [sp, #20]
 800cc74:	f1a3 0302 	sub.w	r3, r3, #2
 800cc78:	bfcc      	ite	gt
 800cc7a:	2500      	movgt	r5, #0
 800cc7c:	2501      	movle	r5, #1
 800cc7e:	2b03      	cmp	r3, #3
 800cc80:	d869      	bhi.n	800cd56 <_dtoa_r+0x2c6>
 800cc82:	e8df f003 	tbb	[pc, r3]
 800cc86:	4e2c      	.short	0x4e2c
 800cc88:	5a4c      	.short	0x5a4c
 800cc8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cc8e:	441d      	add	r5, r3
 800cc90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cc94:	2b20      	cmp	r3, #32
 800cc96:	bfc1      	itttt	gt
 800cc98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cca0:	fa09 f303 	lslgt.w	r3, r9, r3
 800cca4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cca8:	bfda      	itte	le
 800ccaa:	f1c3 0320 	rsble	r3, r3, #32
 800ccae:	fa06 f003 	lslle.w	r0, r6, r3
 800ccb2:	4318      	orrgt	r0, r3
 800ccb4:	f7f3 fc26 	bl	8000504 <__aeabi_ui2d>
 800ccb8:	2301      	movs	r3, #1
 800ccba:	4606      	mov	r6, r0
 800ccbc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ccc0:	3d01      	subs	r5, #1
 800ccc2:	9310      	str	r3, [sp, #64]	; 0x40
 800ccc4:	e771      	b.n	800cbaa <_dtoa_r+0x11a>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e7b6      	b.n	800cc38 <_dtoa_r+0x1a8>
 800ccca:	900e      	str	r0, [sp, #56]	; 0x38
 800cccc:	e7b5      	b.n	800cc3a <_dtoa_r+0x1aa>
 800ccce:	f1ca 0300 	rsb	r3, sl, #0
 800ccd2:	9306      	str	r3, [sp, #24]
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	eba8 080a 	sub.w	r8, r8, sl
 800ccda:	930d      	str	r3, [sp, #52]	; 0x34
 800ccdc:	e7c2      	b.n	800cc64 <_dtoa_r+0x1d4>
 800ccde:	2300      	movs	r3, #0
 800cce0:	9308      	str	r3, [sp, #32]
 800cce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	dc39      	bgt.n	800cd5c <_dtoa_r+0x2cc>
 800cce8:	f04f 0901 	mov.w	r9, #1
 800ccec:	f8cd 9004 	str.w	r9, [sp, #4]
 800ccf0:	464b      	mov	r3, r9
 800ccf2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ccf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	6042      	str	r2, [r0, #4]
 800ccfc:	2204      	movs	r2, #4
 800ccfe:	f102 0614 	add.w	r6, r2, #20
 800cd02:	429e      	cmp	r6, r3
 800cd04:	6841      	ldr	r1, [r0, #4]
 800cd06:	d92f      	bls.n	800cd68 <_dtoa_r+0x2d8>
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 fcc7 	bl	800d69c <_Balloc>
 800cd0e:	9000      	str	r0, [sp, #0]
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d14b      	bne.n	800cdac <_dtoa_r+0x31c>
 800cd14:	4b24      	ldr	r3, [pc, #144]	; (800cda8 <_dtoa_r+0x318>)
 800cd16:	4602      	mov	r2, r0
 800cd18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd1c:	e6d1      	b.n	800cac2 <_dtoa_r+0x32>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e7de      	b.n	800cce0 <_dtoa_r+0x250>
 800cd22:	2300      	movs	r3, #0
 800cd24:	9308      	str	r3, [sp, #32]
 800cd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd28:	eb0a 0903 	add.w	r9, sl, r3
 800cd2c:	f109 0301 	add.w	r3, r9, #1
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	bfb8      	it	lt
 800cd36:	2301      	movlt	r3, #1
 800cd38:	e7dd      	b.n	800ccf6 <_dtoa_r+0x266>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e7f2      	b.n	800cd24 <_dtoa_r+0x294>
 800cd3e:	2501      	movs	r5, #1
 800cd40:	2300      	movs	r3, #0
 800cd42:	9305      	str	r3, [sp, #20]
 800cd44:	9508      	str	r5, [sp, #32]
 800cd46:	f04f 39ff 	mov.w	r9, #4294967295
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd50:	2312      	movs	r3, #18
 800cd52:	9209      	str	r2, [sp, #36]	; 0x24
 800cd54:	e7cf      	b.n	800ccf6 <_dtoa_r+0x266>
 800cd56:	2301      	movs	r3, #1
 800cd58:	9308      	str	r3, [sp, #32]
 800cd5a:	e7f4      	b.n	800cd46 <_dtoa_r+0x2b6>
 800cd5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cd60:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd64:	464b      	mov	r3, r9
 800cd66:	e7c6      	b.n	800ccf6 <_dtoa_r+0x266>
 800cd68:	3101      	adds	r1, #1
 800cd6a:	6041      	str	r1, [r0, #4]
 800cd6c:	0052      	lsls	r2, r2, #1
 800cd6e:	e7c6      	b.n	800ccfe <_dtoa_r+0x26e>
 800cd70:	636f4361 	.word	0x636f4361
 800cd74:	3fd287a7 	.word	0x3fd287a7
 800cd78:	8b60c8b3 	.word	0x8b60c8b3
 800cd7c:	3fc68a28 	.word	0x3fc68a28
 800cd80:	509f79fb 	.word	0x509f79fb
 800cd84:	3fd34413 	.word	0x3fd34413
 800cd88:	0800ee9d 	.word	0x0800ee9d
 800cd8c:	0800eeb4 	.word	0x0800eeb4
 800cd90:	7ff00000 	.word	0x7ff00000
 800cd94:	0800ee99 	.word	0x0800ee99
 800cd98:	0800ee90 	.word	0x0800ee90
 800cd9c:	0800ee6d 	.word	0x0800ee6d
 800cda0:	3ff80000 	.word	0x3ff80000
 800cda4:	0800efb0 	.word	0x0800efb0
 800cda8:	0800ef13 	.word	0x0800ef13
 800cdac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdae:	9a00      	ldr	r2, [sp, #0]
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	9b01      	ldr	r3, [sp, #4]
 800cdb4:	2b0e      	cmp	r3, #14
 800cdb6:	f200 80ad 	bhi.w	800cf14 <_dtoa_r+0x484>
 800cdba:	2d00      	cmp	r5, #0
 800cdbc:	f000 80aa 	beq.w	800cf14 <_dtoa_r+0x484>
 800cdc0:	f1ba 0f00 	cmp.w	sl, #0
 800cdc4:	dd36      	ble.n	800ce34 <_dtoa_r+0x3a4>
 800cdc6:	4ac3      	ldr	r2, [pc, #780]	; (800d0d4 <_dtoa_r+0x644>)
 800cdc8:	f00a 030f 	and.w	r3, sl, #15
 800cdcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdd0:	ed93 7b00 	vldr	d7, [r3]
 800cdd4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cdd8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cddc:	eeb0 8a47 	vmov.f32	s16, s14
 800cde0:	eef0 8a67 	vmov.f32	s17, s15
 800cde4:	d016      	beq.n	800ce14 <_dtoa_r+0x384>
 800cde6:	4bbc      	ldr	r3, [pc, #752]	; (800d0d8 <_dtoa_r+0x648>)
 800cde8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cdec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdf0:	f7f3 fd2c 	bl	800084c <__aeabi_ddiv>
 800cdf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdf8:	f007 070f 	and.w	r7, r7, #15
 800cdfc:	2503      	movs	r5, #3
 800cdfe:	4eb6      	ldr	r6, [pc, #728]	; (800d0d8 <_dtoa_r+0x648>)
 800ce00:	b957      	cbnz	r7, 800ce18 <_dtoa_r+0x388>
 800ce02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce06:	ec53 2b18 	vmov	r2, r3, d8
 800ce0a:	f7f3 fd1f 	bl	800084c <__aeabi_ddiv>
 800ce0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce12:	e029      	b.n	800ce68 <_dtoa_r+0x3d8>
 800ce14:	2502      	movs	r5, #2
 800ce16:	e7f2      	b.n	800cdfe <_dtoa_r+0x36e>
 800ce18:	07f9      	lsls	r1, r7, #31
 800ce1a:	d508      	bpl.n	800ce2e <_dtoa_r+0x39e>
 800ce1c:	ec51 0b18 	vmov	r0, r1, d8
 800ce20:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce24:	f7f3 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ce28:	ec41 0b18 	vmov	d8, r0, r1
 800ce2c:	3501      	adds	r5, #1
 800ce2e:	107f      	asrs	r7, r7, #1
 800ce30:	3608      	adds	r6, #8
 800ce32:	e7e5      	b.n	800ce00 <_dtoa_r+0x370>
 800ce34:	f000 80a6 	beq.w	800cf84 <_dtoa_r+0x4f4>
 800ce38:	f1ca 0600 	rsb	r6, sl, #0
 800ce3c:	4ba5      	ldr	r3, [pc, #660]	; (800d0d4 <_dtoa_r+0x644>)
 800ce3e:	4fa6      	ldr	r7, [pc, #664]	; (800d0d8 <_dtoa_r+0x648>)
 800ce40:	f006 020f 	and.w	r2, r6, #15
 800ce44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce50:	f7f3 fbd2 	bl	80005f8 <__aeabi_dmul>
 800ce54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce58:	1136      	asrs	r6, r6, #4
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	2502      	movs	r5, #2
 800ce5e:	2e00      	cmp	r6, #0
 800ce60:	f040 8085 	bne.w	800cf6e <_dtoa_r+0x4de>
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1d2      	bne.n	800ce0e <_dtoa_r+0x37e>
 800ce68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f000 808c 	beq.w	800cf88 <_dtoa_r+0x4f8>
 800ce70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce74:	4b99      	ldr	r3, [pc, #612]	; (800d0dc <_dtoa_r+0x64c>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	4630      	mov	r0, r6
 800ce7a:	4639      	mov	r1, r7
 800ce7c:	f7f3 fe2e 	bl	8000adc <__aeabi_dcmplt>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	f000 8081 	beq.w	800cf88 <_dtoa_r+0x4f8>
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d07d      	beq.n	800cf88 <_dtoa_r+0x4f8>
 800ce8c:	f1b9 0f00 	cmp.w	r9, #0
 800ce90:	dd3c      	ble.n	800cf0c <_dtoa_r+0x47c>
 800ce92:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce96:	9307      	str	r3, [sp, #28]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	4b91      	ldr	r3, [pc, #580]	; (800d0e0 <_dtoa_r+0x650>)
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	4639      	mov	r1, r7
 800cea0:	f7f3 fbaa 	bl	80005f8 <__aeabi_dmul>
 800cea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cea8:	3501      	adds	r5, #1
 800ceaa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ceae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	f7f3 fb36 	bl	8000524 <__aeabi_i2d>
 800ceb8:	4632      	mov	r2, r6
 800ceba:	463b      	mov	r3, r7
 800cebc:	f7f3 fb9c 	bl	80005f8 <__aeabi_dmul>
 800cec0:	4b88      	ldr	r3, [pc, #544]	; (800d0e4 <_dtoa_r+0x654>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	f7f3 f9e2 	bl	800028c <__adddf3>
 800cec8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ced0:	9303      	str	r3, [sp, #12]
 800ced2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d15c      	bne.n	800cf92 <_dtoa_r+0x502>
 800ced8:	4b83      	ldr	r3, [pc, #524]	; (800d0e8 <_dtoa_r+0x658>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	4630      	mov	r0, r6
 800cede:	4639      	mov	r1, r7
 800cee0:	f7f3 f9d2 	bl	8000288 <__aeabi_dsub>
 800cee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cee8:	4606      	mov	r6, r0
 800ceea:	460f      	mov	r7, r1
 800ceec:	f7f3 fe14 	bl	8000b18 <__aeabi_dcmpgt>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	f040 8296 	bne.w	800d422 <_dtoa_r+0x992>
 800cef6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cefa:	4630      	mov	r0, r6
 800cefc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf00:	4639      	mov	r1, r7
 800cf02:	f7f3 fdeb 	bl	8000adc <__aeabi_dcmplt>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	f040 8288 	bne.w	800d41c <_dtoa_r+0x98c>
 800cf0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f2c0 8158 	blt.w	800d1cc <_dtoa_r+0x73c>
 800cf1c:	f1ba 0f0e 	cmp.w	sl, #14
 800cf20:	f300 8154 	bgt.w	800d1cc <_dtoa_r+0x73c>
 800cf24:	4b6b      	ldr	r3, [pc, #428]	; (800d0d4 <_dtoa_r+0x644>)
 800cf26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f280 80e3 	bge.w	800d0fc <_dtoa_r+0x66c>
 800cf36:	9b01      	ldr	r3, [sp, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f300 80df 	bgt.w	800d0fc <_dtoa_r+0x66c>
 800cf3e:	f040 826d 	bne.w	800d41c <_dtoa_r+0x98c>
 800cf42:	4b69      	ldr	r3, [pc, #420]	; (800d0e8 <_dtoa_r+0x658>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	4640      	mov	r0, r8
 800cf48:	4649      	mov	r1, r9
 800cf4a:	f7f3 fb55 	bl	80005f8 <__aeabi_dmul>
 800cf4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf52:	f7f3 fdd7 	bl	8000b04 <__aeabi_dcmpge>
 800cf56:	9e01      	ldr	r6, [sp, #4]
 800cf58:	4637      	mov	r7, r6
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	f040 8243 	bne.w	800d3e6 <_dtoa_r+0x956>
 800cf60:	9d00      	ldr	r5, [sp, #0]
 800cf62:	2331      	movs	r3, #49	; 0x31
 800cf64:	f805 3b01 	strb.w	r3, [r5], #1
 800cf68:	f10a 0a01 	add.w	sl, sl, #1
 800cf6c:	e23f      	b.n	800d3ee <_dtoa_r+0x95e>
 800cf6e:	07f2      	lsls	r2, r6, #31
 800cf70:	d505      	bpl.n	800cf7e <_dtoa_r+0x4ee>
 800cf72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf76:	f7f3 fb3f 	bl	80005f8 <__aeabi_dmul>
 800cf7a:	3501      	adds	r5, #1
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	1076      	asrs	r6, r6, #1
 800cf80:	3708      	adds	r7, #8
 800cf82:	e76c      	b.n	800ce5e <_dtoa_r+0x3ce>
 800cf84:	2502      	movs	r5, #2
 800cf86:	e76f      	b.n	800ce68 <_dtoa_r+0x3d8>
 800cf88:	9b01      	ldr	r3, [sp, #4]
 800cf8a:	f8cd a01c 	str.w	sl, [sp, #28]
 800cf8e:	930c      	str	r3, [sp, #48]	; 0x30
 800cf90:	e78d      	b.n	800ceae <_dtoa_r+0x41e>
 800cf92:	9900      	ldr	r1, [sp, #0]
 800cf94:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cf96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf98:	4b4e      	ldr	r3, [pc, #312]	; (800d0d4 <_dtoa_r+0x644>)
 800cf9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf9e:	4401      	add	r1, r0
 800cfa0:	9102      	str	r1, [sp, #8]
 800cfa2:	9908      	ldr	r1, [sp, #32]
 800cfa4:	eeb0 8a47 	vmov.f32	s16, s14
 800cfa8:	eef0 8a67 	vmov.f32	s17, s15
 800cfac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cfb4:	2900      	cmp	r1, #0
 800cfb6:	d045      	beq.n	800d044 <_dtoa_r+0x5b4>
 800cfb8:	494c      	ldr	r1, [pc, #304]	; (800d0ec <_dtoa_r+0x65c>)
 800cfba:	2000      	movs	r0, #0
 800cfbc:	f7f3 fc46 	bl	800084c <__aeabi_ddiv>
 800cfc0:	ec53 2b18 	vmov	r2, r3, d8
 800cfc4:	f7f3 f960 	bl	8000288 <__aeabi_dsub>
 800cfc8:	9d00      	ldr	r5, [sp, #0]
 800cfca:	ec41 0b18 	vmov	d8, r0, r1
 800cfce:	4639      	mov	r1, r7
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7f3 fdc1 	bl	8000b58 <__aeabi_d2iz>
 800cfd6:	900c      	str	r0, [sp, #48]	; 0x30
 800cfd8:	f7f3 faa4 	bl	8000524 <__aeabi_i2d>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	f7f3 f950 	bl	8000288 <__aeabi_dsub>
 800cfe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfea:	3330      	adds	r3, #48	; 0x30
 800cfec:	f805 3b01 	strb.w	r3, [r5], #1
 800cff0:	ec53 2b18 	vmov	r2, r3, d8
 800cff4:	4606      	mov	r6, r0
 800cff6:	460f      	mov	r7, r1
 800cff8:	f7f3 fd70 	bl	8000adc <__aeabi_dcmplt>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d165      	bne.n	800d0cc <_dtoa_r+0x63c>
 800d000:	4632      	mov	r2, r6
 800d002:	463b      	mov	r3, r7
 800d004:	4935      	ldr	r1, [pc, #212]	; (800d0dc <_dtoa_r+0x64c>)
 800d006:	2000      	movs	r0, #0
 800d008:	f7f3 f93e 	bl	8000288 <__aeabi_dsub>
 800d00c:	ec53 2b18 	vmov	r2, r3, d8
 800d010:	f7f3 fd64 	bl	8000adc <__aeabi_dcmplt>
 800d014:	2800      	cmp	r0, #0
 800d016:	f040 80b9 	bne.w	800d18c <_dtoa_r+0x6fc>
 800d01a:	9b02      	ldr	r3, [sp, #8]
 800d01c:	429d      	cmp	r5, r3
 800d01e:	f43f af75 	beq.w	800cf0c <_dtoa_r+0x47c>
 800d022:	4b2f      	ldr	r3, [pc, #188]	; (800d0e0 <_dtoa_r+0x650>)
 800d024:	ec51 0b18 	vmov	r0, r1, d8
 800d028:	2200      	movs	r2, #0
 800d02a:	f7f3 fae5 	bl	80005f8 <__aeabi_dmul>
 800d02e:	4b2c      	ldr	r3, [pc, #176]	; (800d0e0 <_dtoa_r+0x650>)
 800d030:	ec41 0b18 	vmov	d8, r0, r1
 800d034:	2200      	movs	r2, #0
 800d036:	4630      	mov	r0, r6
 800d038:	4639      	mov	r1, r7
 800d03a:	f7f3 fadd 	bl	80005f8 <__aeabi_dmul>
 800d03e:	4606      	mov	r6, r0
 800d040:	460f      	mov	r7, r1
 800d042:	e7c4      	b.n	800cfce <_dtoa_r+0x53e>
 800d044:	ec51 0b17 	vmov	r0, r1, d7
 800d048:	f7f3 fad6 	bl	80005f8 <__aeabi_dmul>
 800d04c:	9b02      	ldr	r3, [sp, #8]
 800d04e:	9d00      	ldr	r5, [sp, #0]
 800d050:	930c      	str	r3, [sp, #48]	; 0x30
 800d052:	ec41 0b18 	vmov	d8, r0, r1
 800d056:	4639      	mov	r1, r7
 800d058:	4630      	mov	r0, r6
 800d05a:	f7f3 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800d05e:	9011      	str	r0, [sp, #68]	; 0x44
 800d060:	f7f3 fa60 	bl	8000524 <__aeabi_i2d>
 800d064:	4602      	mov	r2, r0
 800d066:	460b      	mov	r3, r1
 800d068:	4630      	mov	r0, r6
 800d06a:	4639      	mov	r1, r7
 800d06c:	f7f3 f90c 	bl	8000288 <__aeabi_dsub>
 800d070:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d072:	3330      	adds	r3, #48	; 0x30
 800d074:	f805 3b01 	strb.w	r3, [r5], #1
 800d078:	9b02      	ldr	r3, [sp, #8]
 800d07a:	429d      	cmp	r5, r3
 800d07c:	4606      	mov	r6, r0
 800d07e:	460f      	mov	r7, r1
 800d080:	f04f 0200 	mov.w	r2, #0
 800d084:	d134      	bne.n	800d0f0 <_dtoa_r+0x660>
 800d086:	4b19      	ldr	r3, [pc, #100]	; (800d0ec <_dtoa_r+0x65c>)
 800d088:	ec51 0b18 	vmov	r0, r1, d8
 800d08c:	f7f3 f8fe 	bl	800028c <__adddf3>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	4630      	mov	r0, r6
 800d096:	4639      	mov	r1, r7
 800d098:	f7f3 fd3e 	bl	8000b18 <__aeabi_dcmpgt>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d175      	bne.n	800d18c <_dtoa_r+0x6fc>
 800d0a0:	ec53 2b18 	vmov	r2, r3, d8
 800d0a4:	4911      	ldr	r1, [pc, #68]	; (800d0ec <_dtoa_r+0x65c>)
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	f7f3 f8ee 	bl	8000288 <__aeabi_dsub>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	f7f3 fd12 	bl	8000adc <__aeabi_dcmplt>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	f43f af27 	beq.w	800cf0c <_dtoa_r+0x47c>
 800d0be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0c0:	1e6b      	subs	r3, r5, #1
 800d0c2:	930c      	str	r3, [sp, #48]	; 0x30
 800d0c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d0c8:	2b30      	cmp	r3, #48	; 0x30
 800d0ca:	d0f8      	beq.n	800d0be <_dtoa_r+0x62e>
 800d0cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d0d0:	e04a      	b.n	800d168 <_dtoa_r+0x6d8>
 800d0d2:	bf00      	nop
 800d0d4:	0800efb0 	.word	0x0800efb0
 800d0d8:	0800ef88 	.word	0x0800ef88
 800d0dc:	3ff00000 	.word	0x3ff00000
 800d0e0:	40240000 	.word	0x40240000
 800d0e4:	401c0000 	.word	0x401c0000
 800d0e8:	40140000 	.word	0x40140000
 800d0ec:	3fe00000 	.word	0x3fe00000
 800d0f0:	4baf      	ldr	r3, [pc, #700]	; (800d3b0 <_dtoa_r+0x920>)
 800d0f2:	f7f3 fa81 	bl	80005f8 <__aeabi_dmul>
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	460f      	mov	r7, r1
 800d0fa:	e7ac      	b.n	800d056 <_dtoa_r+0x5c6>
 800d0fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d100:	9d00      	ldr	r5, [sp, #0]
 800d102:	4642      	mov	r2, r8
 800d104:	464b      	mov	r3, r9
 800d106:	4630      	mov	r0, r6
 800d108:	4639      	mov	r1, r7
 800d10a:	f7f3 fb9f 	bl	800084c <__aeabi_ddiv>
 800d10e:	f7f3 fd23 	bl	8000b58 <__aeabi_d2iz>
 800d112:	9002      	str	r0, [sp, #8]
 800d114:	f7f3 fa06 	bl	8000524 <__aeabi_i2d>
 800d118:	4642      	mov	r2, r8
 800d11a:	464b      	mov	r3, r9
 800d11c:	f7f3 fa6c 	bl	80005f8 <__aeabi_dmul>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	4630      	mov	r0, r6
 800d126:	4639      	mov	r1, r7
 800d128:	f7f3 f8ae 	bl	8000288 <__aeabi_dsub>
 800d12c:	9e02      	ldr	r6, [sp, #8]
 800d12e:	9f01      	ldr	r7, [sp, #4]
 800d130:	3630      	adds	r6, #48	; 0x30
 800d132:	f805 6b01 	strb.w	r6, [r5], #1
 800d136:	9e00      	ldr	r6, [sp, #0]
 800d138:	1bae      	subs	r6, r5, r6
 800d13a:	42b7      	cmp	r7, r6
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	d137      	bne.n	800d1b2 <_dtoa_r+0x722>
 800d142:	f7f3 f8a3 	bl	800028c <__adddf3>
 800d146:	4642      	mov	r2, r8
 800d148:	464b      	mov	r3, r9
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	f7f3 fce3 	bl	8000b18 <__aeabi_dcmpgt>
 800d152:	b9c8      	cbnz	r0, 800d188 <_dtoa_r+0x6f8>
 800d154:	4642      	mov	r2, r8
 800d156:	464b      	mov	r3, r9
 800d158:	4630      	mov	r0, r6
 800d15a:	4639      	mov	r1, r7
 800d15c:	f7f3 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d160:	b110      	cbz	r0, 800d168 <_dtoa_r+0x6d8>
 800d162:	9b02      	ldr	r3, [sp, #8]
 800d164:	07d9      	lsls	r1, r3, #31
 800d166:	d40f      	bmi.n	800d188 <_dtoa_r+0x6f8>
 800d168:	4620      	mov	r0, r4
 800d16a:	4659      	mov	r1, fp
 800d16c:	f000 fad6 	bl	800d71c <_Bfree>
 800d170:	2300      	movs	r3, #0
 800d172:	702b      	strb	r3, [r5, #0]
 800d174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d176:	f10a 0001 	add.w	r0, sl, #1
 800d17a:	6018      	str	r0, [r3, #0]
 800d17c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f43f acd8 	beq.w	800cb34 <_dtoa_r+0xa4>
 800d184:	601d      	str	r5, [r3, #0]
 800d186:	e4d5      	b.n	800cb34 <_dtoa_r+0xa4>
 800d188:	f8cd a01c 	str.w	sl, [sp, #28]
 800d18c:	462b      	mov	r3, r5
 800d18e:	461d      	mov	r5, r3
 800d190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d194:	2a39      	cmp	r2, #57	; 0x39
 800d196:	d108      	bne.n	800d1aa <_dtoa_r+0x71a>
 800d198:	9a00      	ldr	r2, [sp, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d1f7      	bne.n	800d18e <_dtoa_r+0x6fe>
 800d19e:	9a07      	ldr	r2, [sp, #28]
 800d1a0:	9900      	ldr	r1, [sp, #0]
 800d1a2:	3201      	adds	r2, #1
 800d1a4:	9207      	str	r2, [sp, #28]
 800d1a6:	2230      	movs	r2, #48	; 0x30
 800d1a8:	700a      	strb	r2, [r1, #0]
 800d1aa:	781a      	ldrb	r2, [r3, #0]
 800d1ac:	3201      	adds	r2, #1
 800d1ae:	701a      	strb	r2, [r3, #0]
 800d1b0:	e78c      	b.n	800d0cc <_dtoa_r+0x63c>
 800d1b2:	4b7f      	ldr	r3, [pc, #508]	; (800d3b0 <_dtoa_r+0x920>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f7f3 fa1f 	bl	80005f8 <__aeabi_dmul>
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4606      	mov	r6, r0
 800d1c0:	460f      	mov	r7, r1
 800d1c2:	f7f3 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d09b      	beq.n	800d102 <_dtoa_r+0x672>
 800d1ca:	e7cd      	b.n	800d168 <_dtoa_r+0x6d8>
 800d1cc:	9a08      	ldr	r2, [sp, #32]
 800d1ce:	2a00      	cmp	r2, #0
 800d1d0:	f000 80c4 	beq.w	800d35c <_dtoa_r+0x8cc>
 800d1d4:	9a05      	ldr	r2, [sp, #20]
 800d1d6:	2a01      	cmp	r2, #1
 800d1d8:	f300 80a8 	bgt.w	800d32c <_dtoa_r+0x89c>
 800d1dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d1de:	2a00      	cmp	r2, #0
 800d1e0:	f000 80a0 	beq.w	800d324 <_dtoa_r+0x894>
 800d1e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d1e8:	9e06      	ldr	r6, [sp, #24]
 800d1ea:	4645      	mov	r5, r8
 800d1ec:	9a04      	ldr	r2, [sp, #16]
 800d1ee:	2101      	movs	r1, #1
 800d1f0:	441a      	add	r2, r3
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	4498      	add	r8, r3
 800d1f6:	9204      	str	r2, [sp, #16]
 800d1f8:	f000 fb4c 	bl	800d894 <__i2b>
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	2d00      	cmp	r5, #0
 800d200:	dd0b      	ble.n	800d21a <_dtoa_r+0x78a>
 800d202:	9b04      	ldr	r3, [sp, #16]
 800d204:	2b00      	cmp	r3, #0
 800d206:	dd08      	ble.n	800d21a <_dtoa_r+0x78a>
 800d208:	42ab      	cmp	r3, r5
 800d20a:	9a04      	ldr	r2, [sp, #16]
 800d20c:	bfa8      	it	ge
 800d20e:	462b      	movge	r3, r5
 800d210:	eba8 0803 	sub.w	r8, r8, r3
 800d214:	1aed      	subs	r5, r5, r3
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	9304      	str	r3, [sp, #16]
 800d21a:	9b06      	ldr	r3, [sp, #24]
 800d21c:	b1fb      	cbz	r3, 800d25e <_dtoa_r+0x7ce>
 800d21e:	9b08      	ldr	r3, [sp, #32]
 800d220:	2b00      	cmp	r3, #0
 800d222:	f000 809f 	beq.w	800d364 <_dtoa_r+0x8d4>
 800d226:	2e00      	cmp	r6, #0
 800d228:	dd11      	ble.n	800d24e <_dtoa_r+0x7be>
 800d22a:	4639      	mov	r1, r7
 800d22c:	4632      	mov	r2, r6
 800d22e:	4620      	mov	r0, r4
 800d230:	f000 fbec 	bl	800da0c <__pow5mult>
 800d234:	465a      	mov	r2, fp
 800d236:	4601      	mov	r1, r0
 800d238:	4607      	mov	r7, r0
 800d23a:	4620      	mov	r0, r4
 800d23c:	f000 fb40 	bl	800d8c0 <__multiply>
 800d240:	4659      	mov	r1, fp
 800d242:	9007      	str	r0, [sp, #28]
 800d244:	4620      	mov	r0, r4
 800d246:	f000 fa69 	bl	800d71c <_Bfree>
 800d24a:	9b07      	ldr	r3, [sp, #28]
 800d24c:	469b      	mov	fp, r3
 800d24e:	9b06      	ldr	r3, [sp, #24]
 800d250:	1b9a      	subs	r2, r3, r6
 800d252:	d004      	beq.n	800d25e <_dtoa_r+0x7ce>
 800d254:	4659      	mov	r1, fp
 800d256:	4620      	mov	r0, r4
 800d258:	f000 fbd8 	bl	800da0c <__pow5mult>
 800d25c:	4683      	mov	fp, r0
 800d25e:	2101      	movs	r1, #1
 800d260:	4620      	mov	r0, r4
 800d262:	f000 fb17 	bl	800d894 <__i2b>
 800d266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d268:	2b00      	cmp	r3, #0
 800d26a:	4606      	mov	r6, r0
 800d26c:	dd7c      	ble.n	800d368 <_dtoa_r+0x8d8>
 800d26e:	461a      	mov	r2, r3
 800d270:	4601      	mov	r1, r0
 800d272:	4620      	mov	r0, r4
 800d274:	f000 fbca 	bl	800da0c <__pow5mult>
 800d278:	9b05      	ldr	r3, [sp, #20]
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	4606      	mov	r6, r0
 800d27e:	dd76      	ble.n	800d36e <_dtoa_r+0x8de>
 800d280:	2300      	movs	r3, #0
 800d282:	9306      	str	r3, [sp, #24]
 800d284:	6933      	ldr	r3, [r6, #16]
 800d286:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d28a:	6918      	ldr	r0, [r3, #16]
 800d28c:	f000 fab2 	bl	800d7f4 <__hi0bits>
 800d290:	f1c0 0020 	rsb	r0, r0, #32
 800d294:	9b04      	ldr	r3, [sp, #16]
 800d296:	4418      	add	r0, r3
 800d298:	f010 001f 	ands.w	r0, r0, #31
 800d29c:	f000 8086 	beq.w	800d3ac <_dtoa_r+0x91c>
 800d2a0:	f1c0 0320 	rsb	r3, r0, #32
 800d2a4:	2b04      	cmp	r3, #4
 800d2a6:	dd7f      	ble.n	800d3a8 <_dtoa_r+0x918>
 800d2a8:	f1c0 001c 	rsb	r0, r0, #28
 800d2ac:	9b04      	ldr	r3, [sp, #16]
 800d2ae:	4403      	add	r3, r0
 800d2b0:	4480      	add	r8, r0
 800d2b2:	4405      	add	r5, r0
 800d2b4:	9304      	str	r3, [sp, #16]
 800d2b6:	f1b8 0f00 	cmp.w	r8, #0
 800d2ba:	dd05      	ble.n	800d2c8 <_dtoa_r+0x838>
 800d2bc:	4659      	mov	r1, fp
 800d2be:	4642      	mov	r2, r8
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f000 fbfd 	bl	800dac0 <__lshift>
 800d2c6:	4683      	mov	fp, r0
 800d2c8:	9b04      	ldr	r3, [sp, #16]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	dd05      	ble.n	800d2da <_dtoa_r+0x84a>
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f000 fbf4 	bl	800dac0 <__lshift>
 800d2d8:	4606      	mov	r6, r0
 800d2da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d069      	beq.n	800d3b4 <_dtoa_r+0x924>
 800d2e0:	4631      	mov	r1, r6
 800d2e2:	4658      	mov	r0, fp
 800d2e4:	f000 fc58 	bl	800db98 <__mcmp>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	da63      	bge.n	800d3b4 <_dtoa_r+0x924>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4659      	mov	r1, fp
 800d2f0:	220a      	movs	r2, #10
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f000 fa34 	bl	800d760 <__multadd>
 800d2f8:	9b08      	ldr	r3, [sp, #32]
 800d2fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2fe:	4683      	mov	fp, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 818f 	beq.w	800d624 <_dtoa_r+0xb94>
 800d306:	4639      	mov	r1, r7
 800d308:	2300      	movs	r3, #0
 800d30a:	220a      	movs	r2, #10
 800d30c:	4620      	mov	r0, r4
 800d30e:	f000 fa27 	bl	800d760 <__multadd>
 800d312:	f1b9 0f00 	cmp.w	r9, #0
 800d316:	4607      	mov	r7, r0
 800d318:	f300 808e 	bgt.w	800d438 <_dtoa_r+0x9a8>
 800d31c:	9b05      	ldr	r3, [sp, #20]
 800d31e:	2b02      	cmp	r3, #2
 800d320:	dc50      	bgt.n	800d3c4 <_dtoa_r+0x934>
 800d322:	e089      	b.n	800d438 <_dtoa_r+0x9a8>
 800d324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d326:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d32a:	e75d      	b.n	800d1e8 <_dtoa_r+0x758>
 800d32c:	9b01      	ldr	r3, [sp, #4]
 800d32e:	1e5e      	subs	r6, r3, #1
 800d330:	9b06      	ldr	r3, [sp, #24]
 800d332:	42b3      	cmp	r3, r6
 800d334:	bfbf      	itttt	lt
 800d336:	9b06      	ldrlt	r3, [sp, #24]
 800d338:	9606      	strlt	r6, [sp, #24]
 800d33a:	1af2      	sublt	r2, r6, r3
 800d33c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d33e:	bfb6      	itet	lt
 800d340:	189b      	addlt	r3, r3, r2
 800d342:	1b9e      	subge	r6, r3, r6
 800d344:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d346:	9b01      	ldr	r3, [sp, #4]
 800d348:	bfb8      	it	lt
 800d34a:	2600      	movlt	r6, #0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bfb5      	itete	lt
 800d350:	eba8 0503 	sublt.w	r5, r8, r3
 800d354:	9b01      	ldrge	r3, [sp, #4]
 800d356:	2300      	movlt	r3, #0
 800d358:	4645      	movge	r5, r8
 800d35a:	e747      	b.n	800d1ec <_dtoa_r+0x75c>
 800d35c:	9e06      	ldr	r6, [sp, #24]
 800d35e:	9f08      	ldr	r7, [sp, #32]
 800d360:	4645      	mov	r5, r8
 800d362:	e74c      	b.n	800d1fe <_dtoa_r+0x76e>
 800d364:	9a06      	ldr	r2, [sp, #24]
 800d366:	e775      	b.n	800d254 <_dtoa_r+0x7c4>
 800d368:	9b05      	ldr	r3, [sp, #20]
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	dc18      	bgt.n	800d3a0 <_dtoa_r+0x910>
 800d36e:	9b02      	ldr	r3, [sp, #8]
 800d370:	b9b3      	cbnz	r3, 800d3a0 <_dtoa_r+0x910>
 800d372:	9b03      	ldr	r3, [sp, #12]
 800d374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d378:	b9a3      	cbnz	r3, 800d3a4 <_dtoa_r+0x914>
 800d37a:	9b03      	ldr	r3, [sp, #12]
 800d37c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d380:	0d1b      	lsrs	r3, r3, #20
 800d382:	051b      	lsls	r3, r3, #20
 800d384:	b12b      	cbz	r3, 800d392 <_dtoa_r+0x902>
 800d386:	9b04      	ldr	r3, [sp, #16]
 800d388:	3301      	adds	r3, #1
 800d38a:	9304      	str	r3, [sp, #16]
 800d38c:	f108 0801 	add.w	r8, r8, #1
 800d390:	2301      	movs	r3, #1
 800d392:	9306      	str	r3, [sp, #24]
 800d394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d396:	2b00      	cmp	r3, #0
 800d398:	f47f af74 	bne.w	800d284 <_dtoa_r+0x7f4>
 800d39c:	2001      	movs	r0, #1
 800d39e:	e779      	b.n	800d294 <_dtoa_r+0x804>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	e7f6      	b.n	800d392 <_dtoa_r+0x902>
 800d3a4:	9b02      	ldr	r3, [sp, #8]
 800d3a6:	e7f4      	b.n	800d392 <_dtoa_r+0x902>
 800d3a8:	d085      	beq.n	800d2b6 <_dtoa_r+0x826>
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	301c      	adds	r0, #28
 800d3ae:	e77d      	b.n	800d2ac <_dtoa_r+0x81c>
 800d3b0:	40240000 	.word	0x40240000
 800d3b4:	9b01      	ldr	r3, [sp, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	dc38      	bgt.n	800d42c <_dtoa_r+0x99c>
 800d3ba:	9b05      	ldr	r3, [sp, #20]
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	dd35      	ble.n	800d42c <_dtoa_r+0x99c>
 800d3c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d3c4:	f1b9 0f00 	cmp.w	r9, #0
 800d3c8:	d10d      	bne.n	800d3e6 <_dtoa_r+0x956>
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	464b      	mov	r3, r9
 800d3ce:	2205      	movs	r2, #5
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f000 f9c5 	bl	800d760 <__multadd>
 800d3d6:	4601      	mov	r1, r0
 800d3d8:	4606      	mov	r6, r0
 800d3da:	4658      	mov	r0, fp
 800d3dc:	f000 fbdc 	bl	800db98 <__mcmp>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	f73f adbd 	bgt.w	800cf60 <_dtoa_r+0x4d0>
 800d3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e8:	9d00      	ldr	r5, [sp, #0]
 800d3ea:	ea6f 0a03 	mvn.w	sl, r3
 800d3ee:	f04f 0800 	mov.w	r8, #0
 800d3f2:	4631      	mov	r1, r6
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	f000 f991 	bl	800d71c <_Bfree>
 800d3fa:	2f00      	cmp	r7, #0
 800d3fc:	f43f aeb4 	beq.w	800d168 <_dtoa_r+0x6d8>
 800d400:	f1b8 0f00 	cmp.w	r8, #0
 800d404:	d005      	beq.n	800d412 <_dtoa_r+0x982>
 800d406:	45b8      	cmp	r8, r7
 800d408:	d003      	beq.n	800d412 <_dtoa_r+0x982>
 800d40a:	4641      	mov	r1, r8
 800d40c:	4620      	mov	r0, r4
 800d40e:	f000 f985 	bl	800d71c <_Bfree>
 800d412:	4639      	mov	r1, r7
 800d414:	4620      	mov	r0, r4
 800d416:	f000 f981 	bl	800d71c <_Bfree>
 800d41a:	e6a5      	b.n	800d168 <_dtoa_r+0x6d8>
 800d41c:	2600      	movs	r6, #0
 800d41e:	4637      	mov	r7, r6
 800d420:	e7e1      	b.n	800d3e6 <_dtoa_r+0x956>
 800d422:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d424:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d428:	4637      	mov	r7, r6
 800d42a:	e599      	b.n	800cf60 <_dtoa_r+0x4d0>
 800d42c:	9b08      	ldr	r3, [sp, #32]
 800d42e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	f000 80fd 	beq.w	800d632 <_dtoa_r+0xba2>
 800d438:	2d00      	cmp	r5, #0
 800d43a:	dd05      	ble.n	800d448 <_dtoa_r+0x9b8>
 800d43c:	4639      	mov	r1, r7
 800d43e:	462a      	mov	r2, r5
 800d440:	4620      	mov	r0, r4
 800d442:	f000 fb3d 	bl	800dac0 <__lshift>
 800d446:	4607      	mov	r7, r0
 800d448:	9b06      	ldr	r3, [sp, #24]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d05c      	beq.n	800d508 <_dtoa_r+0xa78>
 800d44e:	6879      	ldr	r1, [r7, #4]
 800d450:	4620      	mov	r0, r4
 800d452:	f000 f923 	bl	800d69c <_Balloc>
 800d456:	4605      	mov	r5, r0
 800d458:	b928      	cbnz	r0, 800d466 <_dtoa_r+0x9d6>
 800d45a:	4b80      	ldr	r3, [pc, #512]	; (800d65c <_dtoa_r+0xbcc>)
 800d45c:	4602      	mov	r2, r0
 800d45e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d462:	f7ff bb2e 	b.w	800cac2 <_dtoa_r+0x32>
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	3202      	adds	r2, #2
 800d46a:	0092      	lsls	r2, r2, #2
 800d46c:	f107 010c 	add.w	r1, r7, #12
 800d470:	300c      	adds	r0, #12
 800d472:	f000 f905 	bl	800d680 <memcpy>
 800d476:	2201      	movs	r2, #1
 800d478:	4629      	mov	r1, r5
 800d47a:	4620      	mov	r0, r4
 800d47c:	f000 fb20 	bl	800dac0 <__lshift>
 800d480:	9b00      	ldr	r3, [sp, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	9b00      	ldr	r3, [sp, #0]
 800d488:	444b      	add	r3, r9
 800d48a:	9307      	str	r3, [sp, #28]
 800d48c:	9b02      	ldr	r3, [sp, #8]
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	46b8      	mov	r8, r7
 800d494:	9306      	str	r3, [sp, #24]
 800d496:	4607      	mov	r7, r0
 800d498:	9b01      	ldr	r3, [sp, #4]
 800d49a:	4631      	mov	r1, r6
 800d49c:	3b01      	subs	r3, #1
 800d49e:	4658      	mov	r0, fp
 800d4a0:	9302      	str	r3, [sp, #8]
 800d4a2:	f7ff fa6a 	bl	800c97a <quorem>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	3330      	adds	r3, #48	; 0x30
 800d4aa:	9004      	str	r0, [sp, #16]
 800d4ac:	4641      	mov	r1, r8
 800d4ae:	4658      	mov	r0, fp
 800d4b0:	9308      	str	r3, [sp, #32]
 800d4b2:	f000 fb71 	bl	800db98 <__mcmp>
 800d4b6:	463a      	mov	r2, r7
 800d4b8:	4681      	mov	r9, r0
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f000 fb87 	bl	800dbd0 <__mdiff>
 800d4c2:	68c2      	ldr	r2, [r0, #12]
 800d4c4:	9b08      	ldr	r3, [sp, #32]
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	bb02      	cbnz	r2, 800d50c <_dtoa_r+0xa7c>
 800d4ca:	4601      	mov	r1, r0
 800d4cc:	4658      	mov	r0, fp
 800d4ce:	f000 fb63 	bl	800db98 <__mcmp>
 800d4d2:	9b08      	ldr	r3, [sp, #32]
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	4620      	mov	r0, r4
 800d4da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d4de:	f000 f91d 	bl	800d71c <_Bfree>
 800d4e2:	9b05      	ldr	r3, [sp, #20]
 800d4e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4e6:	9d01      	ldr	r5, [sp, #4]
 800d4e8:	ea43 0102 	orr.w	r1, r3, r2
 800d4ec:	9b06      	ldr	r3, [sp, #24]
 800d4ee:	430b      	orrs	r3, r1
 800d4f0:	9b08      	ldr	r3, [sp, #32]
 800d4f2:	d10d      	bne.n	800d510 <_dtoa_r+0xa80>
 800d4f4:	2b39      	cmp	r3, #57	; 0x39
 800d4f6:	d029      	beq.n	800d54c <_dtoa_r+0xabc>
 800d4f8:	f1b9 0f00 	cmp.w	r9, #0
 800d4fc:	dd01      	ble.n	800d502 <_dtoa_r+0xa72>
 800d4fe:	9b04      	ldr	r3, [sp, #16]
 800d500:	3331      	adds	r3, #49	; 0x31
 800d502:	9a02      	ldr	r2, [sp, #8]
 800d504:	7013      	strb	r3, [r2, #0]
 800d506:	e774      	b.n	800d3f2 <_dtoa_r+0x962>
 800d508:	4638      	mov	r0, r7
 800d50a:	e7b9      	b.n	800d480 <_dtoa_r+0x9f0>
 800d50c:	2201      	movs	r2, #1
 800d50e:	e7e2      	b.n	800d4d6 <_dtoa_r+0xa46>
 800d510:	f1b9 0f00 	cmp.w	r9, #0
 800d514:	db06      	blt.n	800d524 <_dtoa_r+0xa94>
 800d516:	9905      	ldr	r1, [sp, #20]
 800d518:	ea41 0909 	orr.w	r9, r1, r9
 800d51c:	9906      	ldr	r1, [sp, #24]
 800d51e:	ea59 0101 	orrs.w	r1, r9, r1
 800d522:	d120      	bne.n	800d566 <_dtoa_r+0xad6>
 800d524:	2a00      	cmp	r2, #0
 800d526:	ddec      	ble.n	800d502 <_dtoa_r+0xa72>
 800d528:	4659      	mov	r1, fp
 800d52a:	2201      	movs	r2, #1
 800d52c:	4620      	mov	r0, r4
 800d52e:	9301      	str	r3, [sp, #4]
 800d530:	f000 fac6 	bl	800dac0 <__lshift>
 800d534:	4631      	mov	r1, r6
 800d536:	4683      	mov	fp, r0
 800d538:	f000 fb2e 	bl	800db98 <__mcmp>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	9b01      	ldr	r3, [sp, #4]
 800d540:	dc02      	bgt.n	800d548 <_dtoa_r+0xab8>
 800d542:	d1de      	bne.n	800d502 <_dtoa_r+0xa72>
 800d544:	07da      	lsls	r2, r3, #31
 800d546:	d5dc      	bpl.n	800d502 <_dtoa_r+0xa72>
 800d548:	2b39      	cmp	r3, #57	; 0x39
 800d54a:	d1d8      	bne.n	800d4fe <_dtoa_r+0xa6e>
 800d54c:	9a02      	ldr	r2, [sp, #8]
 800d54e:	2339      	movs	r3, #57	; 0x39
 800d550:	7013      	strb	r3, [r2, #0]
 800d552:	462b      	mov	r3, r5
 800d554:	461d      	mov	r5, r3
 800d556:	3b01      	subs	r3, #1
 800d558:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d55c:	2a39      	cmp	r2, #57	; 0x39
 800d55e:	d050      	beq.n	800d602 <_dtoa_r+0xb72>
 800d560:	3201      	adds	r2, #1
 800d562:	701a      	strb	r2, [r3, #0]
 800d564:	e745      	b.n	800d3f2 <_dtoa_r+0x962>
 800d566:	2a00      	cmp	r2, #0
 800d568:	dd03      	ble.n	800d572 <_dtoa_r+0xae2>
 800d56a:	2b39      	cmp	r3, #57	; 0x39
 800d56c:	d0ee      	beq.n	800d54c <_dtoa_r+0xabc>
 800d56e:	3301      	adds	r3, #1
 800d570:	e7c7      	b.n	800d502 <_dtoa_r+0xa72>
 800d572:	9a01      	ldr	r2, [sp, #4]
 800d574:	9907      	ldr	r1, [sp, #28]
 800d576:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d57a:	428a      	cmp	r2, r1
 800d57c:	d02a      	beq.n	800d5d4 <_dtoa_r+0xb44>
 800d57e:	4659      	mov	r1, fp
 800d580:	2300      	movs	r3, #0
 800d582:	220a      	movs	r2, #10
 800d584:	4620      	mov	r0, r4
 800d586:	f000 f8eb 	bl	800d760 <__multadd>
 800d58a:	45b8      	cmp	r8, r7
 800d58c:	4683      	mov	fp, r0
 800d58e:	f04f 0300 	mov.w	r3, #0
 800d592:	f04f 020a 	mov.w	r2, #10
 800d596:	4641      	mov	r1, r8
 800d598:	4620      	mov	r0, r4
 800d59a:	d107      	bne.n	800d5ac <_dtoa_r+0xb1c>
 800d59c:	f000 f8e0 	bl	800d760 <__multadd>
 800d5a0:	4680      	mov	r8, r0
 800d5a2:	4607      	mov	r7, r0
 800d5a4:	9b01      	ldr	r3, [sp, #4]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	9301      	str	r3, [sp, #4]
 800d5aa:	e775      	b.n	800d498 <_dtoa_r+0xa08>
 800d5ac:	f000 f8d8 	bl	800d760 <__multadd>
 800d5b0:	4639      	mov	r1, r7
 800d5b2:	4680      	mov	r8, r0
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	220a      	movs	r2, #10
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 f8d1 	bl	800d760 <__multadd>
 800d5be:	4607      	mov	r7, r0
 800d5c0:	e7f0      	b.n	800d5a4 <_dtoa_r+0xb14>
 800d5c2:	f1b9 0f00 	cmp.w	r9, #0
 800d5c6:	9a00      	ldr	r2, [sp, #0]
 800d5c8:	bfcc      	ite	gt
 800d5ca:	464d      	movgt	r5, r9
 800d5cc:	2501      	movle	r5, #1
 800d5ce:	4415      	add	r5, r2
 800d5d0:	f04f 0800 	mov.w	r8, #0
 800d5d4:	4659      	mov	r1, fp
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	4620      	mov	r0, r4
 800d5da:	9301      	str	r3, [sp, #4]
 800d5dc:	f000 fa70 	bl	800dac0 <__lshift>
 800d5e0:	4631      	mov	r1, r6
 800d5e2:	4683      	mov	fp, r0
 800d5e4:	f000 fad8 	bl	800db98 <__mcmp>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	dcb2      	bgt.n	800d552 <_dtoa_r+0xac2>
 800d5ec:	d102      	bne.n	800d5f4 <_dtoa_r+0xb64>
 800d5ee:	9b01      	ldr	r3, [sp, #4]
 800d5f0:	07db      	lsls	r3, r3, #31
 800d5f2:	d4ae      	bmi.n	800d552 <_dtoa_r+0xac2>
 800d5f4:	462b      	mov	r3, r5
 800d5f6:	461d      	mov	r5, r3
 800d5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5fc:	2a30      	cmp	r2, #48	; 0x30
 800d5fe:	d0fa      	beq.n	800d5f6 <_dtoa_r+0xb66>
 800d600:	e6f7      	b.n	800d3f2 <_dtoa_r+0x962>
 800d602:	9a00      	ldr	r2, [sp, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d1a5      	bne.n	800d554 <_dtoa_r+0xac4>
 800d608:	f10a 0a01 	add.w	sl, sl, #1
 800d60c:	2331      	movs	r3, #49	; 0x31
 800d60e:	e779      	b.n	800d504 <_dtoa_r+0xa74>
 800d610:	4b13      	ldr	r3, [pc, #76]	; (800d660 <_dtoa_r+0xbd0>)
 800d612:	f7ff baaf 	b.w	800cb74 <_dtoa_r+0xe4>
 800d616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f47f aa86 	bne.w	800cb2a <_dtoa_r+0x9a>
 800d61e:	4b11      	ldr	r3, [pc, #68]	; (800d664 <_dtoa_r+0xbd4>)
 800d620:	f7ff baa8 	b.w	800cb74 <_dtoa_r+0xe4>
 800d624:	f1b9 0f00 	cmp.w	r9, #0
 800d628:	dc03      	bgt.n	800d632 <_dtoa_r+0xba2>
 800d62a:	9b05      	ldr	r3, [sp, #20]
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	f73f aec9 	bgt.w	800d3c4 <_dtoa_r+0x934>
 800d632:	9d00      	ldr	r5, [sp, #0]
 800d634:	4631      	mov	r1, r6
 800d636:	4658      	mov	r0, fp
 800d638:	f7ff f99f 	bl	800c97a <quorem>
 800d63c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d640:	f805 3b01 	strb.w	r3, [r5], #1
 800d644:	9a00      	ldr	r2, [sp, #0]
 800d646:	1aaa      	subs	r2, r5, r2
 800d648:	4591      	cmp	r9, r2
 800d64a:	ddba      	ble.n	800d5c2 <_dtoa_r+0xb32>
 800d64c:	4659      	mov	r1, fp
 800d64e:	2300      	movs	r3, #0
 800d650:	220a      	movs	r2, #10
 800d652:	4620      	mov	r0, r4
 800d654:	f000 f884 	bl	800d760 <__multadd>
 800d658:	4683      	mov	fp, r0
 800d65a:	e7eb      	b.n	800d634 <_dtoa_r+0xba4>
 800d65c:	0800ef13 	.word	0x0800ef13
 800d660:	0800ee6c 	.word	0x0800ee6c
 800d664:	0800ee90 	.word	0x0800ee90

0800d668 <_localeconv_r>:
 800d668:	4800      	ldr	r0, [pc, #0]	; (800d66c <_localeconv_r+0x4>)
 800d66a:	4770      	bx	lr
 800d66c:	200002e8 	.word	0x200002e8

0800d670 <malloc>:
 800d670:	4b02      	ldr	r3, [pc, #8]	; (800d67c <malloc+0xc>)
 800d672:	4601      	mov	r1, r0
 800d674:	6818      	ldr	r0, [r3, #0]
 800d676:	f000 bbef 	b.w	800de58 <_malloc_r>
 800d67a:	bf00      	nop
 800d67c:	20000194 	.word	0x20000194

0800d680 <memcpy>:
 800d680:	440a      	add	r2, r1
 800d682:	4291      	cmp	r1, r2
 800d684:	f100 33ff 	add.w	r3, r0, #4294967295
 800d688:	d100      	bne.n	800d68c <memcpy+0xc>
 800d68a:	4770      	bx	lr
 800d68c:	b510      	push	{r4, lr}
 800d68e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d692:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d696:	4291      	cmp	r1, r2
 800d698:	d1f9      	bne.n	800d68e <memcpy+0xe>
 800d69a:	bd10      	pop	{r4, pc}

0800d69c <_Balloc>:
 800d69c:	b570      	push	{r4, r5, r6, lr}
 800d69e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	460d      	mov	r5, r1
 800d6a4:	b976      	cbnz	r6, 800d6c4 <_Balloc+0x28>
 800d6a6:	2010      	movs	r0, #16
 800d6a8:	f7ff ffe2 	bl	800d670 <malloc>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	6260      	str	r0, [r4, #36]	; 0x24
 800d6b0:	b920      	cbnz	r0, 800d6bc <_Balloc+0x20>
 800d6b2:	4b18      	ldr	r3, [pc, #96]	; (800d714 <_Balloc+0x78>)
 800d6b4:	4818      	ldr	r0, [pc, #96]	; (800d718 <_Balloc+0x7c>)
 800d6b6:	2166      	movs	r1, #102	; 0x66
 800d6b8:	f000 fd94 	bl	800e1e4 <__assert_func>
 800d6bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6c0:	6006      	str	r6, [r0, #0]
 800d6c2:	60c6      	str	r6, [r0, #12]
 800d6c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6c6:	68f3      	ldr	r3, [r6, #12]
 800d6c8:	b183      	cbz	r3, 800d6ec <_Balloc+0x50>
 800d6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6d2:	b9b8      	cbnz	r0, 800d704 <_Balloc+0x68>
 800d6d4:	2101      	movs	r1, #1
 800d6d6:	fa01 f605 	lsl.w	r6, r1, r5
 800d6da:	1d72      	adds	r2, r6, #5
 800d6dc:	0092      	lsls	r2, r2, #2
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f000 fb5a 	bl	800dd98 <_calloc_r>
 800d6e4:	b160      	cbz	r0, 800d700 <_Balloc+0x64>
 800d6e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6ea:	e00e      	b.n	800d70a <_Balloc+0x6e>
 800d6ec:	2221      	movs	r2, #33	; 0x21
 800d6ee:	2104      	movs	r1, #4
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f000 fb51 	bl	800dd98 <_calloc_r>
 800d6f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6f8:	60f0      	str	r0, [r6, #12]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e4      	bne.n	800d6ca <_Balloc+0x2e>
 800d700:	2000      	movs	r0, #0
 800d702:	bd70      	pop	{r4, r5, r6, pc}
 800d704:	6802      	ldr	r2, [r0, #0]
 800d706:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d70a:	2300      	movs	r3, #0
 800d70c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d710:	e7f7      	b.n	800d702 <_Balloc+0x66>
 800d712:	bf00      	nop
 800d714:	0800ee9d 	.word	0x0800ee9d
 800d718:	0800ef24 	.word	0x0800ef24

0800d71c <_Bfree>:
 800d71c:	b570      	push	{r4, r5, r6, lr}
 800d71e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d720:	4605      	mov	r5, r0
 800d722:	460c      	mov	r4, r1
 800d724:	b976      	cbnz	r6, 800d744 <_Bfree+0x28>
 800d726:	2010      	movs	r0, #16
 800d728:	f7ff ffa2 	bl	800d670 <malloc>
 800d72c:	4602      	mov	r2, r0
 800d72e:	6268      	str	r0, [r5, #36]	; 0x24
 800d730:	b920      	cbnz	r0, 800d73c <_Bfree+0x20>
 800d732:	4b09      	ldr	r3, [pc, #36]	; (800d758 <_Bfree+0x3c>)
 800d734:	4809      	ldr	r0, [pc, #36]	; (800d75c <_Bfree+0x40>)
 800d736:	218a      	movs	r1, #138	; 0x8a
 800d738:	f000 fd54 	bl	800e1e4 <__assert_func>
 800d73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d740:	6006      	str	r6, [r0, #0]
 800d742:	60c6      	str	r6, [r0, #12]
 800d744:	b13c      	cbz	r4, 800d756 <_Bfree+0x3a>
 800d746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d748:	6862      	ldr	r2, [r4, #4]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d750:	6021      	str	r1, [r4, #0]
 800d752:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d756:	bd70      	pop	{r4, r5, r6, pc}
 800d758:	0800ee9d 	.word	0x0800ee9d
 800d75c:	0800ef24 	.word	0x0800ef24

0800d760 <__multadd>:
 800d760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d764:	690e      	ldr	r6, [r1, #16]
 800d766:	4607      	mov	r7, r0
 800d768:	4698      	mov	r8, r3
 800d76a:	460c      	mov	r4, r1
 800d76c:	f101 0014 	add.w	r0, r1, #20
 800d770:	2300      	movs	r3, #0
 800d772:	6805      	ldr	r5, [r0, #0]
 800d774:	b2a9      	uxth	r1, r5
 800d776:	fb02 8101 	mla	r1, r2, r1, r8
 800d77a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d77e:	0c2d      	lsrs	r5, r5, #16
 800d780:	fb02 c505 	mla	r5, r2, r5, ip
 800d784:	b289      	uxth	r1, r1
 800d786:	3301      	adds	r3, #1
 800d788:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d78c:	429e      	cmp	r6, r3
 800d78e:	f840 1b04 	str.w	r1, [r0], #4
 800d792:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d796:	dcec      	bgt.n	800d772 <__multadd+0x12>
 800d798:	f1b8 0f00 	cmp.w	r8, #0
 800d79c:	d022      	beq.n	800d7e4 <__multadd+0x84>
 800d79e:	68a3      	ldr	r3, [r4, #8]
 800d7a0:	42b3      	cmp	r3, r6
 800d7a2:	dc19      	bgt.n	800d7d8 <__multadd+0x78>
 800d7a4:	6861      	ldr	r1, [r4, #4]
 800d7a6:	4638      	mov	r0, r7
 800d7a8:	3101      	adds	r1, #1
 800d7aa:	f7ff ff77 	bl	800d69c <_Balloc>
 800d7ae:	4605      	mov	r5, r0
 800d7b0:	b928      	cbnz	r0, 800d7be <__multadd+0x5e>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	4b0d      	ldr	r3, [pc, #52]	; (800d7ec <__multadd+0x8c>)
 800d7b6:	480e      	ldr	r0, [pc, #56]	; (800d7f0 <__multadd+0x90>)
 800d7b8:	21b5      	movs	r1, #181	; 0xb5
 800d7ba:	f000 fd13 	bl	800e1e4 <__assert_func>
 800d7be:	6922      	ldr	r2, [r4, #16]
 800d7c0:	3202      	adds	r2, #2
 800d7c2:	f104 010c 	add.w	r1, r4, #12
 800d7c6:	0092      	lsls	r2, r2, #2
 800d7c8:	300c      	adds	r0, #12
 800d7ca:	f7ff ff59 	bl	800d680 <memcpy>
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	f7ff ffa3 	bl	800d71c <_Bfree>
 800d7d6:	462c      	mov	r4, r5
 800d7d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d7dc:	3601      	adds	r6, #1
 800d7de:	f8c3 8014 	str.w	r8, [r3, #20]
 800d7e2:	6126      	str	r6, [r4, #16]
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ea:	bf00      	nop
 800d7ec:	0800ef13 	.word	0x0800ef13
 800d7f0:	0800ef24 	.word	0x0800ef24

0800d7f4 <__hi0bits>:
 800d7f4:	0c03      	lsrs	r3, r0, #16
 800d7f6:	041b      	lsls	r3, r3, #16
 800d7f8:	b9d3      	cbnz	r3, 800d830 <__hi0bits+0x3c>
 800d7fa:	0400      	lsls	r0, r0, #16
 800d7fc:	2310      	movs	r3, #16
 800d7fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d802:	bf04      	itt	eq
 800d804:	0200      	lsleq	r0, r0, #8
 800d806:	3308      	addeq	r3, #8
 800d808:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d80c:	bf04      	itt	eq
 800d80e:	0100      	lsleq	r0, r0, #4
 800d810:	3304      	addeq	r3, #4
 800d812:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d816:	bf04      	itt	eq
 800d818:	0080      	lsleq	r0, r0, #2
 800d81a:	3302      	addeq	r3, #2
 800d81c:	2800      	cmp	r0, #0
 800d81e:	db05      	blt.n	800d82c <__hi0bits+0x38>
 800d820:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d824:	f103 0301 	add.w	r3, r3, #1
 800d828:	bf08      	it	eq
 800d82a:	2320      	moveq	r3, #32
 800d82c:	4618      	mov	r0, r3
 800d82e:	4770      	bx	lr
 800d830:	2300      	movs	r3, #0
 800d832:	e7e4      	b.n	800d7fe <__hi0bits+0xa>

0800d834 <__lo0bits>:
 800d834:	6803      	ldr	r3, [r0, #0]
 800d836:	f013 0207 	ands.w	r2, r3, #7
 800d83a:	4601      	mov	r1, r0
 800d83c:	d00b      	beq.n	800d856 <__lo0bits+0x22>
 800d83e:	07da      	lsls	r2, r3, #31
 800d840:	d424      	bmi.n	800d88c <__lo0bits+0x58>
 800d842:	0798      	lsls	r0, r3, #30
 800d844:	bf49      	itett	mi
 800d846:	085b      	lsrmi	r3, r3, #1
 800d848:	089b      	lsrpl	r3, r3, #2
 800d84a:	2001      	movmi	r0, #1
 800d84c:	600b      	strmi	r3, [r1, #0]
 800d84e:	bf5c      	itt	pl
 800d850:	600b      	strpl	r3, [r1, #0]
 800d852:	2002      	movpl	r0, #2
 800d854:	4770      	bx	lr
 800d856:	b298      	uxth	r0, r3
 800d858:	b9b0      	cbnz	r0, 800d888 <__lo0bits+0x54>
 800d85a:	0c1b      	lsrs	r3, r3, #16
 800d85c:	2010      	movs	r0, #16
 800d85e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d862:	bf04      	itt	eq
 800d864:	0a1b      	lsreq	r3, r3, #8
 800d866:	3008      	addeq	r0, #8
 800d868:	071a      	lsls	r2, r3, #28
 800d86a:	bf04      	itt	eq
 800d86c:	091b      	lsreq	r3, r3, #4
 800d86e:	3004      	addeq	r0, #4
 800d870:	079a      	lsls	r2, r3, #30
 800d872:	bf04      	itt	eq
 800d874:	089b      	lsreq	r3, r3, #2
 800d876:	3002      	addeq	r0, #2
 800d878:	07da      	lsls	r2, r3, #31
 800d87a:	d403      	bmi.n	800d884 <__lo0bits+0x50>
 800d87c:	085b      	lsrs	r3, r3, #1
 800d87e:	f100 0001 	add.w	r0, r0, #1
 800d882:	d005      	beq.n	800d890 <__lo0bits+0x5c>
 800d884:	600b      	str	r3, [r1, #0]
 800d886:	4770      	bx	lr
 800d888:	4610      	mov	r0, r2
 800d88a:	e7e8      	b.n	800d85e <__lo0bits+0x2a>
 800d88c:	2000      	movs	r0, #0
 800d88e:	4770      	bx	lr
 800d890:	2020      	movs	r0, #32
 800d892:	4770      	bx	lr

0800d894 <__i2b>:
 800d894:	b510      	push	{r4, lr}
 800d896:	460c      	mov	r4, r1
 800d898:	2101      	movs	r1, #1
 800d89a:	f7ff feff 	bl	800d69c <_Balloc>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	b928      	cbnz	r0, 800d8ae <__i2b+0x1a>
 800d8a2:	4b05      	ldr	r3, [pc, #20]	; (800d8b8 <__i2b+0x24>)
 800d8a4:	4805      	ldr	r0, [pc, #20]	; (800d8bc <__i2b+0x28>)
 800d8a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d8aa:	f000 fc9b 	bl	800e1e4 <__assert_func>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	6144      	str	r4, [r0, #20]
 800d8b2:	6103      	str	r3, [r0, #16]
 800d8b4:	bd10      	pop	{r4, pc}
 800d8b6:	bf00      	nop
 800d8b8:	0800ef13 	.word	0x0800ef13
 800d8bc:	0800ef24 	.word	0x0800ef24

0800d8c0 <__multiply>:
 800d8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c4:	4614      	mov	r4, r2
 800d8c6:	690a      	ldr	r2, [r1, #16]
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	bfb8      	it	lt
 800d8ce:	460b      	movlt	r3, r1
 800d8d0:	460d      	mov	r5, r1
 800d8d2:	bfbc      	itt	lt
 800d8d4:	4625      	movlt	r5, r4
 800d8d6:	461c      	movlt	r4, r3
 800d8d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d8dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d8e0:	68ab      	ldr	r3, [r5, #8]
 800d8e2:	6869      	ldr	r1, [r5, #4]
 800d8e4:	eb0a 0709 	add.w	r7, sl, r9
 800d8e8:	42bb      	cmp	r3, r7
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	bfb8      	it	lt
 800d8ee:	3101      	addlt	r1, #1
 800d8f0:	f7ff fed4 	bl	800d69c <_Balloc>
 800d8f4:	b930      	cbnz	r0, 800d904 <__multiply+0x44>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	4b42      	ldr	r3, [pc, #264]	; (800da04 <__multiply+0x144>)
 800d8fa:	4843      	ldr	r0, [pc, #268]	; (800da08 <__multiply+0x148>)
 800d8fc:	f240 115d 	movw	r1, #349	; 0x15d
 800d900:	f000 fc70 	bl	800e1e4 <__assert_func>
 800d904:	f100 0614 	add.w	r6, r0, #20
 800d908:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d90c:	4633      	mov	r3, r6
 800d90e:	2200      	movs	r2, #0
 800d910:	4543      	cmp	r3, r8
 800d912:	d31e      	bcc.n	800d952 <__multiply+0x92>
 800d914:	f105 0c14 	add.w	ip, r5, #20
 800d918:	f104 0314 	add.w	r3, r4, #20
 800d91c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d920:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d924:	9202      	str	r2, [sp, #8]
 800d926:	ebac 0205 	sub.w	r2, ip, r5
 800d92a:	3a15      	subs	r2, #21
 800d92c:	f022 0203 	bic.w	r2, r2, #3
 800d930:	3204      	adds	r2, #4
 800d932:	f105 0115 	add.w	r1, r5, #21
 800d936:	458c      	cmp	ip, r1
 800d938:	bf38      	it	cc
 800d93a:	2204      	movcc	r2, #4
 800d93c:	9201      	str	r2, [sp, #4]
 800d93e:	9a02      	ldr	r2, [sp, #8]
 800d940:	9303      	str	r3, [sp, #12]
 800d942:	429a      	cmp	r2, r3
 800d944:	d808      	bhi.n	800d958 <__multiply+0x98>
 800d946:	2f00      	cmp	r7, #0
 800d948:	dc55      	bgt.n	800d9f6 <__multiply+0x136>
 800d94a:	6107      	str	r7, [r0, #16]
 800d94c:	b005      	add	sp, #20
 800d94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d952:	f843 2b04 	str.w	r2, [r3], #4
 800d956:	e7db      	b.n	800d910 <__multiply+0x50>
 800d958:	f8b3 a000 	ldrh.w	sl, [r3]
 800d95c:	f1ba 0f00 	cmp.w	sl, #0
 800d960:	d020      	beq.n	800d9a4 <__multiply+0xe4>
 800d962:	f105 0e14 	add.w	lr, r5, #20
 800d966:	46b1      	mov	r9, r6
 800d968:	2200      	movs	r2, #0
 800d96a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d96e:	f8d9 b000 	ldr.w	fp, [r9]
 800d972:	b2a1      	uxth	r1, r4
 800d974:	fa1f fb8b 	uxth.w	fp, fp
 800d978:	fb0a b101 	mla	r1, sl, r1, fp
 800d97c:	4411      	add	r1, r2
 800d97e:	f8d9 2000 	ldr.w	r2, [r9]
 800d982:	0c24      	lsrs	r4, r4, #16
 800d984:	0c12      	lsrs	r2, r2, #16
 800d986:	fb0a 2404 	mla	r4, sl, r4, r2
 800d98a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d98e:	b289      	uxth	r1, r1
 800d990:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d994:	45f4      	cmp	ip, lr
 800d996:	f849 1b04 	str.w	r1, [r9], #4
 800d99a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d99e:	d8e4      	bhi.n	800d96a <__multiply+0xaa>
 800d9a0:	9901      	ldr	r1, [sp, #4]
 800d9a2:	5072      	str	r2, [r6, r1]
 800d9a4:	9a03      	ldr	r2, [sp, #12]
 800d9a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d9aa:	3304      	adds	r3, #4
 800d9ac:	f1b9 0f00 	cmp.w	r9, #0
 800d9b0:	d01f      	beq.n	800d9f2 <__multiply+0x132>
 800d9b2:	6834      	ldr	r4, [r6, #0]
 800d9b4:	f105 0114 	add.w	r1, r5, #20
 800d9b8:	46b6      	mov	lr, r6
 800d9ba:	f04f 0a00 	mov.w	sl, #0
 800d9be:	880a      	ldrh	r2, [r1, #0]
 800d9c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d9c4:	fb09 b202 	mla	r2, r9, r2, fp
 800d9c8:	4492      	add	sl, r2
 800d9ca:	b2a4      	uxth	r4, r4
 800d9cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d9d0:	f84e 4b04 	str.w	r4, [lr], #4
 800d9d4:	f851 4b04 	ldr.w	r4, [r1], #4
 800d9d8:	f8be 2000 	ldrh.w	r2, [lr]
 800d9dc:	0c24      	lsrs	r4, r4, #16
 800d9de:	fb09 2404 	mla	r4, r9, r4, r2
 800d9e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d9e6:	458c      	cmp	ip, r1
 800d9e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d9ec:	d8e7      	bhi.n	800d9be <__multiply+0xfe>
 800d9ee:	9a01      	ldr	r2, [sp, #4]
 800d9f0:	50b4      	str	r4, [r6, r2]
 800d9f2:	3604      	adds	r6, #4
 800d9f4:	e7a3      	b.n	800d93e <__multiply+0x7e>
 800d9f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1a5      	bne.n	800d94a <__multiply+0x8a>
 800d9fe:	3f01      	subs	r7, #1
 800da00:	e7a1      	b.n	800d946 <__multiply+0x86>
 800da02:	bf00      	nop
 800da04:	0800ef13 	.word	0x0800ef13
 800da08:	0800ef24 	.word	0x0800ef24

0800da0c <__pow5mult>:
 800da0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da10:	4615      	mov	r5, r2
 800da12:	f012 0203 	ands.w	r2, r2, #3
 800da16:	4606      	mov	r6, r0
 800da18:	460f      	mov	r7, r1
 800da1a:	d007      	beq.n	800da2c <__pow5mult+0x20>
 800da1c:	4c25      	ldr	r4, [pc, #148]	; (800dab4 <__pow5mult+0xa8>)
 800da1e:	3a01      	subs	r2, #1
 800da20:	2300      	movs	r3, #0
 800da22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da26:	f7ff fe9b 	bl	800d760 <__multadd>
 800da2a:	4607      	mov	r7, r0
 800da2c:	10ad      	asrs	r5, r5, #2
 800da2e:	d03d      	beq.n	800daac <__pow5mult+0xa0>
 800da30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da32:	b97c      	cbnz	r4, 800da54 <__pow5mult+0x48>
 800da34:	2010      	movs	r0, #16
 800da36:	f7ff fe1b 	bl	800d670 <malloc>
 800da3a:	4602      	mov	r2, r0
 800da3c:	6270      	str	r0, [r6, #36]	; 0x24
 800da3e:	b928      	cbnz	r0, 800da4c <__pow5mult+0x40>
 800da40:	4b1d      	ldr	r3, [pc, #116]	; (800dab8 <__pow5mult+0xac>)
 800da42:	481e      	ldr	r0, [pc, #120]	; (800dabc <__pow5mult+0xb0>)
 800da44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da48:	f000 fbcc 	bl	800e1e4 <__assert_func>
 800da4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da50:	6004      	str	r4, [r0, #0]
 800da52:	60c4      	str	r4, [r0, #12]
 800da54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da5c:	b94c      	cbnz	r4, 800da72 <__pow5mult+0x66>
 800da5e:	f240 2171 	movw	r1, #625	; 0x271
 800da62:	4630      	mov	r0, r6
 800da64:	f7ff ff16 	bl	800d894 <__i2b>
 800da68:	2300      	movs	r3, #0
 800da6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800da6e:	4604      	mov	r4, r0
 800da70:	6003      	str	r3, [r0, #0]
 800da72:	f04f 0900 	mov.w	r9, #0
 800da76:	07eb      	lsls	r3, r5, #31
 800da78:	d50a      	bpl.n	800da90 <__pow5mult+0x84>
 800da7a:	4639      	mov	r1, r7
 800da7c:	4622      	mov	r2, r4
 800da7e:	4630      	mov	r0, r6
 800da80:	f7ff ff1e 	bl	800d8c0 <__multiply>
 800da84:	4639      	mov	r1, r7
 800da86:	4680      	mov	r8, r0
 800da88:	4630      	mov	r0, r6
 800da8a:	f7ff fe47 	bl	800d71c <_Bfree>
 800da8e:	4647      	mov	r7, r8
 800da90:	106d      	asrs	r5, r5, #1
 800da92:	d00b      	beq.n	800daac <__pow5mult+0xa0>
 800da94:	6820      	ldr	r0, [r4, #0]
 800da96:	b938      	cbnz	r0, 800daa8 <__pow5mult+0x9c>
 800da98:	4622      	mov	r2, r4
 800da9a:	4621      	mov	r1, r4
 800da9c:	4630      	mov	r0, r6
 800da9e:	f7ff ff0f 	bl	800d8c0 <__multiply>
 800daa2:	6020      	str	r0, [r4, #0]
 800daa4:	f8c0 9000 	str.w	r9, [r0]
 800daa8:	4604      	mov	r4, r0
 800daaa:	e7e4      	b.n	800da76 <__pow5mult+0x6a>
 800daac:	4638      	mov	r0, r7
 800daae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dab2:	bf00      	nop
 800dab4:	0800f078 	.word	0x0800f078
 800dab8:	0800ee9d 	.word	0x0800ee9d
 800dabc:	0800ef24 	.word	0x0800ef24

0800dac0 <__lshift>:
 800dac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dac4:	460c      	mov	r4, r1
 800dac6:	6849      	ldr	r1, [r1, #4]
 800dac8:	6923      	ldr	r3, [r4, #16]
 800daca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dace:	68a3      	ldr	r3, [r4, #8]
 800dad0:	4607      	mov	r7, r0
 800dad2:	4691      	mov	r9, r2
 800dad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dad8:	f108 0601 	add.w	r6, r8, #1
 800dadc:	42b3      	cmp	r3, r6
 800dade:	db0b      	blt.n	800daf8 <__lshift+0x38>
 800dae0:	4638      	mov	r0, r7
 800dae2:	f7ff fddb 	bl	800d69c <_Balloc>
 800dae6:	4605      	mov	r5, r0
 800dae8:	b948      	cbnz	r0, 800dafe <__lshift+0x3e>
 800daea:	4602      	mov	r2, r0
 800daec:	4b28      	ldr	r3, [pc, #160]	; (800db90 <__lshift+0xd0>)
 800daee:	4829      	ldr	r0, [pc, #164]	; (800db94 <__lshift+0xd4>)
 800daf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800daf4:	f000 fb76 	bl	800e1e4 <__assert_func>
 800daf8:	3101      	adds	r1, #1
 800dafa:	005b      	lsls	r3, r3, #1
 800dafc:	e7ee      	b.n	800dadc <__lshift+0x1c>
 800dafe:	2300      	movs	r3, #0
 800db00:	f100 0114 	add.w	r1, r0, #20
 800db04:	f100 0210 	add.w	r2, r0, #16
 800db08:	4618      	mov	r0, r3
 800db0a:	4553      	cmp	r3, sl
 800db0c:	db33      	blt.n	800db76 <__lshift+0xb6>
 800db0e:	6920      	ldr	r0, [r4, #16]
 800db10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db14:	f104 0314 	add.w	r3, r4, #20
 800db18:	f019 091f 	ands.w	r9, r9, #31
 800db1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db24:	d02b      	beq.n	800db7e <__lshift+0xbe>
 800db26:	f1c9 0e20 	rsb	lr, r9, #32
 800db2a:	468a      	mov	sl, r1
 800db2c:	2200      	movs	r2, #0
 800db2e:	6818      	ldr	r0, [r3, #0]
 800db30:	fa00 f009 	lsl.w	r0, r0, r9
 800db34:	4302      	orrs	r2, r0
 800db36:	f84a 2b04 	str.w	r2, [sl], #4
 800db3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db3e:	459c      	cmp	ip, r3
 800db40:	fa22 f20e 	lsr.w	r2, r2, lr
 800db44:	d8f3      	bhi.n	800db2e <__lshift+0x6e>
 800db46:	ebac 0304 	sub.w	r3, ip, r4
 800db4a:	3b15      	subs	r3, #21
 800db4c:	f023 0303 	bic.w	r3, r3, #3
 800db50:	3304      	adds	r3, #4
 800db52:	f104 0015 	add.w	r0, r4, #21
 800db56:	4584      	cmp	ip, r0
 800db58:	bf38      	it	cc
 800db5a:	2304      	movcc	r3, #4
 800db5c:	50ca      	str	r2, [r1, r3]
 800db5e:	b10a      	cbz	r2, 800db64 <__lshift+0xa4>
 800db60:	f108 0602 	add.w	r6, r8, #2
 800db64:	3e01      	subs	r6, #1
 800db66:	4638      	mov	r0, r7
 800db68:	612e      	str	r6, [r5, #16]
 800db6a:	4621      	mov	r1, r4
 800db6c:	f7ff fdd6 	bl	800d71c <_Bfree>
 800db70:	4628      	mov	r0, r5
 800db72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db76:	f842 0f04 	str.w	r0, [r2, #4]!
 800db7a:	3301      	adds	r3, #1
 800db7c:	e7c5      	b.n	800db0a <__lshift+0x4a>
 800db7e:	3904      	subs	r1, #4
 800db80:	f853 2b04 	ldr.w	r2, [r3], #4
 800db84:	f841 2f04 	str.w	r2, [r1, #4]!
 800db88:	459c      	cmp	ip, r3
 800db8a:	d8f9      	bhi.n	800db80 <__lshift+0xc0>
 800db8c:	e7ea      	b.n	800db64 <__lshift+0xa4>
 800db8e:	bf00      	nop
 800db90:	0800ef13 	.word	0x0800ef13
 800db94:	0800ef24 	.word	0x0800ef24

0800db98 <__mcmp>:
 800db98:	b530      	push	{r4, r5, lr}
 800db9a:	6902      	ldr	r2, [r0, #16]
 800db9c:	690c      	ldr	r4, [r1, #16]
 800db9e:	1b12      	subs	r2, r2, r4
 800dba0:	d10e      	bne.n	800dbc0 <__mcmp+0x28>
 800dba2:	f100 0314 	add.w	r3, r0, #20
 800dba6:	3114      	adds	r1, #20
 800dba8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dbac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dbb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dbb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dbb8:	42a5      	cmp	r5, r4
 800dbba:	d003      	beq.n	800dbc4 <__mcmp+0x2c>
 800dbbc:	d305      	bcc.n	800dbca <__mcmp+0x32>
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	bd30      	pop	{r4, r5, pc}
 800dbc4:	4283      	cmp	r3, r0
 800dbc6:	d3f3      	bcc.n	800dbb0 <__mcmp+0x18>
 800dbc8:	e7fa      	b.n	800dbc0 <__mcmp+0x28>
 800dbca:	f04f 32ff 	mov.w	r2, #4294967295
 800dbce:	e7f7      	b.n	800dbc0 <__mcmp+0x28>

0800dbd0 <__mdiff>:
 800dbd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd4:	460c      	mov	r4, r1
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	4611      	mov	r1, r2
 800dbda:	4620      	mov	r0, r4
 800dbdc:	4617      	mov	r7, r2
 800dbde:	f7ff ffdb 	bl	800db98 <__mcmp>
 800dbe2:	1e05      	subs	r5, r0, #0
 800dbe4:	d110      	bne.n	800dc08 <__mdiff+0x38>
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f7ff fd57 	bl	800d69c <_Balloc>
 800dbee:	b930      	cbnz	r0, 800dbfe <__mdiff+0x2e>
 800dbf0:	4b39      	ldr	r3, [pc, #228]	; (800dcd8 <__mdiff+0x108>)
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	f240 2132 	movw	r1, #562	; 0x232
 800dbf8:	4838      	ldr	r0, [pc, #224]	; (800dcdc <__mdiff+0x10c>)
 800dbfa:	f000 faf3 	bl	800e1e4 <__assert_func>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc08:	bfa4      	itt	ge
 800dc0a:	463b      	movge	r3, r7
 800dc0c:	4627      	movge	r7, r4
 800dc0e:	4630      	mov	r0, r6
 800dc10:	6879      	ldr	r1, [r7, #4]
 800dc12:	bfa6      	itte	ge
 800dc14:	461c      	movge	r4, r3
 800dc16:	2500      	movge	r5, #0
 800dc18:	2501      	movlt	r5, #1
 800dc1a:	f7ff fd3f 	bl	800d69c <_Balloc>
 800dc1e:	b920      	cbnz	r0, 800dc2a <__mdiff+0x5a>
 800dc20:	4b2d      	ldr	r3, [pc, #180]	; (800dcd8 <__mdiff+0x108>)
 800dc22:	4602      	mov	r2, r0
 800dc24:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc28:	e7e6      	b.n	800dbf8 <__mdiff+0x28>
 800dc2a:	693e      	ldr	r6, [r7, #16]
 800dc2c:	60c5      	str	r5, [r0, #12]
 800dc2e:	6925      	ldr	r5, [r4, #16]
 800dc30:	f107 0114 	add.w	r1, r7, #20
 800dc34:	f104 0914 	add.w	r9, r4, #20
 800dc38:	f100 0e14 	add.w	lr, r0, #20
 800dc3c:	f107 0210 	add.w	r2, r7, #16
 800dc40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dc44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dc48:	46f2      	mov	sl, lr
 800dc4a:	2700      	movs	r7, #0
 800dc4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc54:	fa1f f883 	uxth.w	r8, r3
 800dc58:	fa17 f78b 	uxtah	r7, r7, fp
 800dc5c:	0c1b      	lsrs	r3, r3, #16
 800dc5e:	eba7 0808 	sub.w	r8, r7, r8
 800dc62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc6a:	fa1f f888 	uxth.w	r8, r8
 800dc6e:	141f      	asrs	r7, r3, #16
 800dc70:	454d      	cmp	r5, r9
 800dc72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc76:	f84a 3b04 	str.w	r3, [sl], #4
 800dc7a:	d8e7      	bhi.n	800dc4c <__mdiff+0x7c>
 800dc7c:	1b2b      	subs	r3, r5, r4
 800dc7e:	3b15      	subs	r3, #21
 800dc80:	f023 0303 	bic.w	r3, r3, #3
 800dc84:	3304      	adds	r3, #4
 800dc86:	3415      	adds	r4, #21
 800dc88:	42a5      	cmp	r5, r4
 800dc8a:	bf38      	it	cc
 800dc8c:	2304      	movcc	r3, #4
 800dc8e:	4419      	add	r1, r3
 800dc90:	4473      	add	r3, lr
 800dc92:	469e      	mov	lr, r3
 800dc94:	460d      	mov	r5, r1
 800dc96:	4565      	cmp	r5, ip
 800dc98:	d30e      	bcc.n	800dcb8 <__mdiff+0xe8>
 800dc9a:	f10c 0203 	add.w	r2, ip, #3
 800dc9e:	1a52      	subs	r2, r2, r1
 800dca0:	f022 0203 	bic.w	r2, r2, #3
 800dca4:	3903      	subs	r1, #3
 800dca6:	458c      	cmp	ip, r1
 800dca8:	bf38      	it	cc
 800dcaa:	2200      	movcc	r2, #0
 800dcac:	441a      	add	r2, r3
 800dcae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dcb2:	b17b      	cbz	r3, 800dcd4 <__mdiff+0x104>
 800dcb4:	6106      	str	r6, [r0, #16]
 800dcb6:	e7a5      	b.n	800dc04 <__mdiff+0x34>
 800dcb8:	f855 8b04 	ldr.w	r8, [r5], #4
 800dcbc:	fa17 f488 	uxtah	r4, r7, r8
 800dcc0:	1422      	asrs	r2, r4, #16
 800dcc2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dcc6:	b2a4      	uxth	r4, r4
 800dcc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dccc:	f84e 4b04 	str.w	r4, [lr], #4
 800dcd0:	1417      	asrs	r7, r2, #16
 800dcd2:	e7e0      	b.n	800dc96 <__mdiff+0xc6>
 800dcd4:	3e01      	subs	r6, #1
 800dcd6:	e7ea      	b.n	800dcae <__mdiff+0xde>
 800dcd8:	0800ef13 	.word	0x0800ef13
 800dcdc:	0800ef24 	.word	0x0800ef24

0800dce0 <__d2b>:
 800dce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dce4:	4689      	mov	r9, r1
 800dce6:	2101      	movs	r1, #1
 800dce8:	ec57 6b10 	vmov	r6, r7, d0
 800dcec:	4690      	mov	r8, r2
 800dcee:	f7ff fcd5 	bl	800d69c <_Balloc>
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	b930      	cbnz	r0, 800dd04 <__d2b+0x24>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	4b25      	ldr	r3, [pc, #148]	; (800dd90 <__d2b+0xb0>)
 800dcfa:	4826      	ldr	r0, [pc, #152]	; (800dd94 <__d2b+0xb4>)
 800dcfc:	f240 310a 	movw	r1, #778	; 0x30a
 800dd00:	f000 fa70 	bl	800e1e4 <__assert_func>
 800dd04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd0c:	bb35      	cbnz	r5, 800dd5c <__d2b+0x7c>
 800dd0e:	2e00      	cmp	r6, #0
 800dd10:	9301      	str	r3, [sp, #4]
 800dd12:	d028      	beq.n	800dd66 <__d2b+0x86>
 800dd14:	4668      	mov	r0, sp
 800dd16:	9600      	str	r6, [sp, #0]
 800dd18:	f7ff fd8c 	bl	800d834 <__lo0bits>
 800dd1c:	9900      	ldr	r1, [sp, #0]
 800dd1e:	b300      	cbz	r0, 800dd62 <__d2b+0x82>
 800dd20:	9a01      	ldr	r2, [sp, #4]
 800dd22:	f1c0 0320 	rsb	r3, r0, #32
 800dd26:	fa02 f303 	lsl.w	r3, r2, r3
 800dd2a:	430b      	orrs	r3, r1
 800dd2c:	40c2      	lsrs	r2, r0
 800dd2e:	6163      	str	r3, [r4, #20]
 800dd30:	9201      	str	r2, [sp, #4]
 800dd32:	9b01      	ldr	r3, [sp, #4]
 800dd34:	61a3      	str	r3, [r4, #24]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	bf14      	ite	ne
 800dd3a:	2202      	movne	r2, #2
 800dd3c:	2201      	moveq	r2, #1
 800dd3e:	6122      	str	r2, [r4, #16]
 800dd40:	b1d5      	cbz	r5, 800dd78 <__d2b+0x98>
 800dd42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd46:	4405      	add	r5, r0
 800dd48:	f8c9 5000 	str.w	r5, [r9]
 800dd4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd50:	f8c8 0000 	str.w	r0, [r8]
 800dd54:	4620      	mov	r0, r4
 800dd56:	b003      	add	sp, #12
 800dd58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd60:	e7d5      	b.n	800dd0e <__d2b+0x2e>
 800dd62:	6161      	str	r1, [r4, #20]
 800dd64:	e7e5      	b.n	800dd32 <__d2b+0x52>
 800dd66:	a801      	add	r0, sp, #4
 800dd68:	f7ff fd64 	bl	800d834 <__lo0bits>
 800dd6c:	9b01      	ldr	r3, [sp, #4]
 800dd6e:	6163      	str	r3, [r4, #20]
 800dd70:	2201      	movs	r2, #1
 800dd72:	6122      	str	r2, [r4, #16]
 800dd74:	3020      	adds	r0, #32
 800dd76:	e7e3      	b.n	800dd40 <__d2b+0x60>
 800dd78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd80:	f8c9 0000 	str.w	r0, [r9]
 800dd84:	6918      	ldr	r0, [r3, #16]
 800dd86:	f7ff fd35 	bl	800d7f4 <__hi0bits>
 800dd8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd8e:	e7df      	b.n	800dd50 <__d2b+0x70>
 800dd90:	0800ef13 	.word	0x0800ef13
 800dd94:	0800ef24 	.word	0x0800ef24

0800dd98 <_calloc_r>:
 800dd98:	b513      	push	{r0, r1, r4, lr}
 800dd9a:	434a      	muls	r2, r1
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	9201      	str	r2, [sp, #4]
 800dda0:	f000 f85a 	bl	800de58 <_malloc_r>
 800dda4:	4604      	mov	r4, r0
 800dda6:	b118      	cbz	r0, 800ddb0 <_calloc_r+0x18>
 800dda8:	9a01      	ldr	r2, [sp, #4]
 800ddaa:	2100      	movs	r1, #0
 800ddac:	f7fe f944 	bl	800c038 <memset>
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	b002      	add	sp, #8
 800ddb4:	bd10      	pop	{r4, pc}
	...

0800ddb8 <_free_r>:
 800ddb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddba:	2900      	cmp	r1, #0
 800ddbc:	d048      	beq.n	800de50 <_free_r+0x98>
 800ddbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddc2:	9001      	str	r0, [sp, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f1a1 0404 	sub.w	r4, r1, #4
 800ddca:	bfb8      	it	lt
 800ddcc:	18e4      	addlt	r4, r4, r3
 800ddce:	f000 fa65 	bl	800e29c <__malloc_lock>
 800ddd2:	4a20      	ldr	r2, [pc, #128]	; (800de54 <_free_r+0x9c>)
 800ddd4:	9801      	ldr	r0, [sp, #4]
 800ddd6:	6813      	ldr	r3, [r2, #0]
 800ddd8:	4615      	mov	r5, r2
 800ddda:	b933      	cbnz	r3, 800ddea <_free_r+0x32>
 800dddc:	6063      	str	r3, [r4, #4]
 800ddde:	6014      	str	r4, [r2, #0]
 800dde0:	b003      	add	sp, #12
 800dde2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dde6:	f000 ba5f 	b.w	800e2a8 <__malloc_unlock>
 800ddea:	42a3      	cmp	r3, r4
 800ddec:	d90b      	bls.n	800de06 <_free_r+0x4e>
 800ddee:	6821      	ldr	r1, [r4, #0]
 800ddf0:	1862      	adds	r2, r4, r1
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	bf04      	itt	eq
 800ddf6:	681a      	ldreq	r2, [r3, #0]
 800ddf8:	685b      	ldreq	r3, [r3, #4]
 800ddfa:	6063      	str	r3, [r4, #4]
 800ddfc:	bf04      	itt	eq
 800ddfe:	1852      	addeq	r2, r2, r1
 800de00:	6022      	streq	r2, [r4, #0]
 800de02:	602c      	str	r4, [r5, #0]
 800de04:	e7ec      	b.n	800dde0 <_free_r+0x28>
 800de06:	461a      	mov	r2, r3
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	b10b      	cbz	r3, 800de10 <_free_r+0x58>
 800de0c:	42a3      	cmp	r3, r4
 800de0e:	d9fa      	bls.n	800de06 <_free_r+0x4e>
 800de10:	6811      	ldr	r1, [r2, #0]
 800de12:	1855      	adds	r5, r2, r1
 800de14:	42a5      	cmp	r5, r4
 800de16:	d10b      	bne.n	800de30 <_free_r+0x78>
 800de18:	6824      	ldr	r4, [r4, #0]
 800de1a:	4421      	add	r1, r4
 800de1c:	1854      	adds	r4, r2, r1
 800de1e:	42a3      	cmp	r3, r4
 800de20:	6011      	str	r1, [r2, #0]
 800de22:	d1dd      	bne.n	800dde0 <_free_r+0x28>
 800de24:	681c      	ldr	r4, [r3, #0]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	6053      	str	r3, [r2, #4]
 800de2a:	4421      	add	r1, r4
 800de2c:	6011      	str	r1, [r2, #0]
 800de2e:	e7d7      	b.n	800dde0 <_free_r+0x28>
 800de30:	d902      	bls.n	800de38 <_free_r+0x80>
 800de32:	230c      	movs	r3, #12
 800de34:	6003      	str	r3, [r0, #0]
 800de36:	e7d3      	b.n	800dde0 <_free_r+0x28>
 800de38:	6825      	ldr	r5, [r4, #0]
 800de3a:	1961      	adds	r1, r4, r5
 800de3c:	428b      	cmp	r3, r1
 800de3e:	bf04      	itt	eq
 800de40:	6819      	ldreq	r1, [r3, #0]
 800de42:	685b      	ldreq	r3, [r3, #4]
 800de44:	6063      	str	r3, [r4, #4]
 800de46:	bf04      	itt	eq
 800de48:	1949      	addeq	r1, r1, r5
 800de4a:	6021      	streq	r1, [r4, #0]
 800de4c:	6054      	str	r4, [r2, #4]
 800de4e:	e7c7      	b.n	800dde0 <_free_r+0x28>
 800de50:	b003      	add	sp, #12
 800de52:	bd30      	pop	{r4, r5, pc}
 800de54:	200006d4 	.word	0x200006d4

0800de58 <_malloc_r>:
 800de58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5a:	1ccd      	adds	r5, r1, #3
 800de5c:	f025 0503 	bic.w	r5, r5, #3
 800de60:	3508      	adds	r5, #8
 800de62:	2d0c      	cmp	r5, #12
 800de64:	bf38      	it	cc
 800de66:	250c      	movcc	r5, #12
 800de68:	2d00      	cmp	r5, #0
 800de6a:	4606      	mov	r6, r0
 800de6c:	db01      	blt.n	800de72 <_malloc_r+0x1a>
 800de6e:	42a9      	cmp	r1, r5
 800de70:	d903      	bls.n	800de7a <_malloc_r+0x22>
 800de72:	230c      	movs	r3, #12
 800de74:	6033      	str	r3, [r6, #0]
 800de76:	2000      	movs	r0, #0
 800de78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de7a:	f000 fa0f 	bl	800e29c <__malloc_lock>
 800de7e:	4921      	ldr	r1, [pc, #132]	; (800df04 <_malloc_r+0xac>)
 800de80:	680a      	ldr	r2, [r1, #0]
 800de82:	4614      	mov	r4, r2
 800de84:	b99c      	cbnz	r4, 800deae <_malloc_r+0x56>
 800de86:	4f20      	ldr	r7, [pc, #128]	; (800df08 <_malloc_r+0xb0>)
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	b923      	cbnz	r3, 800de96 <_malloc_r+0x3e>
 800de8c:	4621      	mov	r1, r4
 800de8e:	4630      	mov	r0, r6
 800de90:	f000 f998 	bl	800e1c4 <_sbrk_r>
 800de94:	6038      	str	r0, [r7, #0]
 800de96:	4629      	mov	r1, r5
 800de98:	4630      	mov	r0, r6
 800de9a:	f000 f993 	bl	800e1c4 <_sbrk_r>
 800de9e:	1c43      	adds	r3, r0, #1
 800dea0:	d123      	bne.n	800deea <_malloc_r+0x92>
 800dea2:	230c      	movs	r3, #12
 800dea4:	6033      	str	r3, [r6, #0]
 800dea6:	4630      	mov	r0, r6
 800dea8:	f000 f9fe 	bl	800e2a8 <__malloc_unlock>
 800deac:	e7e3      	b.n	800de76 <_malloc_r+0x1e>
 800deae:	6823      	ldr	r3, [r4, #0]
 800deb0:	1b5b      	subs	r3, r3, r5
 800deb2:	d417      	bmi.n	800dee4 <_malloc_r+0x8c>
 800deb4:	2b0b      	cmp	r3, #11
 800deb6:	d903      	bls.n	800dec0 <_malloc_r+0x68>
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	441c      	add	r4, r3
 800debc:	6025      	str	r5, [r4, #0]
 800debe:	e004      	b.n	800deca <_malloc_r+0x72>
 800dec0:	6863      	ldr	r3, [r4, #4]
 800dec2:	42a2      	cmp	r2, r4
 800dec4:	bf0c      	ite	eq
 800dec6:	600b      	streq	r3, [r1, #0]
 800dec8:	6053      	strne	r3, [r2, #4]
 800deca:	4630      	mov	r0, r6
 800decc:	f000 f9ec 	bl	800e2a8 <__malloc_unlock>
 800ded0:	f104 000b 	add.w	r0, r4, #11
 800ded4:	1d23      	adds	r3, r4, #4
 800ded6:	f020 0007 	bic.w	r0, r0, #7
 800deda:	1ac2      	subs	r2, r0, r3
 800dedc:	d0cc      	beq.n	800de78 <_malloc_r+0x20>
 800dede:	1a1b      	subs	r3, r3, r0
 800dee0:	50a3      	str	r3, [r4, r2]
 800dee2:	e7c9      	b.n	800de78 <_malloc_r+0x20>
 800dee4:	4622      	mov	r2, r4
 800dee6:	6864      	ldr	r4, [r4, #4]
 800dee8:	e7cc      	b.n	800de84 <_malloc_r+0x2c>
 800deea:	1cc4      	adds	r4, r0, #3
 800deec:	f024 0403 	bic.w	r4, r4, #3
 800def0:	42a0      	cmp	r0, r4
 800def2:	d0e3      	beq.n	800debc <_malloc_r+0x64>
 800def4:	1a21      	subs	r1, r4, r0
 800def6:	4630      	mov	r0, r6
 800def8:	f000 f964 	bl	800e1c4 <_sbrk_r>
 800defc:	3001      	adds	r0, #1
 800defe:	d1dd      	bne.n	800debc <_malloc_r+0x64>
 800df00:	e7cf      	b.n	800dea2 <_malloc_r+0x4a>
 800df02:	bf00      	nop
 800df04:	200006d4 	.word	0x200006d4
 800df08:	200006d8 	.word	0x200006d8

0800df0c <__ssputs_r>:
 800df0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df10:	688e      	ldr	r6, [r1, #8]
 800df12:	429e      	cmp	r6, r3
 800df14:	4682      	mov	sl, r0
 800df16:	460c      	mov	r4, r1
 800df18:	4690      	mov	r8, r2
 800df1a:	461f      	mov	r7, r3
 800df1c:	d838      	bhi.n	800df90 <__ssputs_r+0x84>
 800df1e:	898a      	ldrh	r2, [r1, #12]
 800df20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df24:	d032      	beq.n	800df8c <__ssputs_r+0x80>
 800df26:	6825      	ldr	r5, [r4, #0]
 800df28:	6909      	ldr	r1, [r1, #16]
 800df2a:	eba5 0901 	sub.w	r9, r5, r1
 800df2e:	6965      	ldr	r5, [r4, #20]
 800df30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df38:	3301      	adds	r3, #1
 800df3a:	444b      	add	r3, r9
 800df3c:	106d      	asrs	r5, r5, #1
 800df3e:	429d      	cmp	r5, r3
 800df40:	bf38      	it	cc
 800df42:	461d      	movcc	r5, r3
 800df44:	0553      	lsls	r3, r2, #21
 800df46:	d531      	bpl.n	800dfac <__ssputs_r+0xa0>
 800df48:	4629      	mov	r1, r5
 800df4a:	f7ff ff85 	bl	800de58 <_malloc_r>
 800df4e:	4606      	mov	r6, r0
 800df50:	b950      	cbnz	r0, 800df68 <__ssputs_r+0x5c>
 800df52:	230c      	movs	r3, #12
 800df54:	f8ca 3000 	str.w	r3, [sl]
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df5e:	81a3      	strh	r3, [r4, #12]
 800df60:	f04f 30ff 	mov.w	r0, #4294967295
 800df64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df68:	6921      	ldr	r1, [r4, #16]
 800df6a:	464a      	mov	r2, r9
 800df6c:	f7ff fb88 	bl	800d680 <memcpy>
 800df70:	89a3      	ldrh	r3, [r4, #12]
 800df72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df7a:	81a3      	strh	r3, [r4, #12]
 800df7c:	6126      	str	r6, [r4, #16]
 800df7e:	6165      	str	r5, [r4, #20]
 800df80:	444e      	add	r6, r9
 800df82:	eba5 0509 	sub.w	r5, r5, r9
 800df86:	6026      	str	r6, [r4, #0]
 800df88:	60a5      	str	r5, [r4, #8]
 800df8a:	463e      	mov	r6, r7
 800df8c:	42be      	cmp	r6, r7
 800df8e:	d900      	bls.n	800df92 <__ssputs_r+0x86>
 800df90:	463e      	mov	r6, r7
 800df92:	4632      	mov	r2, r6
 800df94:	6820      	ldr	r0, [r4, #0]
 800df96:	4641      	mov	r1, r8
 800df98:	f000 f966 	bl	800e268 <memmove>
 800df9c:	68a3      	ldr	r3, [r4, #8]
 800df9e:	6822      	ldr	r2, [r4, #0]
 800dfa0:	1b9b      	subs	r3, r3, r6
 800dfa2:	4432      	add	r2, r6
 800dfa4:	60a3      	str	r3, [r4, #8]
 800dfa6:	6022      	str	r2, [r4, #0]
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	e7db      	b.n	800df64 <__ssputs_r+0x58>
 800dfac:	462a      	mov	r2, r5
 800dfae:	f000 f981 	bl	800e2b4 <_realloc_r>
 800dfb2:	4606      	mov	r6, r0
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d1e1      	bne.n	800df7c <__ssputs_r+0x70>
 800dfb8:	6921      	ldr	r1, [r4, #16]
 800dfba:	4650      	mov	r0, sl
 800dfbc:	f7ff fefc 	bl	800ddb8 <_free_r>
 800dfc0:	e7c7      	b.n	800df52 <__ssputs_r+0x46>
	...

0800dfc4 <_svfiprintf_r>:
 800dfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc8:	4698      	mov	r8, r3
 800dfca:	898b      	ldrh	r3, [r1, #12]
 800dfcc:	061b      	lsls	r3, r3, #24
 800dfce:	b09d      	sub	sp, #116	; 0x74
 800dfd0:	4607      	mov	r7, r0
 800dfd2:	460d      	mov	r5, r1
 800dfd4:	4614      	mov	r4, r2
 800dfd6:	d50e      	bpl.n	800dff6 <_svfiprintf_r+0x32>
 800dfd8:	690b      	ldr	r3, [r1, #16]
 800dfda:	b963      	cbnz	r3, 800dff6 <_svfiprintf_r+0x32>
 800dfdc:	2140      	movs	r1, #64	; 0x40
 800dfde:	f7ff ff3b 	bl	800de58 <_malloc_r>
 800dfe2:	6028      	str	r0, [r5, #0]
 800dfe4:	6128      	str	r0, [r5, #16]
 800dfe6:	b920      	cbnz	r0, 800dff2 <_svfiprintf_r+0x2e>
 800dfe8:	230c      	movs	r3, #12
 800dfea:	603b      	str	r3, [r7, #0]
 800dfec:	f04f 30ff 	mov.w	r0, #4294967295
 800dff0:	e0d1      	b.n	800e196 <_svfiprintf_r+0x1d2>
 800dff2:	2340      	movs	r3, #64	; 0x40
 800dff4:	616b      	str	r3, [r5, #20]
 800dff6:	2300      	movs	r3, #0
 800dff8:	9309      	str	r3, [sp, #36]	; 0x24
 800dffa:	2320      	movs	r3, #32
 800dffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e000:	f8cd 800c 	str.w	r8, [sp, #12]
 800e004:	2330      	movs	r3, #48	; 0x30
 800e006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e1b0 <_svfiprintf_r+0x1ec>
 800e00a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e00e:	f04f 0901 	mov.w	r9, #1
 800e012:	4623      	mov	r3, r4
 800e014:	469a      	mov	sl, r3
 800e016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e01a:	b10a      	cbz	r2, 800e020 <_svfiprintf_r+0x5c>
 800e01c:	2a25      	cmp	r2, #37	; 0x25
 800e01e:	d1f9      	bne.n	800e014 <_svfiprintf_r+0x50>
 800e020:	ebba 0b04 	subs.w	fp, sl, r4
 800e024:	d00b      	beq.n	800e03e <_svfiprintf_r+0x7a>
 800e026:	465b      	mov	r3, fp
 800e028:	4622      	mov	r2, r4
 800e02a:	4629      	mov	r1, r5
 800e02c:	4638      	mov	r0, r7
 800e02e:	f7ff ff6d 	bl	800df0c <__ssputs_r>
 800e032:	3001      	adds	r0, #1
 800e034:	f000 80aa 	beq.w	800e18c <_svfiprintf_r+0x1c8>
 800e038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e03a:	445a      	add	r2, fp
 800e03c:	9209      	str	r2, [sp, #36]	; 0x24
 800e03e:	f89a 3000 	ldrb.w	r3, [sl]
 800e042:	2b00      	cmp	r3, #0
 800e044:	f000 80a2 	beq.w	800e18c <_svfiprintf_r+0x1c8>
 800e048:	2300      	movs	r3, #0
 800e04a:	f04f 32ff 	mov.w	r2, #4294967295
 800e04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e052:	f10a 0a01 	add.w	sl, sl, #1
 800e056:	9304      	str	r3, [sp, #16]
 800e058:	9307      	str	r3, [sp, #28]
 800e05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e05e:	931a      	str	r3, [sp, #104]	; 0x68
 800e060:	4654      	mov	r4, sl
 800e062:	2205      	movs	r2, #5
 800e064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e068:	4851      	ldr	r0, [pc, #324]	; (800e1b0 <_svfiprintf_r+0x1ec>)
 800e06a:	f7f2 f8b9 	bl	80001e0 <memchr>
 800e06e:	9a04      	ldr	r2, [sp, #16]
 800e070:	b9d8      	cbnz	r0, 800e0aa <_svfiprintf_r+0xe6>
 800e072:	06d0      	lsls	r0, r2, #27
 800e074:	bf44      	itt	mi
 800e076:	2320      	movmi	r3, #32
 800e078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e07c:	0711      	lsls	r1, r2, #28
 800e07e:	bf44      	itt	mi
 800e080:	232b      	movmi	r3, #43	; 0x2b
 800e082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e086:	f89a 3000 	ldrb.w	r3, [sl]
 800e08a:	2b2a      	cmp	r3, #42	; 0x2a
 800e08c:	d015      	beq.n	800e0ba <_svfiprintf_r+0xf6>
 800e08e:	9a07      	ldr	r2, [sp, #28]
 800e090:	4654      	mov	r4, sl
 800e092:	2000      	movs	r0, #0
 800e094:	f04f 0c0a 	mov.w	ip, #10
 800e098:	4621      	mov	r1, r4
 800e09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e09e:	3b30      	subs	r3, #48	; 0x30
 800e0a0:	2b09      	cmp	r3, #9
 800e0a2:	d94e      	bls.n	800e142 <_svfiprintf_r+0x17e>
 800e0a4:	b1b0      	cbz	r0, 800e0d4 <_svfiprintf_r+0x110>
 800e0a6:	9207      	str	r2, [sp, #28]
 800e0a8:	e014      	b.n	800e0d4 <_svfiprintf_r+0x110>
 800e0aa:	eba0 0308 	sub.w	r3, r0, r8
 800e0ae:	fa09 f303 	lsl.w	r3, r9, r3
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	9304      	str	r3, [sp, #16]
 800e0b6:	46a2      	mov	sl, r4
 800e0b8:	e7d2      	b.n	800e060 <_svfiprintf_r+0x9c>
 800e0ba:	9b03      	ldr	r3, [sp, #12]
 800e0bc:	1d19      	adds	r1, r3, #4
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	9103      	str	r1, [sp, #12]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	bfbb      	ittet	lt
 800e0c6:	425b      	neglt	r3, r3
 800e0c8:	f042 0202 	orrlt.w	r2, r2, #2
 800e0cc:	9307      	strge	r3, [sp, #28]
 800e0ce:	9307      	strlt	r3, [sp, #28]
 800e0d0:	bfb8      	it	lt
 800e0d2:	9204      	strlt	r2, [sp, #16]
 800e0d4:	7823      	ldrb	r3, [r4, #0]
 800e0d6:	2b2e      	cmp	r3, #46	; 0x2e
 800e0d8:	d10c      	bne.n	800e0f4 <_svfiprintf_r+0x130>
 800e0da:	7863      	ldrb	r3, [r4, #1]
 800e0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e0de:	d135      	bne.n	800e14c <_svfiprintf_r+0x188>
 800e0e0:	9b03      	ldr	r3, [sp, #12]
 800e0e2:	1d1a      	adds	r2, r3, #4
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	9203      	str	r2, [sp, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	bfb8      	it	lt
 800e0ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0f0:	3402      	adds	r4, #2
 800e0f2:	9305      	str	r3, [sp, #20]
 800e0f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e1c0 <_svfiprintf_r+0x1fc>
 800e0f8:	7821      	ldrb	r1, [r4, #0]
 800e0fa:	2203      	movs	r2, #3
 800e0fc:	4650      	mov	r0, sl
 800e0fe:	f7f2 f86f 	bl	80001e0 <memchr>
 800e102:	b140      	cbz	r0, 800e116 <_svfiprintf_r+0x152>
 800e104:	2340      	movs	r3, #64	; 0x40
 800e106:	eba0 000a 	sub.w	r0, r0, sl
 800e10a:	fa03 f000 	lsl.w	r0, r3, r0
 800e10e:	9b04      	ldr	r3, [sp, #16]
 800e110:	4303      	orrs	r3, r0
 800e112:	3401      	adds	r4, #1
 800e114:	9304      	str	r3, [sp, #16]
 800e116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e11a:	4826      	ldr	r0, [pc, #152]	; (800e1b4 <_svfiprintf_r+0x1f0>)
 800e11c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e120:	2206      	movs	r2, #6
 800e122:	f7f2 f85d 	bl	80001e0 <memchr>
 800e126:	2800      	cmp	r0, #0
 800e128:	d038      	beq.n	800e19c <_svfiprintf_r+0x1d8>
 800e12a:	4b23      	ldr	r3, [pc, #140]	; (800e1b8 <_svfiprintf_r+0x1f4>)
 800e12c:	bb1b      	cbnz	r3, 800e176 <_svfiprintf_r+0x1b2>
 800e12e:	9b03      	ldr	r3, [sp, #12]
 800e130:	3307      	adds	r3, #7
 800e132:	f023 0307 	bic.w	r3, r3, #7
 800e136:	3308      	adds	r3, #8
 800e138:	9303      	str	r3, [sp, #12]
 800e13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e13c:	4433      	add	r3, r6
 800e13e:	9309      	str	r3, [sp, #36]	; 0x24
 800e140:	e767      	b.n	800e012 <_svfiprintf_r+0x4e>
 800e142:	fb0c 3202 	mla	r2, ip, r2, r3
 800e146:	460c      	mov	r4, r1
 800e148:	2001      	movs	r0, #1
 800e14a:	e7a5      	b.n	800e098 <_svfiprintf_r+0xd4>
 800e14c:	2300      	movs	r3, #0
 800e14e:	3401      	adds	r4, #1
 800e150:	9305      	str	r3, [sp, #20]
 800e152:	4619      	mov	r1, r3
 800e154:	f04f 0c0a 	mov.w	ip, #10
 800e158:	4620      	mov	r0, r4
 800e15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e15e:	3a30      	subs	r2, #48	; 0x30
 800e160:	2a09      	cmp	r2, #9
 800e162:	d903      	bls.n	800e16c <_svfiprintf_r+0x1a8>
 800e164:	2b00      	cmp	r3, #0
 800e166:	d0c5      	beq.n	800e0f4 <_svfiprintf_r+0x130>
 800e168:	9105      	str	r1, [sp, #20]
 800e16a:	e7c3      	b.n	800e0f4 <_svfiprintf_r+0x130>
 800e16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e170:	4604      	mov	r4, r0
 800e172:	2301      	movs	r3, #1
 800e174:	e7f0      	b.n	800e158 <_svfiprintf_r+0x194>
 800e176:	ab03      	add	r3, sp, #12
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	462a      	mov	r2, r5
 800e17c:	4b0f      	ldr	r3, [pc, #60]	; (800e1bc <_svfiprintf_r+0x1f8>)
 800e17e:	a904      	add	r1, sp, #16
 800e180:	4638      	mov	r0, r7
 800e182:	f7fe f801 	bl	800c188 <_printf_float>
 800e186:	1c42      	adds	r2, r0, #1
 800e188:	4606      	mov	r6, r0
 800e18a:	d1d6      	bne.n	800e13a <_svfiprintf_r+0x176>
 800e18c:	89ab      	ldrh	r3, [r5, #12]
 800e18e:	065b      	lsls	r3, r3, #25
 800e190:	f53f af2c 	bmi.w	800dfec <_svfiprintf_r+0x28>
 800e194:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e196:	b01d      	add	sp, #116	; 0x74
 800e198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19c:	ab03      	add	r3, sp, #12
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	462a      	mov	r2, r5
 800e1a2:	4b06      	ldr	r3, [pc, #24]	; (800e1bc <_svfiprintf_r+0x1f8>)
 800e1a4:	a904      	add	r1, sp, #16
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	f7fe fa92 	bl	800c6d0 <_printf_i>
 800e1ac:	e7eb      	b.n	800e186 <_svfiprintf_r+0x1c2>
 800e1ae:	bf00      	nop
 800e1b0:	0800f084 	.word	0x0800f084
 800e1b4:	0800f08e 	.word	0x0800f08e
 800e1b8:	0800c189 	.word	0x0800c189
 800e1bc:	0800df0d 	.word	0x0800df0d
 800e1c0:	0800f08a 	.word	0x0800f08a

0800e1c4 <_sbrk_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4d06      	ldr	r5, [pc, #24]	; (800e1e0 <_sbrk_r+0x1c>)
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	4608      	mov	r0, r1
 800e1ce:	602b      	str	r3, [r5, #0]
 800e1d0:	f7f4 f9be 	bl	8002550 <_sbrk>
 800e1d4:	1c43      	adds	r3, r0, #1
 800e1d6:	d102      	bne.n	800e1de <_sbrk_r+0x1a>
 800e1d8:	682b      	ldr	r3, [r5, #0]
 800e1da:	b103      	cbz	r3, 800e1de <_sbrk_r+0x1a>
 800e1dc:	6023      	str	r3, [r4, #0]
 800e1de:	bd38      	pop	{r3, r4, r5, pc}
 800e1e0:	2000224c 	.word	0x2000224c

0800e1e4 <__assert_func>:
 800e1e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1e6:	4614      	mov	r4, r2
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	4b09      	ldr	r3, [pc, #36]	; (800e210 <__assert_func+0x2c>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	68d8      	ldr	r0, [r3, #12]
 800e1f2:	b14c      	cbz	r4, 800e208 <__assert_func+0x24>
 800e1f4:	4b07      	ldr	r3, [pc, #28]	; (800e214 <__assert_func+0x30>)
 800e1f6:	9100      	str	r1, [sp, #0]
 800e1f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1fc:	4906      	ldr	r1, [pc, #24]	; (800e218 <__assert_func+0x34>)
 800e1fe:	462b      	mov	r3, r5
 800e200:	f000 f80e 	bl	800e220 <fiprintf>
 800e204:	f000 faa4 	bl	800e750 <abort>
 800e208:	4b04      	ldr	r3, [pc, #16]	; (800e21c <__assert_func+0x38>)
 800e20a:	461c      	mov	r4, r3
 800e20c:	e7f3      	b.n	800e1f6 <__assert_func+0x12>
 800e20e:	bf00      	nop
 800e210:	20000194 	.word	0x20000194
 800e214:	0800f095 	.word	0x0800f095
 800e218:	0800f0a2 	.word	0x0800f0a2
 800e21c:	0800f0d0 	.word	0x0800f0d0

0800e220 <fiprintf>:
 800e220:	b40e      	push	{r1, r2, r3}
 800e222:	b503      	push	{r0, r1, lr}
 800e224:	4601      	mov	r1, r0
 800e226:	ab03      	add	r3, sp, #12
 800e228:	4805      	ldr	r0, [pc, #20]	; (800e240 <fiprintf+0x20>)
 800e22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e22e:	6800      	ldr	r0, [r0, #0]
 800e230:	9301      	str	r3, [sp, #4]
 800e232:	f000 f88f 	bl	800e354 <_vfiprintf_r>
 800e236:	b002      	add	sp, #8
 800e238:	f85d eb04 	ldr.w	lr, [sp], #4
 800e23c:	b003      	add	sp, #12
 800e23e:	4770      	bx	lr
 800e240:	20000194 	.word	0x20000194

0800e244 <__ascii_mbtowc>:
 800e244:	b082      	sub	sp, #8
 800e246:	b901      	cbnz	r1, 800e24a <__ascii_mbtowc+0x6>
 800e248:	a901      	add	r1, sp, #4
 800e24a:	b142      	cbz	r2, 800e25e <__ascii_mbtowc+0x1a>
 800e24c:	b14b      	cbz	r3, 800e262 <__ascii_mbtowc+0x1e>
 800e24e:	7813      	ldrb	r3, [r2, #0]
 800e250:	600b      	str	r3, [r1, #0]
 800e252:	7812      	ldrb	r2, [r2, #0]
 800e254:	1e10      	subs	r0, r2, #0
 800e256:	bf18      	it	ne
 800e258:	2001      	movne	r0, #1
 800e25a:	b002      	add	sp, #8
 800e25c:	4770      	bx	lr
 800e25e:	4610      	mov	r0, r2
 800e260:	e7fb      	b.n	800e25a <__ascii_mbtowc+0x16>
 800e262:	f06f 0001 	mvn.w	r0, #1
 800e266:	e7f8      	b.n	800e25a <__ascii_mbtowc+0x16>

0800e268 <memmove>:
 800e268:	4288      	cmp	r0, r1
 800e26a:	b510      	push	{r4, lr}
 800e26c:	eb01 0402 	add.w	r4, r1, r2
 800e270:	d902      	bls.n	800e278 <memmove+0x10>
 800e272:	4284      	cmp	r4, r0
 800e274:	4623      	mov	r3, r4
 800e276:	d807      	bhi.n	800e288 <memmove+0x20>
 800e278:	1e43      	subs	r3, r0, #1
 800e27a:	42a1      	cmp	r1, r4
 800e27c:	d008      	beq.n	800e290 <memmove+0x28>
 800e27e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e282:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e286:	e7f8      	b.n	800e27a <memmove+0x12>
 800e288:	4402      	add	r2, r0
 800e28a:	4601      	mov	r1, r0
 800e28c:	428a      	cmp	r2, r1
 800e28e:	d100      	bne.n	800e292 <memmove+0x2a>
 800e290:	bd10      	pop	{r4, pc}
 800e292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e29a:	e7f7      	b.n	800e28c <memmove+0x24>

0800e29c <__malloc_lock>:
 800e29c:	4801      	ldr	r0, [pc, #4]	; (800e2a4 <__malloc_lock+0x8>)
 800e29e:	f000 bc17 	b.w	800ead0 <__retarget_lock_acquire_recursive>
 800e2a2:	bf00      	nop
 800e2a4:	20002254 	.word	0x20002254

0800e2a8 <__malloc_unlock>:
 800e2a8:	4801      	ldr	r0, [pc, #4]	; (800e2b0 <__malloc_unlock+0x8>)
 800e2aa:	f000 bc12 	b.w	800ead2 <__retarget_lock_release_recursive>
 800e2ae:	bf00      	nop
 800e2b0:	20002254 	.word	0x20002254

0800e2b4 <_realloc_r>:
 800e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b6:	4607      	mov	r7, r0
 800e2b8:	4614      	mov	r4, r2
 800e2ba:	460e      	mov	r6, r1
 800e2bc:	b921      	cbnz	r1, 800e2c8 <_realloc_r+0x14>
 800e2be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2c2:	4611      	mov	r1, r2
 800e2c4:	f7ff bdc8 	b.w	800de58 <_malloc_r>
 800e2c8:	b922      	cbnz	r2, 800e2d4 <_realloc_r+0x20>
 800e2ca:	f7ff fd75 	bl	800ddb8 <_free_r>
 800e2ce:	4625      	mov	r5, r4
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2d4:	f000 fc62 	bl	800eb9c <_malloc_usable_size_r>
 800e2d8:	42a0      	cmp	r0, r4
 800e2da:	d20f      	bcs.n	800e2fc <_realloc_r+0x48>
 800e2dc:	4621      	mov	r1, r4
 800e2de:	4638      	mov	r0, r7
 800e2e0:	f7ff fdba 	bl	800de58 <_malloc_r>
 800e2e4:	4605      	mov	r5, r0
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d0f2      	beq.n	800e2d0 <_realloc_r+0x1c>
 800e2ea:	4631      	mov	r1, r6
 800e2ec:	4622      	mov	r2, r4
 800e2ee:	f7ff f9c7 	bl	800d680 <memcpy>
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	f7ff fd5f 	bl	800ddb8 <_free_r>
 800e2fa:	e7e9      	b.n	800e2d0 <_realloc_r+0x1c>
 800e2fc:	4635      	mov	r5, r6
 800e2fe:	e7e7      	b.n	800e2d0 <_realloc_r+0x1c>

0800e300 <__sfputc_r>:
 800e300:	6893      	ldr	r3, [r2, #8]
 800e302:	3b01      	subs	r3, #1
 800e304:	2b00      	cmp	r3, #0
 800e306:	b410      	push	{r4}
 800e308:	6093      	str	r3, [r2, #8]
 800e30a:	da08      	bge.n	800e31e <__sfputc_r+0x1e>
 800e30c:	6994      	ldr	r4, [r2, #24]
 800e30e:	42a3      	cmp	r3, r4
 800e310:	db01      	blt.n	800e316 <__sfputc_r+0x16>
 800e312:	290a      	cmp	r1, #10
 800e314:	d103      	bne.n	800e31e <__sfputc_r+0x1e>
 800e316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e31a:	f000 b94b 	b.w	800e5b4 <__swbuf_r>
 800e31e:	6813      	ldr	r3, [r2, #0]
 800e320:	1c58      	adds	r0, r3, #1
 800e322:	6010      	str	r0, [r2, #0]
 800e324:	7019      	strb	r1, [r3, #0]
 800e326:	4608      	mov	r0, r1
 800e328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e32c:	4770      	bx	lr

0800e32e <__sfputs_r>:
 800e32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e330:	4606      	mov	r6, r0
 800e332:	460f      	mov	r7, r1
 800e334:	4614      	mov	r4, r2
 800e336:	18d5      	adds	r5, r2, r3
 800e338:	42ac      	cmp	r4, r5
 800e33a:	d101      	bne.n	800e340 <__sfputs_r+0x12>
 800e33c:	2000      	movs	r0, #0
 800e33e:	e007      	b.n	800e350 <__sfputs_r+0x22>
 800e340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e344:	463a      	mov	r2, r7
 800e346:	4630      	mov	r0, r6
 800e348:	f7ff ffda 	bl	800e300 <__sfputc_r>
 800e34c:	1c43      	adds	r3, r0, #1
 800e34e:	d1f3      	bne.n	800e338 <__sfputs_r+0xa>
 800e350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e354 <_vfiprintf_r>:
 800e354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e358:	460d      	mov	r5, r1
 800e35a:	b09d      	sub	sp, #116	; 0x74
 800e35c:	4614      	mov	r4, r2
 800e35e:	4698      	mov	r8, r3
 800e360:	4606      	mov	r6, r0
 800e362:	b118      	cbz	r0, 800e36c <_vfiprintf_r+0x18>
 800e364:	6983      	ldr	r3, [r0, #24]
 800e366:	b90b      	cbnz	r3, 800e36c <_vfiprintf_r+0x18>
 800e368:	f000 fb14 	bl	800e994 <__sinit>
 800e36c:	4b89      	ldr	r3, [pc, #548]	; (800e594 <_vfiprintf_r+0x240>)
 800e36e:	429d      	cmp	r5, r3
 800e370:	d11b      	bne.n	800e3aa <_vfiprintf_r+0x56>
 800e372:	6875      	ldr	r5, [r6, #4]
 800e374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e376:	07d9      	lsls	r1, r3, #31
 800e378:	d405      	bmi.n	800e386 <_vfiprintf_r+0x32>
 800e37a:	89ab      	ldrh	r3, [r5, #12]
 800e37c:	059a      	lsls	r2, r3, #22
 800e37e:	d402      	bmi.n	800e386 <_vfiprintf_r+0x32>
 800e380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e382:	f000 fba5 	bl	800ead0 <__retarget_lock_acquire_recursive>
 800e386:	89ab      	ldrh	r3, [r5, #12]
 800e388:	071b      	lsls	r3, r3, #28
 800e38a:	d501      	bpl.n	800e390 <_vfiprintf_r+0x3c>
 800e38c:	692b      	ldr	r3, [r5, #16]
 800e38e:	b9eb      	cbnz	r3, 800e3cc <_vfiprintf_r+0x78>
 800e390:	4629      	mov	r1, r5
 800e392:	4630      	mov	r0, r6
 800e394:	f000 f96e 	bl	800e674 <__swsetup_r>
 800e398:	b1c0      	cbz	r0, 800e3cc <_vfiprintf_r+0x78>
 800e39a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e39c:	07dc      	lsls	r4, r3, #31
 800e39e:	d50e      	bpl.n	800e3be <_vfiprintf_r+0x6a>
 800e3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a4:	b01d      	add	sp, #116	; 0x74
 800e3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3aa:	4b7b      	ldr	r3, [pc, #492]	; (800e598 <_vfiprintf_r+0x244>)
 800e3ac:	429d      	cmp	r5, r3
 800e3ae:	d101      	bne.n	800e3b4 <_vfiprintf_r+0x60>
 800e3b0:	68b5      	ldr	r5, [r6, #8]
 800e3b2:	e7df      	b.n	800e374 <_vfiprintf_r+0x20>
 800e3b4:	4b79      	ldr	r3, [pc, #484]	; (800e59c <_vfiprintf_r+0x248>)
 800e3b6:	429d      	cmp	r5, r3
 800e3b8:	bf08      	it	eq
 800e3ba:	68f5      	ldreq	r5, [r6, #12]
 800e3bc:	e7da      	b.n	800e374 <_vfiprintf_r+0x20>
 800e3be:	89ab      	ldrh	r3, [r5, #12]
 800e3c0:	0598      	lsls	r0, r3, #22
 800e3c2:	d4ed      	bmi.n	800e3a0 <_vfiprintf_r+0x4c>
 800e3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3c6:	f000 fb84 	bl	800ead2 <__retarget_lock_release_recursive>
 800e3ca:	e7e9      	b.n	800e3a0 <_vfiprintf_r+0x4c>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d0:	2320      	movs	r3, #32
 800e3d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3da:	2330      	movs	r3, #48	; 0x30
 800e3dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e5a0 <_vfiprintf_r+0x24c>
 800e3e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3e4:	f04f 0901 	mov.w	r9, #1
 800e3e8:	4623      	mov	r3, r4
 800e3ea:	469a      	mov	sl, r3
 800e3ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3f0:	b10a      	cbz	r2, 800e3f6 <_vfiprintf_r+0xa2>
 800e3f2:	2a25      	cmp	r2, #37	; 0x25
 800e3f4:	d1f9      	bne.n	800e3ea <_vfiprintf_r+0x96>
 800e3f6:	ebba 0b04 	subs.w	fp, sl, r4
 800e3fa:	d00b      	beq.n	800e414 <_vfiprintf_r+0xc0>
 800e3fc:	465b      	mov	r3, fp
 800e3fe:	4622      	mov	r2, r4
 800e400:	4629      	mov	r1, r5
 800e402:	4630      	mov	r0, r6
 800e404:	f7ff ff93 	bl	800e32e <__sfputs_r>
 800e408:	3001      	adds	r0, #1
 800e40a:	f000 80aa 	beq.w	800e562 <_vfiprintf_r+0x20e>
 800e40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e410:	445a      	add	r2, fp
 800e412:	9209      	str	r2, [sp, #36]	; 0x24
 800e414:	f89a 3000 	ldrb.w	r3, [sl]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f000 80a2 	beq.w	800e562 <_vfiprintf_r+0x20e>
 800e41e:	2300      	movs	r3, #0
 800e420:	f04f 32ff 	mov.w	r2, #4294967295
 800e424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e428:	f10a 0a01 	add.w	sl, sl, #1
 800e42c:	9304      	str	r3, [sp, #16]
 800e42e:	9307      	str	r3, [sp, #28]
 800e430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e434:	931a      	str	r3, [sp, #104]	; 0x68
 800e436:	4654      	mov	r4, sl
 800e438:	2205      	movs	r2, #5
 800e43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e43e:	4858      	ldr	r0, [pc, #352]	; (800e5a0 <_vfiprintf_r+0x24c>)
 800e440:	f7f1 fece 	bl	80001e0 <memchr>
 800e444:	9a04      	ldr	r2, [sp, #16]
 800e446:	b9d8      	cbnz	r0, 800e480 <_vfiprintf_r+0x12c>
 800e448:	06d1      	lsls	r1, r2, #27
 800e44a:	bf44      	itt	mi
 800e44c:	2320      	movmi	r3, #32
 800e44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e452:	0713      	lsls	r3, r2, #28
 800e454:	bf44      	itt	mi
 800e456:	232b      	movmi	r3, #43	; 0x2b
 800e458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e45c:	f89a 3000 	ldrb.w	r3, [sl]
 800e460:	2b2a      	cmp	r3, #42	; 0x2a
 800e462:	d015      	beq.n	800e490 <_vfiprintf_r+0x13c>
 800e464:	9a07      	ldr	r2, [sp, #28]
 800e466:	4654      	mov	r4, sl
 800e468:	2000      	movs	r0, #0
 800e46a:	f04f 0c0a 	mov.w	ip, #10
 800e46e:	4621      	mov	r1, r4
 800e470:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e474:	3b30      	subs	r3, #48	; 0x30
 800e476:	2b09      	cmp	r3, #9
 800e478:	d94e      	bls.n	800e518 <_vfiprintf_r+0x1c4>
 800e47a:	b1b0      	cbz	r0, 800e4aa <_vfiprintf_r+0x156>
 800e47c:	9207      	str	r2, [sp, #28]
 800e47e:	e014      	b.n	800e4aa <_vfiprintf_r+0x156>
 800e480:	eba0 0308 	sub.w	r3, r0, r8
 800e484:	fa09 f303 	lsl.w	r3, r9, r3
 800e488:	4313      	orrs	r3, r2
 800e48a:	9304      	str	r3, [sp, #16]
 800e48c:	46a2      	mov	sl, r4
 800e48e:	e7d2      	b.n	800e436 <_vfiprintf_r+0xe2>
 800e490:	9b03      	ldr	r3, [sp, #12]
 800e492:	1d19      	adds	r1, r3, #4
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	9103      	str	r1, [sp, #12]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	bfbb      	ittet	lt
 800e49c:	425b      	neglt	r3, r3
 800e49e:	f042 0202 	orrlt.w	r2, r2, #2
 800e4a2:	9307      	strge	r3, [sp, #28]
 800e4a4:	9307      	strlt	r3, [sp, #28]
 800e4a6:	bfb8      	it	lt
 800e4a8:	9204      	strlt	r2, [sp, #16]
 800e4aa:	7823      	ldrb	r3, [r4, #0]
 800e4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800e4ae:	d10c      	bne.n	800e4ca <_vfiprintf_r+0x176>
 800e4b0:	7863      	ldrb	r3, [r4, #1]
 800e4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800e4b4:	d135      	bne.n	800e522 <_vfiprintf_r+0x1ce>
 800e4b6:	9b03      	ldr	r3, [sp, #12]
 800e4b8:	1d1a      	adds	r2, r3, #4
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	9203      	str	r2, [sp, #12]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	bfb8      	it	lt
 800e4c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4c6:	3402      	adds	r4, #2
 800e4c8:	9305      	str	r3, [sp, #20]
 800e4ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e5b0 <_vfiprintf_r+0x25c>
 800e4ce:	7821      	ldrb	r1, [r4, #0]
 800e4d0:	2203      	movs	r2, #3
 800e4d2:	4650      	mov	r0, sl
 800e4d4:	f7f1 fe84 	bl	80001e0 <memchr>
 800e4d8:	b140      	cbz	r0, 800e4ec <_vfiprintf_r+0x198>
 800e4da:	2340      	movs	r3, #64	; 0x40
 800e4dc:	eba0 000a 	sub.w	r0, r0, sl
 800e4e0:	fa03 f000 	lsl.w	r0, r3, r0
 800e4e4:	9b04      	ldr	r3, [sp, #16]
 800e4e6:	4303      	orrs	r3, r0
 800e4e8:	3401      	adds	r4, #1
 800e4ea:	9304      	str	r3, [sp, #16]
 800e4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f0:	482c      	ldr	r0, [pc, #176]	; (800e5a4 <_vfiprintf_r+0x250>)
 800e4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4f6:	2206      	movs	r2, #6
 800e4f8:	f7f1 fe72 	bl	80001e0 <memchr>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d03f      	beq.n	800e580 <_vfiprintf_r+0x22c>
 800e500:	4b29      	ldr	r3, [pc, #164]	; (800e5a8 <_vfiprintf_r+0x254>)
 800e502:	bb1b      	cbnz	r3, 800e54c <_vfiprintf_r+0x1f8>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	3307      	adds	r3, #7
 800e508:	f023 0307 	bic.w	r3, r3, #7
 800e50c:	3308      	adds	r3, #8
 800e50e:	9303      	str	r3, [sp, #12]
 800e510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e512:	443b      	add	r3, r7
 800e514:	9309      	str	r3, [sp, #36]	; 0x24
 800e516:	e767      	b.n	800e3e8 <_vfiprintf_r+0x94>
 800e518:	fb0c 3202 	mla	r2, ip, r2, r3
 800e51c:	460c      	mov	r4, r1
 800e51e:	2001      	movs	r0, #1
 800e520:	e7a5      	b.n	800e46e <_vfiprintf_r+0x11a>
 800e522:	2300      	movs	r3, #0
 800e524:	3401      	adds	r4, #1
 800e526:	9305      	str	r3, [sp, #20]
 800e528:	4619      	mov	r1, r3
 800e52a:	f04f 0c0a 	mov.w	ip, #10
 800e52e:	4620      	mov	r0, r4
 800e530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e534:	3a30      	subs	r2, #48	; 0x30
 800e536:	2a09      	cmp	r2, #9
 800e538:	d903      	bls.n	800e542 <_vfiprintf_r+0x1ee>
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d0c5      	beq.n	800e4ca <_vfiprintf_r+0x176>
 800e53e:	9105      	str	r1, [sp, #20]
 800e540:	e7c3      	b.n	800e4ca <_vfiprintf_r+0x176>
 800e542:	fb0c 2101 	mla	r1, ip, r1, r2
 800e546:	4604      	mov	r4, r0
 800e548:	2301      	movs	r3, #1
 800e54a:	e7f0      	b.n	800e52e <_vfiprintf_r+0x1da>
 800e54c:	ab03      	add	r3, sp, #12
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	462a      	mov	r2, r5
 800e552:	4b16      	ldr	r3, [pc, #88]	; (800e5ac <_vfiprintf_r+0x258>)
 800e554:	a904      	add	r1, sp, #16
 800e556:	4630      	mov	r0, r6
 800e558:	f7fd fe16 	bl	800c188 <_printf_float>
 800e55c:	4607      	mov	r7, r0
 800e55e:	1c78      	adds	r0, r7, #1
 800e560:	d1d6      	bne.n	800e510 <_vfiprintf_r+0x1bc>
 800e562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e564:	07d9      	lsls	r1, r3, #31
 800e566:	d405      	bmi.n	800e574 <_vfiprintf_r+0x220>
 800e568:	89ab      	ldrh	r3, [r5, #12]
 800e56a:	059a      	lsls	r2, r3, #22
 800e56c:	d402      	bmi.n	800e574 <_vfiprintf_r+0x220>
 800e56e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e570:	f000 faaf 	bl	800ead2 <__retarget_lock_release_recursive>
 800e574:	89ab      	ldrh	r3, [r5, #12]
 800e576:	065b      	lsls	r3, r3, #25
 800e578:	f53f af12 	bmi.w	800e3a0 <_vfiprintf_r+0x4c>
 800e57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e57e:	e711      	b.n	800e3a4 <_vfiprintf_r+0x50>
 800e580:	ab03      	add	r3, sp, #12
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	462a      	mov	r2, r5
 800e586:	4b09      	ldr	r3, [pc, #36]	; (800e5ac <_vfiprintf_r+0x258>)
 800e588:	a904      	add	r1, sp, #16
 800e58a:	4630      	mov	r0, r6
 800e58c:	f7fe f8a0 	bl	800c6d0 <_printf_i>
 800e590:	e7e4      	b.n	800e55c <_vfiprintf_r+0x208>
 800e592:	bf00      	nop
 800e594:	0800f1fc 	.word	0x0800f1fc
 800e598:	0800f21c 	.word	0x0800f21c
 800e59c:	0800f1dc 	.word	0x0800f1dc
 800e5a0:	0800f084 	.word	0x0800f084
 800e5a4:	0800f08e 	.word	0x0800f08e
 800e5a8:	0800c189 	.word	0x0800c189
 800e5ac:	0800e32f 	.word	0x0800e32f
 800e5b0:	0800f08a 	.word	0x0800f08a

0800e5b4 <__swbuf_r>:
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b6:	460e      	mov	r6, r1
 800e5b8:	4614      	mov	r4, r2
 800e5ba:	4605      	mov	r5, r0
 800e5bc:	b118      	cbz	r0, 800e5c6 <__swbuf_r+0x12>
 800e5be:	6983      	ldr	r3, [r0, #24]
 800e5c0:	b90b      	cbnz	r3, 800e5c6 <__swbuf_r+0x12>
 800e5c2:	f000 f9e7 	bl	800e994 <__sinit>
 800e5c6:	4b21      	ldr	r3, [pc, #132]	; (800e64c <__swbuf_r+0x98>)
 800e5c8:	429c      	cmp	r4, r3
 800e5ca:	d12b      	bne.n	800e624 <__swbuf_r+0x70>
 800e5cc:	686c      	ldr	r4, [r5, #4]
 800e5ce:	69a3      	ldr	r3, [r4, #24]
 800e5d0:	60a3      	str	r3, [r4, #8]
 800e5d2:	89a3      	ldrh	r3, [r4, #12]
 800e5d4:	071a      	lsls	r2, r3, #28
 800e5d6:	d52f      	bpl.n	800e638 <__swbuf_r+0x84>
 800e5d8:	6923      	ldr	r3, [r4, #16]
 800e5da:	b36b      	cbz	r3, 800e638 <__swbuf_r+0x84>
 800e5dc:	6923      	ldr	r3, [r4, #16]
 800e5de:	6820      	ldr	r0, [r4, #0]
 800e5e0:	1ac0      	subs	r0, r0, r3
 800e5e2:	6963      	ldr	r3, [r4, #20]
 800e5e4:	b2f6      	uxtb	r6, r6
 800e5e6:	4283      	cmp	r3, r0
 800e5e8:	4637      	mov	r7, r6
 800e5ea:	dc04      	bgt.n	800e5f6 <__swbuf_r+0x42>
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	f000 f93c 	bl	800e86c <_fflush_r>
 800e5f4:	bb30      	cbnz	r0, 800e644 <__swbuf_r+0x90>
 800e5f6:	68a3      	ldr	r3, [r4, #8]
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	60a3      	str	r3, [r4, #8]
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	6022      	str	r2, [r4, #0]
 800e602:	701e      	strb	r6, [r3, #0]
 800e604:	6963      	ldr	r3, [r4, #20]
 800e606:	3001      	adds	r0, #1
 800e608:	4283      	cmp	r3, r0
 800e60a:	d004      	beq.n	800e616 <__swbuf_r+0x62>
 800e60c:	89a3      	ldrh	r3, [r4, #12]
 800e60e:	07db      	lsls	r3, r3, #31
 800e610:	d506      	bpl.n	800e620 <__swbuf_r+0x6c>
 800e612:	2e0a      	cmp	r6, #10
 800e614:	d104      	bne.n	800e620 <__swbuf_r+0x6c>
 800e616:	4621      	mov	r1, r4
 800e618:	4628      	mov	r0, r5
 800e61a:	f000 f927 	bl	800e86c <_fflush_r>
 800e61e:	b988      	cbnz	r0, 800e644 <__swbuf_r+0x90>
 800e620:	4638      	mov	r0, r7
 800e622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e624:	4b0a      	ldr	r3, [pc, #40]	; (800e650 <__swbuf_r+0x9c>)
 800e626:	429c      	cmp	r4, r3
 800e628:	d101      	bne.n	800e62e <__swbuf_r+0x7a>
 800e62a:	68ac      	ldr	r4, [r5, #8]
 800e62c:	e7cf      	b.n	800e5ce <__swbuf_r+0x1a>
 800e62e:	4b09      	ldr	r3, [pc, #36]	; (800e654 <__swbuf_r+0xa0>)
 800e630:	429c      	cmp	r4, r3
 800e632:	bf08      	it	eq
 800e634:	68ec      	ldreq	r4, [r5, #12]
 800e636:	e7ca      	b.n	800e5ce <__swbuf_r+0x1a>
 800e638:	4621      	mov	r1, r4
 800e63a:	4628      	mov	r0, r5
 800e63c:	f000 f81a 	bl	800e674 <__swsetup_r>
 800e640:	2800      	cmp	r0, #0
 800e642:	d0cb      	beq.n	800e5dc <__swbuf_r+0x28>
 800e644:	f04f 37ff 	mov.w	r7, #4294967295
 800e648:	e7ea      	b.n	800e620 <__swbuf_r+0x6c>
 800e64a:	bf00      	nop
 800e64c:	0800f1fc 	.word	0x0800f1fc
 800e650:	0800f21c 	.word	0x0800f21c
 800e654:	0800f1dc 	.word	0x0800f1dc

0800e658 <__ascii_wctomb>:
 800e658:	b149      	cbz	r1, 800e66e <__ascii_wctomb+0x16>
 800e65a:	2aff      	cmp	r2, #255	; 0xff
 800e65c:	bf85      	ittet	hi
 800e65e:	238a      	movhi	r3, #138	; 0x8a
 800e660:	6003      	strhi	r3, [r0, #0]
 800e662:	700a      	strbls	r2, [r1, #0]
 800e664:	f04f 30ff 	movhi.w	r0, #4294967295
 800e668:	bf98      	it	ls
 800e66a:	2001      	movls	r0, #1
 800e66c:	4770      	bx	lr
 800e66e:	4608      	mov	r0, r1
 800e670:	4770      	bx	lr
	...

0800e674 <__swsetup_r>:
 800e674:	4b32      	ldr	r3, [pc, #200]	; (800e740 <__swsetup_r+0xcc>)
 800e676:	b570      	push	{r4, r5, r6, lr}
 800e678:	681d      	ldr	r5, [r3, #0]
 800e67a:	4606      	mov	r6, r0
 800e67c:	460c      	mov	r4, r1
 800e67e:	b125      	cbz	r5, 800e68a <__swsetup_r+0x16>
 800e680:	69ab      	ldr	r3, [r5, #24]
 800e682:	b913      	cbnz	r3, 800e68a <__swsetup_r+0x16>
 800e684:	4628      	mov	r0, r5
 800e686:	f000 f985 	bl	800e994 <__sinit>
 800e68a:	4b2e      	ldr	r3, [pc, #184]	; (800e744 <__swsetup_r+0xd0>)
 800e68c:	429c      	cmp	r4, r3
 800e68e:	d10f      	bne.n	800e6b0 <__swsetup_r+0x3c>
 800e690:	686c      	ldr	r4, [r5, #4]
 800e692:	89a3      	ldrh	r3, [r4, #12]
 800e694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e698:	0719      	lsls	r1, r3, #28
 800e69a:	d42c      	bmi.n	800e6f6 <__swsetup_r+0x82>
 800e69c:	06dd      	lsls	r5, r3, #27
 800e69e:	d411      	bmi.n	800e6c4 <__swsetup_r+0x50>
 800e6a0:	2309      	movs	r3, #9
 800e6a2:	6033      	str	r3, [r6, #0]
 800e6a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6a8:	81a3      	strh	r3, [r4, #12]
 800e6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ae:	e03e      	b.n	800e72e <__swsetup_r+0xba>
 800e6b0:	4b25      	ldr	r3, [pc, #148]	; (800e748 <__swsetup_r+0xd4>)
 800e6b2:	429c      	cmp	r4, r3
 800e6b4:	d101      	bne.n	800e6ba <__swsetup_r+0x46>
 800e6b6:	68ac      	ldr	r4, [r5, #8]
 800e6b8:	e7eb      	b.n	800e692 <__swsetup_r+0x1e>
 800e6ba:	4b24      	ldr	r3, [pc, #144]	; (800e74c <__swsetup_r+0xd8>)
 800e6bc:	429c      	cmp	r4, r3
 800e6be:	bf08      	it	eq
 800e6c0:	68ec      	ldreq	r4, [r5, #12]
 800e6c2:	e7e6      	b.n	800e692 <__swsetup_r+0x1e>
 800e6c4:	0758      	lsls	r0, r3, #29
 800e6c6:	d512      	bpl.n	800e6ee <__swsetup_r+0x7a>
 800e6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6ca:	b141      	cbz	r1, 800e6de <__swsetup_r+0x6a>
 800e6cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6d0:	4299      	cmp	r1, r3
 800e6d2:	d002      	beq.n	800e6da <__swsetup_r+0x66>
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f7ff fb6f 	bl	800ddb8 <_free_r>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	6363      	str	r3, [r4, #52]	; 0x34
 800e6de:	89a3      	ldrh	r3, [r4, #12]
 800e6e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6e4:	81a3      	strh	r3, [r4, #12]
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	6063      	str	r3, [r4, #4]
 800e6ea:	6923      	ldr	r3, [r4, #16]
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	f043 0308 	orr.w	r3, r3, #8
 800e6f4:	81a3      	strh	r3, [r4, #12]
 800e6f6:	6923      	ldr	r3, [r4, #16]
 800e6f8:	b94b      	cbnz	r3, 800e70e <__swsetup_r+0x9a>
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e704:	d003      	beq.n	800e70e <__swsetup_r+0x9a>
 800e706:	4621      	mov	r1, r4
 800e708:	4630      	mov	r0, r6
 800e70a:	f000 fa07 	bl	800eb1c <__smakebuf_r>
 800e70e:	89a0      	ldrh	r0, [r4, #12]
 800e710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e714:	f010 0301 	ands.w	r3, r0, #1
 800e718:	d00a      	beq.n	800e730 <__swsetup_r+0xbc>
 800e71a:	2300      	movs	r3, #0
 800e71c:	60a3      	str	r3, [r4, #8]
 800e71e:	6963      	ldr	r3, [r4, #20]
 800e720:	425b      	negs	r3, r3
 800e722:	61a3      	str	r3, [r4, #24]
 800e724:	6923      	ldr	r3, [r4, #16]
 800e726:	b943      	cbnz	r3, 800e73a <__swsetup_r+0xc6>
 800e728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e72c:	d1ba      	bne.n	800e6a4 <__swsetup_r+0x30>
 800e72e:	bd70      	pop	{r4, r5, r6, pc}
 800e730:	0781      	lsls	r1, r0, #30
 800e732:	bf58      	it	pl
 800e734:	6963      	ldrpl	r3, [r4, #20]
 800e736:	60a3      	str	r3, [r4, #8]
 800e738:	e7f4      	b.n	800e724 <__swsetup_r+0xb0>
 800e73a:	2000      	movs	r0, #0
 800e73c:	e7f7      	b.n	800e72e <__swsetup_r+0xba>
 800e73e:	bf00      	nop
 800e740:	20000194 	.word	0x20000194
 800e744:	0800f1fc 	.word	0x0800f1fc
 800e748:	0800f21c 	.word	0x0800f21c
 800e74c:	0800f1dc 	.word	0x0800f1dc

0800e750 <abort>:
 800e750:	b508      	push	{r3, lr}
 800e752:	2006      	movs	r0, #6
 800e754:	f000 fa52 	bl	800ebfc <raise>
 800e758:	2001      	movs	r0, #1
 800e75a:	f7f3 fe81 	bl	8002460 <_exit>
	...

0800e760 <__sflush_r>:
 800e760:	898a      	ldrh	r2, [r1, #12]
 800e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	4605      	mov	r5, r0
 800e768:	0710      	lsls	r0, r2, #28
 800e76a:	460c      	mov	r4, r1
 800e76c:	d458      	bmi.n	800e820 <__sflush_r+0xc0>
 800e76e:	684b      	ldr	r3, [r1, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	dc05      	bgt.n	800e780 <__sflush_r+0x20>
 800e774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e776:	2b00      	cmp	r3, #0
 800e778:	dc02      	bgt.n	800e780 <__sflush_r+0x20>
 800e77a:	2000      	movs	r0, #0
 800e77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e782:	2e00      	cmp	r6, #0
 800e784:	d0f9      	beq.n	800e77a <__sflush_r+0x1a>
 800e786:	2300      	movs	r3, #0
 800e788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e78c:	682f      	ldr	r7, [r5, #0]
 800e78e:	602b      	str	r3, [r5, #0]
 800e790:	d032      	beq.n	800e7f8 <__sflush_r+0x98>
 800e792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e794:	89a3      	ldrh	r3, [r4, #12]
 800e796:	075a      	lsls	r2, r3, #29
 800e798:	d505      	bpl.n	800e7a6 <__sflush_r+0x46>
 800e79a:	6863      	ldr	r3, [r4, #4]
 800e79c:	1ac0      	subs	r0, r0, r3
 800e79e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7a0:	b10b      	cbz	r3, 800e7a6 <__sflush_r+0x46>
 800e7a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7a4:	1ac0      	subs	r0, r0, r3
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7ac:	6a21      	ldr	r1, [r4, #32]
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	47b0      	blx	r6
 800e7b2:	1c43      	adds	r3, r0, #1
 800e7b4:	89a3      	ldrh	r3, [r4, #12]
 800e7b6:	d106      	bne.n	800e7c6 <__sflush_r+0x66>
 800e7b8:	6829      	ldr	r1, [r5, #0]
 800e7ba:	291d      	cmp	r1, #29
 800e7bc:	d82c      	bhi.n	800e818 <__sflush_r+0xb8>
 800e7be:	4a2a      	ldr	r2, [pc, #168]	; (800e868 <__sflush_r+0x108>)
 800e7c0:	40ca      	lsrs	r2, r1
 800e7c2:	07d6      	lsls	r6, r2, #31
 800e7c4:	d528      	bpl.n	800e818 <__sflush_r+0xb8>
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	6062      	str	r2, [r4, #4]
 800e7ca:	04d9      	lsls	r1, r3, #19
 800e7cc:	6922      	ldr	r2, [r4, #16]
 800e7ce:	6022      	str	r2, [r4, #0]
 800e7d0:	d504      	bpl.n	800e7dc <__sflush_r+0x7c>
 800e7d2:	1c42      	adds	r2, r0, #1
 800e7d4:	d101      	bne.n	800e7da <__sflush_r+0x7a>
 800e7d6:	682b      	ldr	r3, [r5, #0]
 800e7d8:	b903      	cbnz	r3, 800e7dc <__sflush_r+0x7c>
 800e7da:	6560      	str	r0, [r4, #84]	; 0x54
 800e7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7de:	602f      	str	r7, [r5, #0]
 800e7e0:	2900      	cmp	r1, #0
 800e7e2:	d0ca      	beq.n	800e77a <__sflush_r+0x1a>
 800e7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7e8:	4299      	cmp	r1, r3
 800e7ea:	d002      	beq.n	800e7f2 <__sflush_r+0x92>
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	f7ff fae3 	bl	800ddb8 <_free_r>
 800e7f2:	2000      	movs	r0, #0
 800e7f4:	6360      	str	r0, [r4, #52]	; 0x34
 800e7f6:	e7c1      	b.n	800e77c <__sflush_r+0x1c>
 800e7f8:	6a21      	ldr	r1, [r4, #32]
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	47b0      	blx	r6
 800e800:	1c41      	adds	r1, r0, #1
 800e802:	d1c7      	bne.n	800e794 <__sflush_r+0x34>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d0c4      	beq.n	800e794 <__sflush_r+0x34>
 800e80a:	2b1d      	cmp	r3, #29
 800e80c:	d001      	beq.n	800e812 <__sflush_r+0xb2>
 800e80e:	2b16      	cmp	r3, #22
 800e810:	d101      	bne.n	800e816 <__sflush_r+0xb6>
 800e812:	602f      	str	r7, [r5, #0]
 800e814:	e7b1      	b.n	800e77a <__sflush_r+0x1a>
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e81c:	81a3      	strh	r3, [r4, #12]
 800e81e:	e7ad      	b.n	800e77c <__sflush_r+0x1c>
 800e820:	690f      	ldr	r7, [r1, #16]
 800e822:	2f00      	cmp	r7, #0
 800e824:	d0a9      	beq.n	800e77a <__sflush_r+0x1a>
 800e826:	0793      	lsls	r3, r2, #30
 800e828:	680e      	ldr	r6, [r1, #0]
 800e82a:	bf08      	it	eq
 800e82c:	694b      	ldreq	r3, [r1, #20]
 800e82e:	600f      	str	r7, [r1, #0]
 800e830:	bf18      	it	ne
 800e832:	2300      	movne	r3, #0
 800e834:	eba6 0807 	sub.w	r8, r6, r7
 800e838:	608b      	str	r3, [r1, #8]
 800e83a:	f1b8 0f00 	cmp.w	r8, #0
 800e83e:	dd9c      	ble.n	800e77a <__sflush_r+0x1a>
 800e840:	6a21      	ldr	r1, [r4, #32]
 800e842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e844:	4643      	mov	r3, r8
 800e846:	463a      	mov	r2, r7
 800e848:	4628      	mov	r0, r5
 800e84a:	47b0      	blx	r6
 800e84c:	2800      	cmp	r0, #0
 800e84e:	dc06      	bgt.n	800e85e <__sflush_r+0xfe>
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e856:	81a3      	strh	r3, [r4, #12]
 800e858:	f04f 30ff 	mov.w	r0, #4294967295
 800e85c:	e78e      	b.n	800e77c <__sflush_r+0x1c>
 800e85e:	4407      	add	r7, r0
 800e860:	eba8 0800 	sub.w	r8, r8, r0
 800e864:	e7e9      	b.n	800e83a <__sflush_r+0xda>
 800e866:	bf00      	nop
 800e868:	20400001 	.word	0x20400001

0800e86c <_fflush_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	690b      	ldr	r3, [r1, #16]
 800e870:	4605      	mov	r5, r0
 800e872:	460c      	mov	r4, r1
 800e874:	b913      	cbnz	r3, 800e87c <_fflush_r+0x10>
 800e876:	2500      	movs	r5, #0
 800e878:	4628      	mov	r0, r5
 800e87a:	bd38      	pop	{r3, r4, r5, pc}
 800e87c:	b118      	cbz	r0, 800e886 <_fflush_r+0x1a>
 800e87e:	6983      	ldr	r3, [r0, #24]
 800e880:	b90b      	cbnz	r3, 800e886 <_fflush_r+0x1a>
 800e882:	f000 f887 	bl	800e994 <__sinit>
 800e886:	4b14      	ldr	r3, [pc, #80]	; (800e8d8 <_fflush_r+0x6c>)
 800e888:	429c      	cmp	r4, r3
 800e88a:	d11b      	bne.n	800e8c4 <_fflush_r+0x58>
 800e88c:	686c      	ldr	r4, [r5, #4]
 800e88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d0ef      	beq.n	800e876 <_fflush_r+0xa>
 800e896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e898:	07d0      	lsls	r0, r2, #31
 800e89a:	d404      	bmi.n	800e8a6 <_fflush_r+0x3a>
 800e89c:	0599      	lsls	r1, r3, #22
 800e89e:	d402      	bmi.n	800e8a6 <_fflush_r+0x3a>
 800e8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8a2:	f000 f915 	bl	800ead0 <__retarget_lock_acquire_recursive>
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	f7ff ff59 	bl	800e760 <__sflush_r>
 800e8ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8b0:	07da      	lsls	r2, r3, #31
 800e8b2:	4605      	mov	r5, r0
 800e8b4:	d4e0      	bmi.n	800e878 <_fflush_r+0xc>
 800e8b6:	89a3      	ldrh	r3, [r4, #12]
 800e8b8:	059b      	lsls	r3, r3, #22
 800e8ba:	d4dd      	bmi.n	800e878 <_fflush_r+0xc>
 800e8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8be:	f000 f908 	bl	800ead2 <__retarget_lock_release_recursive>
 800e8c2:	e7d9      	b.n	800e878 <_fflush_r+0xc>
 800e8c4:	4b05      	ldr	r3, [pc, #20]	; (800e8dc <_fflush_r+0x70>)
 800e8c6:	429c      	cmp	r4, r3
 800e8c8:	d101      	bne.n	800e8ce <_fflush_r+0x62>
 800e8ca:	68ac      	ldr	r4, [r5, #8]
 800e8cc:	e7df      	b.n	800e88e <_fflush_r+0x22>
 800e8ce:	4b04      	ldr	r3, [pc, #16]	; (800e8e0 <_fflush_r+0x74>)
 800e8d0:	429c      	cmp	r4, r3
 800e8d2:	bf08      	it	eq
 800e8d4:	68ec      	ldreq	r4, [r5, #12]
 800e8d6:	e7da      	b.n	800e88e <_fflush_r+0x22>
 800e8d8:	0800f1fc 	.word	0x0800f1fc
 800e8dc:	0800f21c 	.word	0x0800f21c
 800e8e0:	0800f1dc 	.word	0x0800f1dc

0800e8e4 <std>:
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	b510      	push	{r4, lr}
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	e9c0 3300 	strd	r3, r3, [r0]
 800e8ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8f2:	6083      	str	r3, [r0, #8]
 800e8f4:	8181      	strh	r1, [r0, #12]
 800e8f6:	6643      	str	r3, [r0, #100]	; 0x64
 800e8f8:	81c2      	strh	r2, [r0, #14]
 800e8fa:	6183      	str	r3, [r0, #24]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	2208      	movs	r2, #8
 800e900:	305c      	adds	r0, #92	; 0x5c
 800e902:	f7fd fb99 	bl	800c038 <memset>
 800e906:	4b05      	ldr	r3, [pc, #20]	; (800e91c <std+0x38>)
 800e908:	6263      	str	r3, [r4, #36]	; 0x24
 800e90a:	4b05      	ldr	r3, [pc, #20]	; (800e920 <std+0x3c>)
 800e90c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e90e:	4b05      	ldr	r3, [pc, #20]	; (800e924 <std+0x40>)
 800e910:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e912:	4b05      	ldr	r3, [pc, #20]	; (800e928 <std+0x44>)
 800e914:	6224      	str	r4, [r4, #32]
 800e916:	6323      	str	r3, [r4, #48]	; 0x30
 800e918:	bd10      	pop	{r4, pc}
 800e91a:	bf00      	nop
 800e91c:	0800ec35 	.word	0x0800ec35
 800e920:	0800ec57 	.word	0x0800ec57
 800e924:	0800ec8f 	.word	0x0800ec8f
 800e928:	0800ecb3 	.word	0x0800ecb3

0800e92c <_cleanup_r>:
 800e92c:	4901      	ldr	r1, [pc, #4]	; (800e934 <_cleanup_r+0x8>)
 800e92e:	f000 b8af 	b.w	800ea90 <_fwalk_reent>
 800e932:	bf00      	nop
 800e934:	0800e86d 	.word	0x0800e86d

0800e938 <__sfmoreglue>:
 800e938:	b570      	push	{r4, r5, r6, lr}
 800e93a:	1e4a      	subs	r2, r1, #1
 800e93c:	2568      	movs	r5, #104	; 0x68
 800e93e:	4355      	muls	r5, r2
 800e940:	460e      	mov	r6, r1
 800e942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e946:	f7ff fa87 	bl	800de58 <_malloc_r>
 800e94a:	4604      	mov	r4, r0
 800e94c:	b140      	cbz	r0, 800e960 <__sfmoreglue+0x28>
 800e94e:	2100      	movs	r1, #0
 800e950:	e9c0 1600 	strd	r1, r6, [r0]
 800e954:	300c      	adds	r0, #12
 800e956:	60a0      	str	r0, [r4, #8]
 800e958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e95c:	f7fd fb6c 	bl	800c038 <memset>
 800e960:	4620      	mov	r0, r4
 800e962:	bd70      	pop	{r4, r5, r6, pc}

0800e964 <__sfp_lock_acquire>:
 800e964:	4801      	ldr	r0, [pc, #4]	; (800e96c <__sfp_lock_acquire+0x8>)
 800e966:	f000 b8b3 	b.w	800ead0 <__retarget_lock_acquire_recursive>
 800e96a:	bf00      	nop
 800e96c:	20002258 	.word	0x20002258

0800e970 <__sfp_lock_release>:
 800e970:	4801      	ldr	r0, [pc, #4]	; (800e978 <__sfp_lock_release+0x8>)
 800e972:	f000 b8ae 	b.w	800ead2 <__retarget_lock_release_recursive>
 800e976:	bf00      	nop
 800e978:	20002258 	.word	0x20002258

0800e97c <__sinit_lock_acquire>:
 800e97c:	4801      	ldr	r0, [pc, #4]	; (800e984 <__sinit_lock_acquire+0x8>)
 800e97e:	f000 b8a7 	b.w	800ead0 <__retarget_lock_acquire_recursive>
 800e982:	bf00      	nop
 800e984:	20002253 	.word	0x20002253

0800e988 <__sinit_lock_release>:
 800e988:	4801      	ldr	r0, [pc, #4]	; (800e990 <__sinit_lock_release+0x8>)
 800e98a:	f000 b8a2 	b.w	800ead2 <__retarget_lock_release_recursive>
 800e98e:	bf00      	nop
 800e990:	20002253 	.word	0x20002253

0800e994 <__sinit>:
 800e994:	b510      	push	{r4, lr}
 800e996:	4604      	mov	r4, r0
 800e998:	f7ff fff0 	bl	800e97c <__sinit_lock_acquire>
 800e99c:	69a3      	ldr	r3, [r4, #24]
 800e99e:	b11b      	cbz	r3, 800e9a8 <__sinit+0x14>
 800e9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9a4:	f7ff bff0 	b.w	800e988 <__sinit_lock_release>
 800e9a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e9ac:	6523      	str	r3, [r4, #80]	; 0x50
 800e9ae:	4b13      	ldr	r3, [pc, #76]	; (800e9fc <__sinit+0x68>)
 800e9b0:	4a13      	ldr	r2, [pc, #76]	; (800ea00 <__sinit+0x6c>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e9b6:	42a3      	cmp	r3, r4
 800e9b8:	bf04      	itt	eq
 800e9ba:	2301      	moveq	r3, #1
 800e9bc:	61a3      	streq	r3, [r4, #24]
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f000 f820 	bl	800ea04 <__sfp>
 800e9c4:	6060      	str	r0, [r4, #4]
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f000 f81c 	bl	800ea04 <__sfp>
 800e9cc:	60a0      	str	r0, [r4, #8]
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f000 f818 	bl	800ea04 <__sfp>
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	60e0      	str	r0, [r4, #12]
 800e9d8:	2104      	movs	r1, #4
 800e9da:	6860      	ldr	r0, [r4, #4]
 800e9dc:	f7ff ff82 	bl	800e8e4 <std>
 800e9e0:	68a0      	ldr	r0, [r4, #8]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	2109      	movs	r1, #9
 800e9e6:	f7ff ff7d 	bl	800e8e4 <std>
 800e9ea:	68e0      	ldr	r0, [r4, #12]
 800e9ec:	2202      	movs	r2, #2
 800e9ee:	2112      	movs	r1, #18
 800e9f0:	f7ff ff78 	bl	800e8e4 <std>
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	61a3      	str	r3, [r4, #24]
 800e9f8:	e7d2      	b.n	800e9a0 <__sinit+0xc>
 800e9fa:	bf00      	nop
 800e9fc:	0800ee58 	.word	0x0800ee58
 800ea00:	0800e92d 	.word	0x0800e92d

0800ea04 <__sfp>:
 800ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea06:	4607      	mov	r7, r0
 800ea08:	f7ff ffac 	bl	800e964 <__sfp_lock_acquire>
 800ea0c:	4b1e      	ldr	r3, [pc, #120]	; (800ea88 <__sfp+0x84>)
 800ea0e:	681e      	ldr	r6, [r3, #0]
 800ea10:	69b3      	ldr	r3, [r6, #24]
 800ea12:	b913      	cbnz	r3, 800ea1a <__sfp+0x16>
 800ea14:	4630      	mov	r0, r6
 800ea16:	f7ff ffbd 	bl	800e994 <__sinit>
 800ea1a:	3648      	adds	r6, #72	; 0x48
 800ea1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea20:	3b01      	subs	r3, #1
 800ea22:	d503      	bpl.n	800ea2c <__sfp+0x28>
 800ea24:	6833      	ldr	r3, [r6, #0]
 800ea26:	b30b      	cbz	r3, 800ea6c <__sfp+0x68>
 800ea28:	6836      	ldr	r6, [r6, #0]
 800ea2a:	e7f7      	b.n	800ea1c <__sfp+0x18>
 800ea2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea30:	b9d5      	cbnz	r5, 800ea68 <__sfp+0x64>
 800ea32:	4b16      	ldr	r3, [pc, #88]	; (800ea8c <__sfp+0x88>)
 800ea34:	60e3      	str	r3, [r4, #12]
 800ea36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea3a:	6665      	str	r5, [r4, #100]	; 0x64
 800ea3c:	f000 f847 	bl	800eace <__retarget_lock_init_recursive>
 800ea40:	f7ff ff96 	bl	800e970 <__sfp_lock_release>
 800ea44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea4c:	6025      	str	r5, [r4, #0]
 800ea4e:	61a5      	str	r5, [r4, #24]
 800ea50:	2208      	movs	r2, #8
 800ea52:	4629      	mov	r1, r5
 800ea54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea58:	f7fd faee 	bl	800c038 <memset>
 800ea5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea64:	4620      	mov	r0, r4
 800ea66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea68:	3468      	adds	r4, #104	; 0x68
 800ea6a:	e7d9      	b.n	800ea20 <__sfp+0x1c>
 800ea6c:	2104      	movs	r1, #4
 800ea6e:	4638      	mov	r0, r7
 800ea70:	f7ff ff62 	bl	800e938 <__sfmoreglue>
 800ea74:	4604      	mov	r4, r0
 800ea76:	6030      	str	r0, [r6, #0]
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	d1d5      	bne.n	800ea28 <__sfp+0x24>
 800ea7c:	f7ff ff78 	bl	800e970 <__sfp_lock_release>
 800ea80:	230c      	movs	r3, #12
 800ea82:	603b      	str	r3, [r7, #0]
 800ea84:	e7ee      	b.n	800ea64 <__sfp+0x60>
 800ea86:	bf00      	nop
 800ea88:	0800ee58 	.word	0x0800ee58
 800ea8c:	ffff0001 	.word	0xffff0001

0800ea90 <_fwalk_reent>:
 800ea90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea94:	4606      	mov	r6, r0
 800ea96:	4688      	mov	r8, r1
 800ea98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea9c:	2700      	movs	r7, #0
 800ea9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eaa2:	f1b9 0901 	subs.w	r9, r9, #1
 800eaa6:	d505      	bpl.n	800eab4 <_fwalk_reent+0x24>
 800eaa8:	6824      	ldr	r4, [r4, #0]
 800eaaa:	2c00      	cmp	r4, #0
 800eaac:	d1f7      	bne.n	800ea9e <_fwalk_reent+0xe>
 800eaae:	4638      	mov	r0, r7
 800eab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eab4:	89ab      	ldrh	r3, [r5, #12]
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d907      	bls.n	800eaca <_fwalk_reent+0x3a>
 800eaba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eabe:	3301      	adds	r3, #1
 800eac0:	d003      	beq.n	800eaca <_fwalk_reent+0x3a>
 800eac2:	4629      	mov	r1, r5
 800eac4:	4630      	mov	r0, r6
 800eac6:	47c0      	blx	r8
 800eac8:	4307      	orrs	r7, r0
 800eaca:	3568      	adds	r5, #104	; 0x68
 800eacc:	e7e9      	b.n	800eaa2 <_fwalk_reent+0x12>

0800eace <__retarget_lock_init_recursive>:
 800eace:	4770      	bx	lr

0800ead0 <__retarget_lock_acquire_recursive>:
 800ead0:	4770      	bx	lr

0800ead2 <__retarget_lock_release_recursive>:
 800ead2:	4770      	bx	lr

0800ead4 <__swhatbuf_r>:
 800ead4:	b570      	push	{r4, r5, r6, lr}
 800ead6:	460e      	mov	r6, r1
 800ead8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eadc:	2900      	cmp	r1, #0
 800eade:	b096      	sub	sp, #88	; 0x58
 800eae0:	4614      	mov	r4, r2
 800eae2:	461d      	mov	r5, r3
 800eae4:	da07      	bge.n	800eaf6 <__swhatbuf_r+0x22>
 800eae6:	2300      	movs	r3, #0
 800eae8:	602b      	str	r3, [r5, #0]
 800eaea:	89b3      	ldrh	r3, [r6, #12]
 800eaec:	061a      	lsls	r2, r3, #24
 800eaee:	d410      	bmi.n	800eb12 <__swhatbuf_r+0x3e>
 800eaf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaf4:	e00e      	b.n	800eb14 <__swhatbuf_r+0x40>
 800eaf6:	466a      	mov	r2, sp
 800eaf8:	f000 f902 	bl	800ed00 <_fstat_r>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	dbf2      	blt.n	800eae6 <__swhatbuf_r+0x12>
 800eb00:	9a01      	ldr	r2, [sp, #4]
 800eb02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb0a:	425a      	negs	r2, r3
 800eb0c:	415a      	adcs	r2, r3
 800eb0e:	602a      	str	r2, [r5, #0]
 800eb10:	e7ee      	b.n	800eaf0 <__swhatbuf_r+0x1c>
 800eb12:	2340      	movs	r3, #64	; 0x40
 800eb14:	2000      	movs	r0, #0
 800eb16:	6023      	str	r3, [r4, #0]
 800eb18:	b016      	add	sp, #88	; 0x58
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}

0800eb1c <__smakebuf_r>:
 800eb1c:	898b      	ldrh	r3, [r1, #12]
 800eb1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb20:	079d      	lsls	r5, r3, #30
 800eb22:	4606      	mov	r6, r0
 800eb24:	460c      	mov	r4, r1
 800eb26:	d507      	bpl.n	800eb38 <__smakebuf_r+0x1c>
 800eb28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb2c:	6023      	str	r3, [r4, #0]
 800eb2e:	6123      	str	r3, [r4, #16]
 800eb30:	2301      	movs	r3, #1
 800eb32:	6163      	str	r3, [r4, #20]
 800eb34:	b002      	add	sp, #8
 800eb36:	bd70      	pop	{r4, r5, r6, pc}
 800eb38:	ab01      	add	r3, sp, #4
 800eb3a:	466a      	mov	r2, sp
 800eb3c:	f7ff ffca 	bl	800ead4 <__swhatbuf_r>
 800eb40:	9900      	ldr	r1, [sp, #0]
 800eb42:	4605      	mov	r5, r0
 800eb44:	4630      	mov	r0, r6
 800eb46:	f7ff f987 	bl	800de58 <_malloc_r>
 800eb4a:	b948      	cbnz	r0, 800eb60 <__smakebuf_r+0x44>
 800eb4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb50:	059a      	lsls	r2, r3, #22
 800eb52:	d4ef      	bmi.n	800eb34 <__smakebuf_r+0x18>
 800eb54:	f023 0303 	bic.w	r3, r3, #3
 800eb58:	f043 0302 	orr.w	r3, r3, #2
 800eb5c:	81a3      	strh	r3, [r4, #12]
 800eb5e:	e7e3      	b.n	800eb28 <__smakebuf_r+0xc>
 800eb60:	4b0d      	ldr	r3, [pc, #52]	; (800eb98 <__smakebuf_r+0x7c>)
 800eb62:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb64:	89a3      	ldrh	r3, [r4, #12]
 800eb66:	6020      	str	r0, [r4, #0]
 800eb68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb6c:	81a3      	strh	r3, [r4, #12]
 800eb6e:	9b00      	ldr	r3, [sp, #0]
 800eb70:	6163      	str	r3, [r4, #20]
 800eb72:	9b01      	ldr	r3, [sp, #4]
 800eb74:	6120      	str	r0, [r4, #16]
 800eb76:	b15b      	cbz	r3, 800eb90 <__smakebuf_r+0x74>
 800eb78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f000 f8d1 	bl	800ed24 <_isatty_r>
 800eb82:	b128      	cbz	r0, 800eb90 <__smakebuf_r+0x74>
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	f023 0303 	bic.w	r3, r3, #3
 800eb8a:	f043 0301 	orr.w	r3, r3, #1
 800eb8e:	81a3      	strh	r3, [r4, #12]
 800eb90:	89a0      	ldrh	r0, [r4, #12]
 800eb92:	4305      	orrs	r5, r0
 800eb94:	81a5      	strh	r5, [r4, #12]
 800eb96:	e7cd      	b.n	800eb34 <__smakebuf_r+0x18>
 800eb98:	0800e92d 	.word	0x0800e92d

0800eb9c <_malloc_usable_size_r>:
 800eb9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eba0:	1f18      	subs	r0, r3, #4
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	bfbc      	itt	lt
 800eba6:	580b      	ldrlt	r3, [r1, r0]
 800eba8:	18c0      	addlt	r0, r0, r3
 800ebaa:	4770      	bx	lr

0800ebac <_raise_r>:
 800ebac:	291f      	cmp	r1, #31
 800ebae:	b538      	push	{r3, r4, r5, lr}
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	460d      	mov	r5, r1
 800ebb4:	d904      	bls.n	800ebc0 <_raise_r+0x14>
 800ebb6:	2316      	movs	r3, #22
 800ebb8:	6003      	str	r3, [r0, #0]
 800ebba:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}
 800ebc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ebc2:	b112      	cbz	r2, 800ebca <_raise_r+0x1e>
 800ebc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebc8:	b94b      	cbnz	r3, 800ebde <_raise_r+0x32>
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f000 f830 	bl	800ec30 <_getpid_r>
 800ebd0:	462a      	mov	r2, r5
 800ebd2:	4601      	mov	r1, r0
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebda:	f000 b817 	b.w	800ec0c <_kill_r>
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d00a      	beq.n	800ebf8 <_raise_r+0x4c>
 800ebe2:	1c59      	adds	r1, r3, #1
 800ebe4:	d103      	bne.n	800ebee <_raise_r+0x42>
 800ebe6:	2316      	movs	r3, #22
 800ebe8:	6003      	str	r3, [r0, #0]
 800ebea:	2001      	movs	r0, #1
 800ebec:	e7e7      	b.n	800ebbe <_raise_r+0x12>
 800ebee:	2400      	movs	r4, #0
 800ebf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	4798      	blx	r3
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	e7e0      	b.n	800ebbe <_raise_r+0x12>

0800ebfc <raise>:
 800ebfc:	4b02      	ldr	r3, [pc, #8]	; (800ec08 <raise+0xc>)
 800ebfe:	4601      	mov	r1, r0
 800ec00:	6818      	ldr	r0, [r3, #0]
 800ec02:	f7ff bfd3 	b.w	800ebac <_raise_r>
 800ec06:	bf00      	nop
 800ec08:	20000194 	.word	0x20000194

0800ec0c <_kill_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	4d07      	ldr	r5, [pc, #28]	; (800ec2c <_kill_r+0x20>)
 800ec10:	2300      	movs	r3, #0
 800ec12:	4604      	mov	r4, r0
 800ec14:	4608      	mov	r0, r1
 800ec16:	4611      	mov	r1, r2
 800ec18:	602b      	str	r3, [r5, #0]
 800ec1a:	f7f3 fc11 	bl	8002440 <_kill>
 800ec1e:	1c43      	adds	r3, r0, #1
 800ec20:	d102      	bne.n	800ec28 <_kill_r+0x1c>
 800ec22:	682b      	ldr	r3, [r5, #0]
 800ec24:	b103      	cbz	r3, 800ec28 <_kill_r+0x1c>
 800ec26:	6023      	str	r3, [r4, #0]
 800ec28:	bd38      	pop	{r3, r4, r5, pc}
 800ec2a:	bf00      	nop
 800ec2c:	2000224c 	.word	0x2000224c

0800ec30 <_getpid_r>:
 800ec30:	f7f3 bbfe 	b.w	8002430 <_getpid>

0800ec34 <__sread>:
 800ec34:	b510      	push	{r4, lr}
 800ec36:	460c      	mov	r4, r1
 800ec38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec3c:	f000 f894 	bl	800ed68 <_read_r>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	bfab      	itete	ge
 800ec44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec46:	89a3      	ldrhlt	r3, [r4, #12]
 800ec48:	181b      	addge	r3, r3, r0
 800ec4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec4e:	bfac      	ite	ge
 800ec50:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec52:	81a3      	strhlt	r3, [r4, #12]
 800ec54:	bd10      	pop	{r4, pc}

0800ec56 <__swrite>:
 800ec56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5a:	461f      	mov	r7, r3
 800ec5c:	898b      	ldrh	r3, [r1, #12]
 800ec5e:	05db      	lsls	r3, r3, #23
 800ec60:	4605      	mov	r5, r0
 800ec62:	460c      	mov	r4, r1
 800ec64:	4616      	mov	r6, r2
 800ec66:	d505      	bpl.n	800ec74 <__swrite+0x1e>
 800ec68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec6c:	2302      	movs	r3, #2
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f000 f868 	bl	800ed44 <_lseek_r>
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec7e:	81a3      	strh	r3, [r4, #12]
 800ec80:	4632      	mov	r2, r6
 800ec82:	463b      	mov	r3, r7
 800ec84:	4628      	mov	r0, r5
 800ec86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8a:	f000 b817 	b.w	800ecbc <_write_r>

0800ec8e <__sseek>:
 800ec8e:	b510      	push	{r4, lr}
 800ec90:	460c      	mov	r4, r1
 800ec92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec96:	f000 f855 	bl	800ed44 <_lseek_r>
 800ec9a:	1c43      	adds	r3, r0, #1
 800ec9c:	89a3      	ldrh	r3, [r4, #12]
 800ec9e:	bf15      	itete	ne
 800eca0:	6560      	strne	r0, [r4, #84]	; 0x54
 800eca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecaa:	81a3      	strheq	r3, [r4, #12]
 800ecac:	bf18      	it	ne
 800ecae:	81a3      	strhne	r3, [r4, #12]
 800ecb0:	bd10      	pop	{r4, pc}

0800ecb2 <__sclose>:
 800ecb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb6:	f000 b813 	b.w	800ece0 <_close_r>
	...

0800ecbc <_write_r>:
 800ecbc:	b538      	push	{r3, r4, r5, lr}
 800ecbe:	4d07      	ldr	r5, [pc, #28]	; (800ecdc <_write_r+0x20>)
 800ecc0:	4604      	mov	r4, r0
 800ecc2:	4608      	mov	r0, r1
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	602a      	str	r2, [r5, #0]
 800ecca:	461a      	mov	r2, r3
 800eccc:	f7f3 fbef 	bl	80024ae <_write>
 800ecd0:	1c43      	adds	r3, r0, #1
 800ecd2:	d102      	bne.n	800ecda <_write_r+0x1e>
 800ecd4:	682b      	ldr	r3, [r5, #0]
 800ecd6:	b103      	cbz	r3, 800ecda <_write_r+0x1e>
 800ecd8:	6023      	str	r3, [r4, #0]
 800ecda:	bd38      	pop	{r3, r4, r5, pc}
 800ecdc:	2000224c 	.word	0x2000224c

0800ece0 <_close_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4d06      	ldr	r5, [pc, #24]	; (800ecfc <_close_r+0x1c>)
 800ece4:	2300      	movs	r3, #0
 800ece6:	4604      	mov	r4, r0
 800ece8:	4608      	mov	r0, r1
 800ecea:	602b      	str	r3, [r5, #0]
 800ecec:	f7f3 fbfb 	bl	80024e6 <_close>
 800ecf0:	1c43      	adds	r3, r0, #1
 800ecf2:	d102      	bne.n	800ecfa <_close_r+0x1a>
 800ecf4:	682b      	ldr	r3, [r5, #0]
 800ecf6:	b103      	cbz	r3, 800ecfa <_close_r+0x1a>
 800ecf8:	6023      	str	r3, [r4, #0]
 800ecfa:	bd38      	pop	{r3, r4, r5, pc}
 800ecfc:	2000224c 	.word	0x2000224c

0800ed00 <_fstat_r>:
 800ed00:	b538      	push	{r3, r4, r5, lr}
 800ed02:	4d07      	ldr	r5, [pc, #28]	; (800ed20 <_fstat_r+0x20>)
 800ed04:	2300      	movs	r3, #0
 800ed06:	4604      	mov	r4, r0
 800ed08:	4608      	mov	r0, r1
 800ed0a:	4611      	mov	r1, r2
 800ed0c:	602b      	str	r3, [r5, #0]
 800ed0e:	f7f3 fbf6 	bl	80024fe <_fstat>
 800ed12:	1c43      	adds	r3, r0, #1
 800ed14:	d102      	bne.n	800ed1c <_fstat_r+0x1c>
 800ed16:	682b      	ldr	r3, [r5, #0]
 800ed18:	b103      	cbz	r3, 800ed1c <_fstat_r+0x1c>
 800ed1a:	6023      	str	r3, [r4, #0]
 800ed1c:	bd38      	pop	{r3, r4, r5, pc}
 800ed1e:	bf00      	nop
 800ed20:	2000224c 	.word	0x2000224c

0800ed24 <_isatty_r>:
 800ed24:	b538      	push	{r3, r4, r5, lr}
 800ed26:	4d06      	ldr	r5, [pc, #24]	; (800ed40 <_isatty_r+0x1c>)
 800ed28:	2300      	movs	r3, #0
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	4608      	mov	r0, r1
 800ed2e:	602b      	str	r3, [r5, #0]
 800ed30:	f7f3 fbf5 	bl	800251e <_isatty>
 800ed34:	1c43      	adds	r3, r0, #1
 800ed36:	d102      	bne.n	800ed3e <_isatty_r+0x1a>
 800ed38:	682b      	ldr	r3, [r5, #0]
 800ed3a:	b103      	cbz	r3, 800ed3e <_isatty_r+0x1a>
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	bd38      	pop	{r3, r4, r5, pc}
 800ed40:	2000224c 	.word	0x2000224c

0800ed44 <_lseek_r>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4d07      	ldr	r5, [pc, #28]	; (800ed64 <_lseek_r+0x20>)
 800ed48:	4604      	mov	r4, r0
 800ed4a:	4608      	mov	r0, r1
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	2200      	movs	r2, #0
 800ed50:	602a      	str	r2, [r5, #0]
 800ed52:	461a      	mov	r2, r3
 800ed54:	f7f3 fbee 	bl	8002534 <_lseek>
 800ed58:	1c43      	adds	r3, r0, #1
 800ed5a:	d102      	bne.n	800ed62 <_lseek_r+0x1e>
 800ed5c:	682b      	ldr	r3, [r5, #0]
 800ed5e:	b103      	cbz	r3, 800ed62 <_lseek_r+0x1e>
 800ed60:	6023      	str	r3, [r4, #0]
 800ed62:	bd38      	pop	{r3, r4, r5, pc}
 800ed64:	2000224c 	.word	0x2000224c

0800ed68 <_read_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d07      	ldr	r5, [pc, #28]	; (800ed88 <_read_r+0x20>)
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	4608      	mov	r0, r1
 800ed70:	4611      	mov	r1, r2
 800ed72:	2200      	movs	r2, #0
 800ed74:	602a      	str	r2, [r5, #0]
 800ed76:	461a      	mov	r2, r3
 800ed78:	f7f3 fb7c 	bl	8002474 <_read>
 800ed7c:	1c43      	adds	r3, r0, #1
 800ed7e:	d102      	bne.n	800ed86 <_read_r+0x1e>
 800ed80:	682b      	ldr	r3, [r5, #0]
 800ed82:	b103      	cbz	r3, 800ed86 <_read_r+0x1e>
 800ed84:	6023      	str	r3, [r4, #0]
 800ed86:	bd38      	pop	{r3, r4, r5, pc}
 800ed88:	2000224c 	.word	0x2000224c

0800ed8c <_init>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	bf00      	nop
 800ed90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed92:	bc08      	pop	{r3}
 800ed94:	469e      	mov	lr, r3
 800ed96:	4770      	bx	lr

0800ed98 <_fini>:
 800ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed9a:	bf00      	nop
 800ed9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed9e:	bc08      	pop	{r3}
 800eda0:	469e      	mov	lr, r3
 800eda2:	4770      	bx	lr
=======
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4603      	mov	r3, r0
 800b090:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b096:	79fb      	ldrb	r3, [r7, #7]
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d817      	bhi.n	800b0cc <USBD_Get_USB_Status+0x44>
 800b09c:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <USBD_Get_USB_Status+0x1c>)
 800b09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a2:	bf00      	nop
 800b0a4:	0800b0b5 	.word	0x0800b0b5
 800b0a8:	0800b0bb 	.word	0x0800b0bb
 800b0ac:	0800b0c1 	.word	0x0800b0c1
 800b0b0:	0800b0c7 	.word	0x0800b0c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0b8:	e00b      	b.n	800b0d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b0be:	e008      	b.n	800b0d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c4:	e005      	b.n	800b0d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ca:	e002      	b.n	800b0d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d0:	bf00      	nop
  }
  return usb_status;
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <pow>:
 800b0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0e4:	ec59 8b10 	vmov	r8, r9, d0
 800b0e8:	ec57 6b11 	vmov	r6, r7, d1
 800b0ec:	f000 f8a8 	bl	800b240 <__ieee754_pow>
 800b0f0:	4b4e      	ldr	r3, [pc, #312]	; (800b22c <pow+0x14c>)
 800b0f2:	f993 3000 	ldrsb.w	r3, [r3]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	ec55 4b10 	vmov	r4, r5, d0
 800b0fc:	d015      	beq.n	800b12a <pow+0x4a>
 800b0fe:	4632      	mov	r2, r6
 800b100:	463b      	mov	r3, r7
 800b102:	4630      	mov	r0, r6
 800b104:	4639      	mov	r1, r7
 800b106:	f7f5 fd11 	bl	8000b2c <__aeabi_dcmpun>
 800b10a:	b970      	cbnz	r0, 800b12a <pow+0x4a>
 800b10c:	4642      	mov	r2, r8
 800b10e:	464b      	mov	r3, r9
 800b110:	4640      	mov	r0, r8
 800b112:	4649      	mov	r1, r9
 800b114:	f7f5 fd0a 	bl	8000b2c <__aeabi_dcmpun>
 800b118:	2200      	movs	r2, #0
 800b11a:	2300      	movs	r3, #0
 800b11c:	b148      	cbz	r0, 800b132 <pow+0x52>
 800b11e:	4630      	mov	r0, r6
 800b120:	4639      	mov	r1, r7
 800b122:	f7f5 fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b126:	2800      	cmp	r0, #0
 800b128:	d17d      	bne.n	800b226 <pow+0x146>
 800b12a:	ec45 4b10 	vmov	d0, r4, r5
 800b12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b132:	4640      	mov	r0, r8
 800b134:	4649      	mov	r1, r9
 800b136:	f7f5 fcc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b13a:	b1e0      	cbz	r0, 800b176 <pow+0x96>
 800b13c:	2200      	movs	r2, #0
 800b13e:	2300      	movs	r3, #0
 800b140:	4630      	mov	r0, r6
 800b142:	4639      	mov	r1, r7
 800b144:	f7f5 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b148:	2800      	cmp	r0, #0
 800b14a:	d16c      	bne.n	800b226 <pow+0x146>
 800b14c:	ec47 6b10 	vmov	d0, r6, r7
 800b150:	f000 fe55 	bl	800bdfe <finite>
 800b154:	2800      	cmp	r0, #0
 800b156:	d0e8      	beq.n	800b12a <pow+0x4a>
 800b158:	2200      	movs	r2, #0
 800b15a:	2300      	movs	r3, #0
 800b15c:	4630      	mov	r0, r6
 800b15e:	4639      	mov	r1, r7
 800b160:	f7f5 fcbc 	bl	8000adc <__aeabi_dcmplt>
 800b164:	2800      	cmp	r0, #0
 800b166:	d0e0      	beq.n	800b12a <pow+0x4a>
 800b168:	f000 ff70 	bl	800c04c <__errno>
 800b16c:	2321      	movs	r3, #33	; 0x21
 800b16e:	6003      	str	r3, [r0, #0]
 800b170:	2400      	movs	r4, #0
 800b172:	4d2f      	ldr	r5, [pc, #188]	; (800b230 <pow+0x150>)
 800b174:	e7d9      	b.n	800b12a <pow+0x4a>
 800b176:	ec45 4b10 	vmov	d0, r4, r5
 800b17a:	f000 fe40 	bl	800bdfe <finite>
 800b17e:	bbb8      	cbnz	r0, 800b1f0 <pow+0x110>
 800b180:	ec49 8b10 	vmov	d0, r8, r9
 800b184:	f000 fe3b 	bl	800bdfe <finite>
 800b188:	b390      	cbz	r0, 800b1f0 <pow+0x110>
 800b18a:	ec47 6b10 	vmov	d0, r6, r7
 800b18e:	f000 fe36 	bl	800bdfe <finite>
 800b192:	b368      	cbz	r0, 800b1f0 <pow+0x110>
 800b194:	4622      	mov	r2, r4
 800b196:	462b      	mov	r3, r5
 800b198:	4620      	mov	r0, r4
 800b19a:	4629      	mov	r1, r5
 800b19c:	f7f5 fcc6 	bl	8000b2c <__aeabi_dcmpun>
 800b1a0:	b160      	cbz	r0, 800b1bc <pow+0xdc>
 800b1a2:	f000 ff53 	bl	800c04c <__errno>
 800b1a6:	2321      	movs	r3, #33	; 0x21
 800b1a8:	6003      	str	r3, [r0, #0]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	f7f5 fb4b 	bl	800084c <__aeabi_ddiv>
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	460d      	mov	r5, r1
 800b1ba:	e7b6      	b.n	800b12a <pow+0x4a>
 800b1bc:	f000 ff46 	bl	800c04c <__errno>
 800b1c0:	2322      	movs	r3, #34	; 0x22
 800b1c2:	6003      	str	r3, [r0, #0]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	f7f5 fc86 	bl	8000adc <__aeabi_dcmplt>
 800b1d0:	2400      	movs	r4, #0
 800b1d2:	b158      	cbz	r0, 800b1ec <pow+0x10c>
 800b1d4:	ec47 6b10 	vmov	d0, r6, r7
 800b1d8:	f000 fe26 	bl	800be28 <rint>
 800b1dc:	4632      	mov	r2, r6
 800b1de:	ec51 0b10 	vmov	r0, r1, d0
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	f7f5 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d0c2      	beq.n	800b172 <pow+0x92>
 800b1ec:	4d11      	ldr	r5, [pc, #68]	; (800b234 <pow+0x154>)
 800b1ee:	e79c      	b.n	800b12a <pow+0x4a>
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d094      	beq.n	800b12a <pow+0x4a>
 800b200:	ec49 8b10 	vmov	d0, r8, r9
 800b204:	f000 fdfb 	bl	800bdfe <finite>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d08e      	beq.n	800b12a <pow+0x4a>
 800b20c:	ec47 6b10 	vmov	d0, r6, r7
 800b210:	f000 fdf5 	bl	800bdfe <finite>
 800b214:	2800      	cmp	r0, #0
 800b216:	d088      	beq.n	800b12a <pow+0x4a>
 800b218:	f000 ff18 	bl	800c04c <__errno>
 800b21c:	2322      	movs	r3, #34	; 0x22
 800b21e:	6003      	str	r3, [r0, #0]
 800b220:	2400      	movs	r4, #0
 800b222:	2500      	movs	r5, #0
 800b224:	e781      	b.n	800b12a <pow+0x4a>
 800b226:	4d04      	ldr	r5, [pc, #16]	; (800b238 <pow+0x158>)
 800b228:	2400      	movs	r4, #0
 800b22a:	e77e      	b.n	800b12a <pow+0x4a>
 800b22c:	2000018e 	.word	0x2000018e
 800b230:	fff00000 	.word	0xfff00000
 800b234:	7ff00000 	.word	0x7ff00000
 800b238:	3ff00000 	.word	0x3ff00000
 800b23c:	00000000 	.word	0x00000000

0800b240 <__ieee754_pow>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	ed2d 8b06 	vpush	{d8-d10}
 800b248:	b08d      	sub	sp, #52	; 0x34
 800b24a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b24e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b252:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b256:	ea56 0100 	orrs.w	r1, r6, r0
 800b25a:	ec53 2b10 	vmov	r2, r3, d0
 800b25e:	f000 84d1 	beq.w	800bc04 <__ieee754_pow+0x9c4>
 800b262:	497f      	ldr	r1, [pc, #508]	; (800b460 <__ieee754_pow+0x220>)
 800b264:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b268:	428c      	cmp	r4, r1
 800b26a:	ee10 8a10 	vmov	r8, s0
 800b26e:	4699      	mov	r9, r3
 800b270:	dc09      	bgt.n	800b286 <__ieee754_pow+0x46>
 800b272:	d103      	bne.n	800b27c <__ieee754_pow+0x3c>
 800b274:	b97a      	cbnz	r2, 800b296 <__ieee754_pow+0x56>
 800b276:	42a6      	cmp	r6, r4
 800b278:	dd02      	ble.n	800b280 <__ieee754_pow+0x40>
 800b27a:	e00c      	b.n	800b296 <__ieee754_pow+0x56>
 800b27c:	428e      	cmp	r6, r1
 800b27e:	dc02      	bgt.n	800b286 <__ieee754_pow+0x46>
 800b280:	428e      	cmp	r6, r1
 800b282:	d110      	bne.n	800b2a6 <__ieee754_pow+0x66>
 800b284:	b178      	cbz	r0, 800b2a6 <__ieee754_pow+0x66>
 800b286:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b28a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b28e:	ea54 0308 	orrs.w	r3, r4, r8
 800b292:	f000 84b7 	beq.w	800bc04 <__ieee754_pow+0x9c4>
 800b296:	4873      	ldr	r0, [pc, #460]	; (800b464 <__ieee754_pow+0x224>)
 800b298:	b00d      	add	sp, #52	; 0x34
 800b29a:	ecbd 8b06 	vpop	{d8-d10}
 800b29e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a2:	f000 bdb9 	b.w	800be18 <nan>
 800b2a6:	f1b9 0f00 	cmp.w	r9, #0
 800b2aa:	da36      	bge.n	800b31a <__ieee754_pow+0xda>
 800b2ac:	496e      	ldr	r1, [pc, #440]	; (800b468 <__ieee754_pow+0x228>)
 800b2ae:	428e      	cmp	r6, r1
 800b2b0:	dc51      	bgt.n	800b356 <__ieee754_pow+0x116>
 800b2b2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b2b6:	428e      	cmp	r6, r1
 800b2b8:	f340 84af 	ble.w	800bc1a <__ieee754_pow+0x9da>
 800b2bc:	1531      	asrs	r1, r6, #20
 800b2be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b2c2:	2914      	cmp	r1, #20
 800b2c4:	dd0f      	ble.n	800b2e6 <__ieee754_pow+0xa6>
 800b2c6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b2ca:	fa20 fc01 	lsr.w	ip, r0, r1
 800b2ce:	fa0c f101 	lsl.w	r1, ip, r1
 800b2d2:	4281      	cmp	r1, r0
 800b2d4:	f040 84a1 	bne.w	800bc1a <__ieee754_pow+0x9da>
 800b2d8:	f00c 0c01 	and.w	ip, ip, #1
 800b2dc:	f1cc 0102 	rsb	r1, ip, #2
 800b2e0:	9100      	str	r1, [sp, #0]
 800b2e2:	b180      	cbz	r0, 800b306 <__ieee754_pow+0xc6>
 800b2e4:	e059      	b.n	800b39a <__ieee754_pow+0x15a>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d155      	bne.n	800b396 <__ieee754_pow+0x156>
 800b2ea:	f1c1 0114 	rsb	r1, r1, #20
 800b2ee:	fa46 fc01 	asr.w	ip, r6, r1
 800b2f2:	fa0c f101 	lsl.w	r1, ip, r1
 800b2f6:	42b1      	cmp	r1, r6
 800b2f8:	f040 848c 	bne.w	800bc14 <__ieee754_pow+0x9d4>
 800b2fc:	f00c 0c01 	and.w	ip, ip, #1
 800b300:	f1cc 0102 	rsb	r1, ip, #2
 800b304:	9100      	str	r1, [sp, #0]
 800b306:	4959      	ldr	r1, [pc, #356]	; (800b46c <__ieee754_pow+0x22c>)
 800b308:	428e      	cmp	r6, r1
 800b30a:	d12d      	bne.n	800b368 <__ieee754_pow+0x128>
 800b30c:	2f00      	cmp	r7, #0
 800b30e:	da79      	bge.n	800b404 <__ieee754_pow+0x1c4>
 800b310:	4956      	ldr	r1, [pc, #344]	; (800b46c <__ieee754_pow+0x22c>)
 800b312:	2000      	movs	r0, #0
 800b314:	f7f5 fa9a 	bl	800084c <__aeabi_ddiv>
 800b318:	e016      	b.n	800b348 <__ieee754_pow+0x108>
 800b31a:	2100      	movs	r1, #0
 800b31c:	9100      	str	r1, [sp, #0]
 800b31e:	2800      	cmp	r0, #0
 800b320:	d13b      	bne.n	800b39a <__ieee754_pow+0x15a>
 800b322:	494f      	ldr	r1, [pc, #316]	; (800b460 <__ieee754_pow+0x220>)
 800b324:	428e      	cmp	r6, r1
 800b326:	d1ee      	bne.n	800b306 <__ieee754_pow+0xc6>
 800b328:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b32c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b330:	ea53 0308 	orrs.w	r3, r3, r8
 800b334:	f000 8466 	beq.w	800bc04 <__ieee754_pow+0x9c4>
 800b338:	4b4d      	ldr	r3, [pc, #308]	; (800b470 <__ieee754_pow+0x230>)
 800b33a:	429c      	cmp	r4, r3
 800b33c:	dd0d      	ble.n	800b35a <__ieee754_pow+0x11a>
 800b33e:	2f00      	cmp	r7, #0
 800b340:	f280 8464 	bge.w	800bc0c <__ieee754_pow+0x9cc>
 800b344:	2000      	movs	r0, #0
 800b346:	2100      	movs	r1, #0
 800b348:	ec41 0b10 	vmov	d0, r0, r1
 800b34c:	b00d      	add	sp, #52	; 0x34
 800b34e:	ecbd 8b06 	vpop	{d8-d10}
 800b352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b356:	2102      	movs	r1, #2
 800b358:	e7e0      	b.n	800b31c <__ieee754_pow+0xdc>
 800b35a:	2f00      	cmp	r7, #0
 800b35c:	daf2      	bge.n	800b344 <__ieee754_pow+0x104>
 800b35e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b362:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b366:	e7ef      	b.n	800b348 <__ieee754_pow+0x108>
 800b368:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b36c:	d104      	bne.n	800b378 <__ieee754_pow+0x138>
 800b36e:	4610      	mov	r0, r2
 800b370:	4619      	mov	r1, r3
 800b372:	f7f5 f941 	bl	80005f8 <__aeabi_dmul>
 800b376:	e7e7      	b.n	800b348 <__ieee754_pow+0x108>
 800b378:	493e      	ldr	r1, [pc, #248]	; (800b474 <__ieee754_pow+0x234>)
 800b37a:	428f      	cmp	r7, r1
 800b37c:	d10d      	bne.n	800b39a <__ieee754_pow+0x15a>
 800b37e:	f1b9 0f00 	cmp.w	r9, #0
 800b382:	db0a      	blt.n	800b39a <__ieee754_pow+0x15a>
 800b384:	ec43 2b10 	vmov	d0, r2, r3
 800b388:	b00d      	add	sp, #52	; 0x34
 800b38a:	ecbd 8b06 	vpop	{d8-d10}
 800b38e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b392:	f000 bc77 	b.w	800bc84 <__ieee754_sqrt>
 800b396:	2100      	movs	r1, #0
 800b398:	9100      	str	r1, [sp, #0]
 800b39a:	ec43 2b10 	vmov	d0, r2, r3
 800b39e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b3a2:	f000 fd23 	bl	800bdec <fabs>
 800b3a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3aa:	ec51 0b10 	vmov	r0, r1, d0
 800b3ae:	f1b8 0f00 	cmp.w	r8, #0
 800b3b2:	d12a      	bne.n	800b40a <__ieee754_pow+0x1ca>
 800b3b4:	b12c      	cbz	r4, 800b3c2 <__ieee754_pow+0x182>
 800b3b6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b46c <__ieee754_pow+0x22c>
 800b3ba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b3be:	45e6      	cmp	lr, ip
 800b3c0:	d123      	bne.n	800b40a <__ieee754_pow+0x1ca>
 800b3c2:	2f00      	cmp	r7, #0
 800b3c4:	da05      	bge.n	800b3d2 <__ieee754_pow+0x192>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	4927      	ldr	r1, [pc, #156]	; (800b46c <__ieee754_pow+0x22c>)
 800b3ce:	f7f5 fa3d 	bl	800084c <__aeabi_ddiv>
 800b3d2:	f1b9 0f00 	cmp.w	r9, #0
 800b3d6:	dab7      	bge.n	800b348 <__ieee754_pow+0x108>
 800b3d8:	9b00      	ldr	r3, [sp, #0]
 800b3da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b3de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b3e2:	4323      	orrs	r3, r4
 800b3e4:	d108      	bne.n	800b3f8 <__ieee754_pow+0x1b8>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	f7f4 ff4b 	bl	8000288 <__aeabi_dsub>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	e78d      	b.n	800b314 <__ieee754_pow+0xd4>
 800b3f8:	9b00      	ldr	r3, [sp, #0]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d1a4      	bne.n	800b348 <__ieee754_pow+0x108>
 800b3fe:	4602      	mov	r2, r0
 800b400:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b404:	4610      	mov	r0, r2
 800b406:	4619      	mov	r1, r3
 800b408:	e79e      	b.n	800b348 <__ieee754_pow+0x108>
 800b40a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b40e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800b412:	950a      	str	r5, [sp, #40]	; 0x28
 800b414:	9d00      	ldr	r5, [sp, #0]
 800b416:	46ac      	mov	ip, r5
 800b418:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b41a:	ea5c 0505 	orrs.w	r5, ip, r5
 800b41e:	d0e4      	beq.n	800b3ea <__ieee754_pow+0x1aa>
 800b420:	4b15      	ldr	r3, [pc, #84]	; (800b478 <__ieee754_pow+0x238>)
 800b422:	429e      	cmp	r6, r3
 800b424:	f340 80fc 	ble.w	800b620 <__ieee754_pow+0x3e0>
 800b428:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b42c:	429e      	cmp	r6, r3
 800b42e:	4b10      	ldr	r3, [pc, #64]	; (800b470 <__ieee754_pow+0x230>)
 800b430:	dd07      	ble.n	800b442 <__ieee754_pow+0x202>
 800b432:	429c      	cmp	r4, r3
 800b434:	dc0a      	bgt.n	800b44c <__ieee754_pow+0x20c>
 800b436:	2f00      	cmp	r7, #0
 800b438:	da84      	bge.n	800b344 <__ieee754_pow+0x104>
 800b43a:	a307      	add	r3, pc, #28	; (adr r3, 800b458 <__ieee754_pow+0x218>)
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	e795      	b.n	800b36e <__ieee754_pow+0x12e>
 800b442:	429c      	cmp	r4, r3
 800b444:	dbf7      	blt.n	800b436 <__ieee754_pow+0x1f6>
 800b446:	4b09      	ldr	r3, [pc, #36]	; (800b46c <__ieee754_pow+0x22c>)
 800b448:	429c      	cmp	r4, r3
 800b44a:	dd17      	ble.n	800b47c <__ieee754_pow+0x23c>
 800b44c:	2f00      	cmp	r7, #0
 800b44e:	dcf4      	bgt.n	800b43a <__ieee754_pow+0x1fa>
 800b450:	e778      	b.n	800b344 <__ieee754_pow+0x104>
 800b452:	bf00      	nop
 800b454:	f3af 8000 	nop.w
 800b458:	8800759c 	.word	0x8800759c
 800b45c:	7e37e43c 	.word	0x7e37e43c
 800b460:	7ff00000 	.word	0x7ff00000
 800b464:	0800f178 	.word	0x0800f178
 800b468:	433fffff 	.word	0x433fffff
 800b46c:	3ff00000 	.word	0x3ff00000
 800b470:	3fefffff 	.word	0x3fefffff
 800b474:	3fe00000 	.word	0x3fe00000
 800b478:	41e00000 	.word	0x41e00000
 800b47c:	4b64      	ldr	r3, [pc, #400]	; (800b610 <__ieee754_pow+0x3d0>)
 800b47e:	2200      	movs	r2, #0
 800b480:	f7f4 ff02 	bl	8000288 <__aeabi_dsub>
 800b484:	a356      	add	r3, pc, #344	; (adr r3, 800b5e0 <__ieee754_pow+0x3a0>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	4604      	mov	r4, r0
 800b48c:	460d      	mov	r5, r1
 800b48e:	f7f5 f8b3 	bl	80005f8 <__aeabi_dmul>
 800b492:	a355      	add	r3, pc, #340	; (adr r3, 800b5e8 <__ieee754_pow+0x3a8>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	4606      	mov	r6, r0
 800b49a:	460f      	mov	r7, r1
 800b49c:	4620      	mov	r0, r4
 800b49e:	4629      	mov	r1, r5
 800b4a0:	f7f5 f8aa 	bl	80005f8 <__aeabi_dmul>
 800b4a4:	4b5b      	ldr	r3, [pc, #364]	; (800b614 <__ieee754_pow+0x3d4>)
 800b4a6:	4682      	mov	sl, r0
 800b4a8:	468b      	mov	fp, r1
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	f7f5 f8a2 	bl	80005f8 <__aeabi_dmul>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	a14d      	add	r1, pc, #308	; (adr r1, 800b5f0 <__ieee754_pow+0x3b0>)
 800b4ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4be:	f7f4 fee3 	bl	8000288 <__aeabi_dsub>
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	462b      	mov	r3, r5
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	4951      	ldr	r1, [pc, #324]	; (800b618 <__ieee754_pow+0x3d8>)
 800b4d2:	f7f4 fed9 	bl	8000288 <__aeabi_dsub>
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	4680      	mov	r8, r0
 800b4da:	4689      	mov	r9, r1
 800b4dc:	462b      	mov	r3, r5
 800b4de:	4620      	mov	r0, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7f5 f889 	bl	80005f8 <__aeabi_dmul>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	f7f5 f883 	bl	80005f8 <__aeabi_dmul>
 800b4f2:	a341      	add	r3, pc, #260	; (adr r3, 800b5f8 <__ieee754_pow+0x3b8>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	f7f5 f87e 	bl	80005f8 <__aeabi_dmul>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4650      	mov	r0, sl
 800b502:	4659      	mov	r1, fp
 800b504:	f7f4 fec0 	bl	8000288 <__aeabi_dsub>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4680      	mov	r8, r0
 800b50e:	4689      	mov	r9, r1
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f4 feba 	bl	800028c <__adddf3>
 800b518:	2400      	movs	r4, #0
 800b51a:	4632      	mov	r2, r6
 800b51c:	463b      	mov	r3, r7
 800b51e:	4620      	mov	r0, r4
 800b520:	460d      	mov	r5, r1
 800b522:	f7f4 feb1 	bl	8000288 <__aeabi_dsub>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	4640      	mov	r0, r8
 800b52c:	4649      	mov	r1, r9
 800b52e:	f7f4 feab 	bl	8000288 <__aeabi_dsub>
 800b532:	9b00      	ldr	r3, [sp, #0]
 800b534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b536:	3b01      	subs	r3, #1
 800b538:	4313      	orrs	r3, r2
 800b53a:	4682      	mov	sl, r0
 800b53c:	468b      	mov	fp, r1
 800b53e:	f040 81f1 	bne.w	800b924 <__ieee754_pow+0x6e4>
 800b542:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b600 <__ieee754_pow+0x3c0>
 800b546:	eeb0 8a47 	vmov.f32	s16, s14
 800b54a:	eef0 8a67 	vmov.f32	s17, s15
 800b54e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b552:	2600      	movs	r6, #0
 800b554:	4632      	mov	r2, r6
 800b556:	463b      	mov	r3, r7
 800b558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b55c:	f7f4 fe94 	bl	8000288 <__aeabi_dsub>
 800b560:	4622      	mov	r2, r4
 800b562:	462b      	mov	r3, r5
 800b564:	f7f5 f848 	bl	80005f8 <__aeabi_dmul>
 800b568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b56c:	4680      	mov	r8, r0
 800b56e:	4689      	mov	r9, r1
 800b570:	4650      	mov	r0, sl
 800b572:	4659      	mov	r1, fp
 800b574:	f7f5 f840 	bl	80005f8 <__aeabi_dmul>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4640      	mov	r0, r8
 800b57e:	4649      	mov	r1, r9
 800b580:	f7f4 fe84 	bl	800028c <__adddf3>
 800b584:	4632      	mov	r2, r6
 800b586:	463b      	mov	r3, r7
 800b588:	4680      	mov	r8, r0
 800b58a:	4689      	mov	r9, r1
 800b58c:	4620      	mov	r0, r4
 800b58e:	4629      	mov	r1, r5
 800b590:	f7f5 f832 	bl	80005f8 <__aeabi_dmul>
 800b594:	460b      	mov	r3, r1
 800b596:	4604      	mov	r4, r0
 800b598:	460d      	mov	r5, r1
 800b59a:	4602      	mov	r2, r0
 800b59c:	4649      	mov	r1, r9
 800b59e:	4640      	mov	r0, r8
 800b5a0:	f7f4 fe74 	bl	800028c <__adddf3>
 800b5a4:	4b1d      	ldr	r3, [pc, #116]	; (800b61c <__ieee754_pow+0x3dc>)
 800b5a6:	4299      	cmp	r1, r3
 800b5a8:	ec45 4b19 	vmov	d9, r4, r5
 800b5ac:	4606      	mov	r6, r0
 800b5ae:	460f      	mov	r7, r1
 800b5b0:	468b      	mov	fp, r1
 800b5b2:	f340 82fe 	ble.w	800bbb2 <__ieee754_pow+0x972>
 800b5b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b5ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b5be:	4303      	orrs	r3, r0
 800b5c0:	f000 81f0 	beq.w	800b9a4 <__ieee754_pow+0x764>
 800b5c4:	a310      	add	r3, pc, #64	; (adr r3, 800b608 <__ieee754_pow+0x3c8>)
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	ec51 0b18 	vmov	r0, r1, d8
 800b5ce:	f7f5 f813 	bl	80005f8 <__aeabi_dmul>
 800b5d2:	a30d      	add	r3, pc, #52	; (adr r3, 800b608 <__ieee754_pow+0x3c8>)
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	e6cb      	b.n	800b372 <__ieee754_pow+0x132>
 800b5da:	bf00      	nop
 800b5dc:	f3af 8000 	nop.w
 800b5e0:	60000000 	.word	0x60000000
 800b5e4:	3ff71547 	.word	0x3ff71547
 800b5e8:	f85ddf44 	.word	0xf85ddf44
 800b5ec:	3e54ae0b 	.word	0x3e54ae0b
 800b5f0:	55555555 	.word	0x55555555
 800b5f4:	3fd55555 	.word	0x3fd55555
 800b5f8:	652b82fe 	.word	0x652b82fe
 800b5fc:	3ff71547 	.word	0x3ff71547
 800b600:	00000000 	.word	0x00000000
 800b604:	bff00000 	.word	0xbff00000
 800b608:	8800759c 	.word	0x8800759c
 800b60c:	7e37e43c 	.word	0x7e37e43c
 800b610:	3ff00000 	.word	0x3ff00000
 800b614:	3fd00000 	.word	0x3fd00000
 800b618:	3fe00000 	.word	0x3fe00000
 800b61c:	408fffff 	.word	0x408fffff
 800b620:	4bd7      	ldr	r3, [pc, #860]	; (800b980 <__ieee754_pow+0x740>)
 800b622:	ea03 0309 	and.w	r3, r3, r9
 800b626:	2200      	movs	r2, #0
 800b628:	b92b      	cbnz	r3, 800b636 <__ieee754_pow+0x3f6>
 800b62a:	4bd6      	ldr	r3, [pc, #856]	; (800b984 <__ieee754_pow+0x744>)
 800b62c:	f7f4 ffe4 	bl	80005f8 <__aeabi_dmul>
 800b630:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b634:	460c      	mov	r4, r1
 800b636:	1523      	asrs	r3, r4, #20
 800b638:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b63c:	4413      	add	r3, r2
 800b63e:	9309      	str	r3, [sp, #36]	; 0x24
 800b640:	4bd1      	ldr	r3, [pc, #836]	; (800b988 <__ieee754_pow+0x748>)
 800b642:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b646:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b64a:	429c      	cmp	r4, r3
 800b64c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b650:	dd08      	ble.n	800b664 <__ieee754_pow+0x424>
 800b652:	4bce      	ldr	r3, [pc, #824]	; (800b98c <__ieee754_pow+0x74c>)
 800b654:	429c      	cmp	r4, r3
 800b656:	f340 8163 	ble.w	800b920 <__ieee754_pow+0x6e0>
 800b65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b65c:	3301      	adds	r3, #1
 800b65e:	9309      	str	r3, [sp, #36]	; 0x24
 800b660:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b664:	2400      	movs	r4, #0
 800b666:	00e3      	lsls	r3, r4, #3
 800b668:	930b      	str	r3, [sp, #44]	; 0x2c
 800b66a:	4bc9      	ldr	r3, [pc, #804]	; (800b990 <__ieee754_pow+0x750>)
 800b66c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b670:	ed93 7b00 	vldr	d7, [r3]
 800b674:	4629      	mov	r1, r5
 800b676:	ec53 2b17 	vmov	r2, r3, d7
 800b67a:	eeb0 8a47 	vmov.f32	s16, s14
 800b67e:	eef0 8a67 	vmov.f32	s17, s15
 800b682:	4682      	mov	sl, r0
 800b684:	f7f4 fe00 	bl	8000288 <__aeabi_dsub>
 800b688:	4652      	mov	r2, sl
 800b68a:	4606      	mov	r6, r0
 800b68c:	460f      	mov	r7, r1
 800b68e:	462b      	mov	r3, r5
 800b690:	ec51 0b18 	vmov	r0, r1, d8
 800b694:	f7f4 fdfa 	bl	800028c <__adddf3>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	2000      	movs	r0, #0
 800b69e:	49bd      	ldr	r1, [pc, #756]	; (800b994 <__ieee754_pow+0x754>)
 800b6a0:	f7f5 f8d4 	bl	800084c <__aeabi_ddiv>
 800b6a4:	ec41 0b19 	vmov	d9, r0, r1
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f7f4 ffa2 	bl	80005f8 <__aeabi_dmul>
 800b6b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b6b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	9304      	str	r3, [sp, #16]
 800b6c4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b6c8:	46ab      	mov	fp, r5
 800b6ca:	106d      	asrs	r5, r5, #1
 800b6cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b6d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b6d4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b6d8:	2200      	movs	r2, #0
 800b6da:	4640      	mov	r0, r8
 800b6dc:	4649      	mov	r1, r9
 800b6de:	4614      	mov	r4, r2
 800b6e0:	461d      	mov	r5, r3
 800b6e2:	f7f4 ff89 	bl	80005f8 <__aeabi_dmul>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	4639      	mov	r1, r7
 800b6ee:	f7f4 fdcb 	bl	8000288 <__aeabi_dsub>
 800b6f2:	ec53 2b18 	vmov	r2, r3, d8
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	460f      	mov	r7, r1
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	f7f4 fdc3 	bl	8000288 <__aeabi_dsub>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	4650      	mov	r0, sl
 800b708:	4659      	mov	r1, fp
 800b70a:	f7f4 fdbd 	bl	8000288 <__aeabi_dsub>
 800b70e:	4642      	mov	r2, r8
 800b710:	464b      	mov	r3, r9
 800b712:	f7f4 ff71 	bl	80005f8 <__aeabi_dmul>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	4630      	mov	r0, r6
 800b71c:	4639      	mov	r1, r7
 800b71e:	f7f4 fdb3 	bl	8000288 <__aeabi_dsub>
 800b722:	ec53 2b19 	vmov	r2, r3, d9
 800b726:	f7f4 ff67 	bl	80005f8 <__aeabi_dmul>
 800b72a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b72e:	ec41 0b18 	vmov	d8, r0, r1
 800b732:	4610      	mov	r0, r2
 800b734:	4619      	mov	r1, r3
 800b736:	f7f4 ff5f 	bl	80005f8 <__aeabi_dmul>
 800b73a:	a37d      	add	r3, pc, #500	; (adr r3, 800b930 <__ieee754_pow+0x6f0>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	4604      	mov	r4, r0
 800b742:	460d      	mov	r5, r1
 800b744:	f7f4 ff58 	bl	80005f8 <__aeabi_dmul>
 800b748:	a37b      	add	r3, pc, #492	; (adr r3, 800b938 <__ieee754_pow+0x6f8>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f7f4 fd9d 	bl	800028c <__adddf3>
 800b752:	4622      	mov	r2, r4
 800b754:	462b      	mov	r3, r5
 800b756:	f7f4 ff4f 	bl	80005f8 <__aeabi_dmul>
 800b75a:	a379      	add	r3, pc, #484	; (adr r3, 800b940 <__ieee754_pow+0x700>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f7f4 fd94 	bl	800028c <__adddf3>
 800b764:	4622      	mov	r2, r4
 800b766:	462b      	mov	r3, r5
 800b768:	f7f4 ff46 	bl	80005f8 <__aeabi_dmul>
 800b76c:	a376      	add	r3, pc, #472	; (adr r3, 800b948 <__ieee754_pow+0x708>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f7f4 fd8b 	bl	800028c <__adddf3>
 800b776:	4622      	mov	r2, r4
 800b778:	462b      	mov	r3, r5
 800b77a:	f7f4 ff3d 	bl	80005f8 <__aeabi_dmul>
 800b77e:	a374      	add	r3, pc, #464	; (adr r3, 800b950 <__ieee754_pow+0x710>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f7f4 fd82 	bl	800028c <__adddf3>
 800b788:	4622      	mov	r2, r4
 800b78a:	462b      	mov	r3, r5
 800b78c:	f7f4 ff34 	bl	80005f8 <__aeabi_dmul>
 800b790:	a371      	add	r3, pc, #452	; (adr r3, 800b958 <__ieee754_pow+0x718>)
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	f7f4 fd79 	bl	800028c <__adddf3>
 800b79a:	4622      	mov	r2, r4
 800b79c:	4606      	mov	r6, r0
 800b79e:	460f      	mov	r7, r1
 800b7a0:	462b      	mov	r3, r5
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	f7f4 ff27 	bl	80005f8 <__aeabi_dmul>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	f7f4 ff21 	bl	80005f8 <__aeabi_dmul>
 800b7b6:	4642      	mov	r2, r8
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	464b      	mov	r3, r9
 800b7be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7c2:	f7f4 fd63 	bl	800028c <__adddf3>
 800b7c6:	ec53 2b18 	vmov	r2, r3, d8
 800b7ca:	f7f4 ff15 	bl	80005f8 <__aeabi_dmul>
 800b7ce:	4622      	mov	r2, r4
 800b7d0:	462b      	mov	r3, r5
 800b7d2:	f7f4 fd5b 	bl	800028c <__adddf3>
 800b7d6:	4642      	mov	r2, r8
 800b7d8:	4682      	mov	sl, r0
 800b7da:	468b      	mov	fp, r1
 800b7dc:	464b      	mov	r3, r9
 800b7de:	4640      	mov	r0, r8
 800b7e0:	4649      	mov	r1, r9
 800b7e2:	f7f4 ff09 	bl	80005f8 <__aeabi_dmul>
 800b7e6:	4b6c      	ldr	r3, [pc, #432]	; (800b998 <__ieee754_pow+0x758>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	460f      	mov	r7, r1
 800b7ee:	f7f4 fd4d 	bl	800028c <__adddf3>
 800b7f2:	4652      	mov	r2, sl
 800b7f4:	465b      	mov	r3, fp
 800b7f6:	f7f4 fd49 	bl	800028c <__adddf3>
 800b7fa:	9c04      	ldr	r4, [sp, #16]
 800b7fc:	460d      	mov	r5, r1
 800b7fe:	4622      	mov	r2, r4
 800b800:	460b      	mov	r3, r1
 800b802:	4640      	mov	r0, r8
 800b804:	4649      	mov	r1, r9
 800b806:	f7f4 fef7 	bl	80005f8 <__aeabi_dmul>
 800b80a:	4b63      	ldr	r3, [pc, #396]	; (800b998 <__ieee754_pow+0x758>)
 800b80c:	4680      	mov	r8, r0
 800b80e:	4689      	mov	r9, r1
 800b810:	2200      	movs	r2, #0
 800b812:	4620      	mov	r0, r4
 800b814:	4629      	mov	r1, r5
 800b816:	f7f4 fd37 	bl	8000288 <__aeabi_dsub>
 800b81a:	4632      	mov	r2, r6
 800b81c:	463b      	mov	r3, r7
 800b81e:	f7f4 fd33 	bl	8000288 <__aeabi_dsub>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	4650      	mov	r0, sl
 800b828:	4659      	mov	r1, fp
 800b82a:	f7f4 fd2d 	bl	8000288 <__aeabi_dsub>
 800b82e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b832:	f7f4 fee1 	bl	80005f8 <__aeabi_dmul>
 800b836:	4622      	mov	r2, r4
 800b838:	4606      	mov	r6, r0
 800b83a:	460f      	mov	r7, r1
 800b83c:	462b      	mov	r3, r5
 800b83e:	ec51 0b18 	vmov	r0, r1, d8
 800b842:	f7f4 fed9 	bl	80005f8 <__aeabi_dmul>
 800b846:	4602      	mov	r2, r0
 800b848:	460b      	mov	r3, r1
 800b84a:	4630      	mov	r0, r6
 800b84c:	4639      	mov	r1, r7
 800b84e:	f7f4 fd1d 	bl	800028c <__adddf3>
 800b852:	4606      	mov	r6, r0
 800b854:	460f      	mov	r7, r1
 800b856:	4602      	mov	r2, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	4640      	mov	r0, r8
 800b85c:	4649      	mov	r1, r9
 800b85e:	f7f4 fd15 	bl	800028c <__adddf3>
 800b862:	9c04      	ldr	r4, [sp, #16]
 800b864:	a33e      	add	r3, pc, #248	; (adr r3, 800b960 <__ieee754_pow+0x720>)
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	4620      	mov	r0, r4
 800b86c:	460d      	mov	r5, r1
 800b86e:	f7f4 fec3 	bl	80005f8 <__aeabi_dmul>
 800b872:	4642      	mov	r2, r8
 800b874:	ec41 0b18 	vmov	d8, r0, r1
 800b878:	464b      	mov	r3, r9
 800b87a:	4620      	mov	r0, r4
 800b87c:	4629      	mov	r1, r5
 800b87e:	f7f4 fd03 	bl	8000288 <__aeabi_dsub>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4630      	mov	r0, r6
 800b888:	4639      	mov	r1, r7
 800b88a:	f7f4 fcfd 	bl	8000288 <__aeabi_dsub>
 800b88e:	a336      	add	r3, pc, #216	; (adr r3, 800b968 <__ieee754_pow+0x728>)
 800b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b894:	f7f4 feb0 	bl	80005f8 <__aeabi_dmul>
 800b898:	a335      	add	r3, pc, #212	; (adr r3, 800b970 <__ieee754_pow+0x730>)
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	4606      	mov	r6, r0
 800b8a0:	460f      	mov	r7, r1
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	f7f4 fea7 	bl	80005f8 <__aeabi_dmul>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	f7f4 fceb 	bl	800028c <__adddf3>
 800b8b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8b8:	4b38      	ldr	r3, [pc, #224]	; (800b99c <__ieee754_pow+0x75c>)
 800b8ba:	4413      	add	r3, r2
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f7f4 fce4 	bl	800028c <__adddf3>
 800b8c4:	4682      	mov	sl, r0
 800b8c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8c8:	468b      	mov	fp, r1
 800b8ca:	f7f4 fe2b 	bl	8000524 <__aeabi_i2d>
 800b8ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8d0:	4b33      	ldr	r3, [pc, #204]	; (800b9a0 <__ieee754_pow+0x760>)
 800b8d2:	4413      	add	r3, r2
 800b8d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8d8:	4606      	mov	r6, r0
 800b8da:	460f      	mov	r7, r1
 800b8dc:	4652      	mov	r2, sl
 800b8de:	465b      	mov	r3, fp
 800b8e0:	ec51 0b18 	vmov	r0, r1, d8
 800b8e4:	f7f4 fcd2 	bl	800028c <__adddf3>
 800b8e8:	4642      	mov	r2, r8
 800b8ea:	464b      	mov	r3, r9
 800b8ec:	f7f4 fcce 	bl	800028c <__adddf3>
 800b8f0:	4632      	mov	r2, r6
 800b8f2:	463b      	mov	r3, r7
 800b8f4:	f7f4 fcca 	bl	800028c <__adddf3>
 800b8f8:	9c04      	ldr	r4, [sp, #16]
 800b8fa:	4632      	mov	r2, r6
 800b8fc:	463b      	mov	r3, r7
 800b8fe:	4620      	mov	r0, r4
 800b900:	460d      	mov	r5, r1
 800b902:	f7f4 fcc1 	bl	8000288 <__aeabi_dsub>
 800b906:	4642      	mov	r2, r8
 800b908:	464b      	mov	r3, r9
 800b90a:	f7f4 fcbd 	bl	8000288 <__aeabi_dsub>
 800b90e:	ec53 2b18 	vmov	r2, r3, d8
 800b912:	f7f4 fcb9 	bl	8000288 <__aeabi_dsub>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4650      	mov	r0, sl
 800b91c:	4659      	mov	r1, fp
 800b91e:	e606      	b.n	800b52e <__ieee754_pow+0x2ee>
 800b920:	2401      	movs	r4, #1
 800b922:	e6a0      	b.n	800b666 <__ieee754_pow+0x426>
 800b924:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b978 <__ieee754_pow+0x738>
 800b928:	e60d      	b.n	800b546 <__ieee754_pow+0x306>
 800b92a:	bf00      	nop
 800b92c:	f3af 8000 	nop.w
 800b930:	4a454eef 	.word	0x4a454eef
 800b934:	3fca7e28 	.word	0x3fca7e28
 800b938:	93c9db65 	.word	0x93c9db65
 800b93c:	3fcd864a 	.word	0x3fcd864a
 800b940:	a91d4101 	.word	0xa91d4101
 800b944:	3fd17460 	.word	0x3fd17460
 800b948:	518f264d 	.word	0x518f264d
 800b94c:	3fd55555 	.word	0x3fd55555
 800b950:	db6fabff 	.word	0xdb6fabff
 800b954:	3fdb6db6 	.word	0x3fdb6db6
 800b958:	33333303 	.word	0x33333303
 800b95c:	3fe33333 	.word	0x3fe33333
 800b960:	e0000000 	.word	0xe0000000
 800b964:	3feec709 	.word	0x3feec709
 800b968:	dc3a03fd 	.word	0xdc3a03fd
 800b96c:	3feec709 	.word	0x3feec709
 800b970:	145b01f5 	.word	0x145b01f5
 800b974:	be3e2fe0 	.word	0xbe3e2fe0
 800b978:	00000000 	.word	0x00000000
 800b97c:	3ff00000 	.word	0x3ff00000
 800b980:	7ff00000 	.word	0x7ff00000
 800b984:	43400000 	.word	0x43400000
 800b988:	0003988e 	.word	0x0003988e
 800b98c:	000bb679 	.word	0x000bb679
 800b990:	0800eec0 	.word	0x0800eec0
 800b994:	3ff00000 	.word	0x3ff00000
 800b998:	40080000 	.word	0x40080000
 800b99c:	0800eee0 	.word	0x0800eee0
 800b9a0:	0800eed0 	.word	0x0800eed0
 800b9a4:	a3b5      	add	r3, pc, #724	; (adr r3, 800bc7c <__ieee754_pow+0xa3c>)
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	4640      	mov	r0, r8
 800b9ac:	4649      	mov	r1, r9
 800b9ae:	f7f4 fc6d 	bl	800028c <__adddf3>
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	ec41 0b1a 	vmov	d10, r0, r1
 800b9b8:	462b      	mov	r3, r5
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	4639      	mov	r1, r7
 800b9be:	f7f4 fc63 	bl	8000288 <__aeabi_dsub>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	ec51 0b1a 	vmov	r0, r1, d10
 800b9ca:	f7f5 f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	f47f adf8 	bne.w	800b5c4 <__ieee754_pow+0x384>
 800b9d4:	4aa4      	ldr	r2, [pc, #656]	; (800bc68 <__ieee754_pow+0xa28>)
 800b9d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	f340 810b 	ble.w	800bbf6 <__ieee754_pow+0x9b6>
 800b9e0:	151b      	asrs	r3, r3, #20
 800b9e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b9e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b9ea:	fa4a f303 	asr.w	r3, sl, r3
 800b9ee:	445b      	add	r3, fp
 800b9f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b9f4:	4e9d      	ldr	r6, [pc, #628]	; (800bc6c <__ieee754_pow+0xa2c>)
 800b9f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b9fa:	4116      	asrs	r6, r2
 800b9fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ba00:	2000      	movs	r0, #0
 800ba02:	ea23 0106 	bic.w	r1, r3, r6
 800ba06:	f1c2 0214 	rsb	r2, r2, #20
 800ba0a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ba0e:	fa4a fa02 	asr.w	sl, sl, r2
 800ba12:	f1bb 0f00 	cmp.w	fp, #0
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	bfb8      	it	lt
 800ba20:	f1ca 0a00 	rsblt	sl, sl, #0
 800ba24:	f7f4 fc30 	bl	8000288 <__aeabi_dsub>
 800ba28:	ec41 0b19 	vmov	d9, r0, r1
 800ba2c:	4642      	mov	r2, r8
 800ba2e:	464b      	mov	r3, r9
 800ba30:	ec51 0b19 	vmov	r0, r1, d9
 800ba34:	f7f4 fc2a 	bl	800028c <__adddf3>
 800ba38:	2400      	movs	r4, #0
 800ba3a:	a379      	add	r3, pc, #484	; (adr r3, 800bc20 <__ieee754_pow+0x9e0>)
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	4620      	mov	r0, r4
 800ba42:	460d      	mov	r5, r1
 800ba44:	f7f4 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ba48:	ec53 2b19 	vmov	r2, r3, d9
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	460f      	mov	r7, r1
 800ba50:	4620      	mov	r0, r4
 800ba52:	4629      	mov	r1, r5
 800ba54:	f7f4 fc18 	bl	8000288 <__aeabi_dsub>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	4649      	mov	r1, r9
 800ba60:	f7f4 fc12 	bl	8000288 <__aeabi_dsub>
 800ba64:	a370      	add	r3, pc, #448	; (adr r3, 800bc28 <__ieee754_pow+0x9e8>)
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	f7f4 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ba6e:	a370      	add	r3, pc, #448	; (adr r3, 800bc30 <__ieee754_pow+0x9f0>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	4680      	mov	r8, r0
 800ba76:	4689      	mov	r9, r1
 800ba78:	4620      	mov	r0, r4
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	f7f4 fdbc 	bl	80005f8 <__aeabi_dmul>
 800ba80:	4602      	mov	r2, r0
 800ba82:	460b      	mov	r3, r1
 800ba84:	4640      	mov	r0, r8
 800ba86:	4649      	mov	r1, r9
 800ba88:	f7f4 fc00 	bl	800028c <__adddf3>
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	4602      	mov	r2, r0
 800ba92:	460b      	mov	r3, r1
 800ba94:	4630      	mov	r0, r6
 800ba96:	4639      	mov	r1, r7
 800ba98:	f7f4 fbf8 	bl	800028c <__adddf3>
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	463b      	mov	r3, r7
 800baa0:	4680      	mov	r8, r0
 800baa2:	4689      	mov	r9, r1
 800baa4:	f7f4 fbf0 	bl	8000288 <__aeabi_dsub>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	4620      	mov	r0, r4
 800baae:	4629      	mov	r1, r5
 800bab0:	f7f4 fbea 	bl	8000288 <__aeabi_dsub>
 800bab4:	4642      	mov	r2, r8
 800bab6:	4606      	mov	r6, r0
 800bab8:	460f      	mov	r7, r1
 800baba:	464b      	mov	r3, r9
 800babc:	4640      	mov	r0, r8
 800babe:	4649      	mov	r1, r9
 800bac0:	f7f4 fd9a 	bl	80005f8 <__aeabi_dmul>
 800bac4:	a35c      	add	r3, pc, #368	; (adr r3, 800bc38 <__ieee754_pow+0x9f8>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	4604      	mov	r4, r0
 800bacc:	460d      	mov	r5, r1
 800bace:	f7f4 fd93 	bl	80005f8 <__aeabi_dmul>
 800bad2:	a35b      	add	r3, pc, #364	; (adr r3, 800bc40 <__ieee754_pow+0xa00>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f7f4 fbd6 	bl	8000288 <__aeabi_dsub>
 800badc:	4622      	mov	r2, r4
 800bade:	462b      	mov	r3, r5
 800bae0:	f7f4 fd8a 	bl	80005f8 <__aeabi_dmul>
 800bae4:	a358      	add	r3, pc, #352	; (adr r3, 800bc48 <__ieee754_pow+0xa08>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	f7f4 fbcf 	bl	800028c <__adddf3>
 800baee:	4622      	mov	r2, r4
 800baf0:	462b      	mov	r3, r5
 800baf2:	f7f4 fd81 	bl	80005f8 <__aeabi_dmul>
 800baf6:	a356      	add	r3, pc, #344	; (adr r3, 800bc50 <__ieee754_pow+0xa10>)
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	f7f4 fbc4 	bl	8000288 <__aeabi_dsub>
 800bb00:	4622      	mov	r2, r4
 800bb02:	462b      	mov	r3, r5
 800bb04:	f7f4 fd78 	bl	80005f8 <__aeabi_dmul>
 800bb08:	a353      	add	r3, pc, #332	; (adr r3, 800bc58 <__ieee754_pow+0xa18>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f7f4 fbbd 	bl	800028c <__adddf3>
 800bb12:	4622      	mov	r2, r4
 800bb14:	462b      	mov	r3, r5
 800bb16:	f7f4 fd6f 	bl	80005f8 <__aeabi_dmul>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4640      	mov	r0, r8
 800bb20:	4649      	mov	r1, r9
 800bb22:	f7f4 fbb1 	bl	8000288 <__aeabi_dsub>
 800bb26:	4604      	mov	r4, r0
 800bb28:	460d      	mov	r5, r1
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	4640      	mov	r0, r8
 800bb30:	4649      	mov	r1, r9
 800bb32:	f7f4 fd61 	bl	80005f8 <__aeabi_dmul>
 800bb36:	2200      	movs	r2, #0
 800bb38:	ec41 0b19 	vmov	d9, r0, r1
 800bb3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb40:	4620      	mov	r0, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7f4 fba0 	bl	8000288 <__aeabi_dsub>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	ec51 0b19 	vmov	r0, r1, d9
 800bb50:	f7f4 fe7c 	bl	800084c <__aeabi_ddiv>
 800bb54:	4632      	mov	r2, r6
 800bb56:	4604      	mov	r4, r0
 800bb58:	460d      	mov	r5, r1
 800bb5a:	463b      	mov	r3, r7
 800bb5c:	4640      	mov	r0, r8
 800bb5e:	4649      	mov	r1, r9
 800bb60:	f7f4 fd4a 	bl	80005f8 <__aeabi_dmul>
 800bb64:	4632      	mov	r2, r6
 800bb66:	463b      	mov	r3, r7
 800bb68:	f7f4 fb90 	bl	800028c <__adddf3>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4620      	mov	r0, r4
 800bb72:	4629      	mov	r1, r5
 800bb74:	f7f4 fb88 	bl	8000288 <__aeabi_dsub>
 800bb78:	4642      	mov	r2, r8
 800bb7a:	464b      	mov	r3, r9
 800bb7c:	f7f4 fb84 	bl	8000288 <__aeabi_dsub>
 800bb80:	460b      	mov	r3, r1
 800bb82:	4602      	mov	r2, r0
 800bb84:	493a      	ldr	r1, [pc, #232]	; (800bc70 <__ieee754_pow+0xa30>)
 800bb86:	2000      	movs	r0, #0
 800bb88:	f7f4 fb7e 	bl	8000288 <__aeabi_dsub>
 800bb8c:	e9cd 0100 	strd	r0, r1, [sp]
 800bb90:	9b01      	ldr	r3, [sp, #4]
 800bb92:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bb96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb9a:	da2f      	bge.n	800bbfc <__ieee754_pow+0x9bc>
 800bb9c:	4650      	mov	r0, sl
 800bb9e:	ed9d 0b00 	vldr	d0, [sp]
 800bba2:	f000 f9cd 	bl	800bf40 <scalbn>
 800bba6:	ec51 0b10 	vmov	r0, r1, d0
 800bbaa:	ec53 2b18 	vmov	r2, r3, d8
 800bbae:	f7ff bbe0 	b.w	800b372 <__ieee754_pow+0x132>
 800bbb2:	4b30      	ldr	r3, [pc, #192]	; (800bc74 <__ieee754_pow+0xa34>)
 800bbb4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bbb8:	429e      	cmp	r6, r3
 800bbba:	f77f af0b 	ble.w	800b9d4 <__ieee754_pow+0x794>
 800bbbe:	4b2e      	ldr	r3, [pc, #184]	; (800bc78 <__ieee754_pow+0xa38>)
 800bbc0:	440b      	add	r3, r1
 800bbc2:	4303      	orrs	r3, r0
 800bbc4:	d00b      	beq.n	800bbde <__ieee754_pow+0x99e>
 800bbc6:	a326      	add	r3, pc, #152	; (adr r3, 800bc60 <__ieee754_pow+0xa20>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	ec51 0b18 	vmov	r0, r1, d8
 800bbd0:	f7f4 fd12 	bl	80005f8 <__aeabi_dmul>
 800bbd4:	a322      	add	r3, pc, #136	; (adr r3, 800bc60 <__ieee754_pow+0xa20>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f7ff bbca 	b.w	800b372 <__ieee754_pow+0x132>
 800bbde:	4622      	mov	r2, r4
 800bbe0:	462b      	mov	r3, r5
 800bbe2:	f7f4 fb51 	bl	8000288 <__aeabi_dsub>
 800bbe6:	4642      	mov	r2, r8
 800bbe8:	464b      	mov	r3, r9
 800bbea:	f7f4 ff8b 	bl	8000b04 <__aeabi_dcmpge>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	f43f aef0 	beq.w	800b9d4 <__ieee754_pow+0x794>
 800bbf4:	e7e7      	b.n	800bbc6 <__ieee754_pow+0x986>
 800bbf6:	f04f 0a00 	mov.w	sl, #0
 800bbfa:	e717      	b.n	800ba2c <__ieee754_pow+0x7ec>
 800bbfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc00:	4619      	mov	r1, r3
 800bc02:	e7d2      	b.n	800bbaa <__ieee754_pow+0x96a>
 800bc04:	491a      	ldr	r1, [pc, #104]	; (800bc70 <__ieee754_pow+0xa30>)
 800bc06:	2000      	movs	r0, #0
 800bc08:	f7ff bb9e 	b.w	800b348 <__ieee754_pow+0x108>
 800bc0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc10:	f7ff bb9a 	b.w	800b348 <__ieee754_pow+0x108>
 800bc14:	9000      	str	r0, [sp, #0]
 800bc16:	f7ff bb76 	b.w	800b306 <__ieee754_pow+0xc6>
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	f7ff bb60 	b.w	800b2e0 <__ieee754_pow+0xa0>
 800bc20:	00000000 	.word	0x00000000
 800bc24:	3fe62e43 	.word	0x3fe62e43
 800bc28:	fefa39ef 	.word	0xfefa39ef
 800bc2c:	3fe62e42 	.word	0x3fe62e42
 800bc30:	0ca86c39 	.word	0x0ca86c39
 800bc34:	be205c61 	.word	0xbe205c61
 800bc38:	72bea4d0 	.word	0x72bea4d0
 800bc3c:	3e663769 	.word	0x3e663769
 800bc40:	c5d26bf1 	.word	0xc5d26bf1
 800bc44:	3ebbbd41 	.word	0x3ebbbd41
 800bc48:	af25de2c 	.word	0xaf25de2c
 800bc4c:	3f11566a 	.word	0x3f11566a
 800bc50:	16bebd93 	.word	0x16bebd93
 800bc54:	3f66c16c 	.word	0x3f66c16c
 800bc58:	5555553e 	.word	0x5555553e
 800bc5c:	3fc55555 	.word	0x3fc55555
 800bc60:	c2f8f359 	.word	0xc2f8f359
 800bc64:	01a56e1f 	.word	0x01a56e1f
 800bc68:	3fe00000 	.word	0x3fe00000
 800bc6c:	000fffff 	.word	0x000fffff
 800bc70:	3ff00000 	.word	0x3ff00000
 800bc74:	4090cbff 	.word	0x4090cbff
 800bc78:	3f6f3400 	.word	0x3f6f3400
 800bc7c:	652b82fe 	.word	0x652b82fe
 800bc80:	3c971547 	.word	0x3c971547

0800bc84 <__ieee754_sqrt>:
 800bc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc88:	ec55 4b10 	vmov	r4, r5, d0
 800bc8c:	4e56      	ldr	r6, [pc, #344]	; (800bde8 <__ieee754_sqrt+0x164>)
 800bc8e:	43ae      	bics	r6, r5
 800bc90:	ee10 0a10 	vmov	r0, s0
 800bc94:	ee10 3a10 	vmov	r3, s0
 800bc98:	4629      	mov	r1, r5
 800bc9a:	462a      	mov	r2, r5
 800bc9c:	d110      	bne.n	800bcc0 <__ieee754_sqrt+0x3c>
 800bc9e:	ee10 2a10 	vmov	r2, s0
 800bca2:	462b      	mov	r3, r5
 800bca4:	f7f4 fca8 	bl	80005f8 <__aeabi_dmul>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4620      	mov	r0, r4
 800bcae:	4629      	mov	r1, r5
 800bcb0:	f7f4 faec 	bl	800028c <__adddf3>
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	460d      	mov	r5, r1
 800bcb8:	ec45 4b10 	vmov	d0, r4, r5
 800bcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc0:	2d00      	cmp	r5, #0
 800bcc2:	dc10      	bgt.n	800bce6 <__ieee754_sqrt+0x62>
 800bcc4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bcc8:	4330      	orrs	r0, r6
 800bcca:	d0f5      	beq.n	800bcb8 <__ieee754_sqrt+0x34>
 800bccc:	b15d      	cbz	r5, 800bce6 <__ieee754_sqrt+0x62>
 800bcce:	ee10 2a10 	vmov	r2, s0
 800bcd2:	462b      	mov	r3, r5
 800bcd4:	ee10 0a10 	vmov	r0, s0
 800bcd8:	f7f4 fad6 	bl	8000288 <__aeabi_dsub>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	f7f4 fdb4 	bl	800084c <__aeabi_ddiv>
 800bce4:	e7e6      	b.n	800bcb4 <__ieee754_sqrt+0x30>
 800bce6:	1509      	asrs	r1, r1, #20
 800bce8:	d076      	beq.n	800bdd8 <__ieee754_sqrt+0x154>
 800bcea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bcee:	07ce      	lsls	r6, r1, #31
 800bcf0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bcf4:	bf5e      	ittt	pl
 800bcf6:	0fda      	lsrpl	r2, r3, #31
 800bcf8:	005b      	lslpl	r3, r3, #1
 800bcfa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bcfe:	0fda      	lsrs	r2, r3, #31
 800bd00:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bd04:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bd08:	2000      	movs	r0, #0
 800bd0a:	106d      	asrs	r5, r5, #1
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	f04f 0e16 	mov.w	lr, #22
 800bd12:	4684      	mov	ip, r0
 800bd14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd18:	eb0c 0401 	add.w	r4, ip, r1
 800bd1c:	4294      	cmp	r4, r2
 800bd1e:	bfde      	ittt	le
 800bd20:	1b12      	suble	r2, r2, r4
 800bd22:	eb04 0c01 	addle.w	ip, r4, r1
 800bd26:	1840      	addle	r0, r0, r1
 800bd28:	0052      	lsls	r2, r2, #1
 800bd2a:	f1be 0e01 	subs.w	lr, lr, #1
 800bd2e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bd32:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bd36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd3a:	d1ed      	bne.n	800bd18 <__ieee754_sqrt+0x94>
 800bd3c:	4671      	mov	r1, lr
 800bd3e:	2720      	movs	r7, #32
 800bd40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bd44:	4562      	cmp	r2, ip
 800bd46:	eb04 060e 	add.w	r6, r4, lr
 800bd4a:	dc02      	bgt.n	800bd52 <__ieee754_sqrt+0xce>
 800bd4c:	d113      	bne.n	800bd76 <__ieee754_sqrt+0xf2>
 800bd4e:	429e      	cmp	r6, r3
 800bd50:	d811      	bhi.n	800bd76 <__ieee754_sqrt+0xf2>
 800bd52:	2e00      	cmp	r6, #0
 800bd54:	eb06 0e04 	add.w	lr, r6, r4
 800bd58:	da43      	bge.n	800bde2 <__ieee754_sqrt+0x15e>
 800bd5a:	f1be 0f00 	cmp.w	lr, #0
 800bd5e:	db40      	blt.n	800bde2 <__ieee754_sqrt+0x15e>
 800bd60:	f10c 0801 	add.w	r8, ip, #1
 800bd64:	eba2 020c 	sub.w	r2, r2, ip
 800bd68:	429e      	cmp	r6, r3
 800bd6a:	bf88      	it	hi
 800bd6c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bd70:	1b9b      	subs	r3, r3, r6
 800bd72:	4421      	add	r1, r4
 800bd74:	46c4      	mov	ip, r8
 800bd76:	0052      	lsls	r2, r2, #1
 800bd78:	3f01      	subs	r7, #1
 800bd7a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bd7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bd82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd86:	d1dd      	bne.n	800bd44 <__ieee754_sqrt+0xc0>
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	d006      	beq.n	800bd9a <__ieee754_sqrt+0x116>
 800bd8c:	1c4c      	adds	r4, r1, #1
 800bd8e:	bf13      	iteet	ne
 800bd90:	3101      	addne	r1, #1
 800bd92:	3001      	addeq	r0, #1
 800bd94:	4639      	moveq	r1, r7
 800bd96:	f021 0101 	bicne.w	r1, r1, #1
 800bd9a:	1043      	asrs	r3, r0, #1
 800bd9c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bda0:	0849      	lsrs	r1, r1, #1
 800bda2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bda6:	07c2      	lsls	r2, r0, #31
 800bda8:	bf48      	it	mi
 800bdaa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bdae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	463d      	mov	r5, r7
 800bdb6:	e77f      	b.n	800bcb8 <__ieee754_sqrt+0x34>
 800bdb8:	0ada      	lsrs	r2, r3, #11
 800bdba:	3815      	subs	r0, #21
 800bdbc:	055b      	lsls	r3, r3, #21
 800bdbe:	2a00      	cmp	r2, #0
 800bdc0:	d0fa      	beq.n	800bdb8 <__ieee754_sqrt+0x134>
 800bdc2:	02d7      	lsls	r7, r2, #11
 800bdc4:	d50a      	bpl.n	800bddc <__ieee754_sqrt+0x158>
 800bdc6:	f1c1 0420 	rsb	r4, r1, #32
 800bdca:	fa23 f404 	lsr.w	r4, r3, r4
 800bdce:	1e4d      	subs	r5, r1, #1
 800bdd0:	408b      	lsls	r3, r1
 800bdd2:	4322      	orrs	r2, r4
 800bdd4:	1b41      	subs	r1, r0, r5
 800bdd6:	e788      	b.n	800bcea <__ieee754_sqrt+0x66>
 800bdd8:	4608      	mov	r0, r1
 800bdda:	e7f0      	b.n	800bdbe <__ieee754_sqrt+0x13a>
 800bddc:	0052      	lsls	r2, r2, #1
 800bdde:	3101      	adds	r1, #1
 800bde0:	e7ef      	b.n	800bdc2 <__ieee754_sqrt+0x13e>
 800bde2:	46e0      	mov	r8, ip
 800bde4:	e7be      	b.n	800bd64 <__ieee754_sqrt+0xe0>
 800bde6:	bf00      	nop
 800bde8:	7ff00000 	.word	0x7ff00000

0800bdec <fabs>:
 800bdec:	ec51 0b10 	vmov	r0, r1, d0
 800bdf0:	ee10 2a10 	vmov	r2, s0
 800bdf4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bdf8:	ec43 2b10 	vmov	d0, r2, r3
 800bdfc:	4770      	bx	lr

0800bdfe <finite>:
 800bdfe:	b082      	sub	sp, #8
 800be00:	ed8d 0b00 	vstr	d0, [sp]
 800be04:	9801      	ldr	r0, [sp, #4]
 800be06:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800be0a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800be0e:	0fc0      	lsrs	r0, r0, #31
 800be10:	b002      	add	sp, #8
 800be12:	4770      	bx	lr
 800be14:	0000      	movs	r0, r0
	...

0800be18 <nan>:
 800be18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be20 <nan+0x8>
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	00000000 	.word	0x00000000
 800be24:	7ff80000 	.word	0x7ff80000

0800be28 <rint>:
 800be28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be2a:	ec51 0b10 	vmov	r0, r1, d0
 800be2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800be32:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800be36:	2e13      	cmp	r6, #19
 800be38:	ee10 4a10 	vmov	r4, s0
 800be3c:	460b      	mov	r3, r1
 800be3e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800be42:	dc58      	bgt.n	800bef6 <rint+0xce>
 800be44:	2e00      	cmp	r6, #0
 800be46:	da2b      	bge.n	800bea0 <rint+0x78>
 800be48:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800be4c:	4302      	orrs	r2, r0
 800be4e:	d023      	beq.n	800be98 <rint+0x70>
 800be50:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800be54:	4302      	orrs	r2, r0
 800be56:	4254      	negs	r4, r2
 800be58:	4314      	orrs	r4, r2
 800be5a:	0c4b      	lsrs	r3, r1, #17
 800be5c:	0b24      	lsrs	r4, r4, #12
 800be5e:	045b      	lsls	r3, r3, #17
 800be60:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800be64:	ea44 0103 	orr.w	r1, r4, r3
 800be68:	4b32      	ldr	r3, [pc, #200]	; (800bf34 <rint+0x10c>)
 800be6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800be6e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4630      	mov	r0, r6
 800be78:	4639      	mov	r1, r7
 800be7a:	f7f4 fa07 	bl	800028c <__adddf3>
 800be7e:	e9cd 0100 	strd	r0, r1, [sp]
 800be82:	463b      	mov	r3, r7
 800be84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be88:	4632      	mov	r2, r6
 800be8a:	f7f4 f9fd 	bl	8000288 <__aeabi_dsub>
 800be8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be92:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800be96:	4639      	mov	r1, r7
 800be98:	ec41 0b10 	vmov	d0, r0, r1
 800be9c:	b003      	add	sp, #12
 800be9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bea0:	4a25      	ldr	r2, [pc, #148]	; (800bf38 <rint+0x110>)
 800bea2:	4132      	asrs	r2, r6
 800bea4:	ea01 0702 	and.w	r7, r1, r2
 800bea8:	4307      	orrs	r7, r0
 800beaa:	d0f5      	beq.n	800be98 <rint+0x70>
 800beac:	0851      	lsrs	r1, r2, #1
 800beae:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800beb2:	4314      	orrs	r4, r2
 800beb4:	d00c      	beq.n	800bed0 <rint+0xa8>
 800beb6:	ea23 0201 	bic.w	r2, r3, r1
 800beba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bebe:	2e13      	cmp	r6, #19
 800bec0:	fa43 f606 	asr.w	r6, r3, r6
 800bec4:	bf0c      	ite	eq
 800bec6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800beca:	2400      	movne	r4, #0
 800becc:	ea42 0306 	orr.w	r3, r2, r6
 800bed0:	4918      	ldr	r1, [pc, #96]	; (800bf34 <rint+0x10c>)
 800bed2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800bed6:	4622      	mov	r2, r4
 800bed8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bedc:	4620      	mov	r0, r4
 800bede:	4629      	mov	r1, r5
 800bee0:	f7f4 f9d4 	bl	800028c <__adddf3>
 800bee4:	e9cd 0100 	strd	r0, r1, [sp]
 800bee8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800beec:	4622      	mov	r2, r4
 800beee:	462b      	mov	r3, r5
 800bef0:	f7f4 f9ca 	bl	8000288 <__aeabi_dsub>
 800bef4:	e7d0      	b.n	800be98 <rint+0x70>
 800bef6:	2e33      	cmp	r6, #51	; 0x33
 800bef8:	dd07      	ble.n	800bf0a <rint+0xe2>
 800befa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800befe:	d1cb      	bne.n	800be98 <rint+0x70>
 800bf00:	ee10 2a10 	vmov	r2, s0
 800bf04:	f7f4 f9c2 	bl	800028c <__adddf3>
 800bf08:	e7c6      	b.n	800be98 <rint+0x70>
 800bf0a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bf0e:	f04f 36ff 	mov.w	r6, #4294967295
 800bf12:	40d6      	lsrs	r6, r2
 800bf14:	4230      	tst	r0, r6
 800bf16:	d0bf      	beq.n	800be98 <rint+0x70>
 800bf18:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800bf1c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800bf20:	bf1f      	itttt	ne
 800bf22:	ea24 0101 	bicne.w	r1, r4, r1
 800bf26:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800bf2a:	fa44 f202 	asrne.w	r2, r4, r2
 800bf2e:	ea41 0402 	orrne.w	r4, r1, r2
 800bf32:	e7cd      	b.n	800bed0 <rint+0xa8>
 800bf34:	0800eef0 	.word	0x0800eef0
 800bf38:	000fffff 	.word	0x000fffff
 800bf3c:	00000000 	.word	0x00000000

0800bf40 <scalbn>:
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	ec55 4b10 	vmov	r4, r5, d0
 800bf46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bf4a:	4606      	mov	r6, r0
 800bf4c:	462b      	mov	r3, r5
 800bf4e:	b99a      	cbnz	r2, 800bf78 <scalbn+0x38>
 800bf50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf54:	4323      	orrs	r3, r4
 800bf56:	d036      	beq.n	800bfc6 <scalbn+0x86>
 800bf58:	4b39      	ldr	r3, [pc, #228]	; (800c040 <scalbn+0x100>)
 800bf5a:	4629      	mov	r1, r5
 800bf5c:	ee10 0a10 	vmov	r0, s0
 800bf60:	2200      	movs	r2, #0
 800bf62:	f7f4 fb49 	bl	80005f8 <__aeabi_dmul>
 800bf66:	4b37      	ldr	r3, [pc, #220]	; (800c044 <scalbn+0x104>)
 800bf68:	429e      	cmp	r6, r3
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	460d      	mov	r5, r1
 800bf6e:	da10      	bge.n	800bf92 <scalbn+0x52>
 800bf70:	a32b      	add	r3, pc, #172	; (adr r3, 800c020 <scalbn+0xe0>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	e03a      	b.n	800bfee <scalbn+0xae>
 800bf78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bf7c:	428a      	cmp	r2, r1
 800bf7e:	d10c      	bne.n	800bf9a <scalbn+0x5a>
 800bf80:	ee10 2a10 	vmov	r2, s0
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 f980 	bl	800028c <__adddf3>
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	460d      	mov	r5, r1
 800bf90:	e019      	b.n	800bfc6 <scalbn+0x86>
 800bf92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf96:	460b      	mov	r3, r1
 800bf98:	3a36      	subs	r2, #54	; 0x36
 800bf9a:	4432      	add	r2, r6
 800bf9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bfa0:	428a      	cmp	r2, r1
 800bfa2:	dd08      	ble.n	800bfb6 <scalbn+0x76>
 800bfa4:	2d00      	cmp	r5, #0
 800bfa6:	a120      	add	r1, pc, #128	; (adr r1, 800c028 <scalbn+0xe8>)
 800bfa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfac:	da1c      	bge.n	800bfe8 <scalbn+0xa8>
 800bfae:	a120      	add	r1, pc, #128	; (adr r1, 800c030 <scalbn+0xf0>)
 800bfb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfb4:	e018      	b.n	800bfe8 <scalbn+0xa8>
 800bfb6:	2a00      	cmp	r2, #0
 800bfb8:	dd08      	ble.n	800bfcc <scalbn+0x8c>
 800bfba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bfbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bfc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bfc6:	ec45 4b10 	vmov	d0, r4, r5
 800bfca:	bd70      	pop	{r4, r5, r6, pc}
 800bfcc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bfd0:	da19      	bge.n	800c006 <scalbn+0xc6>
 800bfd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bfd6:	429e      	cmp	r6, r3
 800bfd8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bfdc:	dd0a      	ble.n	800bff4 <scalbn+0xb4>
 800bfde:	a112      	add	r1, pc, #72	; (adr r1, 800c028 <scalbn+0xe8>)
 800bfe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e2      	bne.n	800bfae <scalbn+0x6e>
 800bfe8:	a30f      	add	r3, pc, #60	; (adr r3, 800c028 <scalbn+0xe8>)
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_dmul>
 800bff2:	e7cb      	b.n	800bf8c <scalbn+0x4c>
 800bff4:	a10a      	add	r1, pc, #40	; (adr r1, 800c020 <scalbn+0xe0>)
 800bff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d0b8      	beq.n	800bf70 <scalbn+0x30>
 800bffe:	a10e      	add	r1, pc, #56	; (adr r1, 800c038 <scalbn+0xf8>)
 800c000:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c004:	e7b4      	b.n	800bf70 <scalbn+0x30>
 800c006:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c00a:	3236      	adds	r2, #54	; 0x36
 800c00c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c010:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c014:	4620      	mov	r0, r4
 800c016:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <scalbn+0x108>)
 800c018:	2200      	movs	r2, #0
 800c01a:	e7e8      	b.n	800bfee <scalbn+0xae>
 800c01c:	f3af 8000 	nop.w
 800c020:	c2f8f359 	.word	0xc2f8f359
 800c024:	01a56e1f 	.word	0x01a56e1f
 800c028:	8800759c 	.word	0x8800759c
 800c02c:	7e37e43c 	.word	0x7e37e43c
 800c030:	8800759c 	.word	0x8800759c
 800c034:	fe37e43c 	.word	0xfe37e43c
 800c038:	c2f8f359 	.word	0xc2f8f359
 800c03c:	81a56e1f 	.word	0x81a56e1f
 800c040:	43500000 	.word	0x43500000
 800c044:	ffff3cb0 	.word	0xffff3cb0
 800c048:	3c900000 	.word	0x3c900000

0800c04c <__errno>:
 800c04c:	4b01      	ldr	r3, [pc, #4]	; (800c054 <__errno+0x8>)
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	20000190 	.word	0x20000190

0800c058 <__libc_init_array>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	4d0d      	ldr	r5, [pc, #52]	; (800c090 <__libc_init_array+0x38>)
 800c05c:	4c0d      	ldr	r4, [pc, #52]	; (800c094 <__libc_init_array+0x3c>)
 800c05e:	1b64      	subs	r4, r4, r5
 800c060:	10a4      	asrs	r4, r4, #2
 800c062:	2600      	movs	r6, #0
 800c064:	42a6      	cmp	r6, r4
 800c066:	d109      	bne.n	800c07c <__libc_init_array+0x24>
 800c068:	4d0b      	ldr	r5, [pc, #44]	; (800c098 <__libc_init_array+0x40>)
 800c06a:	4c0c      	ldr	r4, [pc, #48]	; (800c09c <__libc_init_array+0x44>)
 800c06c:	f002 fec2 	bl	800edf4 <_init>
 800c070:	1b64      	subs	r4, r4, r5
 800c072:	10a4      	asrs	r4, r4, #2
 800c074:	2600      	movs	r6, #0
 800c076:	42a6      	cmp	r6, r4
 800c078:	d105      	bne.n	800c086 <__libc_init_array+0x2e>
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c080:	4798      	blx	r3
 800c082:	3601      	adds	r6, #1
 800c084:	e7ee      	b.n	800c064 <__libc_init_array+0xc>
 800c086:	f855 3b04 	ldr.w	r3, [r5], #4
 800c08a:	4798      	blx	r3
 800c08c:	3601      	adds	r6, #1
 800c08e:	e7f2      	b.n	800c076 <__libc_init_array+0x1e>
 800c090:	0800f2ec 	.word	0x0800f2ec
 800c094:	0800f2ec 	.word	0x0800f2ec
 800c098:	0800f2ec 	.word	0x0800f2ec
 800c09c:	0800f2f0 	.word	0x0800f2f0

0800c0a0 <memset>:
 800c0a0:	4402      	add	r2, r0
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d100      	bne.n	800c0aa <memset+0xa>
 800c0a8:	4770      	bx	lr
 800c0aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ae:	e7f9      	b.n	800c0a4 <memset+0x4>

0800c0b0 <__cvt>:
 800c0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b4:	ec55 4b10 	vmov	r4, r5, d0
 800c0b8:	2d00      	cmp	r5, #0
 800c0ba:	460e      	mov	r6, r1
 800c0bc:	4619      	mov	r1, r3
 800c0be:	462b      	mov	r3, r5
 800c0c0:	bfbb      	ittet	lt
 800c0c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c0c6:	461d      	movlt	r5, r3
 800c0c8:	2300      	movge	r3, #0
 800c0ca:	232d      	movlt	r3, #45	; 0x2d
 800c0cc:	700b      	strb	r3, [r1, #0]
 800c0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c0d4:	4691      	mov	r9, r2
 800c0d6:	f023 0820 	bic.w	r8, r3, #32
 800c0da:	bfbc      	itt	lt
 800c0dc:	4622      	movlt	r2, r4
 800c0de:	4614      	movlt	r4, r2
 800c0e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0e4:	d005      	beq.n	800c0f2 <__cvt+0x42>
 800c0e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c0ea:	d100      	bne.n	800c0ee <__cvt+0x3e>
 800c0ec:	3601      	adds	r6, #1
 800c0ee:	2102      	movs	r1, #2
 800c0f0:	e000      	b.n	800c0f4 <__cvt+0x44>
 800c0f2:	2103      	movs	r1, #3
 800c0f4:	ab03      	add	r3, sp, #12
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	ab02      	add	r3, sp, #8
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	ec45 4b10 	vmov	d0, r4, r5
 800c100:	4653      	mov	r3, sl
 800c102:	4632      	mov	r2, r6
 800c104:	f000 fcf8 	bl	800caf8 <_dtoa_r>
 800c108:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c10c:	4607      	mov	r7, r0
 800c10e:	d102      	bne.n	800c116 <__cvt+0x66>
 800c110:	f019 0f01 	tst.w	r9, #1
 800c114:	d022      	beq.n	800c15c <__cvt+0xac>
 800c116:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c11a:	eb07 0906 	add.w	r9, r7, r6
 800c11e:	d110      	bne.n	800c142 <__cvt+0x92>
 800c120:	783b      	ldrb	r3, [r7, #0]
 800c122:	2b30      	cmp	r3, #48	; 0x30
 800c124:	d10a      	bne.n	800c13c <__cvt+0x8c>
 800c126:	2200      	movs	r2, #0
 800c128:	2300      	movs	r3, #0
 800c12a:	4620      	mov	r0, r4
 800c12c:	4629      	mov	r1, r5
 800c12e:	f7f4 fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c132:	b918      	cbnz	r0, 800c13c <__cvt+0x8c>
 800c134:	f1c6 0601 	rsb	r6, r6, #1
 800c138:	f8ca 6000 	str.w	r6, [sl]
 800c13c:	f8da 3000 	ldr.w	r3, [sl]
 800c140:	4499      	add	r9, r3
 800c142:	2200      	movs	r2, #0
 800c144:	2300      	movs	r3, #0
 800c146:	4620      	mov	r0, r4
 800c148:	4629      	mov	r1, r5
 800c14a:	f7f4 fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c14e:	b108      	cbz	r0, 800c154 <__cvt+0xa4>
 800c150:	f8cd 900c 	str.w	r9, [sp, #12]
 800c154:	2230      	movs	r2, #48	; 0x30
 800c156:	9b03      	ldr	r3, [sp, #12]
 800c158:	454b      	cmp	r3, r9
 800c15a:	d307      	bcc.n	800c16c <__cvt+0xbc>
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c160:	1bdb      	subs	r3, r3, r7
 800c162:	4638      	mov	r0, r7
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	b004      	add	sp, #16
 800c168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c16c:	1c59      	adds	r1, r3, #1
 800c16e:	9103      	str	r1, [sp, #12]
 800c170:	701a      	strb	r2, [r3, #0]
 800c172:	e7f0      	b.n	800c156 <__cvt+0xa6>

0800c174 <__exponent>:
 800c174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c176:	4603      	mov	r3, r0
 800c178:	2900      	cmp	r1, #0
 800c17a:	bfb8      	it	lt
 800c17c:	4249      	neglt	r1, r1
 800c17e:	f803 2b02 	strb.w	r2, [r3], #2
 800c182:	bfb4      	ite	lt
 800c184:	222d      	movlt	r2, #45	; 0x2d
 800c186:	222b      	movge	r2, #43	; 0x2b
 800c188:	2909      	cmp	r1, #9
 800c18a:	7042      	strb	r2, [r0, #1]
 800c18c:	dd2a      	ble.n	800c1e4 <__exponent+0x70>
 800c18e:	f10d 0407 	add.w	r4, sp, #7
 800c192:	46a4      	mov	ip, r4
 800c194:	270a      	movs	r7, #10
 800c196:	46a6      	mov	lr, r4
 800c198:	460a      	mov	r2, r1
 800c19a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c19e:	fb07 1516 	mls	r5, r7, r6, r1
 800c1a2:	3530      	adds	r5, #48	; 0x30
 800c1a4:	2a63      	cmp	r2, #99	; 0x63
 800c1a6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c1aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c1ae:	4631      	mov	r1, r6
 800c1b0:	dcf1      	bgt.n	800c196 <__exponent+0x22>
 800c1b2:	3130      	adds	r1, #48	; 0x30
 800c1b4:	f1ae 0502 	sub.w	r5, lr, #2
 800c1b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c1bc:	1c44      	adds	r4, r0, #1
 800c1be:	4629      	mov	r1, r5
 800c1c0:	4561      	cmp	r1, ip
 800c1c2:	d30a      	bcc.n	800c1da <__exponent+0x66>
 800c1c4:	f10d 0209 	add.w	r2, sp, #9
 800c1c8:	eba2 020e 	sub.w	r2, r2, lr
 800c1cc:	4565      	cmp	r5, ip
 800c1ce:	bf88      	it	hi
 800c1d0:	2200      	movhi	r2, #0
 800c1d2:	4413      	add	r3, r2
 800c1d4:	1a18      	subs	r0, r3, r0
 800c1d6:	b003      	add	sp, #12
 800c1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1de:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c1e2:	e7ed      	b.n	800c1c0 <__exponent+0x4c>
 800c1e4:	2330      	movs	r3, #48	; 0x30
 800c1e6:	3130      	adds	r1, #48	; 0x30
 800c1e8:	7083      	strb	r3, [r0, #2]
 800c1ea:	70c1      	strb	r1, [r0, #3]
 800c1ec:	1d03      	adds	r3, r0, #4
 800c1ee:	e7f1      	b.n	800c1d4 <__exponent+0x60>

0800c1f0 <_printf_float>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	ed2d 8b02 	vpush	{d8}
 800c1f8:	b08d      	sub	sp, #52	; 0x34
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c200:	4616      	mov	r6, r2
 800c202:	461f      	mov	r7, r3
 800c204:	4605      	mov	r5, r0
 800c206:	f001 fa63 	bl	800d6d0 <_localeconv_r>
 800c20a:	f8d0 a000 	ldr.w	sl, [r0]
 800c20e:	4650      	mov	r0, sl
 800c210:	f7f3 ffde 	bl	80001d0 <strlen>
 800c214:	2300      	movs	r3, #0
 800c216:	930a      	str	r3, [sp, #40]	; 0x28
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	9305      	str	r3, [sp, #20]
 800c21c:	f8d8 3000 	ldr.w	r3, [r8]
 800c220:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c224:	3307      	adds	r3, #7
 800c226:	f023 0307 	bic.w	r3, r3, #7
 800c22a:	f103 0208 	add.w	r2, r3, #8
 800c22e:	f8c8 2000 	str.w	r2, [r8]
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c23a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c23e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c242:	9307      	str	r3, [sp, #28]
 800c244:	f8cd 8018 	str.w	r8, [sp, #24]
 800c248:	ee08 0a10 	vmov	s16, r0
 800c24c:	4b9f      	ldr	r3, [pc, #636]	; (800c4cc <_printf_float+0x2dc>)
 800c24e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c252:	f04f 32ff 	mov.w	r2, #4294967295
 800c256:	f7f4 fc69 	bl	8000b2c <__aeabi_dcmpun>
 800c25a:	bb88      	cbnz	r0, 800c2c0 <_printf_float+0xd0>
 800c25c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c260:	4b9a      	ldr	r3, [pc, #616]	; (800c4cc <_printf_float+0x2dc>)
 800c262:	f04f 32ff 	mov.w	r2, #4294967295
 800c266:	f7f4 fc43 	bl	8000af0 <__aeabi_dcmple>
 800c26a:	bb48      	cbnz	r0, 800c2c0 <_printf_float+0xd0>
 800c26c:	2200      	movs	r2, #0
 800c26e:	2300      	movs	r3, #0
 800c270:	4640      	mov	r0, r8
 800c272:	4649      	mov	r1, r9
 800c274:	f7f4 fc32 	bl	8000adc <__aeabi_dcmplt>
 800c278:	b110      	cbz	r0, 800c280 <_printf_float+0x90>
 800c27a:	232d      	movs	r3, #45	; 0x2d
 800c27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c280:	4b93      	ldr	r3, [pc, #588]	; (800c4d0 <_printf_float+0x2e0>)
 800c282:	4894      	ldr	r0, [pc, #592]	; (800c4d4 <_printf_float+0x2e4>)
 800c284:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c288:	bf94      	ite	ls
 800c28a:	4698      	movls	r8, r3
 800c28c:	4680      	movhi	r8, r0
 800c28e:	2303      	movs	r3, #3
 800c290:	6123      	str	r3, [r4, #16]
 800c292:	9b05      	ldr	r3, [sp, #20]
 800c294:	f023 0204 	bic.w	r2, r3, #4
 800c298:	6022      	str	r2, [r4, #0]
 800c29a:	f04f 0900 	mov.w	r9, #0
 800c29e:	9700      	str	r7, [sp, #0]
 800c2a0:	4633      	mov	r3, r6
 800c2a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f000 f9d8 	bl	800c65c <_printf_common>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	f040 8090 	bne.w	800c3d2 <_printf_float+0x1e2>
 800c2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b6:	b00d      	add	sp, #52	; 0x34
 800c2b8:	ecbd 8b02 	vpop	{d8}
 800c2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c0:	4642      	mov	r2, r8
 800c2c2:	464b      	mov	r3, r9
 800c2c4:	4640      	mov	r0, r8
 800c2c6:	4649      	mov	r1, r9
 800c2c8:	f7f4 fc30 	bl	8000b2c <__aeabi_dcmpun>
 800c2cc:	b140      	cbz	r0, 800c2e0 <_printf_float+0xf0>
 800c2ce:	464b      	mov	r3, r9
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	bfbc      	itt	lt
 800c2d4:	232d      	movlt	r3, #45	; 0x2d
 800c2d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c2da:	487f      	ldr	r0, [pc, #508]	; (800c4d8 <_printf_float+0x2e8>)
 800c2dc:	4b7f      	ldr	r3, [pc, #508]	; (800c4dc <_printf_float+0x2ec>)
 800c2de:	e7d1      	b.n	800c284 <_printf_float+0x94>
 800c2e0:	6863      	ldr	r3, [r4, #4]
 800c2e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c2e6:	9206      	str	r2, [sp, #24]
 800c2e8:	1c5a      	adds	r2, r3, #1
 800c2ea:	d13f      	bne.n	800c36c <_printf_float+0x17c>
 800c2ec:	2306      	movs	r3, #6
 800c2ee:	6063      	str	r3, [r4, #4]
 800c2f0:	9b05      	ldr	r3, [sp, #20]
 800c2f2:	6861      	ldr	r1, [r4, #4]
 800c2f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	9303      	str	r3, [sp, #12]
 800c2fc:	ab0a      	add	r3, sp, #40	; 0x28
 800c2fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c302:	ab09      	add	r3, sp, #36	; 0x24
 800c304:	ec49 8b10 	vmov	d0, r8, r9
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	6022      	str	r2, [r4, #0]
 800c30c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c310:	4628      	mov	r0, r5
 800c312:	f7ff fecd 	bl	800c0b0 <__cvt>
 800c316:	9b06      	ldr	r3, [sp, #24]
 800c318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c31a:	2b47      	cmp	r3, #71	; 0x47
 800c31c:	4680      	mov	r8, r0
 800c31e:	d108      	bne.n	800c332 <_printf_float+0x142>
 800c320:	1cc8      	adds	r0, r1, #3
 800c322:	db02      	blt.n	800c32a <_printf_float+0x13a>
 800c324:	6863      	ldr	r3, [r4, #4]
 800c326:	4299      	cmp	r1, r3
 800c328:	dd41      	ble.n	800c3ae <_printf_float+0x1be>
 800c32a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c32e:	fa5f fb8b 	uxtb.w	fp, fp
 800c332:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c336:	d820      	bhi.n	800c37a <_printf_float+0x18a>
 800c338:	3901      	subs	r1, #1
 800c33a:	465a      	mov	r2, fp
 800c33c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c340:	9109      	str	r1, [sp, #36]	; 0x24
 800c342:	f7ff ff17 	bl	800c174 <__exponent>
 800c346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c348:	1813      	adds	r3, r2, r0
 800c34a:	2a01      	cmp	r2, #1
 800c34c:	4681      	mov	r9, r0
 800c34e:	6123      	str	r3, [r4, #16]
 800c350:	dc02      	bgt.n	800c358 <_printf_float+0x168>
 800c352:	6822      	ldr	r2, [r4, #0]
 800c354:	07d2      	lsls	r2, r2, #31
 800c356:	d501      	bpl.n	800c35c <_printf_float+0x16c>
 800c358:	3301      	adds	r3, #1
 800c35a:	6123      	str	r3, [r4, #16]
 800c35c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c360:	2b00      	cmp	r3, #0
 800c362:	d09c      	beq.n	800c29e <_printf_float+0xae>
 800c364:	232d      	movs	r3, #45	; 0x2d
 800c366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c36a:	e798      	b.n	800c29e <_printf_float+0xae>
 800c36c:	9a06      	ldr	r2, [sp, #24]
 800c36e:	2a47      	cmp	r2, #71	; 0x47
 800c370:	d1be      	bne.n	800c2f0 <_printf_float+0x100>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1bc      	bne.n	800c2f0 <_printf_float+0x100>
 800c376:	2301      	movs	r3, #1
 800c378:	e7b9      	b.n	800c2ee <_printf_float+0xfe>
 800c37a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c37e:	d118      	bne.n	800c3b2 <_printf_float+0x1c2>
 800c380:	2900      	cmp	r1, #0
 800c382:	6863      	ldr	r3, [r4, #4]
 800c384:	dd0b      	ble.n	800c39e <_printf_float+0x1ae>
 800c386:	6121      	str	r1, [r4, #16]
 800c388:	b913      	cbnz	r3, 800c390 <_printf_float+0x1a0>
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	07d0      	lsls	r0, r2, #31
 800c38e:	d502      	bpl.n	800c396 <_printf_float+0x1a6>
 800c390:	3301      	adds	r3, #1
 800c392:	440b      	add	r3, r1
 800c394:	6123      	str	r3, [r4, #16]
 800c396:	65a1      	str	r1, [r4, #88]	; 0x58
 800c398:	f04f 0900 	mov.w	r9, #0
 800c39c:	e7de      	b.n	800c35c <_printf_float+0x16c>
 800c39e:	b913      	cbnz	r3, 800c3a6 <_printf_float+0x1b6>
 800c3a0:	6822      	ldr	r2, [r4, #0]
 800c3a2:	07d2      	lsls	r2, r2, #31
 800c3a4:	d501      	bpl.n	800c3aa <_printf_float+0x1ba>
 800c3a6:	3302      	adds	r3, #2
 800c3a8:	e7f4      	b.n	800c394 <_printf_float+0x1a4>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e7f2      	b.n	800c394 <_printf_float+0x1a4>
 800c3ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b4:	4299      	cmp	r1, r3
 800c3b6:	db05      	blt.n	800c3c4 <_printf_float+0x1d4>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	6121      	str	r1, [r4, #16]
 800c3bc:	07d8      	lsls	r0, r3, #31
 800c3be:	d5ea      	bpl.n	800c396 <_printf_float+0x1a6>
 800c3c0:	1c4b      	adds	r3, r1, #1
 800c3c2:	e7e7      	b.n	800c394 <_printf_float+0x1a4>
 800c3c4:	2900      	cmp	r1, #0
 800c3c6:	bfd4      	ite	le
 800c3c8:	f1c1 0202 	rsble	r2, r1, #2
 800c3cc:	2201      	movgt	r2, #1
 800c3ce:	4413      	add	r3, r2
 800c3d0:	e7e0      	b.n	800c394 <_printf_float+0x1a4>
 800c3d2:	6823      	ldr	r3, [r4, #0]
 800c3d4:	055a      	lsls	r2, r3, #21
 800c3d6:	d407      	bmi.n	800c3e8 <_printf_float+0x1f8>
 800c3d8:	6923      	ldr	r3, [r4, #16]
 800c3da:	4642      	mov	r2, r8
 800c3dc:	4631      	mov	r1, r6
 800c3de:	4628      	mov	r0, r5
 800c3e0:	47b8      	blx	r7
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	d12c      	bne.n	800c440 <_printf_float+0x250>
 800c3e6:	e764      	b.n	800c2b2 <_printf_float+0xc2>
 800c3e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3ec:	f240 80e0 	bls.w	800c5b0 <_printf_float+0x3c0>
 800c3f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f7f4 fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d034      	beq.n	800c46a <_printf_float+0x27a>
 800c400:	4a37      	ldr	r2, [pc, #220]	; (800c4e0 <_printf_float+0x2f0>)
 800c402:	2301      	movs	r3, #1
 800c404:	4631      	mov	r1, r6
 800c406:	4628      	mov	r0, r5
 800c408:	47b8      	blx	r7
 800c40a:	3001      	adds	r0, #1
 800c40c:	f43f af51 	beq.w	800c2b2 <_printf_float+0xc2>
 800c410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c414:	429a      	cmp	r2, r3
 800c416:	db02      	blt.n	800c41e <_printf_float+0x22e>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	07d8      	lsls	r0, r3, #31
 800c41c:	d510      	bpl.n	800c440 <_printf_float+0x250>
 800c41e:	ee18 3a10 	vmov	r3, s16
 800c422:	4652      	mov	r2, sl
 800c424:	4631      	mov	r1, r6
 800c426:	4628      	mov	r0, r5
 800c428:	47b8      	blx	r7
 800c42a:	3001      	adds	r0, #1
 800c42c:	f43f af41 	beq.w	800c2b2 <_printf_float+0xc2>
 800c430:	f04f 0800 	mov.w	r8, #0
 800c434:	f104 091a 	add.w	r9, r4, #26
 800c438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c43a:	3b01      	subs	r3, #1
 800c43c:	4543      	cmp	r3, r8
 800c43e:	dc09      	bgt.n	800c454 <_printf_float+0x264>
 800c440:	6823      	ldr	r3, [r4, #0]
 800c442:	079b      	lsls	r3, r3, #30
 800c444:	f100 8105 	bmi.w	800c652 <_printf_float+0x462>
 800c448:	68e0      	ldr	r0, [r4, #12]
 800c44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c44c:	4298      	cmp	r0, r3
 800c44e:	bfb8      	it	lt
 800c450:	4618      	movlt	r0, r3
 800c452:	e730      	b.n	800c2b6 <_printf_float+0xc6>
 800c454:	2301      	movs	r3, #1
 800c456:	464a      	mov	r2, r9
 800c458:	4631      	mov	r1, r6
 800c45a:	4628      	mov	r0, r5
 800c45c:	47b8      	blx	r7
 800c45e:	3001      	adds	r0, #1
 800c460:	f43f af27 	beq.w	800c2b2 <_printf_float+0xc2>
 800c464:	f108 0801 	add.w	r8, r8, #1
 800c468:	e7e6      	b.n	800c438 <_printf_float+0x248>
 800c46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	dc39      	bgt.n	800c4e4 <_printf_float+0x2f4>
 800c470:	4a1b      	ldr	r2, [pc, #108]	; (800c4e0 <_printf_float+0x2f0>)
 800c472:	2301      	movs	r3, #1
 800c474:	4631      	mov	r1, r6
 800c476:	4628      	mov	r0, r5
 800c478:	47b8      	blx	r7
 800c47a:	3001      	adds	r0, #1
 800c47c:	f43f af19 	beq.w	800c2b2 <_printf_float+0xc2>
 800c480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c484:	4313      	orrs	r3, r2
 800c486:	d102      	bne.n	800c48e <_printf_float+0x29e>
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	07d9      	lsls	r1, r3, #31
 800c48c:	d5d8      	bpl.n	800c440 <_printf_float+0x250>
 800c48e:	ee18 3a10 	vmov	r3, s16
 800c492:	4652      	mov	r2, sl
 800c494:	4631      	mov	r1, r6
 800c496:	4628      	mov	r0, r5
 800c498:	47b8      	blx	r7
 800c49a:	3001      	adds	r0, #1
 800c49c:	f43f af09 	beq.w	800c2b2 <_printf_float+0xc2>
 800c4a0:	f04f 0900 	mov.w	r9, #0
 800c4a4:	f104 0a1a 	add.w	sl, r4, #26
 800c4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4aa:	425b      	negs	r3, r3
 800c4ac:	454b      	cmp	r3, r9
 800c4ae:	dc01      	bgt.n	800c4b4 <_printf_float+0x2c4>
 800c4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4b2:	e792      	b.n	800c3da <_printf_float+0x1ea>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	4652      	mov	r2, sl
 800c4b8:	4631      	mov	r1, r6
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	47b8      	blx	r7
 800c4be:	3001      	adds	r0, #1
 800c4c0:	f43f aef7 	beq.w	800c2b2 <_printf_float+0xc2>
 800c4c4:	f109 0901 	add.w	r9, r9, #1
 800c4c8:	e7ee      	b.n	800c4a8 <_printf_float+0x2b8>
 800c4ca:	bf00      	nop
 800c4cc:	7fefffff 	.word	0x7fefffff
 800c4d0:	0800ef04 	.word	0x0800ef04
 800c4d4:	0800ef08 	.word	0x0800ef08
 800c4d8:	0800ef10 	.word	0x0800ef10
 800c4dc:	0800ef0c 	.word	0x0800ef0c
 800c4e0:	0800ef14 	.word	0x0800ef14
 800c4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	bfa8      	it	ge
 800c4ec:	461a      	movge	r2, r3
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	4691      	mov	r9, r2
 800c4f2:	dc37      	bgt.n	800c564 <_printf_float+0x374>
 800c4f4:	f04f 0b00 	mov.w	fp, #0
 800c4f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4fc:	f104 021a 	add.w	r2, r4, #26
 800c500:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	eba3 0309 	sub.w	r3, r3, r9
 800c508:	455b      	cmp	r3, fp
 800c50a:	dc33      	bgt.n	800c574 <_printf_float+0x384>
 800c50c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c510:	429a      	cmp	r2, r3
 800c512:	db3b      	blt.n	800c58c <_printf_float+0x39c>
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	07da      	lsls	r2, r3, #31
 800c518:	d438      	bmi.n	800c58c <_printf_float+0x39c>
 800c51a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c51c:	9b05      	ldr	r3, [sp, #20]
 800c51e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	eba2 0901 	sub.w	r9, r2, r1
 800c526:	4599      	cmp	r9, r3
 800c528:	bfa8      	it	ge
 800c52a:	4699      	movge	r9, r3
 800c52c:	f1b9 0f00 	cmp.w	r9, #0
 800c530:	dc35      	bgt.n	800c59e <_printf_float+0x3ae>
 800c532:	f04f 0800 	mov.w	r8, #0
 800c536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c53a:	f104 0a1a 	add.w	sl, r4, #26
 800c53e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c542:	1a9b      	subs	r3, r3, r2
 800c544:	eba3 0309 	sub.w	r3, r3, r9
 800c548:	4543      	cmp	r3, r8
 800c54a:	f77f af79 	ble.w	800c440 <_printf_float+0x250>
 800c54e:	2301      	movs	r3, #1
 800c550:	4652      	mov	r2, sl
 800c552:	4631      	mov	r1, r6
 800c554:	4628      	mov	r0, r5
 800c556:	47b8      	blx	r7
 800c558:	3001      	adds	r0, #1
 800c55a:	f43f aeaa 	beq.w	800c2b2 <_printf_float+0xc2>
 800c55e:	f108 0801 	add.w	r8, r8, #1
 800c562:	e7ec      	b.n	800c53e <_printf_float+0x34e>
 800c564:	4613      	mov	r3, r2
 800c566:	4631      	mov	r1, r6
 800c568:	4642      	mov	r2, r8
 800c56a:	4628      	mov	r0, r5
 800c56c:	47b8      	blx	r7
 800c56e:	3001      	adds	r0, #1
 800c570:	d1c0      	bne.n	800c4f4 <_printf_float+0x304>
 800c572:	e69e      	b.n	800c2b2 <_printf_float+0xc2>
 800c574:	2301      	movs	r3, #1
 800c576:	4631      	mov	r1, r6
 800c578:	4628      	mov	r0, r5
 800c57a:	9205      	str	r2, [sp, #20]
 800c57c:	47b8      	blx	r7
 800c57e:	3001      	adds	r0, #1
 800c580:	f43f ae97 	beq.w	800c2b2 <_printf_float+0xc2>
 800c584:	9a05      	ldr	r2, [sp, #20]
 800c586:	f10b 0b01 	add.w	fp, fp, #1
 800c58a:	e7b9      	b.n	800c500 <_printf_float+0x310>
 800c58c:	ee18 3a10 	vmov	r3, s16
 800c590:	4652      	mov	r2, sl
 800c592:	4631      	mov	r1, r6
 800c594:	4628      	mov	r0, r5
 800c596:	47b8      	blx	r7
 800c598:	3001      	adds	r0, #1
 800c59a:	d1be      	bne.n	800c51a <_printf_float+0x32a>
 800c59c:	e689      	b.n	800c2b2 <_printf_float+0xc2>
 800c59e:	9a05      	ldr	r2, [sp, #20]
 800c5a0:	464b      	mov	r3, r9
 800c5a2:	4442      	add	r2, r8
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	47b8      	blx	r7
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	d1c1      	bne.n	800c532 <_printf_float+0x342>
 800c5ae:	e680      	b.n	800c2b2 <_printf_float+0xc2>
 800c5b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5b2:	2a01      	cmp	r2, #1
 800c5b4:	dc01      	bgt.n	800c5ba <_printf_float+0x3ca>
 800c5b6:	07db      	lsls	r3, r3, #31
 800c5b8:	d538      	bpl.n	800c62c <_printf_float+0x43c>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	4642      	mov	r2, r8
 800c5be:	4631      	mov	r1, r6
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	47b8      	blx	r7
 800c5c4:	3001      	adds	r0, #1
 800c5c6:	f43f ae74 	beq.w	800c2b2 <_printf_float+0xc2>
 800c5ca:	ee18 3a10 	vmov	r3, s16
 800c5ce:	4652      	mov	r2, sl
 800c5d0:	4631      	mov	r1, r6
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	47b8      	blx	r7
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	f43f ae6b 	beq.w	800c2b2 <_printf_float+0xc2>
 800c5dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f7f4 fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5e8:	b9d8      	cbnz	r0, 800c622 <_printf_float+0x432>
 800c5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ec:	f108 0201 	add.w	r2, r8, #1
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	47b8      	blx	r7
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	d10e      	bne.n	800c61a <_printf_float+0x42a>
 800c5fc:	e659      	b.n	800c2b2 <_printf_float+0xc2>
 800c5fe:	2301      	movs	r3, #1
 800c600:	4652      	mov	r2, sl
 800c602:	4631      	mov	r1, r6
 800c604:	4628      	mov	r0, r5
 800c606:	47b8      	blx	r7
 800c608:	3001      	adds	r0, #1
 800c60a:	f43f ae52 	beq.w	800c2b2 <_printf_float+0xc2>
 800c60e:	f108 0801 	add.w	r8, r8, #1
 800c612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c614:	3b01      	subs	r3, #1
 800c616:	4543      	cmp	r3, r8
 800c618:	dcf1      	bgt.n	800c5fe <_printf_float+0x40e>
 800c61a:	464b      	mov	r3, r9
 800c61c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c620:	e6dc      	b.n	800c3dc <_printf_float+0x1ec>
 800c622:	f04f 0800 	mov.w	r8, #0
 800c626:	f104 0a1a 	add.w	sl, r4, #26
 800c62a:	e7f2      	b.n	800c612 <_printf_float+0x422>
 800c62c:	2301      	movs	r3, #1
 800c62e:	4642      	mov	r2, r8
 800c630:	e7df      	b.n	800c5f2 <_printf_float+0x402>
 800c632:	2301      	movs	r3, #1
 800c634:	464a      	mov	r2, r9
 800c636:	4631      	mov	r1, r6
 800c638:	4628      	mov	r0, r5
 800c63a:	47b8      	blx	r7
 800c63c:	3001      	adds	r0, #1
 800c63e:	f43f ae38 	beq.w	800c2b2 <_printf_float+0xc2>
 800c642:	f108 0801 	add.w	r8, r8, #1
 800c646:	68e3      	ldr	r3, [r4, #12]
 800c648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c64a:	1a5b      	subs	r3, r3, r1
 800c64c:	4543      	cmp	r3, r8
 800c64e:	dcf0      	bgt.n	800c632 <_printf_float+0x442>
 800c650:	e6fa      	b.n	800c448 <_printf_float+0x258>
 800c652:	f04f 0800 	mov.w	r8, #0
 800c656:	f104 0919 	add.w	r9, r4, #25
 800c65a:	e7f4      	b.n	800c646 <_printf_float+0x456>

0800c65c <_printf_common>:
 800c65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	4616      	mov	r6, r2
 800c662:	4699      	mov	r9, r3
 800c664:	688a      	ldr	r2, [r1, #8]
 800c666:	690b      	ldr	r3, [r1, #16]
 800c668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c66c:	4293      	cmp	r3, r2
 800c66e:	bfb8      	it	lt
 800c670:	4613      	movlt	r3, r2
 800c672:	6033      	str	r3, [r6, #0]
 800c674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c678:	4607      	mov	r7, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	b10a      	cbz	r2, 800c682 <_printf_common+0x26>
 800c67e:	3301      	adds	r3, #1
 800c680:	6033      	str	r3, [r6, #0]
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	0699      	lsls	r1, r3, #26
 800c686:	bf42      	ittt	mi
 800c688:	6833      	ldrmi	r3, [r6, #0]
 800c68a:	3302      	addmi	r3, #2
 800c68c:	6033      	strmi	r3, [r6, #0]
 800c68e:	6825      	ldr	r5, [r4, #0]
 800c690:	f015 0506 	ands.w	r5, r5, #6
 800c694:	d106      	bne.n	800c6a4 <_printf_common+0x48>
 800c696:	f104 0a19 	add.w	sl, r4, #25
 800c69a:	68e3      	ldr	r3, [r4, #12]
 800c69c:	6832      	ldr	r2, [r6, #0]
 800c69e:	1a9b      	subs	r3, r3, r2
 800c6a0:	42ab      	cmp	r3, r5
 800c6a2:	dc26      	bgt.n	800c6f2 <_printf_common+0x96>
 800c6a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c6a8:	1e13      	subs	r3, r2, #0
 800c6aa:	6822      	ldr	r2, [r4, #0]
 800c6ac:	bf18      	it	ne
 800c6ae:	2301      	movne	r3, #1
 800c6b0:	0692      	lsls	r2, r2, #26
 800c6b2:	d42b      	bmi.n	800c70c <_printf_common+0xb0>
 800c6b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6b8:	4649      	mov	r1, r9
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	47c0      	blx	r8
 800c6be:	3001      	adds	r0, #1
 800c6c0:	d01e      	beq.n	800c700 <_printf_common+0xa4>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	68e5      	ldr	r5, [r4, #12]
 800c6c6:	6832      	ldr	r2, [r6, #0]
 800c6c8:	f003 0306 	and.w	r3, r3, #6
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	bf08      	it	eq
 800c6d0:	1aad      	subeq	r5, r5, r2
 800c6d2:	68a3      	ldr	r3, [r4, #8]
 800c6d4:	6922      	ldr	r2, [r4, #16]
 800c6d6:	bf0c      	ite	eq
 800c6d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6dc:	2500      	movne	r5, #0
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	bfc4      	itt	gt
 800c6e2:	1a9b      	subgt	r3, r3, r2
 800c6e4:	18ed      	addgt	r5, r5, r3
 800c6e6:	2600      	movs	r6, #0
 800c6e8:	341a      	adds	r4, #26
 800c6ea:	42b5      	cmp	r5, r6
 800c6ec:	d11a      	bne.n	800c724 <_printf_common+0xc8>
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	e008      	b.n	800c704 <_printf_common+0xa8>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	4652      	mov	r2, sl
 800c6f6:	4649      	mov	r1, r9
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	47c0      	blx	r8
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	d103      	bne.n	800c708 <_printf_common+0xac>
 800c700:	f04f 30ff 	mov.w	r0, #4294967295
 800c704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c708:	3501      	adds	r5, #1
 800c70a:	e7c6      	b.n	800c69a <_printf_common+0x3e>
 800c70c:	18e1      	adds	r1, r4, r3
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	2030      	movs	r0, #48	; 0x30
 800c712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c716:	4422      	add	r2, r4
 800c718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c71c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c720:	3302      	adds	r3, #2
 800c722:	e7c7      	b.n	800c6b4 <_printf_common+0x58>
 800c724:	2301      	movs	r3, #1
 800c726:	4622      	mov	r2, r4
 800c728:	4649      	mov	r1, r9
 800c72a:	4638      	mov	r0, r7
 800c72c:	47c0      	blx	r8
 800c72e:	3001      	adds	r0, #1
 800c730:	d0e6      	beq.n	800c700 <_printf_common+0xa4>
 800c732:	3601      	adds	r6, #1
 800c734:	e7d9      	b.n	800c6ea <_printf_common+0x8e>
	...

0800c738 <_printf_i>:
 800c738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c73c:	460c      	mov	r4, r1
 800c73e:	4691      	mov	r9, r2
 800c740:	7e27      	ldrb	r7, [r4, #24]
 800c742:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c744:	2f78      	cmp	r7, #120	; 0x78
 800c746:	4680      	mov	r8, r0
 800c748:	469a      	mov	sl, r3
 800c74a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c74e:	d807      	bhi.n	800c760 <_printf_i+0x28>
 800c750:	2f62      	cmp	r7, #98	; 0x62
 800c752:	d80a      	bhi.n	800c76a <_printf_i+0x32>
 800c754:	2f00      	cmp	r7, #0
 800c756:	f000 80d8 	beq.w	800c90a <_printf_i+0x1d2>
 800c75a:	2f58      	cmp	r7, #88	; 0x58
 800c75c:	f000 80a3 	beq.w	800c8a6 <_printf_i+0x16e>
 800c760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c768:	e03a      	b.n	800c7e0 <_printf_i+0xa8>
 800c76a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c76e:	2b15      	cmp	r3, #21
 800c770:	d8f6      	bhi.n	800c760 <_printf_i+0x28>
 800c772:	a001      	add	r0, pc, #4	; (adr r0, 800c778 <_printf_i+0x40>)
 800c774:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c778:	0800c7d1 	.word	0x0800c7d1
 800c77c:	0800c7e5 	.word	0x0800c7e5
 800c780:	0800c761 	.word	0x0800c761
 800c784:	0800c761 	.word	0x0800c761
 800c788:	0800c761 	.word	0x0800c761
 800c78c:	0800c761 	.word	0x0800c761
 800c790:	0800c7e5 	.word	0x0800c7e5
 800c794:	0800c761 	.word	0x0800c761
 800c798:	0800c761 	.word	0x0800c761
 800c79c:	0800c761 	.word	0x0800c761
 800c7a0:	0800c761 	.word	0x0800c761
 800c7a4:	0800c8f1 	.word	0x0800c8f1
 800c7a8:	0800c815 	.word	0x0800c815
 800c7ac:	0800c8d3 	.word	0x0800c8d3
 800c7b0:	0800c761 	.word	0x0800c761
 800c7b4:	0800c761 	.word	0x0800c761
 800c7b8:	0800c913 	.word	0x0800c913
 800c7bc:	0800c761 	.word	0x0800c761
 800c7c0:	0800c815 	.word	0x0800c815
 800c7c4:	0800c761 	.word	0x0800c761
 800c7c8:	0800c761 	.word	0x0800c761
 800c7cc:	0800c8db 	.word	0x0800c8db
 800c7d0:	680b      	ldr	r3, [r1, #0]
 800c7d2:	1d1a      	adds	r2, r3, #4
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	600a      	str	r2, [r1, #0]
 800c7d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c7dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e0a3      	b.n	800c92c <_printf_i+0x1f4>
 800c7e4:	6825      	ldr	r5, [r4, #0]
 800c7e6:	6808      	ldr	r0, [r1, #0]
 800c7e8:	062e      	lsls	r6, r5, #24
 800c7ea:	f100 0304 	add.w	r3, r0, #4
 800c7ee:	d50a      	bpl.n	800c806 <_printf_i+0xce>
 800c7f0:	6805      	ldr	r5, [r0, #0]
 800c7f2:	600b      	str	r3, [r1, #0]
 800c7f4:	2d00      	cmp	r5, #0
 800c7f6:	da03      	bge.n	800c800 <_printf_i+0xc8>
 800c7f8:	232d      	movs	r3, #45	; 0x2d
 800c7fa:	426d      	negs	r5, r5
 800c7fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c800:	485e      	ldr	r0, [pc, #376]	; (800c97c <_printf_i+0x244>)
 800c802:	230a      	movs	r3, #10
 800c804:	e019      	b.n	800c83a <_printf_i+0x102>
 800c806:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c80a:	6805      	ldr	r5, [r0, #0]
 800c80c:	600b      	str	r3, [r1, #0]
 800c80e:	bf18      	it	ne
 800c810:	b22d      	sxthne	r5, r5
 800c812:	e7ef      	b.n	800c7f4 <_printf_i+0xbc>
 800c814:	680b      	ldr	r3, [r1, #0]
 800c816:	6825      	ldr	r5, [r4, #0]
 800c818:	1d18      	adds	r0, r3, #4
 800c81a:	6008      	str	r0, [r1, #0]
 800c81c:	0628      	lsls	r0, r5, #24
 800c81e:	d501      	bpl.n	800c824 <_printf_i+0xec>
 800c820:	681d      	ldr	r5, [r3, #0]
 800c822:	e002      	b.n	800c82a <_printf_i+0xf2>
 800c824:	0669      	lsls	r1, r5, #25
 800c826:	d5fb      	bpl.n	800c820 <_printf_i+0xe8>
 800c828:	881d      	ldrh	r5, [r3, #0]
 800c82a:	4854      	ldr	r0, [pc, #336]	; (800c97c <_printf_i+0x244>)
 800c82c:	2f6f      	cmp	r7, #111	; 0x6f
 800c82e:	bf0c      	ite	eq
 800c830:	2308      	moveq	r3, #8
 800c832:	230a      	movne	r3, #10
 800c834:	2100      	movs	r1, #0
 800c836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c83a:	6866      	ldr	r6, [r4, #4]
 800c83c:	60a6      	str	r6, [r4, #8]
 800c83e:	2e00      	cmp	r6, #0
 800c840:	bfa2      	ittt	ge
 800c842:	6821      	ldrge	r1, [r4, #0]
 800c844:	f021 0104 	bicge.w	r1, r1, #4
 800c848:	6021      	strge	r1, [r4, #0]
 800c84a:	b90d      	cbnz	r5, 800c850 <_printf_i+0x118>
 800c84c:	2e00      	cmp	r6, #0
 800c84e:	d04d      	beq.n	800c8ec <_printf_i+0x1b4>
 800c850:	4616      	mov	r6, r2
 800c852:	fbb5 f1f3 	udiv	r1, r5, r3
 800c856:	fb03 5711 	mls	r7, r3, r1, r5
 800c85a:	5dc7      	ldrb	r7, [r0, r7]
 800c85c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c860:	462f      	mov	r7, r5
 800c862:	42bb      	cmp	r3, r7
 800c864:	460d      	mov	r5, r1
 800c866:	d9f4      	bls.n	800c852 <_printf_i+0x11a>
 800c868:	2b08      	cmp	r3, #8
 800c86a:	d10b      	bne.n	800c884 <_printf_i+0x14c>
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	07df      	lsls	r7, r3, #31
 800c870:	d508      	bpl.n	800c884 <_printf_i+0x14c>
 800c872:	6923      	ldr	r3, [r4, #16]
 800c874:	6861      	ldr	r1, [r4, #4]
 800c876:	4299      	cmp	r1, r3
 800c878:	bfde      	ittt	le
 800c87a:	2330      	movle	r3, #48	; 0x30
 800c87c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c880:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c884:	1b92      	subs	r2, r2, r6
 800c886:	6122      	str	r2, [r4, #16]
 800c888:	f8cd a000 	str.w	sl, [sp]
 800c88c:	464b      	mov	r3, r9
 800c88e:	aa03      	add	r2, sp, #12
 800c890:	4621      	mov	r1, r4
 800c892:	4640      	mov	r0, r8
 800c894:	f7ff fee2 	bl	800c65c <_printf_common>
 800c898:	3001      	adds	r0, #1
 800c89a:	d14c      	bne.n	800c936 <_printf_i+0x1fe>
 800c89c:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a0:	b004      	add	sp, #16
 800c8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a6:	4835      	ldr	r0, [pc, #212]	; (800c97c <_printf_i+0x244>)
 800c8a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	680e      	ldr	r6, [r1, #0]
 800c8b0:	061f      	lsls	r7, r3, #24
 800c8b2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c8b6:	600e      	str	r6, [r1, #0]
 800c8b8:	d514      	bpl.n	800c8e4 <_printf_i+0x1ac>
 800c8ba:	07d9      	lsls	r1, r3, #31
 800c8bc:	bf44      	itt	mi
 800c8be:	f043 0320 	orrmi.w	r3, r3, #32
 800c8c2:	6023      	strmi	r3, [r4, #0]
 800c8c4:	b91d      	cbnz	r5, 800c8ce <_printf_i+0x196>
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	f023 0320 	bic.w	r3, r3, #32
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	2310      	movs	r3, #16
 800c8d0:	e7b0      	b.n	800c834 <_printf_i+0xfc>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	f043 0320 	orr.w	r3, r3, #32
 800c8d8:	6023      	str	r3, [r4, #0]
 800c8da:	2378      	movs	r3, #120	; 0x78
 800c8dc:	4828      	ldr	r0, [pc, #160]	; (800c980 <_printf_i+0x248>)
 800c8de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8e2:	e7e3      	b.n	800c8ac <_printf_i+0x174>
 800c8e4:	065e      	lsls	r6, r3, #25
 800c8e6:	bf48      	it	mi
 800c8e8:	b2ad      	uxthmi	r5, r5
 800c8ea:	e7e6      	b.n	800c8ba <_printf_i+0x182>
 800c8ec:	4616      	mov	r6, r2
 800c8ee:	e7bb      	b.n	800c868 <_printf_i+0x130>
 800c8f0:	680b      	ldr	r3, [r1, #0]
 800c8f2:	6826      	ldr	r6, [r4, #0]
 800c8f4:	6960      	ldr	r0, [r4, #20]
 800c8f6:	1d1d      	adds	r5, r3, #4
 800c8f8:	600d      	str	r5, [r1, #0]
 800c8fa:	0635      	lsls	r5, r6, #24
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	d501      	bpl.n	800c904 <_printf_i+0x1cc>
 800c900:	6018      	str	r0, [r3, #0]
 800c902:	e002      	b.n	800c90a <_printf_i+0x1d2>
 800c904:	0671      	lsls	r1, r6, #25
 800c906:	d5fb      	bpl.n	800c900 <_printf_i+0x1c8>
 800c908:	8018      	strh	r0, [r3, #0]
 800c90a:	2300      	movs	r3, #0
 800c90c:	6123      	str	r3, [r4, #16]
 800c90e:	4616      	mov	r6, r2
 800c910:	e7ba      	b.n	800c888 <_printf_i+0x150>
 800c912:	680b      	ldr	r3, [r1, #0]
 800c914:	1d1a      	adds	r2, r3, #4
 800c916:	600a      	str	r2, [r1, #0]
 800c918:	681e      	ldr	r6, [r3, #0]
 800c91a:	6862      	ldr	r2, [r4, #4]
 800c91c:	2100      	movs	r1, #0
 800c91e:	4630      	mov	r0, r6
 800c920:	f7f3 fc5e 	bl	80001e0 <memchr>
 800c924:	b108      	cbz	r0, 800c92a <_printf_i+0x1f2>
 800c926:	1b80      	subs	r0, r0, r6
 800c928:	6060      	str	r0, [r4, #4]
 800c92a:	6863      	ldr	r3, [r4, #4]
 800c92c:	6123      	str	r3, [r4, #16]
 800c92e:	2300      	movs	r3, #0
 800c930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c934:	e7a8      	b.n	800c888 <_printf_i+0x150>
 800c936:	6923      	ldr	r3, [r4, #16]
 800c938:	4632      	mov	r2, r6
 800c93a:	4649      	mov	r1, r9
 800c93c:	4640      	mov	r0, r8
 800c93e:	47d0      	blx	sl
 800c940:	3001      	adds	r0, #1
 800c942:	d0ab      	beq.n	800c89c <_printf_i+0x164>
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	079b      	lsls	r3, r3, #30
 800c948:	d413      	bmi.n	800c972 <_printf_i+0x23a>
 800c94a:	68e0      	ldr	r0, [r4, #12]
 800c94c:	9b03      	ldr	r3, [sp, #12]
 800c94e:	4298      	cmp	r0, r3
 800c950:	bfb8      	it	lt
 800c952:	4618      	movlt	r0, r3
 800c954:	e7a4      	b.n	800c8a0 <_printf_i+0x168>
 800c956:	2301      	movs	r3, #1
 800c958:	4632      	mov	r2, r6
 800c95a:	4649      	mov	r1, r9
 800c95c:	4640      	mov	r0, r8
 800c95e:	47d0      	blx	sl
 800c960:	3001      	adds	r0, #1
 800c962:	d09b      	beq.n	800c89c <_printf_i+0x164>
 800c964:	3501      	adds	r5, #1
 800c966:	68e3      	ldr	r3, [r4, #12]
 800c968:	9903      	ldr	r1, [sp, #12]
 800c96a:	1a5b      	subs	r3, r3, r1
 800c96c:	42ab      	cmp	r3, r5
 800c96e:	dcf2      	bgt.n	800c956 <_printf_i+0x21e>
 800c970:	e7eb      	b.n	800c94a <_printf_i+0x212>
 800c972:	2500      	movs	r5, #0
 800c974:	f104 0619 	add.w	r6, r4, #25
 800c978:	e7f5      	b.n	800c966 <_printf_i+0x22e>
 800c97a:	bf00      	nop
 800c97c:	0800ef16 	.word	0x0800ef16
 800c980:	0800ef27 	.word	0x0800ef27

0800c984 <siprintf>:
 800c984:	b40e      	push	{r1, r2, r3}
 800c986:	b500      	push	{lr}
 800c988:	b09c      	sub	sp, #112	; 0x70
 800c98a:	ab1d      	add	r3, sp, #116	; 0x74
 800c98c:	9002      	str	r0, [sp, #8]
 800c98e:	9006      	str	r0, [sp, #24]
 800c990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c994:	4809      	ldr	r0, [pc, #36]	; (800c9bc <siprintf+0x38>)
 800c996:	9107      	str	r1, [sp, #28]
 800c998:	9104      	str	r1, [sp, #16]
 800c99a:	4909      	ldr	r1, [pc, #36]	; (800c9c0 <siprintf+0x3c>)
 800c99c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9a0:	9105      	str	r1, [sp, #20]
 800c9a2:	6800      	ldr	r0, [r0, #0]
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	a902      	add	r1, sp, #8
 800c9a8:	f001 fb40 	bl	800e02c <_svfiprintf_r>
 800c9ac:	9b02      	ldr	r3, [sp, #8]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	701a      	strb	r2, [r3, #0]
 800c9b2:	b01c      	add	sp, #112	; 0x70
 800c9b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9b8:	b003      	add	sp, #12
 800c9ba:	4770      	bx	lr
 800c9bc:	20000190 	.word	0x20000190
 800c9c0:	ffff0208 	.word	0xffff0208

0800c9c4 <strcat>:
 800c9c4:	b510      	push	{r4, lr}
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	7814      	ldrb	r4, [r2, #0]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	3201      	adds	r2, #1
 800c9ce:	2c00      	cmp	r4, #0
 800c9d0:	d1fa      	bne.n	800c9c8 <strcat+0x4>
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9dc:	2a00      	cmp	r2, #0
 800c9de:	d1f9      	bne.n	800c9d4 <strcat+0x10>
 800c9e0:	bd10      	pop	{r4, pc}

0800c9e2 <quorem>:
 800c9e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e6:	6903      	ldr	r3, [r0, #16]
 800c9e8:	690c      	ldr	r4, [r1, #16]
 800c9ea:	42a3      	cmp	r3, r4
 800c9ec:	4607      	mov	r7, r0
 800c9ee:	f2c0 8081 	blt.w	800caf4 <quorem+0x112>
 800c9f2:	3c01      	subs	r4, #1
 800c9f4:	f101 0814 	add.w	r8, r1, #20
 800c9f8:	f100 0514 	add.w	r5, r0, #20
 800c9fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca00:	9301      	str	r3, [sp, #4]
 800ca02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ca12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca16:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca1a:	d331      	bcc.n	800ca80 <quorem+0x9e>
 800ca1c:	f04f 0e00 	mov.w	lr, #0
 800ca20:	4640      	mov	r0, r8
 800ca22:	46ac      	mov	ip, r5
 800ca24:	46f2      	mov	sl, lr
 800ca26:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca2a:	b293      	uxth	r3, r2
 800ca2c:	fb06 e303 	mla	r3, r6, r3, lr
 800ca30:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	ebaa 0303 	sub.w	r3, sl, r3
 800ca3a:	0c12      	lsrs	r2, r2, #16
 800ca3c:	f8dc a000 	ldr.w	sl, [ip]
 800ca40:	fb06 e202 	mla	r2, r6, r2, lr
 800ca44:	fa13 f38a 	uxtah	r3, r3, sl
 800ca48:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca4c:	fa1f fa82 	uxth.w	sl, r2
 800ca50:	f8dc 2000 	ldr.w	r2, [ip]
 800ca54:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ca58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca62:	4581      	cmp	r9, r0
 800ca64:	f84c 3b04 	str.w	r3, [ip], #4
 800ca68:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca6c:	d2db      	bcs.n	800ca26 <quorem+0x44>
 800ca6e:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca72:	b92b      	cbnz	r3, 800ca80 <quorem+0x9e>
 800ca74:	9b01      	ldr	r3, [sp, #4]
 800ca76:	3b04      	subs	r3, #4
 800ca78:	429d      	cmp	r5, r3
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	d32e      	bcc.n	800cadc <quorem+0xfa>
 800ca7e:	613c      	str	r4, [r7, #16]
 800ca80:	4638      	mov	r0, r7
 800ca82:	f001 f8bd 	bl	800dc00 <__mcmp>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	db24      	blt.n	800cad4 <quorem+0xf2>
 800ca8a:	3601      	adds	r6, #1
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	f04f 0c00 	mov.w	ip, #0
 800ca92:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca96:	f8d0 e000 	ldr.w	lr, [r0]
 800ca9a:	b293      	uxth	r3, r2
 800ca9c:	ebac 0303 	sub.w	r3, ip, r3
 800caa0:	0c12      	lsrs	r2, r2, #16
 800caa2:	fa13 f38e 	uxtah	r3, r3, lr
 800caa6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800caaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800caae:	b29b      	uxth	r3, r3
 800cab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cab4:	45c1      	cmp	r9, r8
 800cab6:	f840 3b04 	str.w	r3, [r0], #4
 800caba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cabe:	d2e8      	bcs.n	800ca92 <quorem+0xb0>
 800cac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cac4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cac8:	b922      	cbnz	r2, 800cad4 <quorem+0xf2>
 800caca:	3b04      	subs	r3, #4
 800cacc:	429d      	cmp	r5, r3
 800cace:	461a      	mov	r2, r3
 800cad0:	d30a      	bcc.n	800cae8 <quorem+0x106>
 800cad2:	613c      	str	r4, [r7, #16]
 800cad4:	4630      	mov	r0, r6
 800cad6:	b003      	add	sp, #12
 800cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cadc:	6812      	ldr	r2, [r2, #0]
 800cade:	3b04      	subs	r3, #4
 800cae0:	2a00      	cmp	r2, #0
 800cae2:	d1cc      	bne.n	800ca7e <quorem+0x9c>
 800cae4:	3c01      	subs	r4, #1
 800cae6:	e7c7      	b.n	800ca78 <quorem+0x96>
 800cae8:	6812      	ldr	r2, [r2, #0]
 800caea:	3b04      	subs	r3, #4
 800caec:	2a00      	cmp	r2, #0
 800caee:	d1f0      	bne.n	800cad2 <quorem+0xf0>
 800caf0:	3c01      	subs	r4, #1
 800caf2:	e7eb      	b.n	800cacc <quorem+0xea>
 800caf4:	2000      	movs	r0, #0
 800caf6:	e7ee      	b.n	800cad6 <quorem+0xf4>

0800caf8 <_dtoa_r>:
 800caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafc:	ed2d 8b02 	vpush	{d8}
 800cb00:	ec57 6b10 	vmov	r6, r7, d0
 800cb04:	b095      	sub	sp, #84	; 0x54
 800cb06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb0c:	9105      	str	r1, [sp, #20]
 800cb0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cb12:	4604      	mov	r4, r0
 800cb14:	9209      	str	r2, [sp, #36]	; 0x24
 800cb16:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb18:	b975      	cbnz	r5, 800cb38 <_dtoa_r+0x40>
 800cb1a:	2010      	movs	r0, #16
 800cb1c:	f000 fddc 	bl	800d6d8 <malloc>
 800cb20:	4602      	mov	r2, r0
 800cb22:	6260      	str	r0, [r4, #36]	; 0x24
 800cb24:	b920      	cbnz	r0, 800cb30 <_dtoa_r+0x38>
 800cb26:	4bb2      	ldr	r3, [pc, #712]	; (800cdf0 <_dtoa_r+0x2f8>)
 800cb28:	21ea      	movs	r1, #234	; 0xea
 800cb2a:	48b2      	ldr	r0, [pc, #712]	; (800cdf4 <_dtoa_r+0x2fc>)
 800cb2c:	f001 fb8e 	bl	800e24c <__assert_func>
 800cb30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb34:	6005      	str	r5, [r0, #0]
 800cb36:	60c5      	str	r5, [r0, #12]
 800cb38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb3a:	6819      	ldr	r1, [r3, #0]
 800cb3c:	b151      	cbz	r1, 800cb54 <_dtoa_r+0x5c>
 800cb3e:	685a      	ldr	r2, [r3, #4]
 800cb40:	604a      	str	r2, [r1, #4]
 800cb42:	2301      	movs	r3, #1
 800cb44:	4093      	lsls	r3, r2
 800cb46:	608b      	str	r3, [r1, #8]
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f000 fe1b 	bl	800d784 <_Bfree>
 800cb4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb50:	2200      	movs	r2, #0
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	1e3b      	subs	r3, r7, #0
 800cb56:	bfb9      	ittee	lt
 800cb58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cb5c:	9303      	strlt	r3, [sp, #12]
 800cb5e:	2300      	movge	r3, #0
 800cb60:	f8c8 3000 	strge.w	r3, [r8]
 800cb64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cb68:	4ba3      	ldr	r3, [pc, #652]	; (800cdf8 <_dtoa_r+0x300>)
 800cb6a:	bfbc      	itt	lt
 800cb6c:	2201      	movlt	r2, #1
 800cb6e:	f8c8 2000 	strlt.w	r2, [r8]
 800cb72:	ea33 0309 	bics.w	r3, r3, r9
 800cb76:	d11b      	bne.n	800cbb0 <_dtoa_r+0xb8>
 800cb78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb7e:	6013      	str	r3, [r2, #0]
 800cb80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb84:	4333      	orrs	r3, r6
 800cb86:	f000 857a 	beq.w	800d67e <_dtoa_r+0xb86>
 800cb8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb8c:	b963      	cbnz	r3, 800cba8 <_dtoa_r+0xb0>
 800cb8e:	4b9b      	ldr	r3, [pc, #620]	; (800cdfc <_dtoa_r+0x304>)
 800cb90:	e024      	b.n	800cbdc <_dtoa_r+0xe4>
 800cb92:	4b9b      	ldr	r3, [pc, #620]	; (800ce00 <_dtoa_r+0x308>)
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	3308      	adds	r3, #8
 800cb98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb9a:	6013      	str	r3, [r2, #0]
 800cb9c:	9800      	ldr	r0, [sp, #0]
 800cb9e:	b015      	add	sp, #84	; 0x54
 800cba0:	ecbd 8b02 	vpop	{d8}
 800cba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba8:	4b94      	ldr	r3, [pc, #592]	; (800cdfc <_dtoa_r+0x304>)
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	3303      	adds	r3, #3
 800cbae:	e7f3      	b.n	800cb98 <_dtoa_r+0xa0>
 800cbb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	ec51 0b17 	vmov	r0, r1, d7
 800cbba:	2300      	movs	r3, #0
 800cbbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cbc0:	f7f3 ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbc4:	4680      	mov	r8, r0
 800cbc6:	b158      	cbz	r0, 800cbe0 <_dtoa_r+0xe8>
 800cbc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbca:	2301      	movs	r3, #1
 800cbcc:	6013      	str	r3, [r2, #0]
 800cbce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f000 8551 	beq.w	800d678 <_dtoa_r+0xb80>
 800cbd6:	488b      	ldr	r0, [pc, #556]	; (800ce04 <_dtoa_r+0x30c>)
 800cbd8:	6018      	str	r0, [r3, #0]
 800cbda:	1e43      	subs	r3, r0, #1
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	e7dd      	b.n	800cb9c <_dtoa_r+0xa4>
 800cbe0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cbe4:	aa12      	add	r2, sp, #72	; 0x48
 800cbe6:	a913      	add	r1, sp, #76	; 0x4c
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f001 f8ad 	bl	800dd48 <__d2b>
 800cbee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbf2:	4683      	mov	fp, r0
 800cbf4:	2d00      	cmp	r5, #0
 800cbf6:	d07c      	beq.n	800ccf2 <_dtoa_r+0x1fa>
 800cbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbfa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cbfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cc06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cc0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cc0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc12:	4b7d      	ldr	r3, [pc, #500]	; (800ce08 <_dtoa_r+0x310>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	4630      	mov	r0, r6
 800cc18:	4639      	mov	r1, r7
 800cc1a:	f7f3 fb35 	bl	8000288 <__aeabi_dsub>
 800cc1e:	a36e      	add	r3, pc, #440	; (adr r3, 800cdd8 <_dtoa_r+0x2e0>)
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	f7f3 fce8 	bl	80005f8 <__aeabi_dmul>
 800cc28:	a36d      	add	r3, pc, #436	; (adr r3, 800cde0 <_dtoa_r+0x2e8>)
 800cc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2e:	f7f3 fb2d 	bl	800028c <__adddf3>
 800cc32:	4606      	mov	r6, r0
 800cc34:	4628      	mov	r0, r5
 800cc36:	460f      	mov	r7, r1
 800cc38:	f7f3 fc74 	bl	8000524 <__aeabi_i2d>
 800cc3c:	a36a      	add	r3, pc, #424	; (adr r3, 800cde8 <_dtoa_r+0x2f0>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	f7f3 fcd9 	bl	80005f8 <__aeabi_dmul>
 800cc46:	4602      	mov	r2, r0
 800cc48:	460b      	mov	r3, r1
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	f7f3 fb1d 	bl	800028c <__adddf3>
 800cc52:	4606      	mov	r6, r0
 800cc54:	460f      	mov	r7, r1
 800cc56:	f7f3 ff7f 	bl	8000b58 <__aeabi_d2iz>
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	4682      	mov	sl, r0
 800cc5e:	2300      	movs	r3, #0
 800cc60:	4630      	mov	r0, r6
 800cc62:	4639      	mov	r1, r7
 800cc64:	f7f3 ff3a 	bl	8000adc <__aeabi_dcmplt>
 800cc68:	b148      	cbz	r0, 800cc7e <_dtoa_r+0x186>
 800cc6a:	4650      	mov	r0, sl
 800cc6c:	f7f3 fc5a 	bl	8000524 <__aeabi_i2d>
 800cc70:	4632      	mov	r2, r6
 800cc72:	463b      	mov	r3, r7
 800cc74:	f7f3 ff28 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc78:	b908      	cbnz	r0, 800cc7e <_dtoa_r+0x186>
 800cc7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc7e:	f1ba 0f16 	cmp.w	sl, #22
 800cc82:	d854      	bhi.n	800cd2e <_dtoa_r+0x236>
 800cc84:	4b61      	ldr	r3, [pc, #388]	; (800ce0c <_dtoa_r+0x314>)
 800cc86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc92:	f7f3 ff23 	bl	8000adc <__aeabi_dcmplt>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d04b      	beq.n	800cd32 <_dtoa_r+0x23a>
 800cc9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc9e:	2300      	movs	r3, #0
 800cca0:	930e      	str	r3, [sp, #56]	; 0x38
 800cca2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cca4:	1b5d      	subs	r5, r3, r5
 800cca6:	1e6b      	subs	r3, r5, #1
 800cca8:	9304      	str	r3, [sp, #16]
 800ccaa:	bf43      	ittte	mi
 800ccac:	2300      	movmi	r3, #0
 800ccae:	f1c5 0801 	rsbmi	r8, r5, #1
 800ccb2:	9304      	strmi	r3, [sp, #16]
 800ccb4:	f04f 0800 	movpl.w	r8, #0
 800ccb8:	f1ba 0f00 	cmp.w	sl, #0
 800ccbc:	db3b      	blt.n	800cd36 <_dtoa_r+0x23e>
 800ccbe:	9b04      	ldr	r3, [sp, #16]
 800ccc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ccc4:	4453      	add	r3, sl
 800ccc6:	9304      	str	r3, [sp, #16]
 800ccc8:	2300      	movs	r3, #0
 800ccca:	9306      	str	r3, [sp, #24]
 800cccc:	9b05      	ldr	r3, [sp, #20]
 800ccce:	2b09      	cmp	r3, #9
 800ccd0:	d869      	bhi.n	800cda6 <_dtoa_r+0x2ae>
 800ccd2:	2b05      	cmp	r3, #5
 800ccd4:	bfc4      	itt	gt
 800ccd6:	3b04      	subgt	r3, #4
 800ccd8:	9305      	strgt	r3, [sp, #20]
 800ccda:	9b05      	ldr	r3, [sp, #20]
 800ccdc:	f1a3 0302 	sub.w	r3, r3, #2
 800cce0:	bfcc      	ite	gt
 800cce2:	2500      	movgt	r5, #0
 800cce4:	2501      	movle	r5, #1
 800cce6:	2b03      	cmp	r3, #3
 800cce8:	d869      	bhi.n	800cdbe <_dtoa_r+0x2c6>
 800ccea:	e8df f003 	tbb	[pc, r3]
 800ccee:	4e2c      	.short	0x4e2c
 800ccf0:	5a4c      	.short	0x5a4c
 800ccf2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ccf6:	441d      	add	r5, r3
 800ccf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ccfc:	2b20      	cmp	r3, #32
 800ccfe:	bfc1      	itttt	gt
 800cd00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cd04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cd08:	fa09 f303 	lslgt.w	r3, r9, r3
 800cd0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cd10:	bfda      	itte	le
 800cd12:	f1c3 0320 	rsble	r3, r3, #32
 800cd16:	fa06 f003 	lslle.w	r0, r6, r3
 800cd1a:	4318      	orrgt	r0, r3
 800cd1c:	f7f3 fbf2 	bl	8000504 <__aeabi_ui2d>
 800cd20:	2301      	movs	r3, #1
 800cd22:	4606      	mov	r6, r0
 800cd24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cd28:	3d01      	subs	r5, #1
 800cd2a:	9310      	str	r3, [sp, #64]	; 0x40
 800cd2c:	e771      	b.n	800cc12 <_dtoa_r+0x11a>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e7b6      	b.n	800cca0 <_dtoa_r+0x1a8>
 800cd32:	900e      	str	r0, [sp, #56]	; 0x38
 800cd34:	e7b5      	b.n	800cca2 <_dtoa_r+0x1aa>
 800cd36:	f1ca 0300 	rsb	r3, sl, #0
 800cd3a:	9306      	str	r3, [sp, #24]
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	eba8 080a 	sub.w	r8, r8, sl
 800cd42:	930d      	str	r3, [sp, #52]	; 0x34
 800cd44:	e7c2      	b.n	800cccc <_dtoa_r+0x1d4>
 800cd46:	2300      	movs	r3, #0
 800cd48:	9308      	str	r3, [sp, #32]
 800cd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	dc39      	bgt.n	800cdc4 <_dtoa_r+0x2cc>
 800cd50:	f04f 0901 	mov.w	r9, #1
 800cd54:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd58:	464b      	mov	r3, r9
 800cd5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cd5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cd60:	2200      	movs	r2, #0
 800cd62:	6042      	str	r2, [r0, #4]
 800cd64:	2204      	movs	r2, #4
 800cd66:	f102 0614 	add.w	r6, r2, #20
 800cd6a:	429e      	cmp	r6, r3
 800cd6c:	6841      	ldr	r1, [r0, #4]
 800cd6e:	d92f      	bls.n	800cdd0 <_dtoa_r+0x2d8>
 800cd70:	4620      	mov	r0, r4
 800cd72:	f000 fcc7 	bl	800d704 <_Balloc>
 800cd76:	9000      	str	r0, [sp, #0]
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d14b      	bne.n	800ce14 <_dtoa_r+0x31c>
 800cd7c:	4b24      	ldr	r3, [pc, #144]	; (800ce10 <_dtoa_r+0x318>)
 800cd7e:	4602      	mov	r2, r0
 800cd80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd84:	e6d1      	b.n	800cb2a <_dtoa_r+0x32>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e7de      	b.n	800cd48 <_dtoa_r+0x250>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	9308      	str	r3, [sp, #32]
 800cd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd90:	eb0a 0903 	add.w	r9, sl, r3
 800cd94:	f109 0301 	add.w	r3, r9, #1
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	9301      	str	r3, [sp, #4]
 800cd9c:	bfb8      	it	lt
 800cd9e:	2301      	movlt	r3, #1
 800cda0:	e7dd      	b.n	800cd5e <_dtoa_r+0x266>
 800cda2:	2301      	movs	r3, #1
 800cda4:	e7f2      	b.n	800cd8c <_dtoa_r+0x294>
 800cda6:	2501      	movs	r5, #1
 800cda8:	2300      	movs	r3, #0
 800cdaa:	9305      	str	r3, [sp, #20]
 800cdac:	9508      	str	r5, [sp, #32]
 800cdae:	f04f 39ff 	mov.w	r9, #4294967295
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f8cd 9004 	str.w	r9, [sp, #4]
 800cdb8:	2312      	movs	r3, #18
 800cdba:	9209      	str	r2, [sp, #36]	; 0x24
 800cdbc:	e7cf      	b.n	800cd5e <_dtoa_r+0x266>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	9308      	str	r3, [sp, #32]
 800cdc2:	e7f4      	b.n	800cdae <_dtoa_r+0x2b6>
 800cdc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cdc8:	f8cd 9004 	str.w	r9, [sp, #4]
 800cdcc:	464b      	mov	r3, r9
 800cdce:	e7c6      	b.n	800cd5e <_dtoa_r+0x266>
 800cdd0:	3101      	adds	r1, #1
 800cdd2:	6041      	str	r1, [r0, #4]
 800cdd4:	0052      	lsls	r2, r2, #1
 800cdd6:	e7c6      	b.n	800cd66 <_dtoa_r+0x26e>
 800cdd8:	636f4361 	.word	0x636f4361
 800cddc:	3fd287a7 	.word	0x3fd287a7
 800cde0:	8b60c8b3 	.word	0x8b60c8b3
 800cde4:	3fc68a28 	.word	0x3fc68a28
 800cde8:	509f79fb 	.word	0x509f79fb
 800cdec:	3fd34413 	.word	0x3fd34413
 800cdf0:	0800ef45 	.word	0x0800ef45
 800cdf4:	0800ef5c 	.word	0x0800ef5c
 800cdf8:	7ff00000 	.word	0x7ff00000
 800cdfc:	0800ef41 	.word	0x0800ef41
 800ce00:	0800ef38 	.word	0x0800ef38
 800ce04:	0800ef15 	.word	0x0800ef15
 800ce08:	3ff80000 	.word	0x3ff80000
 800ce0c:	0800f058 	.word	0x0800f058
 800ce10:	0800efbb 	.word	0x0800efbb
 800ce14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce16:	9a00      	ldr	r2, [sp, #0]
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	9b01      	ldr	r3, [sp, #4]
 800ce1c:	2b0e      	cmp	r3, #14
 800ce1e:	f200 80ad 	bhi.w	800cf7c <_dtoa_r+0x484>
 800ce22:	2d00      	cmp	r5, #0
 800ce24:	f000 80aa 	beq.w	800cf7c <_dtoa_r+0x484>
 800ce28:	f1ba 0f00 	cmp.w	sl, #0
 800ce2c:	dd36      	ble.n	800ce9c <_dtoa_r+0x3a4>
 800ce2e:	4ac3      	ldr	r2, [pc, #780]	; (800d13c <_dtoa_r+0x644>)
 800ce30:	f00a 030f 	and.w	r3, sl, #15
 800ce34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ce38:	ed93 7b00 	vldr	d7, [r3]
 800ce3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ce40:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ce44:	eeb0 8a47 	vmov.f32	s16, s14
 800ce48:	eef0 8a67 	vmov.f32	s17, s15
 800ce4c:	d016      	beq.n	800ce7c <_dtoa_r+0x384>
 800ce4e:	4bbc      	ldr	r3, [pc, #752]	; (800d140 <_dtoa_r+0x648>)
 800ce50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce58:	f7f3 fcf8 	bl	800084c <__aeabi_ddiv>
 800ce5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce60:	f007 070f 	and.w	r7, r7, #15
 800ce64:	2503      	movs	r5, #3
 800ce66:	4eb6      	ldr	r6, [pc, #728]	; (800d140 <_dtoa_r+0x648>)
 800ce68:	b957      	cbnz	r7, 800ce80 <_dtoa_r+0x388>
 800ce6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce6e:	ec53 2b18 	vmov	r2, r3, d8
 800ce72:	f7f3 fceb 	bl	800084c <__aeabi_ddiv>
 800ce76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce7a:	e029      	b.n	800ced0 <_dtoa_r+0x3d8>
 800ce7c:	2502      	movs	r5, #2
 800ce7e:	e7f2      	b.n	800ce66 <_dtoa_r+0x36e>
 800ce80:	07f9      	lsls	r1, r7, #31
 800ce82:	d508      	bpl.n	800ce96 <_dtoa_r+0x39e>
 800ce84:	ec51 0b18 	vmov	r0, r1, d8
 800ce88:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce8c:	f7f3 fbb4 	bl	80005f8 <__aeabi_dmul>
 800ce90:	ec41 0b18 	vmov	d8, r0, r1
 800ce94:	3501      	adds	r5, #1
 800ce96:	107f      	asrs	r7, r7, #1
 800ce98:	3608      	adds	r6, #8
 800ce9a:	e7e5      	b.n	800ce68 <_dtoa_r+0x370>
 800ce9c:	f000 80a6 	beq.w	800cfec <_dtoa_r+0x4f4>
 800cea0:	f1ca 0600 	rsb	r6, sl, #0
 800cea4:	4ba5      	ldr	r3, [pc, #660]	; (800d13c <_dtoa_r+0x644>)
 800cea6:	4fa6      	ldr	r7, [pc, #664]	; (800d140 <_dtoa_r+0x648>)
 800cea8:	f006 020f 	and.w	r2, r6, #15
 800ceac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ceb8:	f7f3 fb9e 	bl	80005f8 <__aeabi_dmul>
 800cebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cec0:	1136      	asrs	r6, r6, #4
 800cec2:	2300      	movs	r3, #0
 800cec4:	2502      	movs	r5, #2
 800cec6:	2e00      	cmp	r6, #0
 800cec8:	f040 8085 	bne.w	800cfd6 <_dtoa_r+0x4de>
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1d2      	bne.n	800ce76 <_dtoa_r+0x37e>
 800ced0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f000 808c 	beq.w	800cff0 <_dtoa_r+0x4f8>
 800ced8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cedc:	4b99      	ldr	r3, [pc, #612]	; (800d144 <_dtoa_r+0x64c>)
 800cede:	2200      	movs	r2, #0
 800cee0:	4630      	mov	r0, r6
 800cee2:	4639      	mov	r1, r7
 800cee4:	f7f3 fdfa 	bl	8000adc <__aeabi_dcmplt>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	f000 8081 	beq.w	800cff0 <_dtoa_r+0x4f8>
 800ceee:	9b01      	ldr	r3, [sp, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d07d      	beq.n	800cff0 <_dtoa_r+0x4f8>
 800cef4:	f1b9 0f00 	cmp.w	r9, #0
 800cef8:	dd3c      	ble.n	800cf74 <_dtoa_r+0x47c>
 800cefa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cefe:	9307      	str	r3, [sp, #28]
 800cf00:	2200      	movs	r2, #0
 800cf02:	4b91      	ldr	r3, [pc, #580]	; (800d148 <_dtoa_r+0x650>)
 800cf04:	4630      	mov	r0, r6
 800cf06:	4639      	mov	r1, r7
 800cf08:	f7f3 fb76 	bl	80005f8 <__aeabi_dmul>
 800cf0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf10:	3501      	adds	r5, #1
 800cf12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cf16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	f7f3 fb02 	bl	8000524 <__aeabi_i2d>
 800cf20:	4632      	mov	r2, r6
 800cf22:	463b      	mov	r3, r7
 800cf24:	f7f3 fb68 	bl	80005f8 <__aeabi_dmul>
 800cf28:	4b88      	ldr	r3, [pc, #544]	; (800d14c <_dtoa_r+0x654>)
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f7f3 f9ae 	bl	800028c <__adddf3>
 800cf30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cf34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf38:	9303      	str	r3, [sp, #12]
 800cf3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d15c      	bne.n	800cffa <_dtoa_r+0x502>
 800cf40:	4b83      	ldr	r3, [pc, #524]	; (800d150 <_dtoa_r+0x658>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	4630      	mov	r0, r6
 800cf46:	4639      	mov	r1, r7
 800cf48:	f7f3 f99e 	bl	8000288 <__aeabi_dsub>
 800cf4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf50:	4606      	mov	r6, r0
 800cf52:	460f      	mov	r7, r1
 800cf54:	f7f3 fde0 	bl	8000b18 <__aeabi_dcmpgt>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	f040 8296 	bne.w	800d48a <_dtoa_r+0x992>
 800cf5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cf62:	4630      	mov	r0, r6
 800cf64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf68:	4639      	mov	r1, r7
 800cf6a:	f7f3 fdb7 	bl	8000adc <__aeabi_dcmplt>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	f040 8288 	bne.w	800d484 <_dtoa_r+0x98c>
 800cf74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f2c0 8158 	blt.w	800d234 <_dtoa_r+0x73c>
 800cf84:	f1ba 0f0e 	cmp.w	sl, #14
 800cf88:	f300 8154 	bgt.w	800d234 <_dtoa_r+0x73c>
 800cf8c:	4b6b      	ldr	r3, [pc, #428]	; (800d13c <_dtoa_r+0x644>)
 800cf8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf92:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f280 80e3 	bge.w	800d164 <_dtoa_r+0x66c>
 800cf9e:	9b01      	ldr	r3, [sp, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f300 80df 	bgt.w	800d164 <_dtoa_r+0x66c>
 800cfa6:	f040 826d 	bne.w	800d484 <_dtoa_r+0x98c>
 800cfaa:	4b69      	ldr	r3, [pc, #420]	; (800d150 <_dtoa_r+0x658>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	4640      	mov	r0, r8
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	f7f3 fb21 	bl	80005f8 <__aeabi_dmul>
 800cfb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfba:	f7f3 fda3 	bl	8000b04 <__aeabi_dcmpge>
 800cfbe:	9e01      	ldr	r6, [sp, #4]
 800cfc0:	4637      	mov	r7, r6
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	f040 8243 	bne.w	800d44e <_dtoa_r+0x956>
 800cfc8:	9d00      	ldr	r5, [sp, #0]
 800cfca:	2331      	movs	r3, #49	; 0x31
 800cfcc:	f805 3b01 	strb.w	r3, [r5], #1
 800cfd0:	f10a 0a01 	add.w	sl, sl, #1
 800cfd4:	e23f      	b.n	800d456 <_dtoa_r+0x95e>
 800cfd6:	07f2      	lsls	r2, r6, #31
 800cfd8:	d505      	bpl.n	800cfe6 <_dtoa_r+0x4ee>
 800cfda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfde:	f7f3 fb0b 	bl	80005f8 <__aeabi_dmul>
 800cfe2:	3501      	adds	r5, #1
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	1076      	asrs	r6, r6, #1
 800cfe8:	3708      	adds	r7, #8
 800cfea:	e76c      	b.n	800cec6 <_dtoa_r+0x3ce>
 800cfec:	2502      	movs	r5, #2
 800cfee:	e76f      	b.n	800ced0 <_dtoa_r+0x3d8>
 800cff0:	9b01      	ldr	r3, [sp, #4]
 800cff2:	f8cd a01c 	str.w	sl, [sp, #28]
 800cff6:	930c      	str	r3, [sp, #48]	; 0x30
 800cff8:	e78d      	b.n	800cf16 <_dtoa_r+0x41e>
 800cffa:	9900      	ldr	r1, [sp, #0]
 800cffc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d000:	4b4e      	ldr	r3, [pc, #312]	; (800d13c <_dtoa_r+0x644>)
 800d002:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d006:	4401      	add	r1, r0
 800d008:	9102      	str	r1, [sp, #8]
 800d00a:	9908      	ldr	r1, [sp, #32]
 800d00c:	eeb0 8a47 	vmov.f32	s16, s14
 800d010:	eef0 8a67 	vmov.f32	s17, s15
 800d014:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d018:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d01c:	2900      	cmp	r1, #0
 800d01e:	d045      	beq.n	800d0ac <_dtoa_r+0x5b4>
 800d020:	494c      	ldr	r1, [pc, #304]	; (800d154 <_dtoa_r+0x65c>)
 800d022:	2000      	movs	r0, #0
 800d024:	f7f3 fc12 	bl	800084c <__aeabi_ddiv>
 800d028:	ec53 2b18 	vmov	r2, r3, d8
 800d02c:	f7f3 f92c 	bl	8000288 <__aeabi_dsub>
 800d030:	9d00      	ldr	r5, [sp, #0]
 800d032:	ec41 0b18 	vmov	d8, r0, r1
 800d036:	4639      	mov	r1, r7
 800d038:	4630      	mov	r0, r6
 800d03a:	f7f3 fd8d 	bl	8000b58 <__aeabi_d2iz>
 800d03e:	900c      	str	r0, [sp, #48]	; 0x30
 800d040:	f7f3 fa70 	bl	8000524 <__aeabi_i2d>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4630      	mov	r0, r6
 800d04a:	4639      	mov	r1, r7
 800d04c:	f7f3 f91c 	bl	8000288 <__aeabi_dsub>
 800d050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d052:	3330      	adds	r3, #48	; 0x30
 800d054:	f805 3b01 	strb.w	r3, [r5], #1
 800d058:	ec53 2b18 	vmov	r2, r3, d8
 800d05c:	4606      	mov	r6, r0
 800d05e:	460f      	mov	r7, r1
 800d060:	f7f3 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800d064:	2800      	cmp	r0, #0
 800d066:	d165      	bne.n	800d134 <_dtoa_r+0x63c>
 800d068:	4632      	mov	r2, r6
 800d06a:	463b      	mov	r3, r7
 800d06c:	4935      	ldr	r1, [pc, #212]	; (800d144 <_dtoa_r+0x64c>)
 800d06e:	2000      	movs	r0, #0
 800d070:	f7f3 f90a 	bl	8000288 <__aeabi_dsub>
 800d074:	ec53 2b18 	vmov	r2, r3, d8
 800d078:	f7f3 fd30 	bl	8000adc <__aeabi_dcmplt>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	f040 80b9 	bne.w	800d1f4 <_dtoa_r+0x6fc>
 800d082:	9b02      	ldr	r3, [sp, #8]
 800d084:	429d      	cmp	r5, r3
 800d086:	f43f af75 	beq.w	800cf74 <_dtoa_r+0x47c>
 800d08a:	4b2f      	ldr	r3, [pc, #188]	; (800d148 <_dtoa_r+0x650>)
 800d08c:	ec51 0b18 	vmov	r0, r1, d8
 800d090:	2200      	movs	r2, #0
 800d092:	f7f3 fab1 	bl	80005f8 <__aeabi_dmul>
 800d096:	4b2c      	ldr	r3, [pc, #176]	; (800d148 <_dtoa_r+0x650>)
 800d098:	ec41 0b18 	vmov	d8, r0, r1
 800d09c:	2200      	movs	r2, #0
 800d09e:	4630      	mov	r0, r6
 800d0a0:	4639      	mov	r1, r7
 800d0a2:	f7f3 faa9 	bl	80005f8 <__aeabi_dmul>
 800d0a6:	4606      	mov	r6, r0
 800d0a8:	460f      	mov	r7, r1
 800d0aa:	e7c4      	b.n	800d036 <_dtoa_r+0x53e>
 800d0ac:	ec51 0b17 	vmov	r0, r1, d7
 800d0b0:	f7f3 faa2 	bl	80005f8 <__aeabi_dmul>
 800d0b4:	9b02      	ldr	r3, [sp, #8]
 800d0b6:	9d00      	ldr	r5, [sp, #0]
 800d0b8:	930c      	str	r3, [sp, #48]	; 0x30
 800d0ba:	ec41 0b18 	vmov	d8, r0, r1
 800d0be:	4639      	mov	r1, r7
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f7f3 fd49 	bl	8000b58 <__aeabi_d2iz>
 800d0c6:	9011      	str	r0, [sp, #68]	; 0x44
 800d0c8:	f7f3 fa2c 	bl	8000524 <__aeabi_i2d>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	f7f3 f8d8 	bl	8000288 <__aeabi_dsub>
 800d0d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0da:	3330      	adds	r3, #48	; 0x30
 800d0dc:	f805 3b01 	strb.w	r3, [r5], #1
 800d0e0:	9b02      	ldr	r3, [sp, #8]
 800d0e2:	429d      	cmp	r5, r3
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	460f      	mov	r7, r1
 800d0e8:	f04f 0200 	mov.w	r2, #0
 800d0ec:	d134      	bne.n	800d158 <_dtoa_r+0x660>
 800d0ee:	4b19      	ldr	r3, [pc, #100]	; (800d154 <_dtoa_r+0x65c>)
 800d0f0:	ec51 0b18 	vmov	r0, r1, d8
 800d0f4:	f7f3 f8ca 	bl	800028c <__adddf3>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	4639      	mov	r1, r7
 800d100:	f7f3 fd0a 	bl	8000b18 <__aeabi_dcmpgt>
 800d104:	2800      	cmp	r0, #0
 800d106:	d175      	bne.n	800d1f4 <_dtoa_r+0x6fc>
 800d108:	ec53 2b18 	vmov	r2, r3, d8
 800d10c:	4911      	ldr	r1, [pc, #68]	; (800d154 <_dtoa_r+0x65c>)
 800d10e:	2000      	movs	r0, #0
 800d110:	f7f3 f8ba 	bl	8000288 <__aeabi_dsub>
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	4630      	mov	r0, r6
 800d11a:	4639      	mov	r1, r7
 800d11c:	f7f3 fcde 	bl	8000adc <__aeabi_dcmplt>
 800d120:	2800      	cmp	r0, #0
 800d122:	f43f af27 	beq.w	800cf74 <_dtoa_r+0x47c>
 800d126:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d128:	1e6b      	subs	r3, r5, #1
 800d12a:	930c      	str	r3, [sp, #48]	; 0x30
 800d12c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d130:	2b30      	cmp	r3, #48	; 0x30
 800d132:	d0f8      	beq.n	800d126 <_dtoa_r+0x62e>
 800d134:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d138:	e04a      	b.n	800d1d0 <_dtoa_r+0x6d8>
 800d13a:	bf00      	nop
 800d13c:	0800f058 	.word	0x0800f058
 800d140:	0800f030 	.word	0x0800f030
 800d144:	3ff00000 	.word	0x3ff00000
 800d148:	40240000 	.word	0x40240000
 800d14c:	401c0000 	.word	0x401c0000
 800d150:	40140000 	.word	0x40140000
 800d154:	3fe00000 	.word	0x3fe00000
 800d158:	4baf      	ldr	r3, [pc, #700]	; (800d418 <_dtoa_r+0x920>)
 800d15a:	f7f3 fa4d 	bl	80005f8 <__aeabi_dmul>
 800d15e:	4606      	mov	r6, r0
 800d160:	460f      	mov	r7, r1
 800d162:	e7ac      	b.n	800d0be <_dtoa_r+0x5c6>
 800d164:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d168:	9d00      	ldr	r5, [sp, #0]
 800d16a:	4642      	mov	r2, r8
 800d16c:	464b      	mov	r3, r9
 800d16e:	4630      	mov	r0, r6
 800d170:	4639      	mov	r1, r7
 800d172:	f7f3 fb6b 	bl	800084c <__aeabi_ddiv>
 800d176:	f7f3 fcef 	bl	8000b58 <__aeabi_d2iz>
 800d17a:	9002      	str	r0, [sp, #8]
 800d17c:	f7f3 f9d2 	bl	8000524 <__aeabi_i2d>
 800d180:	4642      	mov	r2, r8
 800d182:	464b      	mov	r3, r9
 800d184:	f7f3 fa38 	bl	80005f8 <__aeabi_dmul>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4630      	mov	r0, r6
 800d18e:	4639      	mov	r1, r7
 800d190:	f7f3 f87a 	bl	8000288 <__aeabi_dsub>
 800d194:	9e02      	ldr	r6, [sp, #8]
 800d196:	9f01      	ldr	r7, [sp, #4]
 800d198:	3630      	adds	r6, #48	; 0x30
 800d19a:	f805 6b01 	strb.w	r6, [r5], #1
 800d19e:	9e00      	ldr	r6, [sp, #0]
 800d1a0:	1bae      	subs	r6, r5, r6
 800d1a2:	42b7      	cmp	r7, r6
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	d137      	bne.n	800d21a <_dtoa_r+0x722>
 800d1aa:	f7f3 f86f 	bl	800028c <__adddf3>
 800d1ae:	4642      	mov	r2, r8
 800d1b0:	464b      	mov	r3, r9
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	460f      	mov	r7, r1
 800d1b6:	f7f3 fcaf 	bl	8000b18 <__aeabi_dcmpgt>
 800d1ba:	b9c8      	cbnz	r0, 800d1f0 <_dtoa_r+0x6f8>
 800d1bc:	4642      	mov	r2, r8
 800d1be:	464b      	mov	r3, r9
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	4639      	mov	r1, r7
 800d1c4:	f7f3 fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1c8:	b110      	cbz	r0, 800d1d0 <_dtoa_r+0x6d8>
 800d1ca:	9b02      	ldr	r3, [sp, #8]
 800d1cc:	07d9      	lsls	r1, r3, #31
 800d1ce:	d40f      	bmi.n	800d1f0 <_dtoa_r+0x6f8>
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	4659      	mov	r1, fp
 800d1d4:	f000 fad6 	bl	800d784 <_Bfree>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	702b      	strb	r3, [r5, #0]
 800d1dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1de:	f10a 0001 	add.w	r0, sl, #1
 800d1e2:	6018      	str	r0, [r3, #0]
 800d1e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f43f acd8 	beq.w	800cb9c <_dtoa_r+0xa4>
 800d1ec:	601d      	str	r5, [r3, #0]
 800d1ee:	e4d5      	b.n	800cb9c <_dtoa_r+0xa4>
 800d1f0:	f8cd a01c 	str.w	sl, [sp, #28]
 800d1f4:	462b      	mov	r3, r5
 800d1f6:	461d      	mov	r5, r3
 800d1f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1fc:	2a39      	cmp	r2, #57	; 0x39
 800d1fe:	d108      	bne.n	800d212 <_dtoa_r+0x71a>
 800d200:	9a00      	ldr	r2, [sp, #0]
 800d202:	429a      	cmp	r2, r3
 800d204:	d1f7      	bne.n	800d1f6 <_dtoa_r+0x6fe>
 800d206:	9a07      	ldr	r2, [sp, #28]
 800d208:	9900      	ldr	r1, [sp, #0]
 800d20a:	3201      	adds	r2, #1
 800d20c:	9207      	str	r2, [sp, #28]
 800d20e:	2230      	movs	r2, #48	; 0x30
 800d210:	700a      	strb	r2, [r1, #0]
 800d212:	781a      	ldrb	r2, [r3, #0]
 800d214:	3201      	adds	r2, #1
 800d216:	701a      	strb	r2, [r3, #0]
 800d218:	e78c      	b.n	800d134 <_dtoa_r+0x63c>
 800d21a:	4b7f      	ldr	r3, [pc, #508]	; (800d418 <_dtoa_r+0x920>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	f7f3 f9eb 	bl	80005f8 <__aeabi_dmul>
 800d222:	2200      	movs	r2, #0
 800d224:	2300      	movs	r3, #0
 800d226:	4606      	mov	r6, r0
 800d228:	460f      	mov	r7, r1
 800d22a:	f7f3 fc4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d22e:	2800      	cmp	r0, #0
 800d230:	d09b      	beq.n	800d16a <_dtoa_r+0x672>
 800d232:	e7cd      	b.n	800d1d0 <_dtoa_r+0x6d8>
 800d234:	9a08      	ldr	r2, [sp, #32]
 800d236:	2a00      	cmp	r2, #0
 800d238:	f000 80c4 	beq.w	800d3c4 <_dtoa_r+0x8cc>
 800d23c:	9a05      	ldr	r2, [sp, #20]
 800d23e:	2a01      	cmp	r2, #1
 800d240:	f300 80a8 	bgt.w	800d394 <_dtoa_r+0x89c>
 800d244:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d246:	2a00      	cmp	r2, #0
 800d248:	f000 80a0 	beq.w	800d38c <_dtoa_r+0x894>
 800d24c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d250:	9e06      	ldr	r6, [sp, #24]
 800d252:	4645      	mov	r5, r8
 800d254:	9a04      	ldr	r2, [sp, #16]
 800d256:	2101      	movs	r1, #1
 800d258:	441a      	add	r2, r3
 800d25a:	4620      	mov	r0, r4
 800d25c:	4498      	add	r8, r3
 800d25e:	9204      	str	r2, [sp, #16]
 800d260:	f000 fb4c 	bl	800d8fc <__i2b>
 800d264:	4607      	mov	r7, r0
 800d266:	2d00      	cmp	r5, #0
 800d268:	dd0b      	ble.n	800d282 <_dtoa_r+0x78a>
 800d26a:	9b04      	ldr	r3, [sp, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	dd08      	ble.n	800d282 <_dtoa_r+0x78a>
 800d270:	42ab      	cmp	r3, r5
 800d272:	9a04      	ldr	r2, [sp, #16]
 800d274:	bfa8      	it	ge
 800d276:	462b      	movge	r3, r5
 800d278:	eba8 0803 	sub.w	r8, r8, r3
 800d27c:	1aed      	subs	r5, r5, r3
 800d27e:	1ad3      	subs	r3, r2, r3
 800d280:	9304      	str	r3, [sp, #16]
 800d282:	9b06      	ldr	r3, [sp, #24]
 800d284:	b1fb      	cbz	r3, 800d2c6 <_dtoa_r+0x7ce>
 800d286:	9b08      	ldr	r3, [sp, #32]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f000 809f 	beq.w	800d3cc <_dtoa_r+0x8d4>
 800d28e:	2e00      	cmp	r6, #0
 800d290:	dd11      	ble.n	800d2b6 <_dtoa_r+0x7be>
 800d292:	4639      	mov	r1, r7
 800d294:	4632      	mov	r2, r6
 800d296:	4620      	mov	r0, r4
 800d298:	f000 fbec 	bl	800da74 <__pow5mult>
 800d29c:	465a      	mov	r2, fp
 800d29e:	4601      	mov	r1, r0
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f000 fb40 	bl	800d928 <__multiply>
 800d2a8:	4659      	mov	r1, fp
 800d2aa:	9007      	str	r0, [sp, #28]
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	f000 fa69 	bl	800d784 <_Bfree>
 800d2b2:	9b07      	ldr	r3, [sp, #28]
 800d2b4:	469b      	mov	fp, r3
 800d2b6:	9b06      	ldr	r3, [sp, #24]
 800d2b8:	1b9a      	subs	r2, r3, r6
 800d2ba:	d004      	beq.n	800d2c6 <_dtoa_r+0x7ce>
 800d2bc:	4659      	mov	r1, fp
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 fbd8 	bl	800da74 <__pow5mult>
 800d2c4:	4683      	mov	fp, r0
 800d2c6:	2101      	movs	r1, #1
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 fb17 	bl	800d8fc <__i2b>
 800d2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	dd7c      	ble.n	800d3d0 <_dtoa_r+0x8d8>
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4601      	mov	r1, r0
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f000 fbca 	bl	800da74 <__pow5mult>
 800d2e0:	9b05      	ldr	r3, [sp, #20]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	dd76      	ble.n	800d3d6 <_dtoa_r+0x8de>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	9306      	str	r3, [sp, #24]
 800d2ec:	6933      	ldr	r3, [r6, #16]
 800d2ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d2f2:	6918      	ldr	r0, [r3, #16]
 800d2f4:	f000 fab2 	bl	800d85c <__hi0bits>
 800d2f8:	f1c0 0020 	rsb	r0, r0, #32
 800d2fc:	9b04      	ldr	r3, [sp, #16]
 800d2fe:	4418      	add	r0, r3
 800d300:	f010 001f 	ands.w	r0, r0, #31
 800d304:	f000 8086 	beq.w	800d414 <_dtoa_r+0x91c>
 800d308:	f1c0 0320 	rsb	r3, r0, #32
 800d30c:	2b04      	cmp	r3, #4
 800d30e:	dd7f      	ble.n	800d410 <_dtoa_r+0x918>
 800d310:	f1c0 001c 	rsb	r0, r0, #28
 800d314:	9b04      	ldr	r3, [sp, #16]
 800d316:	4403      	add	r3, r0
 800d318:	4480      	add	r8, r0
 800d31a:	4405      	add	r5, r0
 800d31c:	9304      	str	r3, [sp, #16]
 800d31e:	f1b8 0f00 	cmp.w	r8, #0
 800d322:	dd05      	ble.n	800d330 <_dtoa_r+0x838>
 800d324:	4659      	mov	r1, fp
 800d326:	4642      	mov	r2, r8
 800d328:	4620      	mov	r0, r4
 800d32a:	f000 fbfd 	bl	800db28 <__lshift>
 800d32e:	4683      	mov	fp, r0
 800d330:	9b04      	ldr	r3, [sp, #16]
 800d332:	2b00      	cmp	r3, #0
 800d334:	dd05      	ble.n	800d342 <_dtoa_r+0x84a>
 800d336:	4631      	mov	r1, r6
 800d338:	461a      	mov	r2, r3
 800d33a:	4620      	mov	r0, r4
 800d33c:	f000 fbf4 	bl	800db28 <__lshift>
 800d340:	4606      	mov	r6, r0
 800d342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d344:	2b00      	cmp	r3, #0
 800d346:	d069      	beq.n	800d41c <_dtoa_r+0x924>
 800d348:	4631      	mov	r1, r6
 800d34a:	4658      	mov	r0, fp
 800d34c:	f000 fc58 	bl	800dc00 <__mcmp>
 800d350:	2800      	cmp	r0, #0
 800d352:	da63      	bge.n	800d41c <_dtoa_r+0x924>
 800d354:	2300      	movs	r3, #0
 800d356:	4659      	mov	r1, fp
 800d358:	220a      	movs	r2, #10
 800d35a:	4620      	mov	r0, r4
 800d35c:	f000 fa34 	bl	800d7c8 <__multadd>
 800d360:	9b08      	ldr	r3, [sp, #32]
 800d362:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d366:	4683      	mov	fp, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 818f 	beq.w	800d68c <_dtoa_r+0xb94>
 800d36e:	4639      	mov	r1, r7
 800d370:	2300      	movs	r3, #0
 800d372:	220a      	movs	r2, #10
 800d374:	4620      	mov	r0, r4
 800d376:	f000 fa27 	bl	800d7c8 <__multadd>
 800d37a:	f1b9 0f00 	cmp.w	r9, #0
 800d37e:	4607      	mov	r7, r0
 800d380:	f300 808e 	bgt.w	800d4a0 <_dtoa_r+0x9a8>
 800d384:	9b05      	ldr	r3, [sp, #20]
 800d386:	2b02      	cmp	r3, #2
 800d388:	dc50      	bgt.n	800d42c <_dtoa_r+0x934>
 800d38a:	e089      	b.n	800d4a0 <_dtoa_r+0x9a8>
 800d38c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d38e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d392:	e75d      	b.n	800d250 <_dtoa_r+0x758>
 800d394:	9b01      	ldr	r3, [sp, #4]
 800d396:	1e5e      	subs	r6, r3, #1
 800d398:	9b06      	ldr	r3, [sp, #24]
 800d39a:	42b3      	cmp	r3, r6
 800d39c:	bfbf      	itttt	lt
 800d39e:	9b06      	ldrlt	r3, [sp, #24]
 800d3a0:	9606      	strlt	r6, [sp, #24]
 800d3a2:	1af2      	sublt	r2, r6, r3
 800d3a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d3a6:	bfb6      	itet	lt
 800d3a8:	189b      	addlt	r3, r3, r2
 800d3aa:	1b9e      	subge	r6, r3, r6
 800d3ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d3ae:	9b01      	ldr	r3, [sp, #4]
 800d3b0:	bfb8      	it	lt
 800d3b2:	2600      	movlt	r6, #0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	bfb5      	itete	lt
 800d3b8:	eba8 0503 	sublt.w	r5, r8, r3
 800d3bc:	9b01      	ldrge	r3, [sp, #4]
 800d3be:	2300      	movlt	r3, #0
 800d3c0:	4645      	movge	r5, r8
 800d3c2:	e747      	b.n	800d254 <_dtoa_r+0x75c>
 800d3c4:	9e06      	ldr	r6, [sp, #24]
 800d3c6:	9f08      	ldr	r7, [sp, #32]
 800d3c8:	4645      	mov	r5, r8
 800d3ca:	e74c      	b.n	800d266 <_dtoa_r+0x76e>
 800d3cc:	9a06      	ldr	r2, [sp, #24]
 800d3ce:	e775      	b.n	800d2bc <_dtoa_r+0x7c4>
 800d3d0:	9b05      	ldr	r3, [sp, #20]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	dc18      	bgt.n	800d408 <_dtoa_r+0x910>
 800d3d6:	9b02      	ldr	r3, [sp, #8]
 800d3d8:	b9b3      	cbnz	r3, 800d408 <_dtoa_r+0x910>
 800d3da:	9b03      	ldr	r3, [sp, #12]
 800d3dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3e0:	b9a3      	cbnz	r3, 800d40c <_dtoa_r+0x914>
 800d3e2:	9b03      	ldr	r3, [sp, #12]
 800d3e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3e8:	0d1b      	lsrs	r3, r3, #20
 800d3ea:	051b      	lsls	r3, r3, #20
 800d3ec:	b12b      	cbz	r3, 800d3fa <_dtoa_r+0x902>
 800d3ee:	9b04      	ldr	r3, [sp, #16]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	9304      	str	r3, [sp, #16]
 800d3f4:	f108 0801 	add.w	r8, r8, #1
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	9306      	str	r3, [sp, #24]
 800d3fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f47f af74 	bne.w	800d2ec <_dtoa_r+0x7f4>
 800d404:	2001      	movs	r0, #1
 800d406:	e779      	b.n	800d2fc <_dtoa_r+0x804>
 800d408:	2300      	movs	r3, #0
 800d40a:	e7f6      	b.n	800d3fa <_dtoa_r+0x902>
 800d40c:	9b02      	ldr	r3, [sp, #8]
 800d40e:	e7f4      	b.n	800d3fa <_dtoa_r+0x902>
 800d410:	d085      	beq.n	800d31e <_dtoa_r+0x826>
 800d412:	4618      	mov	r0, r3
 800d414:	301c      	adds	r0, #28
 800d416:	e77d      	b.n	800d314 <_dtoa_r+0x81c>
 800d418:	40240000 	.word	0x40240000
 800d41c:	9b01      	ldr	r3, [sp, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	dc38      	bgt.n	800d494 <_dtoa_r+0x99c>
 800d422:	9b05      	ldr	r3, [sp, #20]
 800d424:	2b02      	cmp	r3, #2
 800d426:	dd35      	ble.n	800d494 <_dtoa_r+0x99c>
 800d428:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d42c:	f1b9 0f00 	cmp.w	r9, #0
 800d430:	d10d      	bne.n	800d44e <_dtoa_r+0x956>
 800d432:	4631      	mov	r1, r6
 800d434:	464b      	mov	r3, r9
 800d436:	2205      	movs	r2, #5
 800d438:	4620      	mov	r0, r4
 800d43a:	f000 f9c5 	bl	800d7c8 <__multadd>
 800d43e:	4601      	mov	r1, r0
 800d440:	4606      	mov	r6, r0
 800d442:	4658      	mov	r0, fp
 800d444:	f000 fbdc 	bl	800dc00 <__mcmp>
 800d448:	2800      	cmp	r0, #0
 800d44a:	f73f adbd 	bgt.w	800cfc8 <_dtoa_r+0x4d0>
 800d44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d450:	9d00      	ldr	r5, [sp, #0]
 800d452:	ea6f 0a03 	mvn.w	sl, r3
 800d456:	f04f 0800 	mov.w	r8, #0
 800d45a:	4631      	mov	r1, r6
 800d45c:	4620      	mov	r0, r4
 800d45e:	f000 f991 	bl	800d784 <_Bfree>
 800d462:	2f00      	cmp	r7, #0
 800d464:	f43f aeb4 	beq.w	800d1d0 <_dtoa_r+0x6d8>
 800d468:	f1b8 0f00 	cmp.w	r8, #0
 800d46c:	d005      	beq.n	800d47a <_dtoa_r+0x982>
 800d46e:	45b8      	cmp	r8, r7
 800d470:	d003      	beq.n	800d47a <_dtoa_r+0x982>
 800d472:	4641      	mov	r1, r8
 800d474:	4620      	mov	r0, r4
 800d476:	f000 f985 	bl	800d784 <_Bfree>
 800d47a:	4639      	mov	r1, r7
 800d47c:	4620      	mov	r0, r4
 800d47e:	f000 f981 	bl	800d784 <_Bfree>
 800d482:	e6a5      	b.n	800d1d0 <_dtoa_r+0x6d8>
 800d484:	2600      	movs	r6, #0
 800d486:	4637      	mov	r7, r6
 800d488:	e7e1      	b.n	800d44e <_dtoa_r+0x956>
 800d48a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d48c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d490:	4637      	mov	r7, r6
 800d492:	e599      	b.n	800cfc8 <_dtoa_r+0x4d0>
 800d494:	9b08      	ldr	r3, [sp, #32]
 800d496:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 80fd 	beq.w	800d69a <_dtoa_r+0xba2>
 800d4a0:	2d00      	cmp	r5, #0
 800d4a2:	dd05      	ble.n	800d4b0 <_dtoa_r+0x9b8>
 800d4a4:	4639      	mov	r1, r7
 800d4a6:	462a      	mov	r2, r5
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f000 fb3d 	bl	800db28 <__lshift>
 800d4ae:	4607      	mov	r7, r0
 800d4b0:	9b06      	ldr	r3, [sp, #24]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d05c      	beq.n	800d570 <_dtoa_r+0xa78>
 800d4b6:	6879      	ldr	r1, [r7, #4]
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f000 f923 	bl	800d704 <_Balloc>
 800d4be:	4605      	mov	r5, r0
 800d4c0:	b928      	cbnz	r0, 800d4ce <_dtoa_r+0x9d6>
 800d4c2:	4b80      	ldr	r3, [pc, #512]	; (800d6c4 <_dtoa_r+0xbcc>)
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d4ca:	f7ff bb2e 	b.w	800cb2a <_dtoa_r+0x32>
 800d4ce:	693a      	ldr	r2, [r7, #16]
 800d4d0:	3202      	adds	r2, #2
 800d4d2:	0092      	lsls	r2, r2, #2
 800d4d4:	f107 010c 	add.w	r1, r7, #12
 800d4d8:	300c      	adds	r0, #12
 800d4da:	f000 f905 	bl	800d6e8 <memcpy>
 800d4de:	2201      	movs	r2, #1
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f000 fb20 	bl	800db28 <__lshift>
 800d4e8:	9b00      	ldr	r3, [sp, #0]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	9b00      	ldr	r3, [sp, #0]
 800d4f0:	444b      	add	r3, r9
 800d4f2:	9307      	str	r3, [sp, #28]
 800d4f4:	9b02      	ldr	r3, [sp, #8]
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	46b8      	mov	r8, r7
 800d4fc:	9306      	str	r3, [sp, #24]
 800d4fe:	4607      	mov	r7, r0
 800d500:	9b01      	ldr	r3, [sp, #4]
 800d502:	4631      	mov	r1, r6
 800d504:	3b01      	subs	r3, #1
 800d506:	4658      	mov	r0, fp
 800d508:	9302      	str	r3, [sp, #8]
 800d50a:	f7ff fa6a 	bl	800c9e2 <quorem>
 800d50e:	4603      	mov	r3, r0
 800d510:	3330      	adds	r3, #48	; 0x30
 800d512:	9004      	str	r0, [sp, #16]
 800d514:	4641      	mov	r1, r8
 800d516:	4658      	mov	r0, fp
 800d518:	9308      	str	r3, [sp, #32]
 800d51a:	f000 fb71 	bl	800dc00 <__mcmp>
 800d51e:	463a      	mov	r2, r7
 800d520:	4681      	mov	r9, r0
 800d522:	4631      	mov	r1, r6
 800d524:	4620      	mov	r0, r4
 800d526:	f000 fb87 	bl	800dc38 <__mdiff>
 800d52a:	68c2      	ldr	r2, [r0, #12]
 800d52c:	9b08      	ldr	r3, [sp, #32]
 800d52e:	4605      	mov	r5, r0
 800d530:	bb02      	cbnz	r2, 800d574 <_dtoa_r+0xa7c>
 800d532:	4601      	mov	r1, r0
 800d534:	4658      	mov	r0, fp
 800d536:	f000 fb63 	bl	800dc00 <__mcmp>
 800d53a:	9b08      	ldr	r3, [sp, #32]
 800d53c:	4602      	mov	r2, r0
 800d53e:	4629      	mov	r1, r5
 800d540:	4620      	mov	r0, r4
 800d542:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d546:	f000 f91d 	bl	800d784 <_Bfree>
 800d54a:	9b05      	ldr	r3, [sp, #20]
 800d54c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d54e:	9d01      	ldr	r5, [sp, #4]
 800d550:	ea43 0102 	orr.w	r1, r3, r2
 800d554:	9b06      	ldr	r3, [sp, #24]
 800d556:	430b      	orrs	r3, r1
 800d558:	9b08      	ldr	r3, [sp, #32]
 800d55a:	d10d      	bne.n	800d578 <_dtoa_r+0xa80>
 800d55c:	2b39      	cmp	r3, #57	; 0x39
 800d55e:	d029      	beq.n	800d5b4 <_dtoa_r+0xabc>
 800d560:	f1b9 0f00 	cmp.w	r9, #0
 800d564:	dd01      	ble.n	800d56a <_dtoa_r+0xa72>
 800d566:	9b04      	ldr	r3, [sp, #16]
 800d568:	3331      	adds	r3, #49	; 0x31
 800d56a:	9a02      	ldr	r2, [sp, #8]
 800d56c:	7013      	strb	r3, [r2, #0]
 800d56e:	e774      	b.n	800d45a <_dtoa_r+0x962>
 800d570:	4638      	mov	r0, r7
 800d572:	e7b9      	b.n	800d4e8 <_dtoa_r+0x9f0>
 800d574:	2201      	movs	r2, #1
 800d576:	e7e2      	b.n	800d53e <_dtoa_r+0xa46>
 800d578:	f1b9 0f00 	cmp.w	r9, #0
 800d57c:	db06      	blt.n	800d58c <_dtoa_r+0xa94>
 800d57e:	9905      	ldr	r1, [sp, #20]
 800d580:	ea41 0909 	orr.w	r9, r1, r9
 800d584:	9906      	ldr	r1, [sp, #24]
 800d586:	ea59 0101 	orrs.w	r1, r9, r1
 800d58a:	d120      	bne.n	800d5ce <_dtoa_r+0xad6>
 800d58c:	2a00      	cmp	r2, #0
 800d58e:	ddec      	ble.n	800d56a <_dtoa_r+0xa72>
 800d590:	4659      	mov	r1, fp
 800d592:	2201      	movs	r2, #1
 800d594:	4620      	mov	r0, r4
 800d596:	9301      	str	r3, [sp, #4]
 800d598:	f000 fac6 	bl	800db28 <__lshift>
 800d59c:	4631      	mov	r1, r6
 800d59e:	4683      	mov	fp, r0
 800d5a0:	f000 fb2e 	bl	800dc00 <__mcmp>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	9b01      	ldr	r3, [sp, #4]
 800d5a8:	dc02      	bgt.n	800d5b0 <_dtoa_r+0xab8>
 800d5aa:	d1de      	bne.n	800d56a <_dtoa_r+0xa72>
 800d5ac:	07da      	lsls	r2, r3, #31
 800d5ae:	d5dc      	bpl.n	800d56a <_dtoa_r+0xa72>
 800d5b0:	2b39      	cmp	r3, #57	; 0x39
 800d5b2:	d1d8      	bne.n	800d566 <_dtoa_r+0xa6e>
 800d5b4:	9a02      	ldr	r2, [sp, #8]
 800d5b6:	2339      	movs	r3, #57	; 0x39
 800d5b8:	7013      	strb	r3, [r2, #0]
 800d5ba:	462b      	mov	r3, r5
 800d5bc:	461d      	mov	r5, r3
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d5c4:	2a39      	cmp	r2, #57	; 0x39
 800d5c6:	d050      	beq.n	800d66a <_dtoa_r+0xb72>
 800d5c8:	3201      	adds	r2, #1
 800d5ca:	701a      	strb	r2, [r3, #0]
 800d5cc:	e745      	b.n	800d45a <_dtoa_r+0x962>
 800d5ce:	2a00      	cmp	r2, #0
 800d5d0:	dd03      	ble.n	800d5da <_dtoa_r+0xae2>
 800d5d2:	2b39      	cmp	r3, #57	; 0x39
 800d5d4:	d0ee      	beq.n	800d5b4 <_dtoa_r+0xabc>
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	e7c7      	b.n	800d56a <_dtoa_r+0xa72>
 800d5da:	9a01      	ldr	r2, [sp, #4]
 800d5dc:	9907      	ldr	r1, [sp, #28]
 800d5de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d5e2:	428a      	cmp	r2, r1
 800d5e4:	d02a      	beq.n	800d63c <_dtoa_r+0xb44>
 800d5e6:	4659      	mov	r1, fp
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	220a      	movs	r2, #10
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f000 f8eb 	bl	800d7c8 <__multadd>
 800d5f2:	45b8      	cmp	r8, r7
 800d5f4:	4683      	mov	fp, r0
 800d5f6:	f04f 0300 	mov.w	r3, #0
 800d5fa:	f04f 020a 	mov.w	r2, #10
 800d5fe:	4641      	mov	r1, r8
 800d600:	4620      	mov	r0, r4
 800d602:	d107      	bne.n	800d614 <_dtoa_r+0xb1c>
 800d604:	f000 f8e0 	bl	800d7c8 <__multadd>
 800d608:	4680      	mov	r8, r0
 800d60a:	4607      	mov	r7, r0
 800d60c:	9b01      	ldr	r3, [sp, #4]
 800d60e:	3301      	adds	r3, #1
 800d610:	9301      	str	r3, [sp, #4]
 800d612:	e775      	b.n	800d500 <_dtoa_r+0xa08>
 800d614:	f000 f8d8 	bl	800d7c8 <__multadd>
 800d618:	4639      	mov	r1, r7
 800d61a:	4680      	mov	r8, r0
 800d61c:	2300      	movs	r3, #0
 800d61e:	220a      	movs	r2, #10
 800d620:	4620      	mov	r0, r4
 800d622:	f000 f8d1 	bl	800d7c8 <__multadd>
 800d626:	4607      	mov	r7, r0
 800d628:	e7f0      	b.n	800d60c <_dtoa_r+0xb14>
 800d62a:	f1b9 0f00 	cmp.w	r9, #0
 800d62e:	9a00      	ldr	r2, [sp, #0]
 800d630:	bfcc      	ite	gt
 800d632:	464d      	movgt	r5, r9
 800d634:	2501      	movle	r5, #1
 800d636:	4415      	add	r5, r2
 800d638:	f04f 0800 	mov.w	r8, #0
 800d63c:	4659      	mov	r1, fp
 800d63e:	2201      	movs	r2, #1
 800d640:	4620      	mov	r0, r4
 800d642:	9301      	str	r3, [sp, #4]
 800d644:	f000 fa70 	bl	800db28 <__lshift>
 800d648:	4631      	mov	r1, r6
 800d64a:	4683      	mov	fp, r0
 800d64c:	f000 fad8 	bl	800dc00 <__mcmp>
 800d650:	2800      	cmp	r0, #0
 800d652:	dcb2      	bgt.n	800d5ba <_dtoa_r+0xac2>
 800d654:	d102      	bne.n	800d65c <_dtoa_r+0xb64>
 800d656:	9b01      	ldr	r3, [sp, #4]
 800d658:	07db      	lsls	r3, r3, #31
 800d65a:	d4ae      	bmi.n	800d5ba <_dtoa_r+0xac2>
 800d65c:	462b      	mov	r3, r5
 800d65e:	461d      	mov	r5, r3
 800d660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d664:	2a30      	cmp	r2, #48	; 0x30
 800d666:	d0fa      	beq.n	800d65e <_dtoa_r+0xb66>
 800d668:	e6f7      	b.n	800d45a <_dtoa_r+0x962>
 800d66a:	9a00      	ldr	r2, [sp, #0]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d1a5      	bne.n	800d5bc <_dtoa_r+0xac4>
 800d670:	f10a 0a01 	add.w	sl, sl, #1
 800d674:	2331      	movs	r3, #49	; 0x31
 800d676:	e779      	b.n	800d56c <_dtoa_r+0xa74>
 800d678:	4b13      	ldr	r3, [pc, #76]	; (800d6c8 <_dtoa_r+0xbd0>)
 800d67a:	f7ff baaf 	b.w	800cbdc <_dtoa_r+0xe4>
 800d67e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d680:	2b00      	cmp	r3, #0
 800d682:	f47f aa86 	bne.w	800cb92 <_dtoa_r+0x9a>
 800d686:	4b11      	ldr	r3, [pc, #68]	; (800d6cc <_dtoa_r+0xbd4>)
 800d688:	f7ff baa8 	b.w	800cbdc <_dtoa_r+0xe4>
 800d68c:	f1b9 0f00 	cmp.w	r9, #0
 800d690:	dc03      	bgt.n	800d69a <_dtoa_r+0xba2>
 800d692:	9b05      	ldr	r3, [sp, #20]
 800d694:	2b02      	cmp	r3, #2
 800d696:	f73f aec9 	bgt.w	800d42c <_dtoa_r+0x934>
 800d69a:	9d00      	ldr	r5, [sp, #0]
 800d69c:	4631      	mov	r1, r6
 800d69e:	4658      	mov	r0, fp
 800d6a0:	f7ff f99f 	bl	800c9e2 <quorem>
 800d6a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d6a8:	f805 3b01 	strb.w	r3, [r5], #1
 800d6ac:	9a00      	ldr	r2, [sp, #0]
 800d6ae:	1aaa      	subs	r2, r5, r2
 800d6b0:	4591      	cmp	r9, r2
 800d6b2:	ddba      	ble.n	800d62a <_dtoa_r+0xb32>
 800d6b4:	4659      	mov	r1, fp
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	220a      	movs	r2, #10
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f000 f884 	bl	800d7c8 <__multadd>
 800d6c0:	4683      	mov	fp, r0
 800d6c2:	e7eb      	b.n	800d69c <_dtoa_r+0xba4>
 800d6c4:	0800efbb 	.word	0x0800efbb
 800d6c8:	0800ef14 	.word	0x0800ef14
 800d6cc:	0800ef38 	.word	0x0800ef38

0800d6d0 <_localeconv_r>:
 800d6d0:	4800      	ldr	r0, [pc, #0]	; (800d6d4 <_localeconv_r+0x4>)
 800d6d2:	4770      	bx	lr
 800d6d4:	200002e4 	.word	0x200002e4

0800d6d8 <malloc>:
 800d6d8:	4b02      	ldr	r3, [pc, #8]	; (800d6e4 <malloc+0xc>)
 800d6da:	4601      	mov	r1, r0
 800d6dc:	6818      	ldr	r0, [r3, #0]
 800d6de:	f000 bbef 	b.w	800dec0 <_malloc_r>
 800d6e2:	bf00      	nop
 800d6e4:	20000190 	.word	0x20000190

0800d6e8 <memcpy>:
 800d6e8:	440a      	add	r2, r1
 800d6ea:	4291      	cmp	r1, r2
 800d6ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6f0:	d100      	bne.n	800d6f4 <memcpy+0xc>
 800d6f2:	4770      	bx	lr
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6fe:	4291      	cmp	r1, r2
 800d700:	d1f9      	bne.n	800d6f6 <memcpy+0xe>
 800d702:	bd10      	pop	{r4, pc}

0800d704 <_Balloc>:
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d708:	4604      	mov	r4, r0
 800d70a:	460d      	mov	r5, r1
 800d70c:	b976      	cbnz	r6, 800d72c <_Balloc+0x28>
 800d70e:	2010      	movs	r0, #16
 800d710:	f7ff ffe2 	bl	800d6d8 <malloc>
 800d714:	4602      	mov	r2, r0
 800d716:	6260      	str	r0, [r4, #36]	; 0x24
 800d718:	b920      	cbnz	r0, 800d724 <_Balloc+0x20>
 800d71a:	4b18      	ldr	r3, [pc, #96]	; (800d77c <_Balloc+0x78>)
 800d71c:	4818      	ldr	r0, [pc, #96]	; (800d780 <_Balloc+0x7c>)
 800d71e:	2166      	movs	r1, #102	; 0x66
 800d720:	f000 fd94 	bl	800e24c <__assert_func>
 800d724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d728:	6006      	str	r6, [r0, #0]
 800d72a:	60c6      	str	r6, [r0, #12]
 800d72c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d72e:	68f3      	ldr	r3, [r6, #12]
 800d730:	b183      	cbz	r3, 800d754 <_Balloc+0x50>
 800d732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d73a:	b9b8      	cbnz	r0, 800d76c <_Balloc+0x68>
 800d73c:	2101      	movs	r1, #1
 800d73e:	fa01 f605 	lsl.w	r6, r1, r5
 800d742:	1d72      	adds	r2, r6, #5
 800d744:	0092      	lsls	r2, r2, #2
 800d746:	4620      	mov	r0, r4
 800d748:	f000 fb5a 	bl	800de00 <_calloc_r>
 800d74c:	b160      	cbz	r0, 800d768 <_Balloc+0x64>
 800d74e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d752:	e00e      	b.n	800d772 <_Balloc+0x6e>
 800d754:	2221      	movs	r2, #33	; 0x21
 800d756:	2104      	movs	r1, #4
 800d758:	4620      	mov	r0, r4
 800d75a:	f000 fb51 	bl	800de00 <_calloc_r>
 800d75e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d760:	60f0      	str	r0, [r6, #12]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1e4      	bne.n	800d732 <_Balloc+0x2e>
 800d768:	2000      	movs	r0, #0
 800d76a:	bd70      	pop	{r4, r5, r6, pc}
 800d76c:	6802      	ldr	r2, [r0, #0]
 800d76e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d772:	2300      	movs	r3, #0
 800d774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d778:	e7f7      	b.n	800d76a <_Balloc+0x66>
 800d77a:	bf00      	nop
 800d77c:	0800ef45 	.word	0x0800ef45
 800d780:	0800efcc 	.word	0x0800efcc

0800d784 <_Bfree>:
 800d784:	b570      	push	{r4, r5, r6, lr}
 800d786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d788:	4605      	mov	r5, r0
 800d78a:	460c      	mov	r4, r1
 800d78c:	b976      	cbnz	r6, 800d7ac <_Bfree+0x28>
 800d78e:	2010      	movs	r0, #16
 800d790:	f7ff ffa2 	bl	800d6d8 <malloc>
 800d794:	4602      	mov	r2, r0
 800d796:	6268      	str	r0, [r5, #36]	; 0x24
 800d798:	b920      	cbnz	r0, 800d7a4 <_Bfree+0x20>
 800d79a:	4b09      	ldr	r3, [pc, #36]	; (800d7c0 <_Bfree+0x3c>)
 800d79c:	4809      	ldr	r0, [pc, #36]	; (800d7c4 <_Bfree+0x40>)
 800d79e:	218a      	movs	r1, #138	; 0x8a
 800d7a0:	f000 fd54 	bl	800e24c <__assert_func>
 800d7a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7a8:	6006      	str	r6, [r0, #0]
 800d7aa:	60c6      	str	r6, [r0, #12]
 800d7ac:	b13c      	cbz	r4, 800d7be <_Bfree+0x3a>
 800d7ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7b0:	6862      	ldr	r2, [r4, #4]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7b8:	6021      	str	r1, [r4, #0]
 800d7ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7be:	bd70      	pop	{r4, r5, r6, pc}
 800d7c0:	0800ef45 	.word	0x0800ef45
 800d7c4:	0800efcc 	.word	0x0800efcc

0800d7c8 <__multadd>:
 800d7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7cc:	690e      	ldr	r6, [r1, #16]
 800d7ce:	4607      	mov	r7, r0
 800d7d0:	4698      	mov	r8, r3
 800d7d2:	460c      	mov	r4, r1
 800d7d4:	f101 0014 	add.w	r0, r1, #20
 800d7d8:	2300      	movs	r3, #0
 800d7da:	6805      	ldr	r5, [r0, #0]
 800d7dc:	b2a9      	uxth	r1, r5
 800d7de:	fb02 8101 	mla	r1, r2, r1, r8
 800d7e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d7e6:	0c2d      	lsrs	r5, r5, #16
 800d7e8:	fb02 c505 	mla	r5, r2, r5, ip
 800d7ec:	b289      	uxth	r1, r1
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d7f4:	429e      	cmp	r6, r3
 800d7f6:	f840 1b04 	str.w	r1, [r0], #4
 800d7fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d7fe:	dcec      	bgt.n	800d7da <__multadd+0x12>
 800d800:	f1b8 0f00 	cmp.w	r8, #0
 800d804:	d022      	beq.n	800d84c <__multadd+0x84>
 800d806:	68a3      	ldr	r3, [r4, #8]
 800d808:	42b3      	cmp	r3, r6
 800d80a:	dc19      	bgt.n	800d840 <__multadd+0x78>
 800d80c:	6861      	ldr	r1, [r4, #4]
 800d80e:	4638      	mov	r0, r7
 800d810:	3101      	adds	r1, #1
 800d812:	f7ff ff77 	bl	800d704 <_Balloc>
 800d816:	4605      	mov	r5, r0
 800d818:	b928      	cbnz	r0, 800d826 <__multadd+0x5e>
 800d81a:	4602      	mov	r2, r0
 800d81c:	4b0d      	ldr	r3, [pc, #52]	; (800d854 <__multadd+0x8c>)
 800d81e:	480e      	ldr	r0, [pc, #56]	; (800d858 <__multadd+0x90>)
 800d820:	21b5      	movs	r1, #181	; 0xb5
 800d822:	f000 fd13 	bl	800e24c <__assert_func>
 800d826:	6922      	ldr	r2, [r4, #16]
 800d828:	3202      	adds	r2, #2
 800d82a:	f104 010c 	add.w	r1, r4, #12
 800d82e:	0092      	lsls	r2, r2, #2
 800d830:	300c      	adds	r0, #12
 800d832:	f7ff ff59 	bl	800d6e8 <memcpy>
 800d836:	4621      	mov	r1, r4
 800d838:	4638      	mov	r0, r7
 800d83a:	f7ff ffa3 	bl	800d784 <_Bfree>
 800d83e:	462c      	mov	r4, r5
 800d840:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d844:	3601      	adds	r6, #1
 800d846:	f8c3 8014 	str.w	r8, [r3, #20]
 800d84a:	6126      	str	r6, [r4, #16]
 800d84c:	4620      	mov	r0, r4
 800d84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d852:	bf00      	nop
 800d854:	0800efbb 	.word	0x0800efbb
 800d858:	0800efcc 	.word	0x0800efcc

0800d85c <__hi0bits>:
 800d85c:	0c03      	lsrs	r3, r0, #16
 800d85e:	041b      	lsls	r3, r3, #16
 800d860:	b9d3      	cbnz	r3, 800d898 <__hi0bits+0x3c>
 800d862:	0400      	lsls	r0, r0, #16
 800d864:	2310      	movs	r3, #16
 800d866:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d86a:	bf04      	itt	eq
 800d86c:	0200      	lsleq	r0, r0, #8
 800d86e:	3308      	addeq	r3, #8
 800d870:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d874:	bf04      	itt	eq
 800d876:	0100      	lsleq	r0, r0, #4
 800d878:	3304      	addeq	r3, #4
 800d87a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d87e:	bf04      	itt	eq
 800d880:	0080      	lsleq	r0, r0, #2
 800d882:	3302      	addeq	r3, #2
 800d884:	2800      	cmp	r0, #0
 800d886:	db05      	blt.n	800d894 <__hi0bits+0x38>
 800d888:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d88c:	f103 0301 	add.w	r3, r3, #1
 800d890:	bf08      	it	eq
 800d892:	2320      	moveq	r3, #32
 800d894:	4618      	mov	r0, r3
 800d896:	4770      	bx	lr
 800d898:	2300      	movs	r3, #0
 800d89a:	e7e4      	b.n	800d866 <__hi0bits+0xa>

0800d89c <__lo0bits>:
 800d89c:	6803      	ldr	r3, [r0, #0]
 800d89e:	f013 0207 	ands.w	r2, r3, #7
 800d8a2:	4601      	mov	r1, r0
 800d8a4:	d00b      	beq.n	800d8be <__lo0bits+0x22>
 800d8a6:	07da      	lsls	r2, r3, #31
 800d8a8:	d424      	bmi.n	800d8f4 <__lo0bits+0x58>
 800d8aa:	0798      	lsls	r0, r3, #30
 800d8ac:	bf49      	itett	mi
 800d8ae:	085b      	lsrmi	r3, r3, #1
 800d8b0:	089b      	lsrpl	r3, r3, #2
 800d8b2:	2001      	movmi	r0, #1
 800d8b4:	600b      	strmi	r3, [r1, #0]
 800d8b6:	bf5c      	itt	pl
 800d8b8:	600b      	strpl	r3, [r1, #0]
 800d8ba:	2002      	movpl	r0, #2
 800d8bc:	4770      	bx	lr
 800d8be:	b298      	uxth	r0, r3
 800d8c0:	b9b0      	cbnz	r0, 800d8f0 <__lo0bits+0x54>
 800d8c2:	0c1b      	lsrs	r3, r3, #16
 800d8c4:	2010      	movs	r0, #16
 800d8c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d8ca:	bf04      	itt	eq
 800d8cc:	0a1b      	lsreq	r3, r3, #8
 800d8ce:	3008      	addeq	r0, #8
 800d8d0:	071a      	lsls	r2, r3, #28
 800d8d2:	bf04      	itt	eq
 800d8d4:	091b      	lsreq	r3, r3, #4
 800d8d6:	3004      	addeq	r0, #4
 800d8d8:	079a      	lsls	r2, r3, #30
 800d8da:	bf04      	itt	eq
 800d8dc:	089b      	lsreq	r3, r3, #2
 800d8de:	3002      	addeq	r0, #2
 800d8e0:	07da      	lsls	r2, r3, #31
 800d8e2:	d403      	bmi.n	800d8ec <__lo0bits+0x50>
 800d8e4:	085b      	lsrs	r3, r3, #1
 800d8e6:	f100 0001 	add.w	r0, r0, #1
 800d8ea:	d005      	beq.n	800d8f8 <__lo0bits+0x5c>
 800d8ec:	600b      	str	r3, [r1, #0]
 800d8ee:	4770      	bx	lr
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	e7e8      	b.n	800d8c6 <__lo0bits+0x2a>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	4770      	bx	lr
 800d8f8:	2020      	movs	r0, #32
 800d8fa:	4770      	bx	lr

0800d8fc <__i2b>:
 800d8fc:	b510      	push	{r4, lr}
 800d8fe:	460c      	mov	r4, r1
 800d900:	2101      	movs	r1, #1
 800d902:	f7ff feff 	bl	800d704 <_Balloc>
 800d906:	4602      	mov	r2, r0
 800d908:	b928      	cbnz	r0, 800d916 <__i2b+0x1a>
 800d90a:	4b05      	ldr	r3, [pc, #20]	; (800d920 <__i2b+0x24>)
 800d90c:	4805      	ldr	r0, [pc, #20]	; (800d924 <__i2b+0x28>)
 800d90e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d912:	f000 fc9b 	bl	800e24c <__assert_func>
 800d916:	2301      	movs	r3, #1
 800d918:	6144      	str	r4, [r0, #20]
 800d91a:	6103      	str	r3, [r0, #16]
 800d91c:	bd10      	pop	{r4, pc}
 800d91e:	bf00      	nop
 800d920:	0800efbb 	.word	0x0800efbb
 800d924:	0800efcc 	.word	0x0800efcc

0800d928 <__multiply>:
 800d928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	4614      	mov	r4, r2
 800d92e:	690a      	ldr	r2, [r1, #16]
 800d930:	6923      	ldr	r3, [r4, #16]
 800d932:	429a      	cmp	r2, r3
 800d934:	bfb8      	it	lt
 800d936:	460b      	movlt	r3, r1
 800d938:	460d      	mov	r5, r1
 800d93a:	bfbc      	itt	lt
 800d93c:	4625      	movlt	r5, r4
 800d93e:	461c      	movlt	r4, r3
 800d940:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d944:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d948:	68ab      	ldr	r3, [r5, #8]
 800d94a:	6869      	ldr	r1, [r5, #4]
 800d94c:	eb0a 0709 	add.w	r7, sl, r9
 800d950:	42bb      	cmp	r3, r7
 800d952:	b085      	sub	sp, #20
 800d954:	bfb8      	it	lt
 800d956:	3101      	addlt	r1, #1
 800d958:	f7ff fed4 	bl	800d704 <_Balloc>
 800d95c:	b930      	cbnz	r0, 800d96c <__multiply+0x44>
 800d95e:	4602      	mov	r2, r0
 800d960:	4b42      	ldr	r3, [pc, #264]	; (800da6c <__multiply+0x144>)
 800d962:	4843      	ldr	r0, [pc, #268]	; (800da70 <__multiply+0x148>)
 800d964:	f240 115d 	movw	r1, #349	; 0x15d
 800d968:	f000 fc70 	bl	800e24c <__assert_func>
 800d96c:	f100 0614 	add.w	r6, r0, #20
 800d970:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d974:	4633      	mov	r3, r6
 800d976:	2200      	movs	r2, #0
 800d978:	4543      	cmp	r3, r8
 800d97a:	d31e      	bcc.n	800d9ba <__multiply+0x92>
 800d97c:	f105 0c14 	add.w	ip, r5, #20
 800d980:	f104 0314 	add.w	r3, r4, #20
 800d984:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d988:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d98c:	9202      	str	r2, [sp, #8]
 800d98e:	ebac 0205 	sub.w	r2, ip, r5
 800d992:	3a15      	subs	r2, #21
 800d994:	f022 0203 	bic.w	r2, r2, #3
 800d998:	3204      	adds	r2, #4
 800d99a:	f105 0115 	add.w	r1, r5, #21
 800d99e:	458c      	cmp	ip, r1
 800d9a0:	bf38      	it	cc
 800d9a2:	2204      	movcc	r2, #4
 800d9a4:	9201      	str	r2, [sp, #4]
 800d9a6:	9a02      	ldr	r2, [sp, #8]
 800d9a8:	9303      	str	r3, [sp, #12]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d808      	bhi.n	800d9c0 <__multiply+0x98>
 800d9ae:	2f00      	cmp	r7, #0
 800d9b0:	dc55      	bgt.n	800da5e <__multiply+0x136>
 800d9b2:	6107      	str	r7, [r0, #16]
 800d9b4:	b005      	add	sp, #20
 800d9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ba:	f843 2b04 	str.w	r2, [r3], #4
 800d9be:	e7db      	b.n	800d978 <__multiply+0x50>
 800d9c0:	f8b3 a000 	ldrh.w	sl, [r3]
 800d9c4:	f1ba 0f00 	cmp.w	sl, #0
 800d9c8:	d020      	beq.n	800da0c <__multiply+0xe4>
 800d9ca:	f105 0e14 	add.w	lr, r5, #20
 800d9ce:	46b1      	mov	r9, r6
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d9d6:	f8d9 b000 	ldr.w	fp, [r9]
 800d9da:	b2a1      	uxth	r1, r4
 800d9dc:	fa1f fb8b 	uxth.w	fp, fp
 800d9e0:	fb0a b101 	mla	r1, sl, r1, fp
 800d9e4:	4411      	add	r1, r2
 800d9e6:	f8d9 2000 	ldr.w	r2, [r9]
 800d9ea:	0c24      	lsrs	r4, r4, #16
 800d9ec:	0c12      	lsrs	r2, r2, #16
 800d9ee:	fb0a 2404 	mla	r4, sl, r4, r2
 800d9f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d9f6:	b289      	uxth	r1, r1
 800d9f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d9fc:	45f4      	cmp	ip, lr
 800d9fe:	f849 1b04 	str.w	r1, [r9], #4
 800da02:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800da06:	d8e4      	bhi.n	800d9d2 <__multiply+0xaa>
 800da08:	9901      	ldr	r1, [sp, #4]
 800da0a:	5072      	str	r2, [r6, r1]
 800da0c:	9a03      	ldr	r2, [sp, #12]
 800da0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da12:	3304      	adds	r3, #4
 800da14:	f1b9 0f00 	cmp.w	r9, #0
 800da18:	d01f      	beq.n	800da5a <__multiply+0x132>
 800da1a:	6834      	ldr	r4, [r6, #0]
 800da1c:	f105 0114 	add.w	r1, r5, #20
 800da20:	46b6      	mov	lr, r6
 800da22:	f04f 0a00 	mov.w	sl, #0
 800da26:	880a      	ldrh	r2, [r1, #0]
 800da28:	f8be b002 	ldrh.w	fp, [lr, #2]
 800da2c:	fb09 b202 	mla	r2, r9, r2, fp
 800da30:	4492      	add	sl, r2
 800da32:	b2a4      	uxth	r4, r4
 800da34:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800da38:	f84e 4b04 	str.w	r4, [lr], #4
 800da3c:	f851 4b04 	ldr.w	r4, [r1], #4
 800da40:	f8be 2000 	ldrh.w	r2, [lr]
 800da44:	0c24      	lsrs	r4, r4, #16
 800da46:	fb09 2404 	mla	r4, r9, r4, r2
 800da4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800da4e:	458c      	cmp	ip, r1
 800da50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800da54:	d8e7      	bhi.n	800da26 <__multiply+0xfe>
 800da56:	9a01      	ldr	r2, [sp, #4]
 800da58:	50b4      	str	r4, [r6, r2]
 800da5a:	3604      	adds	r6, #4
 800da5c:	e7a3      	b.n	800d9a6 <__multiply+0x7e>
 800da5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da62:	2b00      	cmp	r3, #0
 800da64:	d1a5      	bne.n	800d9b2 <__multiply+0x8a>
 800da66:	3f01      	subs	r7, #1
 800da68:	e7a1      	b.n	800d9ae <__multiply+0x86>
 800da6a:	bf00      	nop
 800da6c:	0800efbb 	.word	0x0800efbb
 800da70:	0800efcc 	.word	0x0800efcc

0800da74 <__pow5mult>:
 800da74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da78:	4615      	mov	r5, r2
 800da7a:	f012 0203 	ands.w	r2, r2, #3
 800da7e:	4606      	mov	r6, r0
 800da80:	460f      	mov	r7, r1
 800da82:	d007      	beq.n	800da94 <__pow5mult+0x20>
 800da84:	4c25      	ldr	r4, [pc, #148]	; (800db1c <__pow5mult+0xa8>)
 800da86:	3a01      	subs	r2, #1
 800da88:	2300      	movs	r3, #0
 800da8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da8e:	f7ff fe9b 	bl	800d7c8 <__multadd>
 800da92:	4607      	mov	r7, r0
 800da94:	10ad      	asrs	r5, r5, #2
 800da96:	d03d      	beq.n	800db14 <__pow5mult+0xa0>
 800da98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da9a:	b97c      	cbnz	r4, 800dabc <__pow5mult+0x48>
 800da9c:	2010      	movs	r0, #16
 800da9e:	f7ff fe1b 	bl	800d6d8 <malloc>
 800daa2:	4602      	mov	r2, r0
 800daa4:	6270      	str	r0, [r6, #36]	; 0x24
 800daa6:	b928      	cbnz	r0, 800dab4 <__pow5mult+0x40>
 800daa8:	4b1d      	ldr	r3, [pc, #116]	; (800db20 <__pow5mult+0xac>)
 800daaa:	481e      	ldr	r0, [pc, #120]	; (800db24 <__pow5mult+0xb0>)
 800daac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dab0:	f000 fbcc 	bl	800e24c <__assert_func>
 800dab4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dab8:	6004      	str	r4, [r0, #0]
 800daba:	60c4      	str	r4, [r0, #12]
 800dabc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dac0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dac4:	b94c      	cbnz	r4, 800dada <__pow5mult+0x66>
 800dac6:	f240 2171 	movw	r1, #625	; 0x271
 800daca:	4630      	mov	r0, r6
 800dacc:	f7ff ff16 	bl	800d8fc <__i2b>
 800dad0:	2300      	movs	r3, #0
 800dad2:	f8c8 0008 	str.w	r0, [r8, #8]
 800dad6:	4604      	mov	r4, r0
 800dad8:	6003      	str	r3, [r0, #0]
 800dada:	f04f 0900 	mov.w	r9, #0
 800dade:	07eb      	lsls	r3, r5, #31
 800dae0:	d50a      	bpl.n	800daf8 <__pow5mult+0x84>
 800dae2:	4639      	mov	r1, r7
 800dae4:	4622      	mov	r2, r4
 800dae6:	4630      	mov	r0, r6
 800dae8:	f7ff ff1e 	bl	800d928 <__multiply>
 800daec:	4639      	mov	r1, r7
 800daee:	4680      	mov	r8, r0
 800daf0:	4630      	mov	r0, r6
 800daf2:	f7ff fe47 	bl	800d784 <_Bfree>
 800daf6:	4647      	mov	r7, r8
 800daf8:	106d      	asrs	r5, r5, #1
 800dafa:	d00b      	beq.n	800db14 <__pow5mult+0xa0>
 800dafc:	6820      	ldr	r0, [r4, #0]
 800dafe:	b938      	cbnz	r0, 800db10 <__pow5mult+0x9c>
 800db00:	4622      	mov	r2, r4
 800db02:	4621      	mov	r1, r4
 800db04:	4630      	mov	r0, r6
 800db06:	f7ff ff0f 	bl	800d928 <__multiply>
 800db0a:	6020      	str	r0, [r4, #0]
 800db0c:	f8c0 9000 	str.w	r9, [r0]
 800db10:	4604      	mov	r4, r0
 800db12:	e7e4      	b.n	800dade <__pow5mult+0x6a>
 800db14:	4638      	mov	r0, r7
 800db16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db1a:	bf00      	nop
 800db1c:	0800f120 	.word	0x0800f120
 800db20:	0800ef45 	.word	0x0800ef45
 800db24:	0800efcc 	.word	0x0800efcc

0800db28 <__lshift>:
 800db28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db2c:	460c      	mov	r4, r1
 800db2e:	6849      	ldr	r1, [r1, #4]
 800db30:	6923      	ldr	r3, [r4, #16]
 800db32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db36:	68a3      	ldr	r3, [r4, #8]
 800db38:	4607      	mov	r7, r0
 800db3a:	4691      	mov	r9, r2
 800db3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db40:	f108 0601 	add.w	r6, r8, #1
 800db44:	42b3      	cmp	r3, r6
 800db46:	db0b      	blt.n	800db60 <__lshift+0x38>
 800db48:	4638      	mov	r0, r7
 800db4a:	f7ff fddb 	bl	800d704 <_Balloc>
 800db4e:	4605      	mov	r5, r0
 800db50:	b948      	cbnz	r0, 800db66 <__lshift+0x3e>
 800db52:	4602      	mov	r2, r0
 800db54:	4b28      	ldr	r3, [pc, #160]	; (800dbf8 <__lshift+0xd0>)
 800db56:	4829      	ldr	r0, [pc, #164]	; (800dbfc <__lshift+0xd4>)
 800db58:	f240 11d9 	movw	r1, #473	; 0x1d9
 800db5c:	f000 fb76 	bl	800e24c <__assert_func>
 800db60:	3101      	adds	r1, #1
 800db62:	005b      	lsls	r3, r3, #1
 800db64:	e7ee      	b.n	800db44 <__lshift+0x1c>
 800db66:	2300      	movs	r3, #0
 800db68:	f100 0114 	add.w	r1, r0, #20
 800db6c:	f100 0210 	add.w	r2, r0, #16
 800db70:	4618      	mov	r0, r3
 800db72:	4553      	cmp	r3, sl
 800db74:	db33      	blt.n	800dbde <__lshift+0xb6>
 800db76:	6920      	ldr	r0, [r4, #16]
 800db78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db7c:	f104 0314 	add.w	r3, r4, #20
 800db80:	f019 091f 	ands.w	r9, r9, #31
 800db84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db8c:	d02b      	beq.n	800dbe6 <__lshift+0xbe>
 800db8e:	f1c9 0e20 	rsb	lr, r9, #32
 800db92:	468a      	mov	sl, r1
 800db94:	2200      	movs	r2, #0
 800db96:	6818      	ldr	r0, [r3, #0]
 800db98:	fa00 f009 	lsl.w	r0, r0, r9
 800db9c:	4302      	orrs	r2, r0
 800db9e:	f84a 2b04 	str.w	r2, [sl], #4
 800dba2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dba6:	459c      	cmp	ip, r3
 800dba8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dbac:	d8f3      	bhi.n	800db96 <__lshift+0x6e>
 800dbae:	ebac 0304 	sub.w	r3, ip, r4
 800dbb2:	3b15      	subs	r3, #21
 800dbb4:	f023 0303 	bic.w	r3, r3, #3
 800dbb8:	3304      	adds	r3, #4
 800dbba:	f104 0015 	add.w	r0, r4, #21
 800dbbe:	4584      	cmp	ip, r0
 800dbc0:	bf38      	it	cc
 800dbc2:	2304      	movcc	r3, #4
 800dbc4:	50ca      	str	r2, [r1, r3]
 800dbc6:	b10a      	cbz	r2, 800dbcc <__lshift+0xa4>
 800dbc8:	f108 0602 	add.w	r6, r8, #2
 800dbcc:	3e01      	subs	r6, #1
 800dbce:	4638      	mov	r0, r7
 800dbd0:	612e      	str	r6, [r5, #16]
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	f7ff fdd6 	bl	800d784 <_Bfree>
 800dbd8:	4628      	mov	r0, r5
 800dbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbde:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	e7c5      	b.n	800db72 <__lshift+0x4a>
 800dbe6:	3904      	subs	r1, #4
 800dbe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbec:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbf0:	459c      	cmp	ip, r3
 800dbf2:	d8f9      	bhi.n	800dbe8 <__lshift+0xc0>
 800dbf4:	e7ea      	b.n	800dbcc <__lshift+0xa4>
 800dbf6:	bf00      	nop
 800dbf8:	0800efbb 	.word	0x0800efbb
 800dbfc:	0800efcc 	.word	0x0800efcc

0800dc00 <__mcmp>:
 800dc00:	b530      	push	{r4, r5, lr}
 800dc02:	6902      	ldr	r2, [r0, #16]
 800dc04:	690c      	ldr	r4, [r1, #16]
 800dc06:	1b12      	subs	r2, r2, r4
 800dc08:	d10e      	bne.n	800dc28 <__mcmp+0x28>
 800dc0a:	f100 0314 	add.w	r3, r0, #20
 800dc0e:	3114      	adds	r1, #20
 800dc10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc20:	42a5      	cmp	r5, r4
 800dc22:	d003      	beq.n	800dc2c <__mcmp+0x2c>
 800dc24:	d305      	bcc.n	800dc32 <__mcmp+0x32>
 800dc26:	2201      	movs	r2, #1
 800dc28:	4610      	mov	r0, r2
 800dc2a:	bd30      	pop	{r4, r5, pc}
 800dc2c:	4283      	cmp	r3, r0
 800dc2e:	d3f3      	bcc.n	800dc18 <__mcmp+0x18>
 800dc30:	e7fa      	b.n	800dc28 <__mcmp+0x28>
 800dc32:	f04f 32ff 	mov.w	r2, #4294967295
 800dc36:	e7f7      	b.n	800dc28 <__mcmp+0x28>

0800dc38 <__mdiff>:
 800dc38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	4606      	mov	r6, r0
 800dc40:	4611      	mov	r1, r2
 800dc42:	4620      	mov	r0, r4
 800dc44:	4617      	mov	r7, r2
 800dc46:	f7ff ffdb 	bl	800dc00 <__mcmp>
 800dc4a:	1e05      	subs	r5, r0, #0
 800dc4c:	d110      	bne.n	800dc70 <__mdiff+0x38>
 800dc4e:	4629      	mov	r1, r5
 800dc50:	4630      	mov	r0, r6
 800dc52:	f7ff fd57 	bl	800d704 <_Balloc>
 800dc56:	b930      	cbnz	r0, 800dc66 <__mdiff+0x2e>
 800dc58:	4b39      	ldr	r3, [pc, #228]	; (800dd40 <__mdiff+0x108>)
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	f240 2132 	movw	r1, #562	; 0x232
 800dc60:	4838      	ldr	r0, [pc, #224]	; (800dd44 <__mdiff+0x10c>)
 800dc62:	f000 faf3 	bl	800e24c <__assert_func>
 800dc66:	2301      	movs	r3, #1
 800dc68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc70:	bfa4      	itt	ge
 800dc72:	463b      	movge	r3, r7
 800dc74:	4627      	movge	r7, r4
 800dc76:	4630      	mov	r0, r6
 800dc78:	6879      	ldr	r1, [r7, #4]
 800dc7a:	bfa6      	itte	ge
 800dc7c:	461c      	movge	r4, r3
 800dc7e:	2500      	movge	r5, #0
 800dc80:	2501      	movlt	r5, #1
 800dc82:	f7ff fd3f 	bl	800d704 <_Balloc>
 800dc86:	b920      	cbnz	r0, 800dc92 <__mdiff+0x5a>
 800dc88:	4b2d      	ldr	r3, [pc, #180]	; (800dd40 <__mdiff+0x108>)
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc90:	e7e6      	b.n	800dc60 <__mdiff+0x28>
 800dc92:	693e      	ldr	r6, [r7, #16]
 800dc94:	60c5      	str	r5, [r0, #12]
 800dc96:	6925      	ldr	r5, [r4, #16]
 800dc98:	f107 0114 	add.w	r1, r7, #20
 800dc9c:	f104 0914 	add.w	r9, r4, #20
 800dca0:	f100 0e14 	add.w	lr, r0, #20
 800dca4:	f107 0210 	add.w	r2, r7, #16
 800dca8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dcac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dcb0:	46f2      	mov	sl, lr
 800dcb2:	2700      	movs	r7, #0
 800dcb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dcb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dcbc:	fa1f f883 	uxth.w	r8, r3
 800dcc0:	fa17 f78b 	uxtah	r7, r7, fp
 800dcc4:	0c1b      	lsrs	r3, r3, #16
 800dcc6:	eba7 0808 	sub.w	r8, r7, r8
 800dcca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dcce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dcd2:	fa1f f888 	uxth.w	r8, r8
 800dcd6:	141f      	asrs	r7, r3, #16
 800dcd8:	454d      	cmp	r5, r9
 800dcda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dcde:	f84a 3b04 	str.w	r3, [sl], #4
 800dce2:	d8e7      	bhi.n	800dcb4 <__mdiff+0x7c>
 800dce4:	1b2b      	subs	r3, r5, r4
 800dce6:	3b15      	subs	r3, #21
 800dce8:	f023 0303 	bic.w	r3, r3, #3
 800dcec:	3304      	adds	r3, #4
 800dcee:	3415      	adds	r4, #21
 800dcf0:	42a5      	cmp	r5, r4
 800dcf2:	bf38      	it	cc
 800dcf4:	2304      	movcc	r3, #4
 800dcf6:	4419      	add	r1, r3
 800dcf8:	4473      	add	r3, lr
 800dcfa:	469e      	mov	lr, r3
 800dcfc:	460d      	mov	r5, r1
 800dcfe:	4565      	cmp	r5, ip
 800dd00:	d30e      	bcc.n	800dd20 <__mdiff+0xe8>
 800dd02:	f10c 0203 	add.w	r2, ip, #3
 800dd06:	1a52      	subs	r2, r2, r1
 800dd08:	f022 0203 	bic.w	r2, r2, #3
 800dd0c:	3903      	subs	r1, #3
 800dd0e:	458c      	cmp	ip, r1
 800dd10:	bf38      	it	cc
 800dd12:	2200      	movcc	r2, #0
 800dd14:	441a      	add	r2, r3
 800dd16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dd1a:	b17b      	cbz	r3, 800dd3c <__mdiff+0x104>
 800dd1c:	6106      	str	r6, [r0, #16]
 800dd1e:	e7a5      	b.n	800dc6c <__mdiff+0x34>
 800dd20:	f855 8b04 	ldr.w	r8, [r5], #4
 800dd24:	fa17 f488 	uxtah	r4, r7, r8
 800dd28:	1422      	asrs	r2, r4, #16
 800dd2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dd2e:	b2a4      	uxth	r4, r4
 800dd30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dd34:	f84e 4b04 	str.w	r4, [lr], #4
 800dd38:	1417      	asrs	r7, r2, #16
 800dd3a:	e7e0      	b.n	800dcfe <__mdiff+0xc6>
 800dd3c:	3e01      	subs	r6, #1
 800dd3e:	e7ea      	b.n	800dd16 <__mdiff+0xde>
 800dd40:	0800efbb 	.word	0x0800efbb
 800dd44:	0800efcc 	.word	0x0800efcc

0800dd48 <__d2b>:
 800dd48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd4c:	4689      	mov	r9, r1
 800dd4e:	2101      	movs	r1, #1
 800dd50:	ec57 6b10 	vmov	r6, r7, d0
 800dd54:	4690      	mov	r8, r2
 800dd56:	f7ff fcd5 	bl	800d704 <_Balloc>
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	b930      	cbnz	r0, 800dd6c <__d2b+0x24>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	4b25      	ldr	r3, [pc, #148]	; (800ddf8 <__d2b+0xb0>)
 800dd62:	4826      	ldr	r0, [pc, #152]	; (800ddfc <__d2b+0xb4>)
 800dd64:	f240 310a 	movw	r1, #778	; 0x30a
 800dd68:	f000 fa70 	bl	800e24c <__assert_func>
 800dd6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd74:	bb35      	cbnz	r5, 800ddc4 <__d2b+0x7c>
 800dd76:	2e00      	cmp	r6, #0
 800dd78:	9301      	str	r3, [sp, #4]
 800dd7a:	d028      	beq.n	800ddce <__d2b+0x86>
 800dd7c:	4668      	mov	r0, sp
 800dd7e:	9600      	str	r6, [sp, #0]
 800dd80:	f7ff fd8c 	bl	800d89c <__lo0bits>
 800dd84:	9900      	ldr	r1, [sp, #0]
 800dd86:	b300      	cbz	r0, 800ddca <__d2b+0x82>
 800dd88:	9a01      	ldr	r2, [sp, #4]
 800dd8a:	f1c0 0320 	rsb	r3, r0, #32
 800dd8e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd92:	430b      	orrs	r3, r1
 800dd94:	40c2      	lsrs	r2, r0
 800dd96:	6163      	str	r3, [r4, #20]
 800dd98:	9201      	str	r2, [sp, #4]
 800dd9a:	9b01      	ldr	r3, [sp, #4]
 800dd9c:	61a3      	str	r3, [r4, #24]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	bf14      	ite	ne
 800dda2:	2202      	movne	r2, #2
 800dda4:	2201      	moveq	r2, #1
 800dda6:	6122      	str	r2, [r4, #16]
 800dda8:	b1d5      	cbz	r5, 800dde0 <__d2b+0x98>
 800ddaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddae:	4405      	add	r5, r0
 800ddb0:	f8c9 5000 	str.w	r5, [r9]
 800ddb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddb8:	f8c8 0000 	str.w	r0, [r8]
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	b003      	add	sp, #12
 800ddc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddc8:	e7d5      	b.n	800dd76 <__d2b+0x2e>
 800ddca:	6161      	str	r1, [r4, #20]
 800ddcc:	e7e5      	b.n	800dd9a <__d2b+0x52>
 800ddce:	a801      	add	r0, sp, #4
 800ddd0:	f7ff fd64 	bl	800d89c <__lo0bits>
 800ddd4:	9b01      	ldr	r3, [sp, #4]
 800ddd6:	6163      	str	r3, [r4, #20]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	6122      	str	r2, [r4, #16]
 800dddc:	3020      	adds	r0, #32
 800ddde:	e7e3      	b.n	800dda8 <__d2b+0x60>
 800dde0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dde4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dde8:	f8c9 0000 	str.w	r0, [r9]
 800ddec:	6918      	ldr	r0, [r3, #16]
 800ddee:	f7ff fd35 	bl	800d85c <__hi0bits>
 800ddf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddf6:	e7df      	b.n	800ddb8 <__d2b+0x70>
 800ddf8:	0800efbb 	.word	0x0800efbb
 800ddfc:	0800efcc 	.word	0x0800efcc

0800de00 <_calloc_r>:
 800de00:	b513      	push	{r0, r1, r4, lr}
 800de02:	434a      	muls	r2, r1
 800de04:	4611      	mov	r1, r2
 800de06:	9201      	str	r2, [sp, #4]
 800de08:	f000 f85a 	bl	800dec0 <_malloc_r>
 800de0c:	4604      	mov	r4, r0
 800de0e:	b118      	cbz	r0, 800de18 <_calloc_r+0x18>
 800de10:	9a01      	ldr	r2, [sp, #4]
 800de12:	2100      	movs	r1, #0
 800de14:	f7fe f944 	bl	800c0a0 <memset>
 800de18:	4620      	mov	r0, r4
 800de1a:	b002      	add	sp, #8
 800de1c:	bd10      	pop	{r4, pc}
	...

0800de20 <_free_r>:
 800de20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de22:	2900      	cmp	r1, #0
 800de24:	d048      	beq.n	800deb8 <_free_r+0x98>
 800de26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de2a:	9001      	str	r0, [sp, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f1a1 0404 	sub.w	r4, r1, #4
 800de32:	bfb8      	it	lt
 800de34:	18e4      	addlt	r4, r4, r3
 800de36:	f000 fa65 	bl	800e304 <__malloc_lock>
 800de3a:	4a20      	ldr	r2, [pc, #128]	; (800debc <_free_r+0x9c>)
 800de3c:	9801      	ldr	r0, [sp, #4]
 800de3e:	6813      	ldr	r3, [r2, #0]
 800de40:	4615      	mov	r5, r2
 800de42:	b933      	cbnz	r3, 800de52 <_free_r+0x32>
 800de44:	6063      	str	r3, [r4, #4]
 800de46:	6014      	str	r4, [r2, #0]
 800de48:	b003      	add	sp, #12
 800de4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de4e:	f000 ba5f 	b.w	800e310 <__malloc_unlock>
 800de52:	42a3      	cmp	r3, r4
 800de54:	d90b      	bls.n	800de6e <_free_r+0x4e>
 800de56:	6821      	ldr	r1, [r4, #0]
 800de58:	1862      	adds	r2, r4, r1
 800de5a:	4293      	cmp	r3, r2
 800de5c:	bf04      	itt	eq
 800de5e:	681a      	ldreq	r2, [r3, #0]
 800de60:	685b      	ldreq	r3, [r3, #4]
 800de62:	6063      	str	r3, [r4, #4]
 800de64:	bf04      	itt	eq
 800de66:	1852      	addeq	r2, r2, r1
 800de68:	6022      	streq	r2, [r4, #0]
 800de6a:	602c      	str	r4, [r5, #0]
 800de6c:	e7ec      	b.n	800de48 <_free_r+0x28>
 800de6e:	461a      	mov	r2, r3
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	b10b      	cbz	r3, 800de78 <_free_r+0x58>
 800de74:	42a3      	cmp	r3, r4
 800de76:	d9fa      	bls.n	800de6e <_free_r+0x4e>
 800de78:	6811      	ldr	r1, [r2, #0]
 800de7a:	1855      	adds	r5, r2, r1
 800de7c:	42a5      	cmp	r5, r4
 800de7e:	d10b      	bne.n	800de98 <_free_r+0x78>
 800de80:	6824      	ldr	r4, [r4, #0]
 800de82:	4421      	add	r1, r4
 800de84:	1854      	adds	r4, r2, r1
 800de86:	42a3      	cmp	r3, r4
 800de88:	6011      	str	r1, [r2, #0]
 800de8a:	d1dd      	bne.n	800de48 <_free_r+0x28>
 800de8c:	681c      	ldr	r4, [r3, #0]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	6053      	str	r3, [r2, #4]
 800de92:	4421      	add	r1, r4
 800de94:	6011      	str	r1, [r2, #0]
 800de96:	e7d7      	b.n	800de48 <_free_r+0x28>
 800de98:	d902      	bls.n	800dea0 <_free_r+0x80>
 800de9a:	230c      	movs	r3, #12
 800de9c:	6003      	str	r3, [r0, #0]
 800de9e:	e7d3      	b.n	800de48 <_free_r+0x28>
 800dea0:	6825      	ldr	r5, [r4, #0]
 800dea2:	1961      	adds	r1, r4, r5
 800dea4:	428b      	cmp	r3, r1
 800dea6:	bf04      	itt	eq
 800dea8:	6819      	ldreq	r1, [r3, #0]
 800deaa:	685b      	ldreq	r3, [r3, #4]
 800deac:	6063      	str	r3, [r4, #4]
 800deae:	bf04      	itt	eq
 800deb0:	1949      	addeq	r1, r1, r5
 800deb2:	6021      	streq	r1, [r4, #0]
 800deb4:	6054      	str	r4, [r2, #4]
 800deb6:	e7c7      	b.n	800de48 <_free_r+0x28>
 800deb8:	b003      	add	sp, #12
 800deba:	bd30      	pop	{r4, r5, pc}
 800debc:	200006cc 	.word	0x200006cc

0800dec0 <_malloc_r>:
 800dec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec2:	1ccd      	adds	r5, r1, #3
 800dec4:	f025 0503 	bic.w	r5, r5, #3
 800dec8:	3508      	adds	r5, #8
 800deca:	2d0c      	cmp	r5, #12
 800decc:	bf38      	it	cc
 800dece:	250c      	movcc	r5, #12
 800ded0:	2d00      	cmp	r5, #0
 800ded2:	4606      	mov	r6, r0
 800ded4:	db01      	blt.n	800deda <_malloc_r+0x1a>
 800ded6:	42a9      	cmp	r1, r5
 800ded8:	d903      	bls.n	800dee2 <_malloc_r+0x22>
 800deda:	230c      	movs	r3, #12
 800dedc:	6033      	str	r3, [r6, #0]
 800dede:	2000      	movs	r0, #0
 800dee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dee2:	f000 fa0f 	bl	800e304 <__malloc_lock>
 800dee6:	4921      	ldr	r1, [pc, #132]	; (800df6c <_malloc_r+0xac>)
 800dee8:	680a      	ldr	r2, [r1, #0]
 800deea:	4614      	mov	r4, r2
 800deec:	b99c      	cbnz	r4, 800df16 <_malloc_r+0x56>
 800deee:	4f20      	ldr	r7, [pc, #128]	; (800df70 <_malloc_r+0xb0>)
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	b923      	cbnz	r3, 800defe <_malloc_r+0x3e>
 800def4:	4621      	mov	r1, r4
 800def6:	4630      	mov	r0, r6
 800def8:	f000 f998 	bl	800e22c <_sbrk_r>
 800defc:	6038      	str	r0, [r7, #0]
 800defe:	4629      	mov	r1, r5
 800df00:	4630      	mov	r0, r6
 800df02:	f000 f993 	bl	800e22c <_sbrk_r>
 800df06:	1c43      	adds	r3, r0, #1
 800df08:	d123      	bne.n	800df52 <_malloc_r+0x92>
 800df0a:	230c      	movs	r3, #12
 800df0c:	6033      	str	r3, [r6, #0]
 800df0e:	4630      	mov	r0, r6
 800df10:	f000 f9fe 	bl	800e310 <__malloc_unlock>
 800df14:	e7e3      	b.n	800dede <_malloc_r+0x1e>
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	1b5b      	subs	r3, r3, r5
 800df1a:	d417      	bmi.n	800df4c <_malloc_r+0x8c>
 800df1c:	2b0b      	cmp	r3, #11
 800df1e:	d903      	bls.n	800df28 <_malloc_r+0x68>
 800df20:	6023      	str	r3, [r4, #0]
 800df22:	441c      	add	r4, r3
 800df24:	6025      	str	r5, [r4, #0]
 800df26:	e004      	b.n	800df32 <_malloc_r+0x72>
 800df28:	6863      	ldr	r3, [r4, #4]
 800df2a:	42a2      	cmp	r2, r4
 800df2c:	bf0c      	ite	eq
 800df2e:	600b      	streq	r3, [r1, #0]
 800df30:	6053      	strne	r3, [r2, #4]
 800df32:	4630      	mov	r0, r6
 800df34:	f000 f9ec 	bl	800e310 <__malloc_unlock>
 800df38:	f104 000b 	add.w	r0, r4, #11
 800df3c:	1d23      	adds	r3, r4, #4
 800df3e:	f020 0007 	bic.w	r0, r0, #7
 800df42:	1ac2      	subs	r2, r0, r3
 800df44:	d0cc      	beq.n	800dee0 <_malloc_r+0x20>
 800df46:	1a1b      	subs	r3, r3, r0
 800df48:	50a3      	str	r3, [r4, r2]
 800df4a:	e7c9      	b.n	800dee0 <_malloc_r+0x20>
 800df4c:	4622      	mov	r2, r4
 800df4e:	6864      	ldr	r4, [r4, #4]
 800df50:	e7cc      	b.n	800deec <_malloc_r+0x2c>
 800df52:	1cc4      	adds	r4, r0, #3
 800df54:	f024 0403 	bic.w	r4, r4, #3
 800df58:	42a0      	cmp	r0, r4
 800df5a:	d0e3      	beq.n	800df24 <_malloc_r+0x64>
 800df5c:	1a21      	subs	r1, r4, r0
 800df5e:	4630      	mov	r0, r6
 800df60:	f000 f964 	bl	800e22c <_sbrk_r>
 800df64:	3001      	adds	r0, #1
 800df66:	d1dd      	bne.n	800df24 <_malloc_r+0x64>
 800df68:	e7cf      	b.n	800df0a <_malloc_r+0x4a>
 800df6a:	bf00      	nop
 800df6c:	200006cc 	.word	0x200006cc
 800df70:	200006d0 	.word	0x200006d0

0800df74 <__ssputs_r>:
 800df74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df78:	688e      	ldr	r6, [r1, #8]
 800df7a:	429e      	cmp	r6, r3
 800df7c:	4682      	mov	sl, r0
 800df7e:	460c      	mov	r4, r1
 800df80:	4690      	mov	r8, r2
 800df82:	461f      	mov	r7, r3
 800df84:	d838      	bhi.n	800dff8 <__ssputs_r+0x84>
 800df86:	898a      	ldrh	r2, [r1, #12]
 800df88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df8c:	d032      	beq.n	800dff4 <__ssputs_r+0x80>
 800df8e:	6825      	ldr	r5, [r4, #0]
 800df90:	6909      	ldr	r1, [r1, #16]
 800df92:	eba5 0901 	sub.w	r9, r5, r1
 800df96:	6965      	ldr	r5, [r4, #20]
 800df98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	444b      	add	r3, r9
 800dfa4:	106d      	asrs	r5, r5, #1
 800dfa6:	429d      	cmp	r5, r3
 800dfa8:	bf38      	it	cc
 800dfaa:	461d      	movcc	r5, r3
 800dfac:	0553      	lsls	r3, r2, #21
 800dfae:	d531      	bpl.n	800e014 <__ssputs_r+0xa0>
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	f7ff ff85 	bl	800dec0 <_malloc_r>
 800dfb6:	4606      	mov	r6, r0
 800dfb8:	b950      	cbnz	r0, 800dfd0 <__ssputs_r+0x5c>
 800dfba:	230c      	movs	r3, #12
 800dfbc:	f8ca 3000 	str.w	r3, [sl]
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfc6:	81a3      	strh	r3, [r4, #12]
 800dfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfd0:	6921      	ldr	r1, [r4, #16]
 800dfd2:	464a      	mov	r2, r9
 800dfd4:	f7ff fb88 	bl	800d6e8 <memcpy>
 800dfd8:	89a3      	ldrh	r3, [r4, #12]
 800dfda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dfde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfe2:	81a3      	strh	r3, [r4, #12]
 800dfe4:	6126      	str	r6, [r4, #16]
 800dfe6:	6165      	str	r5, [r4, #20]
 800dfe8:	444e      	add	r6, r9
 800dfea:	eba5 0509 	sub.w	r5, r5, r9
 800dfee:	6026      	str	r6, [r4, #0]
 800dff0:	60a5      	str	r5, [r4, #8]
 800dff2:	463e      	mov	r6, r7
 800dff4:	42be      	cmp	r6, r7
 800dff6:	d900      	bls.n	800dffa <__ssputs_r+0x86>
 800dff8:	463e      	mov	r6, r7
 800dffa:	4632      	mov	r2, r6
 800dffc:	6820      	ldr	r0, [r4, #0]
 800dffe:	4641      	mov	r1, r8
 800e000:	f000 f966 	bl	800e2d0 <memmove>
 800e004:	68a3      	ldr	r3, [r4, #8]
 800e006:	6822      	ldr	r2, [r4, #0]
 800e008:	1b9b      	subs	r3, r3, r6
 800e00a:	4432      	add	r2, r6
 800e00c:	60a3      	str	r3, [r4, #8]
 800e00e:	6022      	str	r2, [r4, #0]
 800e010:	2000      	movs	r0, #0
 800e012:	e7db      	b.n	800dfcc <__ssputs_r+0x58>
 800e014:	462a      	mov	r2, r5
 800e016:	f000 f981 	bl	800e31c <_realloc_r>
 800e01a:	4606      	mov	r6, r0
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d1e1      	bne.n	800dfe4 <__ssputs_r+0x70>
 800e020:	6921      	ldr	r1, [r4, #16]
 800e022:	4650      	mov	r0, sl
 800e024:	f7ff fefc 	bl	800de20 <_free_r>
 800e028:	e7c7      	b.n	800dfba <__ssputs_r+0x46>
	...

0800e02c <_svfiprintf_r>:
 800e02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e030:	4698      	mov	r8, r3
 800e032:	898b      	ldrh	r3, [r1, #12]
 800e034:	061b      	lsls	r3, r3, #24
 800e036:	b09d      	sub	sp, #116	; 0x74
 800e038:	4607      	mov	r7, r0
 800e03a:	460d      	mov	r5, r1
 800e03c:	4614      	mov	r4, r2
 800e03e:	d50e      	bpl.n	800e05e <_svfiprintf_r+0x32>
 800e040:	690b      	ldr	r3, [r1, #16]
 800e042:	b963      	cbnz	r3, 800e05e <_svfiprintf_r+0x32>
 800e044:	2140      	movs	r1, #64	; 0x40
 800e046:	f7ff ff3b 	bl	800dec0 <_malloc_r>
 800e04a:	6028      	str	r0, [r5, #0]
 800e04c:	6128      	str	r0, [r5, #16]
 800e04e:	b920      	cbnz	r0, 800e05a <_svfiprintf_r+0x2e>
 800e050:	230c      	movs	r3, #12
 800e052:	603b      	str	r3, [r7, #0]
 800e054:	f04f 30ff 	mov.w	r0, #4294967295
 800e058:	e0d1      	b.n	800e1fe <_svfiprintf_r+0x1d2>
 800e05a:	2340      	movs	r3, #64	; 0x40
 800e05c:	616b      	str	r3, [r5, #20]
 800e05e:	2300      	movs	r3, #0
 800e060:	9309      	str	r3, [sp, #36]	; 0x24
 800e062:	2320      	movs	r3, #32
 800e064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e068:	f8cd 800c 	str.w	r8, [sp, #12]
 800e06c:	2330      	movs	r3, #48	; 0x30
 800e06e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e218 <_svfiprintf_r+0x1ec>
 800e072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e076:	f04f 0901 	mov.w	r9, #1
 800e07a:	4623      	mov	r3, r4
 800e07c:	469a      	mov	sl, r3
 800e07e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e082:	b10a      	cbz	r2, 800e088 <_svfiprintf_r+0x5c>
 800e084:	2a25      	cmp	r2, #37	; 0x25
 800e086:	d1f9      	bne.n	800e07c <_svfiprintf_r+0x50>
 800e088:	ebba 0b04 	subs.w	fp, sl, r4
 800e08c:	d00b      	beq.n	800e0a6 <_svfiprintf_r+0x7a>
 800e08e:	465b      	mov	r3, fp
 800e090:	4622      	mov	r2, r4
 800e092:	4629      	mov	r1, r5
 800e094:	4638      	mov	r0, r7
 800e096:	f7ff ff6d 	bl	800df74 <__ssputs_r>
 800e09a:	3001      	adds	r0, #1
 800e09c:	f000 80aa 	beq.w	800e1f4 <_svfiprintf_r+0x1c8>
 800e0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0a2:	445a      	add	r2, fp
 800e0a4:	9209      	str	r2, [sp, #36]	; 0x24
 800e0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f000 80a2 	beq.w	800e1f4 <_svfiprintf_r+0x1c8>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0ba:	f10a 0a01 	add.w	sl, sl, #1
 800e0be:	9304      	str	r3, [sp, #16]
 800e0c0:	9307      	str	r3, [sp, #28]
 800e0c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0c6:	931a      	str	r3, [sp, #104]	; 0x68
 800e0c8:	4654      	mov	r4, sl
 800e0ca:	2205      	movs	r2, #5
 800e0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d0:	4851      	ldr	r0, [pc, #324]	; (800e218 <_svfiprintf_r+0x1ec>)
 800e0d2:	f7f2 f885 	bl	80001e0 <memchr>
 800e0d6:	9a04      	ldr	r2, [sp, #16]
 800e0d8:	b9d8      	cbnz	r0, 800e112 <_svfiprintf_r+0xe6>
 800e0da:	06d0      	lsls	r0, r2, #27
 800e0dc:	bf44      	itt	mi
 800e0de:	2320      	movmi	r3, #32
 800e0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0e4:	0711      	lsls	r1, r2, #28
 800e0e6:	bf44      	itt	mi
 800e0e8:	232b      	movmi	r3, #43	; 0x2b
 800e0ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e0f2:	2b2a      	cmp	r3, #42	; 0x2a
 800e0f4:	d015      	beq.n	800e122 <_svfiprintf_r+0xf6>
 800e0f6:	9a07      	ldr	r2, [sp, #28]
 800e0f8:	4654      	mov	r4, sl
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	f04f 0c0a 	mov.w	ip, #10
 800e100:	4621      	mov	r1, r4
 800e102:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e106:	3b30      	subs	r3, #48	; 0x30
 800e108:	2b09      	cmp	r3, #9
 800e10a:	d94e      	bls.n	800e1aa <_svfiprintf_r+0x17e>
 800e10c:	b1b0      	cbz	r0, 800e13c <_svfiprintf_r+0x110>
 800e10e:	9207      	str	r2, [sp, #28]
 800e110:	e014      	b.n	800e13c <_svfiprintf_r+0x110>
 800e112:	eba0 0308 	sub.w	r3, r0, r8
 800e116:	fa09 f303 	lsl.w	r3, r9, r3
 800e11a:	4313      	orrs	r3, r2
 800e11c:	9304      	str	r3, [sp, #16]
 800e11e:	46a2      	mov	sl, r4
 800e120:	e7d2      	b.n	800e0c8 <_svfiprintf_r+0x9c>
 800e122:	9b03      	ldr	r3, [sp, #12]
 800e124:	1d19      	adds	r1, r3, #4
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	9103      	str	r1, [sp, #12]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	bfbb      	ittet	lt
 800e12e:	425b      	neglt	r3, r3
 800e130:	f042 0202 	orrlt.w	r2, r2, #2
 800e134:	9307      	strge	r3, [sp, #28]
 800e136:	9307      	strlt	r3, [sp, #28]
 800e138:	bfb8      	it	lt
 800e13a:	9204      	strlt	r2, [sp, #16]
 800e13c:	7823      	ldrb	r3, [r4, #0]
 800e13e:	2b2e      	cmp	r3, #46	; 0x2e
 800e140:	d10c      	bne.n	800e15c <_svfiprintf_r+0x130>
 800e142:	7863      	ldrb	r3, [r4, #1]
 800e144:	2b2a      	cmp	r3, #42	; 0x2a
 800e146:	d135      	bne.n	800e1b4 <_svfiprintf_r+0x188>
 800e148:	9b03      	ldr	r3, [sp, #12]
 800e14a:	1d1a      	adds	r2, r3, #4
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	9203      	str	r2, [sp, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	bfb8      	it	lt
 800e154:	f04f 33ff 	movlt.w	r3, #4294967295
 800e158:	3402      	adds	r4, #2
 800e15a:	9305      	str	r3, [sp, #20]
 800e15c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e228 <_svfiprintf_r+0x1fc>
 800e160:	7821      	ldrb	r1, [r4, #0]
 800e162:	2203      	movs	r2, #3
 800e164:	4650      	mov	r0, sl
 800e166:	f7f2 f83b 	bl	80001e0 <memchr>
 800e16a:	b140      	cbz	r0, 800e17e <_svfiprintf_r+0x152>
 800e16c:	2340      	movs	r3, #64	; 0x40
 800e16e:	eba0 000a 	sub.w	r0, r0, sl
 800e172:	fa03 f000 	lsl.w	r0, r3, r0
 800e176:	9b04      	ldr	r3, [sp, #16]
 800e178:	4303      	orrs	r3, r0
 800e17a:	3401      	adds	r4, #1
 800e17c:	9304      	str	r3, [sp, #16]
 800e17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e182:	4826      	ldr	r0, [pc, #152]	; (800e21c <_svfiprintf_r+0x1f0>)
 800e184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e188:	2206      	movs	r2, #6
 800e18a:	f7f2 f829 	bl	80001e0 <memchr>
 800e18e:	2800      	cmp	r0, #0
 800e190:	d038      	beq.n	800e204 <_svfiprintf_r+0x1d8>
 800e192:	4b23      	ldr	r3, [pc, #140]	; (800e220 <_svfiprintf_r+0x1f4>)
 800e194:	bb1b      	cbnz	r3, 800e1de <_svfiprintf_r+0x1b2>
 800e196:	9b03      	ldr	r3, [sp, #12]
 800e198:	3307      	adds	r3, #7
 800e19a:	f023 0307 	bic.w	r3, r3, #7
 800e19e:	3308      	adds	r3, #8
 800e1a0:	9303      	str	r3, [sp, #12]
 800e1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1a4:	4433      	add	r3, r6
 800e1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a8:	e767      	b.n	800e07a <_svfiprintf_r+0x4e>
 800e1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	2001      	movs	r0, #1
 800e1b2:	e7a5      	b.n	800e100 <_svfiprintf_r+0xd4>
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	3401      	adds	r4, #1
 800e1b8:	9305      	str	r3, [sp, #20]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	f04f 0c0a 	mov.w	ip, #10
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1c6:	3a30      	subs	r2, #48	; 0x30
 800e1c8:	2a09      	cmp	r2, #9
 800e1ca:	d903      	bls.n	800e1d4 <_svfiprintf_r+0x1a8>
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d0c5      	beq.n	800e15c <_svfiprintf_r+0x130>
 800e1d0:	9105      	str	r1, [sp, #20]
 800e1d2:	e7c3      	b.n	800e15c <_svfiprintf_r+0x130>
 800e1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1d8:	4604      	mov	r4, r0
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e7f0      	b.n	800e1c0 <_svfiprintf_r+0x194>
 800e1de:	ab03      	add	r3, sp, #12
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	462a      	mov	r2, r5
 800e1e4:	4b0f      	ldr	r3, [pc, #60]	; (800e224 <_svfiprintf_r+0x1f8>)
 800e1e6:	a904      	add	r1, sp, #16
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	f7fe f801 	bl	800c1f0 <_printf_float>
 800e1ee:	1c42      	adds	r2, r0, #1
 800e1f0:	4606      	mov	r6, r0
 800e1f2:	d1d6      	bne.n	800e1a2 <_svfiprintf_r+0x176>
 800e1f4:	89ab      	ldrh	r3, [r5, #12]
 800e1f6:	065b      	lsls	r3, r3, #25
 800e1f8:	f53f af2c 	bmi.w	800e054 <_svfiprintf_r+0x28>
 800e1fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1fe:	b01d      	add	sp, #116	; 0x74
 800e200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e204:	ab03      	add	r3, sp, #12
 800e206:	9300      	str	r3, [sp, #0]
 800e208:	462a      	mov	r2, r5
 800e20a:	4b06      	ldr	r3, [pc, #24]	; (800e224 <_svfiprintf_r+0x1f8>)
 800e20c:	a904      	add	r1, sp, #16
 800e20e:	4638      	mov	r0, r7
 800e210:	f7fe fa92 	bl	800c738 <_printf_i>
 800e214:	e7eb      	b.n	800e1ee <_svfiprintf_r+0x1c2>
 800e216:	bf00      	nop
 800e218:	0800f12c 	.word	0x0800f12c
 800e21c:	0800f136 	.word	0x0800f136
 800e220:	0800c1f1 	.word	0x0800c1f1
 800e224:	0800df75 	.word	0x0800df75
 800e228:	0800f132 	.word	0x0800f132

0800e22c <_sbrk_r>:
 800e22c:	b538      	push	{r3, r4, r5, lr}
 800e22e:	4d06      	ldr	r5, [pc, #24]	; (800e248 <_sbrk_r+0x1c>)
 800e230:	2300      	movs	r3, #0
 800e232:	4604      	mov	r4, r0
 800e234:	4608      	mov	r0, r1
 800e236:	602b      	str	r3, [r5, #0]
 800e238:	f7f4 f96c 	bl	8002514 <_sbrk>
 800e23c:	1c43      	adds	r3, r0, #1
 800e23e:	d102      	bne.n	800e246 <_sbrk_r+0x1a>
 800e240:	682b      	ldr	r3, [r5, #0]
 800e242:	b103      	cbz	r3, 800e246 <_sbrk_r+0x1a>
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	20002248 	.word	0x20002248

0800e24c <__assert_func>:
 800e24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e24e:	4614      	mov	r4, r2
 800e250:	461a      	mov	r2, r3
 800e252:	4b09      	ldr	r3, [pc, #36]	; (800e278 <__assert_func+0x2c>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4605      	mov	r5, r0
 800e258:	68d8      	ldr	r0, [r3, #12]
 800e25a:	b14c      	cbz	r4, 800e270 <__assert_func+0x24>
 800e25c:	4b07      	ldr	r3, [pc, #28]	; (800e27c <__assert_func+0x30>)
 800e25e:	9100      	str	r1, [sp, #0]
 800e260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e264:	4906      	ldr	r1, [pc, #24]	; (800e280 <__assert_func+0x34>)
 800e266:	462b      	mov	r3, r5
 800e268:	f000 f80e 	bl	800e288 <fiprintf>
 800e26c:	f000 faa4 	bl	800e7b8 <abort>
 800e270:	4b04      	ldr	r3, [pc, #16]	; (800e284 <__assert_func+0x38>)
 800e272:	461c      	mov	r4, r3
 800e274:	e7f3      	b.n	800e25e <__assert_func+0x12>
 800e276:	bf00      	nop
 800e278:	20000190 	.word	0x20000190
 800e27c:	0800f13d 	.word	0x0800f13d
 800e280:	0800f14a 	.word	0x0800f14a
 800e284:	0800f178 	.word	0x0800f178

0800e288 <fiprintf>:
 800e288:	b40e      	push	{r1, r2, r3}
 800e28a:	b503      	push	{r0, r1, lr}
 800e28c:	4601      	mov	r1, r0
 800e28e:	ab03      	add	r3, sp, #12
 800e290:	4805      	ldr	r0, [pc, #20]	; (800e2a8 <fiprintf+0x20>)
 800e292:	f853 2b04 	ldr.w	r2, [r3], #4
 800e296:	6800      	ldr	r0, [r0, #0]
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	f000 f88f 	bl	800e3bc <_vfiprintf_r>
 800e29e:	b002      	add	sp, #8
 800e2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2a4:	b003      	add	sp, #12
 800e2a6:	4770      	bx	lr
 800e2a8:	20000190 	.word	0x20000190

0800e2ac <__ascii_mbtowc>:
 800e2ac:	b082      	sub	sp, #8
 800e2ae:	b901      	cbnz	r1, 800e2b2 <__ascii_mbtowc+0x6>
 800e2b0:	a901      	add	r1, sp, #4
 800e2b2:	b142      	cbz	r2, 800e2c6 <__ascii_mbtowc+0x1a>
 800e2b4:	b14b      	cbz	r3, 800e2ca <__ascii_mbtowc+0x1e>
 800e2b6:	7813      	ldrb	r3, [r2, #0]
 800e2b8:	600b      	str	r3, [r1, #0]
 800e2ba:	7812      	ldrb	r2, [r2, #0]
 800e2bc:	1e10      	subs	r0, r2, #0
 800e2be:	bf18      	it	ne
 800e2c0:	2001      	movne	r0, #1
 800e2c2:	b002      	add	sp, #8
 800e2c4:	4770      	bx	lr
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	e7fb      	b.n	800e2c2 <__ascii_mbtowc+0x16>
 800e2ca:	f06f 0001 	mvn.w	r0, #1
 800e2ce:	e7f8      	b.n	800e2c2 <__ascii_mbtowc+0x16>

0800e2d0 <memmove>:
 800e2d0:	4288      	cmp	r0, r1
 800e2d2:	b510      	push	{r4, lr}
 800e2d4:	eb01 0402 	add.w	r4, r1, r2
 800e2d8:	d902      	bls.n	800e2e0 <memmove+0x10>
 800e2da:	4284      	cmp	r4, r0
 800e2dc:	4623      	mov	r3, r4
 800e2de:	d807      	bhi.n	800e2f0 <memmove+0x20>
 800e2e0:	1e43      	subs	r3, r0, #1
 800e2e2:	42a1      	cmp	r1, r4
 800e2e4:	d008      	beq.n	800e2f8 <memmove+0x28>
 800e2e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2ee:	e7f8      	b.n	800e2e2 <memmove+0x12>
 800e2f0:	4402      	add	r2, r0
 800e2f2:	4601      	mov	r1, r0
 800e2f4:	428a      	cmp	r2, r1
 800e2f6:	d100      	bne.n	800e2fa <memmove+0x2a>
 800e2f8:	bd10      	pop	{r4, pc}
 800e2fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e302:	e7f7      	b.n	800e2f4 <memmove+0x24>

0800e304 <__malloc_lock>:
 800e304:	4801      	ldr	r0, [pc, #4]	; (800e30c <__malloc_lock+0x8>)
 800e306:	f000 bc17 	b.w	800eb38 <__retarget_lock_acquire_recursive>
 800e30a:	bf00      	nop
 800e30c:	20002250 	.word	0x20002250

0800e310 <__malloc_unlock>:
 800e310:	4801      	ldr	r0, [pc, #4]	; (800e318 <__malloc_unlock+0x8>)
 800e312:	f000 bc12 	b.w	800eb3a <__retarget_lock_release_recursive>
 800e316:	bf00      	nop
 800e318:	20002250 	.word	0x20002250

0800e31c <_realloc_r>:
 800e31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e31e:	4607      	mov	r7, r0
 800e320:	4614      	mov	r4, r2
 800e322:	460e      	mov	r6, r1
 800e324:	b921      	cbnz	r1, 800e330 <_realloc_r+0x14>
 800e326:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e32a:	4611      	mov	r1, r2
 800e32c:	f7ff bdc8 	b.w	800dec0 <_malloc_r>
 800e330:	b922      	cbnz	r2, 800e33c <_realloc_r+0x20>
 800e332:	f7ff fd75 	bl	800de20 <_free_r>
 800e336:	4625      	mov	r5, r4
 800e338:	4628      	mov	r0, r5
 800e33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e33c:	f000 fc62 	bl	800ec04 <_malloc_usable_size_r>
 800e340:	42a0      	cmp	r0, r4
 800e342:	d20f      	bcs.n	800e364 <_realloc_r+0x48>
 800e344:	4621      	mov	r1, r4
 800e346:	4638      	mov	r0, r7
 800e348:	f7ff fdba 	bl	800dec0 <_malloc_r>
 800e34c:	4605      	mov	r5, r0
 800e34e:	2800      	cmp	r0, #0
 800e350:	d0f2      	beq.n	800e338 <_realloc_r+0x1c>
 800e352:	4631      	mov	r1, r6
 800e354:	4622      	mov	r2, r4
 800e356:	f7ff f9c7 	bl	800d6e8 <memcpy>
 800e35a:	4631      	mov	r1, r6
 800e35c:	4638      	mov	r0, r7
 800e35e:	f7ff fd5f 	bl	800de20 <_free_r>
 800e362:	e7e9      	b.n	800e338 <_realloc_r+0x1c>
 800e364:	4635      	mov	r5, r6
 800e366:	e7e7      	b.n	800e338 <_realloc_r+0x1c>

0800e368 <__sfputc_r>:
 800e368:	6893      	ldr	r3, [r2, #8]
 800e36a:	3b01      	subs	r3, #1
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	b410      	push	{r4}
 800e370:	6093      	str	r3, [r2, #8]
 800e372:	da08      	bge.n	800e386 <__sfputc_r+0x1e>
 800e374:	6994      	ldr	r4, [r2, #24]
 800e376:	42a3      	cmp	r3, r4
 800e378:	db01      	blt.n	800e37e <__sfputc_r+0x16>
 800e37a:	290a      	cmp	r1, #10
 800e37c:	d103      	bne.n	800e386 <__sfputc_r+0x1e>
 800e37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e382:	f000 b94b 	b.w	800e61c <__swbuf_r>
 800e386:	6813      	ldr	r3, [r2, #0]
 800e388:	1c58      	adds	r0, r3, #1
 800e38a:	6010      	str	r0, [r2, #0]
 800e38c:	7019      	strb	r1, [r3, #0]
 800e38e:	4608      	mov	r0, r1
 800e390:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e394:	4770      	bx	lr

0800e396 <__sfputs_r>:
 800e396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e398:	4606      	mov	r6, r0
 800e39a:	460f      	mov	r7, r1
 800e39c:	4614      	mov	r4, r2
 800e39e:	18d5      	adds	r5, r2, r3
 800e3a0:	42ac      	cmp	r4, r5
 800e3a2:	d101      	bne.n	800e3a8 <__sfputs_r+0x12>
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	e007      	b.n	800e3b8 <__sfputs_r+0x22>
 800e3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ac:	463a      	mov	r2, r7
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	f7ff ffda 	bl	800e368 <__sfputc_r>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d1f3      	bne.n	800e3a0 <__sfputs_r+0xa>
 800e3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3bc <_vfiprintf_r>:
 800e3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c0:	460d      	mov	r5, r1
 800e3c2:	b09d      	sub	sp, #116	; 0x74
 800e3c4:	4614      	mov	r4, r2
 800e3c6:	4698      	mov	r8, r3
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	b118      	cbz	r0, 800e3d4 <_vfiprintf_r+0x18>
 800e3cc:	6983      	ldr	r3, [r0, #24]
 800e3ce:	b90b      	cbnz	r3, 800e3d4 <_vfiprintf_r+0x18>
 800e3d0:	f000 fb14 	bl	800e9fc <__sinit>
 800e3d4:	4b89      	ldr	r3, [pc, #548]	; (800e5fc <_vfiprintf_r+0x240>)
 800e3d6:	429d      	cmp	r5, r3
 800e3d8:	d11b      	bne.n	800e412 <_vfiprintf_r+0x56>
 800e3da:	6875      	ldr	r5, [r6, #4]
 800e3dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3de:	07d9      	lsls	r1, r3, #31
 800e3e0:	d405      	bmi.n	800e3ee <_vfiprintf_r+0x32>
 800e3e2:	89ab      	ldrh	r3, [r5, #12]
 800e3e4:	059a      	lsls	r2, r3, #22
 800e3e6:	d402      	bmi.n	800e3ee <_vfiprintf_r+0x32>
 800e3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3ea:	f000 fba5 	bl	800eb38 <__retarget_lock_acquire_recursive>
 800e3ee:	89ab      	ldrh	r3, [r5, #12]
 800e3f0:	071b      	lsls	r3, r3, #28
 800e3f2:	d501      	bpl.n	800e3f8 <_vfiprintf_r+0x3c>
 800e3f4:	692b      	ldr	r3, [r5, #16]
 800e3f6:	b9eb      	cbnz	r3, 800e434 <_vfiprintf_r+0x78>
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f000 f96e 	bl	800e6dc <__swsetup_r>
 800e400:	b1c0      	cbz	r0, 800e434 <_vfiprintf_r+0x78>
 800e402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e404:	07dc      	lsls	r4, r3, #31
 800e406:	d50e      	bpl.n	800e426 <_vfiprintf_r+0x6a>
 800e408:	f04f 30ff 	mov.w	r0, #4294967295
 800e40c:	b01d      	add	sp, #116	; 0x74
 800e40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e412:	4b7b      	ldr	r3, [pc, #492]	; (800e600 <_vfiprintf_r+0x244>)
 800e414:	429d      	cmp	r5, r3
 800e416:	d101      	bne.n	800e41c <_vfiprintf_r+0x60>
 800e418:	68b5      	ldr	r5, [r6, #8]
 800e41a:	e7df      	b.n	800e3dc <_vfiprintf_r+0x20>
 800e41c:	4b79      	ldr	r3, [pc, #484]	; (800e604 <_vfiprintf_r+0x248>)
 800e41e:	429d      	cmp	r5, r3
 800e420:	bf08      	it	eq
 800e422:	68f5      	ldreq	r5, [r6, #12]
 800e424:	e7da      	b.n	800e3dc <_vfiprintf_r+0x20>
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	0598      	lsls	r0, r3, #22
 800e42a:	d4ed      	bmi.n	800e408 <_vfiprintf_r+0x4c>
 800e42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e42e:	f000 fb84 	bl	800eb3a <__retarget_lock_release_recursive>
 800e432:	e7e9      	b.n	800e408 <_vfiprintf_r+0x4c>
 800e434:	2300      	movs	r3, #0
 800e436:	9309      	str	r3, [sp, #36]	; 0x24
 800e438:	2320      	movs	r3, #32
 800e43a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e442:	2330      	movs	r3, #48	; 0x30
 800e444:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e608 <_vfiprintf_r+0x24c>
 800e448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e44c:	f04f 0901 	mov.w	r9, #1
 800e450:	4623      	mov	r3, r4
 800e452:	469a      	mov	sl, r3
 800e454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e458:	b10a      	cbz	r2, 800e45e <_vfiprintf_r+0xa2>
 800e45a:	2a25      	cmp	r2, #37	; 0x25
 800e45c:	d1f9      	bne.n	800e452 <_vfiprintf_r+0x96>
 800e45e:	ebba 0b04 	subs.w	fp, sl, r4
 800e462:	d00b      	beq.n	800e47c <_vfiprintf_r+0xc0>
 800e464:	465b      	mov	r3, fp
 800e466:	4622      	mov	r2, r4
 800e468:	4629      	mov	r1, r5
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ff93 	bl	800e396 <__sfputs_r>
 800e470:	3001      	adds	r0, #1
 800e472:	f000 80aa 	beq.w	800e5ca <_vfiprintf_r+0x20e>
 800e476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e478:	445a      	add	r2, fp
 800e47a:	9209      	str	r2, [sp, #36]	; 0x24
 800e47c:	f89a 3000 	ldrb.w	r3, [sl]
 800e480:	2b00      	cmp	r3, #0
 800e482:	f000 80a2 	beq.w	800e5ca <_vfiprintf_r+0x20e>
 800e486:	2300      	movs	r3, #0
 800e488:	f04f 32ff 	mov.w	r2, #4294967295
 800e48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e490:	f10a 0a01 	add.w	sl, sl, #1
 800e494:	9304      	str	r3, [sp, #16]
 800e496:	9307      	str	r3, [sp, #28]
 800e498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e49c:	931a      	str	r3, [sp, #104]	; 0x68
 800e49e:	4654      	mov	r4, sl
 800e4a0:	2205      	movs	r2, #5
 800e4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a6:	4858      	ldr	r0, [pc, #352]	; (800e608 <_vfiprintf_r+0x24c>)
 800e4a8:	f7f1 fe9a 	bl	80001e0 <memchr>
 800e4ac:	9a04      	ldr	r2, [sp, #16]
 800e4ae:	b9d8      	cbnz	r0, 800e4e8 <_vfiprintf_r+0x12c>
 800e4b0:	06d1      	lsls	r1, r2, #27
 800e4b2:	bf44      	itt	mi
 800e4b4:	2320      	movmi	r3, #32
 800e4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4ba:	0713      	lsls	r3, r2, #28
 800e4bc:	bf44      	itt	mi
 800e4be:	232b      	movmi	r3, #43	; 0x2b
 800e4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ca:	d015      	beq.n	800e4f8 <_vfiprintf_r+0x13c>
 800e4cc:	9a07      	ldr	r2, [sp, #28]
 800e4ce:	4654      	mov	r4, sl
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	f04f 0c0a 	mov.w	ip, #10
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4dc:	3b30      	subs	r3, #48	; 0x30
 800e4de:	2b09      	cmp	r3, #9
 800e4e0:	d94e      	bls.n	800e580 <_vfiprintf_r+0x1c4>
 800e4e2:	b1b0      	cbz	r0, 800e512 <_vfiprintf_r+0x156>
 800e4e4:	9207      	str	r2, [sp, #28]
 800e4e6:	e014      	b.n	800e512 <_vfiprintf_r+0x156>
 800e4e8:	eba0 0308 	sub.w	r3, r0, r8
 800e4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	9304      	str	r3, [sp, #16]
 800e4f4:	46a2      	mov	sl, r4
 800e4f6:	e7d2      	b.n	800e49e <_vfiprintf_r+0xe2>
 800e4f8:	9b03      	ldr	r3, [sp, #12]
 800e4fa:	1d19      	adds	r1, r3, #4
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	9103      	str	r1, [sp, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	bfbb      	ittet	lt
 800e504:	425b      	neglt	r3, r3
 800e506:	f042 0202 	orrlt.w	r2, r2, #2
 800e50a:	9307      	strge	r3, [sp, #28]
 800e50c:	9307      	strlt	r3, [sp, #28]
 800e50e:	bfb8      	it	lt
 800e510:	9204      	strlt	r2, [sp, #16]
 800e512:	7823      	ldrb	r3, [r4, #0]
 800e514:	2b2e      	cmp	r3, #46	; 0x2e
 800e516:	d10c      	bne.n	800e532 <_vfiprintf_r+0x176>
 800e518:	7863      	ldrb	r3, [r4, #1]
 800e51a:	2b2a      	cmp	r3, #42	; 0x2a
 800e51c:	d135      	bne.n	800e58a <_vfiprintf_r+0x1ce>
 800e51e:	9b03      	ldr	r3, [sp, #12]
 800e520:	1d1a      	adds	r2, r3, #4
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	9203      	str	r2, [sp, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	bfb8      	it	lt
 800e52a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e52e:	3402      	adds	r4, #2
 800e530:	9305      	str	r3, [sp, #20]
 800e532:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e618 <_vfiprintf_r+0x25c>
 800e536:	7821      	ldrb	r1, [r4, #0]
 800e538:	2203      	movs	r2, #3
 800e53a:	4650      	mov	r0, sl
 800e53c:	f7f1 fe50 	bl	80001e0 <memchr>
 800e540:	b140      	cbz	r0, 800e554 <_vfiprintf_r+0x198>
 800e542:	2340      	movs	r3, #64	; 0x40
 800e544:	eba0 000a 	sub.w	r0, r0, sl
 800e548:	fa03 f000 	lsl.w	r0, r3, r0
 800e54c:	9b04      	ldr	r3, [sp, #16]
 800e54e:	4303      	orrs	r3, r0
 800e550:	3401      	adds	r4, #1
 800e552:	9304      	str	r3, [sp, #16]
 800e554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e558:	482c      	ldr	r0, [pc, #176]	; (800e60c <_vfiprintf_r+0x250>)
 800e55a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e55e:	2206      	movs	r2, #6
 800e560:	f7f1 fe3e 	bl	80001e0 <memchr>
 800e564:	2800      	cmp	r0, #0
 800e566:	d03f      	beq.n	800e5e8 <_vfiprintf_r+0x22c>
 800e568:	4b29      	ldr	r3, [pc, #164]	; (800e610 <_vfiprintf_r+0x254>)
 800e56a:	bb1b      	cbnz	r3, 800e5b4 <_vfiprintf_r+0x1f8>
 800e56c:	9b03      	ldr	r3, [sp, #12]
 800e56e:	3307      	adds	r3, #7
 800e570:	f023 0307 	bic.w	r3, r3, #7
 800e574:	3308      	adds	r3, #8
 800e576:	9303      	str	r3, [sp, #12]
 800e578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e57a:	443b      	add	r3, r7
 800e57c:	9309      	str	r3, [sp, #36]	; 0x24
 800e57e:	e767      	b.n	800e450 <_vfiprintf_r+0x94>
 800e580:	fb0c 3202 	mla	r2, ip, r2, r3
 800e584:	460c      	mov	r4, r1
 800e586:	2001      	movs	r0, #1
 800e588:	e7a5      	b.n	800e4d6 <_vfiprintf_r+0x11a>
 800e58a:	2300      	movs	r3, #0
 800e58c:	3401      	adds	r4, #1
 800e58e:	9305      	str	r3, [sp, #20]
 800e590:	4619      	mov	r1, r3
 800e592:	f04f 0c0a 	mov.w	ip, #10
 800e596:	4620      	mov	r0, r4
 800e598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e59c:	3a30      	subs	r2, #48	; 0x30
 800e59e:	2a09      	cmp	r2, #9
 800e5a0:	d903      	bls.n	800e5aa <_vfiprintf_r+0x1ee>
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0c5      	beq.n	800e532 <_vfiprintf_r+0x176>
 800e5a6:	9105      	str	r1, [sp, #20]
 800e5a8:	e7c3      	b.n	800e532 <_vfiprintf_r+0x176>
 800e5aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e7f0      	b.n	800e596 <_vfiprintf_r+0x1da>
 800e5b4:	ab03      	add	r3, sp, #12
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	462a      	mov	r2, r5
 800e5ba:	4b16      	ldr	r3, [pc, #88]	; (800e614 <_vfiprintf_r+0x258>)
 800e5bc:	a904      	add	r1, sp, #16
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f7fd fe16 	bl	800c1f0 <_printf_float>
 800e5c4:	4607      	mov	r7, r0
 800e5c6:	1c78      	adds	r0, r7, #1
 800e5c8:	d1d6      	bne.n	800e578 <_vfiprintf_r+0x1bc>
 800e5ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5cc:	07d9      	lsls	r1, r3, #31
 800e5ce:	d405      	bmi.n	800e5dc <_vfiprintf_r+0x220>
 800e5d0:	89ab      	ldrh	r3, [r5, #12]
 800e5d2:	059a      	lsls	r2, r3, #22
 800e5d4:	d402      	bmi.n	800e5dc <_vfiprintf_r+0x220>
 800e5d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5d8:	f000 faaf 	bl	800eb3a <__retarget_lock_release_recursive>
 800e5dc:	89ab      	ldrh	r3, [r5, #12]
 800e5de:	065b      	lsls	r3, r3, #25
 800e5e0:	f53f af12 	bmi.w	800e408 <_vfiprintf_r+0x4c>
 800e5e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5e6:	e711      	b.n	800e40c <_vfiprintf_r+0x50>
 800e5e8:	ab03      	add	r3, sp, #12
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	462a      	mov	r2, r5
 800e5ee:	4b09      	ldr	r3, [pc, #36]	; (800e614 <_vfiprintf_r+0x258>)
 800e5f0:	a904      	add	r1, sp, #16
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f7fe f8a0 	bl	800c738 <_printf_i>
 800e5f8:	e7e4      	b.n	800e5c4 <_vfiprintf_r+0x208>
 800e5fa:	bf00      	nop
 800e5fc:	0800f2a4 	.word	0x0800f2a4
 800e600:	0800f2c4 	.word	0x0800f2c4
 800e604:	0800f284 	.word	0x0800f284
 800e608:	0800f12c 	.word	0x0800f12c
 800e60c:	0800f136 	.word	0x0800f136
 800e610:	0800c1f1 	.word	0x0800c1f1
 800e614:	0800e397 	.word	0x0800e397
 800e618:	0800f132 	.word	0x0800f132

0800e61c <__swbuf_r>:
 800e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61e:	460e      	mov	r6, r1
 800e620:	4614      	mov	r4, r2
 800e622:	4605      	mov	r5, r0
 800e624:	b118      	cbz	r0, 800e62e <__swbuf_r+0x12>
 800e626:	6983      	ldr	r3, [r0, #24]
 800e628:	b90b      	cbnz	r3, 800e62e <__swbuf_r+0x12>
 800e62a:	f000 f9e7 	bl	800e9fc <__sinit>
 800e62e:	4b21      	ldr	r3, [pc, #132]	; (800e6b4 <__swbuf_r+0x98>)
 800e630:	429c      	cmp	r4, r3
 800e632:	d12b      	bne.n	800e68c <__swbuf_r+0x70>
 800e634:	686c      	ldr	r4, [r5, #4]
 800e636:	69a3      	ldr	r3, [r4, #24]
 800e638:	60a3      	str	r3, [r4, #8]
 800e63a:	89a3      	ldrh	r3, [r4, #12]
 800e63c:	071a      	lsls	r2, r3, #28
 800e63e:	d52f      	bpl.n	800e6a0 <__swbuf_r+0x84>
 800e640:	6923      	ldr	r3, [r4, #16]
 800e642:	b36b      	cbz	r3, 800e6a0 <__swbuf_r+0x84>
 800e644:	6923      	ldr	r3, [r4, #16]
 800e646:	6820      	ldr	r0, [r4, #0]
 800e648:	1ac0      	subs	r0, r0, r3
 800e64a:	6963      	ldr	r3, [r4, #20]
 800e64c:	b2f6      	uxtb	r6, r6
 800e64e:	4283      	cmp	r3, r0
 800e650:	4637      	mov	r7, r6
 800e652:	dc04      	bgt.n	800e65e <__swbuf_r+0x42>
 800e654:	4621      	mov	r1, r4
 800e656:	4628      	mov	r0, r5
 800e658:	f000 f93c 	bl	800e8d4 <_fflush_r>
 800e65c:	bb30      	cbnz	r0, 800e6ac <__swbuf_r+0x90>
 800e65e:	68a3      	ldr	r3, [r4, #8]
 800e660:	3b01      	subs	r3, #1
 800e662:	60a3      	str	r3, [r4, #8]
 800e664:	6823      	ldr	r3, [r4, #0]
 800e666:	1c5a      	adds	r2, r3, #1
 800e668:	6022      	str	r2, [r4, #0]
 800e66a:	701e      	strb	r6, [r3, #0]
 800e66c:	6963      	ldr	r3, [r4, #20]
 800e66e:	3001      	adds	r0, #1
 800e670:	4283      	cmp	r3, r0
 800e672:	d004      	beq.n	800e67e <__swbuf_r+0x62>
 800e674:	89a3      	ldrh	r3, [r4, #12]
 800e676:	07db      	lsls	r3, r3, #31
 800e678:	d506      	bpl.n	800e688 <__swbuf_r+0x6c>
 800e67a:	2e0a      	cmp	r6, #10
 800e67c:	d104      	bne.n	800e688 <__swbuf_r+0x6c>
 800e67e:	4621      	mov	r1, r4
 800e680:	4628      	mov	r0, r5
 800e682:	f000 f927 	bl	800e8d4 <_fflush_r>
 800e686:	b988      	cbnz	r0, 800e6ac <__swbuf_r+0x90>
 800e688:	4638      	mov	r0, r7
 800e68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e68c:	4b0a      	ldr	r3, [pc, #40]	; (800e6b8 <__swbuf_r+0x9c>)
 800e68e:	429c      	cmp	r4, r3
 800e690:	d101      	bne.n	800e696 <__swbuf_r+0x7a>
 800e692:	68ac      	ldr	r4, [r5, #8]
 800e694:	e7cf      	b.n	800e636 <__swbuf_r+0x1a>
 800e696:	4b09      	ldr	r3, [pc, #36]	; (800e6bc <__swbuf_r+0xa0>)
 800e698:	429c      	cmp	r4, r3
 800e69a:	bf08      	it	eq
 800e69c:	68ec      	ldreq	r4, [r5, #12]
 800e69e:	e7ca      	b.n	800e636 <__swbuf_r+0x1a>
 800e6a0:	4621      	mov	r1, r4
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f000 f81a 	bl	800e6dc <__swsetup_r>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d0cb      	beq.n	800e644 <__swbuf_r+0x28>
 800e6ac:	f04f 37ff 	mov.w	r7, #4294967295
 800e6b0:	e7ea      	b.n	800e688 <__swbuf_r+0x6c>
 800e6b2:	bf00      	nop
 800e6b4:	0800f2a4 	.word	0x0800f2a4
 800e6b8:	0800f2c4 	.word	0x0800f2c4
 800e6bc:	0800f284 	.word	0x0800f284

0800e6c0 <__ascii_wctomb>:
 800e6c0:	b149      	cbz	r1, 800e6d6 <__ascii_wctomb+0x16>
 800e6c2:	2aff      	cmp	r2, #255	; 0xff
 800e6c4:	bf85      	ittet	hi
 800e6c6:	238a      	movhi	r3, #138	; 0x8a
 800e6c8:	6003      	strhi	r3, [r0, #0]
 800e6ca:	700a      	strbls	r2, [r1, #0]
 800e6cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800e6d0:	bf98      	it	ls
 800e6d2:	2001      	movls	r0, #1
 800e6d4:	4770      	bx	lr
 800e6d6:	4608      	mov	r0, r1
 800e6d8:	4770      	bx	lr
	...

0800e6dc <__swsetup_r>:
 800e6dc:	4b32      	ldr	r3, [pc, #200]	; (800e7a8 <__swsetup_r+0xcc>)
 800e6de:	b570      	push	{r4, r5, r6, lr}
 800e6e0:	681d      	ldr	r5, [r3, #0]
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	b125      	cbz	r5, 800e6f2 <__swsetup_r+0x16>
 800e6e8:	69ab      	ldr	r3, [r5, #24]
 800e6ea:	b913      	cbnz	r3, 800e6f2 <__swsetup_r+0x16>
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	f000 f985 	bl	800e9fc <__sinit>
 800e6f2:	4b2e      	ldr	r3, [pc, #184]	; (800e7ac <__swsetup_r+0xd0>)
 800e6f4:	429c      	cmp	r4, r3
 800e6f6:	d10f      	bne.n	800e718 <__swsetup_r+0x3c>
 800e6f8:	686c      	ldr	r4, [r5, #4]
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e700:	0719      	lsls	r1, r3, #28
 800e702:	d42c      	bmi.n	800e75e <__swsetup_r+0x82>
 800e704:	06dd      	lsls	r5, r3, #27
 800e706:	d411      	bmi.n	800e72c <__swsetup_r+0x50>
 800e708:	2309      	movs	r3, #9
 800e70a:	6033      	str	r3, [r6, #0]
 800e70c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e710:	81a3      	strh	r3, [r4, #12]
 800e712:	f04f 30ff 	mov.w	r0, #4294967295
 800e716:	e03e      	b.n	800e796 <__swsetup_r+0xba>
 800e718:	4b25      	ldr	r3, [pc, #148]	; (800e7b0 <__swsetup_r+0xd4>)
 800e71a:	429c      	cmp	r4, r3
 800e71c:	d101      	bne.n	800e722 <__swsetup_r+0x46>
 800e71e:	68ac      	ldr	r4, [r5, #8]
 800e720:	e7eb      	b.n	800e6fa <__swsetup_r+0x1e>
 800e722:	4b24      	ldr	r3, [pc, #144]	; (800e7b4 <__swsetup_r+0xd8>)
 800e724:	429c      	cmp	r4, r3
 800e726:	bf08      	it	eq
 800e728:	68ec      	ldreq	r4, [r5, #12]
 800e72a:	e7e6      	b.n	800e6fa <__swsetup_r+0x1e>
 800e72c:	0758      	lsls	r0, r3, #29
 800e72e:	d512      	bpl.n	800e756 <__swsetup_r+0x7a>
 800e730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e732:	b141      	cbz	r1, 800e746 <__swsetup_r+0x6a>
 800e734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e738:	4299      	cmp	r1, r3
 800e73a:	d002      	beq.n	800e742 <__swsetup_r+0x66>
 800e73c:	4630      	mov	r0, r6
 800e73e:	f7ff fb6f 	bl	800de20 <_free_r>
 800e742:	2300      	movs	r3, #0
 800e744:	6363      	str	r3, [r4, #52]	; 0x34
 800e746:	89a3      	ldrh	r3, [r4, #12]
 800e748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e74c:	81a3      	strh	r3, [r4, #12]
 800e74e:	2300      	movs	r3, #0
 800e750:	6063      	str	r3, [r4, #4]
 800e752:	6923      	ldr	r3, [r4, #16]
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	89a3      	ldrh	r3, [r4, #12]
 800e758:	f043 0308 	orr.w	r3, r3, #8
 800e75c:	81a3      	strh	r3, [r4, #12]
 800e75e:	6923      	ldr	r3, [r4, #16]
 800e760:	b94b      	cbnz	r3, 800e776 <__swsetup_r+0x9a>
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e76c:	d003      	beq.n	800e776 <__swsetup_r+0x9a>
 800e76e:	4621      	mov	r1, r4
 800e770:	4630      	mov	r0, r6
 800e772:	f000 fa07 	bl	800eb84 <__smakebuf_r>
 800e776:	89a0      	ldrh	r0, [r4, #12]
 800e778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e77c:	f010 0301 	ands.w	r3, r0, #1
 800e780:	d00a      	beq.n	800e798 <__swsetup_r+0xbc>
 800e782:	2300      	movs	r3, #0
 800e784:	60a3      	str	r3, [r4, #8]
 800e786:	6963      	ldr	r3, [r4, #20]
 800e788:	425b      	negs	r3, r3
 800e78a:	61a3      	str	r3, [r4, #24]
 800e78c:	6923      	ldr	r3, [r4, #16]
 800e78e:	b943      	cbnz	r3, 800e7a2 <__swsetup_r+0xc6>
 800e790:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e794:	d1ba      	bne.n	800e70c <__swsetup_r+0x30>
 800e796:	bd70      	pop	{r4, r5, r6, pc}
 800e798:	0781      	lsls	r1, r0, #30
 800e79a:	bf58      	it	pl
 800e79c:	6963      	ldrpl	r3, [r4, #20]
 800e79e:	60a3      	str	r3, [r4, #8]
 800e7a0:	e7f4      	b.n	800e78c <__swsetup_r+0xb0>
 800e7a2:	2000      	movs	r0, #0
 800e7a4:	e7f7      	b.n	800e796 <__swsetup_r+0xba>
 800e7a6:	bf00      	nop
 800e7a8:	20000190 	.word	0x20000190
 800e7ac:	0800f2a4 	.word	0x0800f2a4
 800e7b0:	0800f2c4 	.word	0x0800f2c4
 800e7b4:	0800f284 	.word	0x0800f284

0800e7b8 <abort>:
 800e7b8:	b508      	push	{r3, lr}
 800e7ba:	2006      	movs	r0, #6
 800e7bc:	f000 fa52 	bl	800ec64 <raise>
 800e7c0:	2001      	movs	r0, #1
 800e7c2:	f7f3 fe2f 	bl	8002424 <_exit>
	...

0800e7c8 <__sflush_r>:
 800e7c8:	898a      	ldrh	r2, [r1, #12]
 800e7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	0710      	lsls	r0, r2, #28
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	d458      	bmi.n	800e888 <__sflush_r+0xc0>
 800e7d6:	684b      	ldr	r3, [r1, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	dc05      	bgt.n	800e7e8 <__sflush_r+0x20>
 800e7dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	dc02      	bgt.n	800e7e8 <__sflush_r+0x20>
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7ea:	2e00      	cmp	r6, #0
 800e7ec:	d0f9      	beq.n	800e7e2 <__sflush_r+0x1a>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e7f4:	682f      	ldr	r7, [r5, #0]
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	d032      	beq.n	800e860 <__sflush_r+0x98>
 800e7fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7fc:	89a3      	ldrh	r3, [r4, #12]
 800e7fe:	075a      	lsls	r2, r3, #29
 800e800:	d505      	bpl.n	800e80e <__sflush_r+0x46>
 800e802:	6863      	ldr	r3, [r4, #4]
 800e804:	1ac0      	subs	r0, r0, r3
 800e806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e808:	b10b      	cbz	r3, 800e80e <__sflush_r+0x46>
 800e80a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e80c:	1ac0      	subs	r0, r0, r3
 800e80e:	2300      	movs	r3, #0
 800e810:	4602      	mov	r2, r0
 800e812:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e814:	6a21      	ldr	r1, [r4, #32]
 800e816:	4628      	mov	r0, r5
 800e818:	47b0      	blx	r6
 800e81a:	1c43      	adds	r3, r0, #1
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	d106      	bne.n	800e82e <__sflush_r+0x66>
 800e820:	6829      	ldr	r1, [r5, #0]
 800e822:	291d      	cmp	r1, #29
 800e824:	d82c      	bhi.n	800e880 <__sflush_r+0xb8>
 800e826:	4a2a      	ldr	r2, [pc, #168]	; (800e8d0 <__sflush_r+0x108>)
 800e828:	40ca      	lsrs	r2, r1
 800e82a:	07d6      	lsls	r6, r2, #31
 800e82c:	d528      	bpl.n	800e880 <__sflush_r+0xb8>
 800e82e:	2200      	movs	r2, #0
 800e830:	6062      	str	r2, [r4, #4]
 800e832:	04d9      	lsls	r1, r3, #19
 800e834:	6922      	ldr	r2, [r4, #16]
 800e836:	6022      	str	r2, [r4, #0]
 800e838:	d504      	bpl.n	800e844 <__sflush_r+0x7c>
 800e83a:	1c42      	adds	r2, r0, #1
 800e83c:	d101      	bne.n	800e842 <__sflush_r+0x7a>
 800e83e:	682b      	ldr	r3, [r5, #0]
 800e840:	b903      	cbnz	r3, 800e844 <__sflush_r+0x7c>
 800e842:	6560      	str	r0, [r4, #84]	; 0x54
 800e844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e846:	602f      	str	r7, [r5, #0]
 800e848:	2900      	cmp	r1, #0
 800e84a:	d0ca      	beq.n	800e7e2 <__sflush_r+0x1a>
 800e84c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e850:	4299      	cmp	r1, r3
 800e852:	d002      	beq.n	800e85a <__sflush_r+0x92>
 800e854:	4628      	mov	r0, r5
 800e856:	f7ff fae3 	bl	800de20 <_free_r>
 800e85a:	2000      	movs	r0, #0
 800e85c:	6360      	str	r0, [r4, #52]	; 0x34
 800e85e:	e7c1      	b.n	800e7e4 <__sflush_r+0x1c>
 800e860:	6a21      	ldr	r1, [r4, #32]
 800e862:	2301      	movs	r3, #1
 800e864:	4628      	mov	r0, r5
 800e866:	47b0      	blx	r6
 800e868:	1c41      	adds	r1, r0, #1
 800e86a:	d1c7      	bne.n	800e7fc <__sflush_r+0x34>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d0c4      	beq.n	800e7fc <__sflush_r+0x34>
 800e872:	2b1d      	cmp	r3, #29
 800e874:	d001      	beq.n	800e87a <__sflush_r+0xb2>
 800e876:	2b16      	cmp	r3, #22
 800e878:	d101      	bne.n	800e87e <__sflush_r+0xb6>
 800e87a:	602f      	str	r7, [r5, #0]
 800e87c:	e7b1      	b.n	800e7e2 <__sflush_r+0x1a>
 800e87e:	89a3      	ldrh	r3, [r4, #12]
 800e880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e884:	81a3      	strh	r3, [r4, #12]
 800e886:	e7ad      	b.n	800e7e4 <__sflush_r+0x1c>
 800e888:	690f      	ldr	r7, [r1, #16]
 800e88a:	2f00      	cmp	r7, #0
 800e88c:	d0a9      	beq.n	800e7e2 <__sflush_r+0x1a>
 800e88e:	0793      	lsls	r3, r2, #30
 800e890:	680e      	ldr	r6, [r1, #0]
 800e892:	bf08      	it	eq
 800e894:	694b      	ldreq	r3, [r1, #20]
 800e896:	600f      	str	r7, [r1, #0]
 800e898:	bf18      	it	ne
 800e89a:	2300      	movne	r3, #0
 800e89c:	eba6 0807 	sub.w	r8, r6, r7
 800e8a0:	608b      	str	r3, [r1, #8]
 800e8a2:	f1b8 0f00 	cmp.w	r8, #0
 800e8a6:	dd9c      	ble.n	800e7e2 <__sflush_r+0x1a>
 800e8a8:	6a21      	ldr	r1, [r4, #32]
 800e8aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e8ac:	4643      	mov	r3, r8
 800e8ae:	463a      	mov	r2, r7
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	47b0      	blx	r6
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	dc06      	bgt.n	800e8c6 <__sflush_r+0xfe>
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8be:	81a3      	strh	r3, [r4, #12]
 800e8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c4:	e78e      	b.n	800e7e4 <__sflush_r+0x1c>
 800e8c6:	4407      	add	r7, r0
 800e8c8:	eba8 0800 	sub.w	r8, r8, r0
 800e8cc:	e7e9      	b.n	800e8a2 <__sflush_r+0xda>
 800e8ce:	bf00      	nop
 800e8d0:	20400001 	.word	0x20400001

0800e8d4 <_fflush_r>:
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	690b      	ldr	r3, [r1, #16]
 800e8d8:	4605      	mov	r5, r0
 800e8da:	460c      	mov	r4, r1
 800e8dc:	b913      	cbnz	r3, 800e8e4 <_fflush_r+0x10>
 800e8de:	2500      	movs	r5, #0
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	bd38      	pop	{r3, r4, r5, pc}
 800e8e4:	b118      	cbz	r0, 800e8ee <_fflush_r+0x1a>
 800e8e6:	6983      	ldr	r3, [r0, #24]
 800e8e8:	b90b      	cbnz	r3, 800e8ee <_fflush_r+0x1a>
 800e8ea:	f000 f887 	bl	800e9fc <__sinit>
 800e8ee:	4b14      	ldr	r3, [pc, #80]	; (800e940 <_fflush_r+0x6c>)
 800e8f0:	429c      	cmp	r4, r3
 800e8f2:	d11b      	bne.n	800e92c <_fflush_r+0x58>
 800e8f4:	686c      	ldr	r4, [r5, #4]
 800e8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d0ef      	beq.n	800e8de <_fflush_r+0xa>
 800e8fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e900:	07d0      	lsls	r0, r2, #31
 800e902:	d404      	bmi.n	800e90e <_fflush_r+0x3a>
 800e904:	0599      	lsls	r1, r3, #22
 800e906:	d402      	bmi.n	800e90e <_fflush_r+0x3a>
 800e908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e90a:	f000 f915 	bl	800eb38 <__retarget_lock_acquire_recursive>
 800e90e:	4628      	mov	r0, r5
 800e910:	4621      	mov	r1, r4
 800e912:	f7ff ff59 	bl	800e7c8 <__sflush_r>
 800e916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e918:	07da      	lsls	r2, r3, #31
 800e91a:	4605      	mov	r5, r0
 800e91c:	d4e0      	bmi.n	800e8e0 <_fflush_r+0xc>
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	059b      	lsls	r3, r3, #22
 800e922:	d4dd      	bmi.n	800e8e0 <_fflush_r+0xc>
 800e924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e926:	f000 f908 	bl	800eb3a <__retarget_lock_release_recursive>
 800e92a:	e7d9      	b.n	800e8e0 <_fflush_r+0xc>
 800e92c:	4b05      	ldr	r3, [pc, #20]	; (800e944 <_fflush_r+0x70>)
 800e92e:	429c      	cmp	r4, r3
 800e930:	d101      	bne.n	800e936 <_fflush_r+0x62>
 800e932:	68ac      	ldr	r4, [r5, #8]
 800e934:	e7df      	b.n	800e8f6 <_fflush_r+0x22>
 800e936:	4b04      	ldr	r3, [pc, #16]	; (800e948 <_fflush_r+0x74>)
 800e938:	429c      	cmp	r4, r3
 800e93a:	bf08      	it	eq
 800e93c:	68ec      	ldreq	r4, [r5, #12]
 800e93e:	e7da      	b.n	800e8f6 <_fflush_r+0x22>
 800e940:	0800f2a4 	.word	0x0800f2a4
 800e944:	0800f2c4 	.word	0x0800f2c4
 800e948:	0800f284 	.word	0x0800f284

0800e94c <std>:
 800e94c:	2300      	movs	r3, #0
 800e94e:	b510      	push	{r4, lr}
 800e950:	4604      	mov	r4, r0
 800e952:	e9c0 3300 	strd	r3, r3, [r0]
 800e956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e95a:	6083      	str	r3, [r0, #8]
 800e95c:	8181      	strh	r1, [r0, #12]
 800e95e:	6643      	str	r3, [r0, #100]	; 0x64
 800e960:	81c2      	strh	r2, [r0, #14]
 800e962:	6183      	str	r3, [r0, #24]
 800e964:	4619      	mov	r1, r3
 800e966:	2208      	movs	r2, #8
 800e968:	305c      	adds	r0, #92	; 0x5c
 800e96a:	f7fd fb99 	bl	800c0a0 <memset>
 800e96e:	4b05      	ldr	r3, [pc, #20]	; (800e984 <std+0x38>)
 800e970:	6263      	str	r3, [r4, #36]	; 0x24
 800e972:	4b05      	ldr	r3, [pc, #20]	; (800e988 <std+0x3c>)
 800e974:	62a3      	str	r3, [r4, #40]	; 0x28
 800e976:	4b05      	ldr	r3, [pc, #20]	; (800e98c <std+0x40>)
 800e978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e97a:	4b05      	ldr	r3, [pc, #20]	; (800e990 <std+0x44>)
 800e97c:	6224      	str	r4, [r4, #32]
 800e97e:	6323      	str	r3, [r4, #48]	; 0x30
 800e980:	bd10      	pop	{r4, pc}
 800e982:	bf00      	nop
 800e984:	0800ec9d 	.word	0x0800ec9d
 800e988:	0800ecbf 	.word	0x0800ecbf
 800e98c:	0800ecf7 	.word	0x0800ecf7
 800e990:	0800ed1b 	.word	0x0800ed1b

0800e994 <_cleanup_r>:
 800e994:	4901      	ldr	r1, [pc, #4]	; (800e99c <_cleanup_r+0x8>)
 800e996:	f000 b8af 	b.w	800eaf8 <_fwalk_reent>
 800e99a:	bf00      	nop
 800e99c:	0800e8d5 	.word	0x0800e8d5

0800e9a0 <__sfmoreglue>:
 800e9a0:	b570      	push	{r4, r5, r6, lr}
 800e9a2:	1e4a      	subs	r2, r1, #1
 800e9a4:	2568      	movs	r5, #104	; 0x68
 800e9a6:	4355      	muls	r5, r2
 800e9a8:	460e      	mov	r6, r1
 800e9aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9ae:	f7ff fa87 	bl	800dec0 <_malloc_r>
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	b140      	cbz	r0, 800e9c8 <__sfmoreglue+0x28>
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	e9c0 1600 	strd	r1, r6, [r0]
 800e9bc:	300c      	adds	r0, #12
 800e9be:	60a0      	str	r0, [r4, #8]
 800e9c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e9c4:	f7fd fb6c 	bl	800c0a0 <memset>
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	bd70      	pop	{r4, r5, r6, pc}

0800e9cc <__sfp_lock_acquire>:
 800e9cc:	4801      	ldr	r0, [pc, #4]	; (800e9d4 <__sfp_lock_acquire+0x8>)
 800e9ce:	f000 b8b3 	b.w	800eb38 <__retarget_lock_acquire_recursive>
 800e9d2:	bf00      	nop
 800e9d4:	20002254 	.word	0x20002254

0800e9d8 <__sfp_lock_release>:
 800e9d8:	4801      	ldr	r0, [pc, #4]	; (800e9e0 <__sfp_lock_release+0x8>)
 800e9da:	f000 b8ae 	b.w	800eb3a <__retarget_lock_release_recursive>
 800e9de:	bf00      	nop
 800e9e0:	20002254 	.word	0x20002254

0800e9e4 <__sinit_lock_acquire>:
 800e9e4:	4801      	ldr	r0, [pc, #4]	; (800e9ec <__sinit_lock_acquire+0x8>)
 800e9e6:	f000 b8a7 	b.w	800eb38 <__retarget_lock_acquire_recursive>
 800e9ea:	bf00      	nop
 800e9ec:	2000224f 	.word	0x2000224f

0800e9f0 <__sinit_lock_release>:
 800e9f0:	4801      	ldr	r0, [pc, #4]	; (800e9f8 <__sinit_lock_release+0x8>)
 800e9f2:	f000 b8a2 	b.w	800eb3a <__retarget_lock_release_recursive>
 800e9f6:	bf00      	nop
 800e9f8:	2000224f 	.word	0x2000224f

0800e9fc <__sinit>:
 800e9fc:	b510      	push	{r4, lr}
 800e9fe:	4604      	mov	r4, r0
 800ea00:	f7ff fff0 	bl	800e9e4 <__sinit_lock_acquire>
 800ea04:	69a3      	ldr	r3, [r4, #24]
 800ea06:	b11b      	cbz	r3, 800ea10 <__sinit+0x14>
 800ea08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea0c:	f7ff bff0 	b.w	800e9f0 <__sinit_lock_release>
 800ea10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea14:	6523      	str	r3, [r4, #80]	; 0x50
 800ea16:	4b13      	ldr	r3, [pc, #76]	; (800ea64 <__sinit+0x68>)
 800ea18:	4a13      	ldr	r2, [pc, #76]	; (800ea68 <__sinit+0x6c>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea1e:	42a3      	cmp	r3, r4
 800ea20:	bf04      	itt	eq
 800ea22:	2301      	moveq	r3, #1
 800ea24:	61a3      	streq	r3, [r4, #24]
 800ea26:	4620      	mov	r0, r4
 800ea28:	f000 f820 	bl	800ea6c <__sfp>
 800ea2c:	6060      	str	r0, [r4, #4]
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f000 f81c 	bl	800ea6c <__sfp>
 800ea34:	60a0      	str	r0, [r4, #8]
 800ea36:	4620      	mov	r0, r4
 800ea38:	f000 f818 	bl	800ea6c <__sfp>
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	60e0      	str	r0, [r4, #12]
 800ea40:	2104      	movs	r1, #4
 800ea42:	6860      	ldr	r0, [r4, #4]
 800ea44:	f7ff ff82 	bl	800e94c <std>
 800ea48:	68a0      	ldr	r0, [r4, #8]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	2109      	movs	r1, #9
 800ea4e:	f7ff ff7d 	bl	800e94c <std>
 800ea52:	68e0      	ldr	r0, [r4, #12]
 800ea54:	2202      	movs	r2, #2
 800ea56:	2112      	movs	r1, #18
 800ea58:	f7ff ff78 	bl	800e94c <std>
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	61a3      	str	r3, [r4, #24]
 800ea60:	e7d2      	b.n	800ea08 <__sinit+0xc>
 800ea62:	bf00      	nop
 800ea64:	0800ef00 	.word	0x0800ef00
 800ea68:	0800e995 	.word	0x0800e995

0800ea6c <__sfp>:
 800ea6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6e:	4607      	mov	r7, r0
 800ea70:	f7ff ffac 	bl	800e9cc <__sfp_lock_acquire>
 800ea74:	4b1e      	ldr	r3, [pc, #120]	; (800eaf0 <__sfp+0x84>)
 800ea76:	681e      	ldr	r6, [r3, #0]
 800ea78:	69b3      	ldr	r3, [r6, #24]
 800ea7a:	b913      	cbnz	r3, 800ea82 <__sfp+0x16>
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f7ff ffbd 	bl	800e9fc <__sinit>
 800ea82:	3648      	adds	r6, #72	; 0x48
 800ea84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	d503      	bpl.n	800ea94 <__sfp+0x28>
 800ea8c:	6833      	ldr	r3, [r6, #0]
 800ea8e:	b30b      	cbz	r3, 800ead4 <__sfp+0x68>
 800ea90:	6836      	ldr	r6, [r6, #0]
 800ea92:	e7f7      	b.n	800ea84 <__sfp+0x18>
 800ea94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea98:	b9d5      	cbnz	r5, 800ead0 <__sfp+0x64>
 800ea9a:	4b16      	ldr	r3, [pc, #88]	; (800eaf4 <__sfp+0x88>)
 800ea9c:	60e3      	str	r3, [r4, #12]
 800ea9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eaa2:	6665      	str	r5, [r4, #100]	; 0x64
 800eaa4:	f000 f847 	bl	800eb36 <__retarget_lock_init_recursive>
 800eaa8:	f7ff ff96 	bl	800e9d8 <__sfp_lock_release>
 800eaac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eab0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eab4:	6025      	str	r5, [r4, #0]
 800eab6:	61a5      	str	r5, [r4, #24]
 800eab8:	2208      	movs	r2, #8
 800eaba:	4629      	mov	r1, r5
 800eabc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eac0:	f7fd faee 	bl	800c0a0 <memset>
 800eac4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eac8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eacc:	4620      	mov	r0, r4
 800eace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ead0:	3468      	adds	r4, #104	; 0x68
 800ead2:	e7d9      	b.n	800ea88 <__sfp+0x1c>
 800ead4:	2104      	movs	r1, #4
 800ead6:	4638      	mov	r0, r7
 800ead8:	f7ff ff62 	bl	800e9a0 <__sfmoreglue>
 800eadc:	4604      	mov	r4, r0
 800eade:	6030      	str	r0, [r6, #0]
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d1d5      	bne.n	800ea90 <__sfp+0x24>
 800eae4:	f7ff ff78 	bl	800e9d8 <__sfp_lock_release>
 800eae8:	230c      	movs	r3, #12
 800eaea:	603b      	str	r3, [r7, #0]
 800eaec:	e7ee      	b.n	800eacc <__sfp+0x60>
 800eaee:	bf00      	nop
 800eaf0:	0800ef00 	.word	0x0800ef00
 800eaf4:	ffff0001 	.word	0xffff0001

0800eaf8 <_fwalk_reent>:
 800eaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eafc:	4606      	mov	r6, r0
 800eafe:	4688      	mov	r8, r1
 800eb00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb04:	2700      	movs	r7, #0
 800eb06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb0a:	f1b9 0901 	subs.w	r9, r9, #1
 800eb0e:	d505      	bpl.n	800eb1c <_fwalk_reent+0x24>
 800eb10:	6824      	ldr	r4, [r4, #0]
 800eb12:	2c00      	cmp	r4, #0
 800eb14:	d1f7      	bne.n	800eb06 <_fwalk_reent+0xe>
 800eb16:	4638      	mov	r0, r7
 800eb18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb1c:	89ab      	ldrh	r3, [r5, #12]
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d907      	bls.n	800eb32 <_fwalk_reent+0x3a>
 800eb22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb26:	3301      	adds	r3, #1
 800eb28:	d003      	beq.n	800eb32 <_fwalk_reent+0x3a>
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	47c0      	blx	r8
 800eb30:	4307      	orrs	r7, r0
 800eb32:	3568      	adds	r5, #104	; 0x68
 800eb34:	e7e9      	b.n	800eb0a <_fwalk_reent+0x12>

0800eb36 <__retarget_lock_init_recursive>:
 800eb36:	4770      	bx	lr

0800eb38 <__retarget_lock_acquire_recursive>:
 800eb38:	4770      	bx	lr

0800eb3a <__retarget_lock_release_recursive>:
 800eb3a:	4770      	bx	lr

0800eb3c <__swhatbuf_r>:
 800eb3c:	b570      	push	{r4, r5, r6, lr}
 800eb3e:	460e      	mov	r6, r1
 800eb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb44:	2900      	cmp	r1, #0
 800eb46:	b096      	sub	sp, #88	; 0x58
 800eb48:	4614      	mov	r4, r2
 800eb4a:	461d      	mov	r5, r3
 800eb4c:	da07      	bge.n	800eb5e <__swhatbuf_r+0x22>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	602b      	str	r3, [r5, #0]
 800eb52:	89b3      	ldrh	r3, [r6, #12]
 800eb54:	061a      	lsls	r2, r3, #24
 800eb56:	d410      	bmi.n	800eb7a <__swhatbuf_r+0x3e>
 800eb58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb5c:	e00e      	b.n	800eb7c <__swhatbuf_r+0x40>
 800eb5e:	466a      	mov	r2, sp
 800eb60:	f000 f902 	bl	800ed68 <_fstat_r>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	dbf2      	blt.n	800eb4e <__swhatbuf_r+0x12>
 800eb68:	9a01      	ldr	r2, [sp, #4]
 800eb6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb72:	425a      	negs	r2, r3
 800eb74:	415a      	adcs	r2, r3
 800eb76:	602a      	str	r2, [r5, #0]
 800eb78:	e7ee      	b.n	800eb58 <__swhatbuf_r+0x1c>
 800eb7a:	2340      	movs	r3, #64	; 0x40
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	6023      	str	r3, [r4, #0]
 800eb80:	b016      	add	sp, #88	; 0x58
 800eb82:	bd70      	pop	{r4, r5, r6, pc}

0800eb84 <__smakebuf_r>:
 800eb84:	898b      	ldrh	r3, [r1, #12]
 800eb86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb88:	079d      	lsls	r5, r3, #30
 800eb8a:	4606      	mov	r6, r0
 800eb8c:	460c      	mov	r4, r1
 800eb8e:	d507      	bpl.n	800eba0 <__smakebuf_r+0x1c>
 800eb90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb94:	6023      	str	r3, [r4, #0]
 800eb96:	6123      	str	r3, [r4, #16]
 800eb98:	2301      	movs	r3, #1
 800eb9a:	6163      	str	r3, [r4, #20]
 800eb9c:	b002      	add	sp, #8
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}
 800eba0:	ab01      	add	r3, sp, #4
 800eba2:	466a      	mov	r2, sp
 800eba4:	f7ff ffca 	bl	800eb3c <__swhatbuf_r>
 800eba8:	9900      	ldr	r1, [sp, #0]
 800ebaa:	4605      	mov	r5, r0
 800ebac:	4630      	mov	r0, r6
 800ebae:	f7ff f987 	bl	800dec0 <_malloc_r>
 800ebb2:	b948      	cbnz	r0, 800ebc8 <__smakebuf_r+0x44>
 800ebb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebb8:	059a      	lsls	r2, r3, #22
 800ebba:	d4ef      	bmi.n	800eb9c <__smakebuf_r+0x18>
 800ebbc:	f023 0303 	bic.w	r3, r3, #3
 800ebc0:	f043 0302 	orr.w	r3, r3, #2
 800ebc4:	81a3      	strh	r3, [r4, #12]
 800ebc6:	e7e3      	b.n	800eb90 <__smakebuf_r+0xc>
 800ebc8:	4b0d      	ldr	r3, [pc, #52]	; (800ec00 <__smakebuf_r+0x7c>)
 800ebca:	62b3      	str	r3, [r6, #40]	; 0x28
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	6020      	str	r0, [r4, #0]
 800ebd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebd4:	81a3      	strh	r3, [r4, #12]
 800ebd6:	9b00      	ldr	r3, [sp, #0]
 800ebd8:	6163      	str	r3, [r4, #20]
 800ebda:	9b01      	ldr	r3, [sp, #4]
 800ebdc:	6120      	str	r0, [r4, #16]
 800ebde:	b15b      	cbz	r3, 800ebf8 <__smakebuf_r+0x74>
 800ebe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f000 f8d1 	bl	800ed8c <_isatty_r>
 800ebea:	b128      	cbz	r0, 800ebf8 <__smakebuf_r+0x74>
 800ebec:	89a3      	ldrh	r3, [r4, #12]
 800ebee:	f023 0303 	bic.w	r3, r3, #3
 800ebf2:	f043 0301 	orr.w	r3, r3, #1
 800ebf6:	81a3      	strh	r3, [r4, #12]
 800ebf8:	89a0      	ldrh	r0, [r4, #12]
 800ebfa:	4305      	orrs	r5, r0
 800ebfc:	81a5      	strh	r5, [r4, #12]
 800ebfe:	e7cd      	b.n	800eb9c <__smakebuf_r+0x18>
 800ec00:	0800e995 	.word	0x0800e995

0800ec04 <_malloc_usable_size_r>:
 800ec04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec08:	1f18      	subs	r0, r3, #4
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	bfbc      	itt	lt
 800ec0e:	580b      	ldrlt	r3, [r1, r0]
 800ec10:	18c0      	addlt	r0, r0, r3
 800ec12:	4770      	bx	lr

0800ec14 <_raise_r>:
 800ec14:	291f      	cmp	r1, #31
 800ec16:	b538      	push	{r3, r4, r5, lr}
 800ec18:	4604      	mov	r4, r0
 800ec1a:	460d      	mov	r5, r1
 800ec1c:	d904      	bls.n	800ec28 <_raise_r+0x14>
 800ec1e:	2316      	movs	r3, #22
 800ec20:	6003      	str	r3, [r0, #0]
 800ec22:	f04f 30ff 	mov.w	r0, #4294967295
 800ec26:	bd38      	pop	{r3, r4, r5, pc}
 800ec28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec2a:	b112      	cbz	r2, 800ec32 <_raise_r+0x1e>
 800ec2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec30:	b94b      	cbnz	r3, 800ec46 <_raise_r+0x32>
 800ec32:	4620      	mov	r0, r4
 800ec34:	f000 f830 	bl	800ec98 <_getpid_r>
 800ec38:	462a      	mov	r2, r5
 800ec3a:	4601      	mov	r1, r0
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec42:	f000 b817 	b.w	800ec74 <_kill_r>
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d00a      	beq.n	800ec60 <_raise_r+0x4c>
 800ec4a:	1c59      	adds	r1, r3, #1
 800ec4c:	d103      	bne.n	800ec56 <_raise_r+0x42>
 800ec4e:	2316      	movs	r3, #22
 800ec50:	6003      	str	r3, [r0, #0]
 800ec52:	2001      	movs	r0, #1
 800ec54:	e7e7      	b.n	800ec26 <_raise_r+0x12>
 800ec56:	2400      	movs	r4, #0
 800ec58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	4798      	blx	r3
 800ec60:	2000      	movs	r0, #0
 800ec62:	e7e0      	b.n	800ec26 <_raise_r+0x12>

0800ec64 <raise>:
 800ec64:	4b02      	ldr	r3, [pc, #8]	; (800ec70 <raise+0xc>)
 800ec66:	4601      	mov	r1, r0
 800ec68:	6818      	ldr	r0, [r3, #0]
 800ec6a:	f7ff bfd3 	b.w	800ec14 <_raise_r>
 800ec6e:	bf00      	nop
 800ec70:	20000190 	.word	0x20000190

0800ec74 <_kill_r>:
 800ec74:	b538      	push	{r3, r4, r5, lr}
 800ec76:	4d07      	ldr	r5, [pc, #28]	; (800ec94 <_kill_r+0x20>)
 800ec78:	2300      	movs	r3, #0
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	4608      	mov	r0, r1
 800ec7e:	4611      	mov	r1, r2
 800ec80:	602b      	str	r3, [r5, #0]
 800ec82:	f7f3 fbbf 	bl	8002404 <_kill>
 800ec86:	1c43      	adds	r3, r0, #1
 800ec88:	d102      	bne.n	800ec90 <_kill_r+0x1c>
 800ec8a:	682b      	ldr	r3, [r5, #0]
 800ec8c:	b103      	cbz	r3, 800ec90 <_kill_r+0x1c>
 800ec8e:	6023      	str	r3, [r4, #0]
 800ec90:	bd38      	pop	{r3, r4, r5, pc}
 800ec92:	bf00      	nop
 800ec94:	20002248 	.word	0x20002248

0800ec98 <_getpid_r>:
 800ec98:	f7f3 bbac 	b.w	80023f4 <_getpid>

0800ec9c <__sread>:
 800ec9c:	b510      	push	{r4, lr}
 800ec9e:	460c      	mov	r4, r1
 800eca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca4:	f000 f894 	bl	800edd0 <_read_r>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	bfab      	itete	ge
 800ecac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ecae:	89a3      	ldrhlt	r3, [r4, #12]
 800ecb0:	181b      	addge	r3, r3, r0
 800ecb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ecb6:	bfac      	ite	ge
 800ecb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ecba:	81a3      	strhlt	r3, [r4, #12]
 800ecbc:	bd10      	pop	{r4, pc}

0800ecbe <__swrite>:
 800ecbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc2:	461f      	mov	r7, r3
 800ecc4:	898b      	ldrh	r3, [r1, #12]
 800ecc6:	05db      	lsls	r3, r3, #23
 800ecc8:	4605      	mov	r5, r0
 800ecca:	460c      	mov	r4, r1
 800eccc:	4616      	mov	r6, r2
 800ecce:	d505      	bpl.n	800ecdc <__swrite+0x1e>
 800ecd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecd4:	2302      	movs	r3, #2
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f000 f868 	bl	800edac <_lseek_r>
 800ecdc:	89a3      	ldrh	r3, [r4, #12]
 800ecde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ece2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ece6:	81a3      	strh	r3, [r4, #12]
 800ece8:	4632      	mov	r2, r6
 800ecea:	463b      	mov	r3, r7
 800ecec:	4628      	mov	r0, r5
 800ecee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf2:	f000 b817 	b.w	800ed24 <_write_r>

0800ecf6 <__sseek>:
 800ecf6:	b510      	push	{r4, lr}
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecfe:	f000 f855 	bl	800edac <_lseek_r>
 800ed02:	1c43      	adds	r3, r0, #1
 800ed04:	89a3      	ldrh	r3, [r4, #12]
 800ed06:	bf15      	itete	ne
 800ed08:	6560      	strne	r0, [r4, #84]	; 0x54
 800ed0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ed0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ed12:	81a3      	strheq	r3, [r4, #12]
 800ed14:	bf18      	it	ne
 800ed16:	81a3      	strhne	r3, [r4, #12]
 800ed18:	bd10      	pop	{r4, pc}

0800ed1a <__sclose>:
 800ed1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed1e:	f000 b813 	b.w	800ed48 <_close_r>
	...

0800ed24 <_write_r>:
 800ed24:	b538      	push	{r3, r4, r5, lr}
 800ed26:	4d07      	ldr	r5, [pc, #28]	; (800ed44 <_write_r+0x20>)
 800ed28:	4604      	mov	r4, r0
 800ed2a:	4608      	mov	r0, r1
 800ed2c:	4611      	mov	r1, r2
 800ed2e:	2200      	movs	r2, #0
 800ed30:	602a      	str	r2, [r5, #0]
 800ed32:	461a      	mov	r2, r3
 800ed34:	f7f3 fb9d 	bl	8002472 <_write>
 800ed38:	1c43      	adds	r3, r0, #1
 800ed3a:	d102      	bne.n	800ed42 <_write_r+0x1e>
 800ed3c:	682b      	ldr	r3, [r5, #0]
 800ed3e:	b103      	cbz	r3, 800ed42 <_write_r+0x1e>
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	bd38      	pop	{r3, r4, r5, pc}
 800ed44:	20002248 	.word	0x20002248

0800ed48 <_close_r>:
 800ed48:	b538      	push	{r3, r4, r5, lr}
 800ed4a:	4d06      	ldr	r5, [pc, #24]	; (800ed64 <_close_r+0x1c>)
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	4604      	mov	r4, r0
 800ed50:	4608      	mov	r0, r1
 800ed52:	602b      	str	r3, [r5, #0]
 800ed54:	f7f3 fba9 	bl	80024aa <_close>
 800ed58:	1c43      	adds	r3, r0, #1
 800ed5a:	d102      	bne.n	800ed62 <_close_r+0x1a>
 800ed5c:	682b      	ldr	r3, [r5, #0]
 800ed5e:	b103      	cbz	r3, 800ed62 <_close_r+0x1a>
 800ed60:	6023      	str	r3, [r4, #0]
 800ed62:	bd38      	pop	{r3, r4, r5, pc}
 800ed64:	20002248 	.word	0x20002248

0800ed68 <_fstat_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d07      	ldr	r5, [pc, #28]	; (800ed88 <_fstat_r+0x20>)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	4611      	mov	r1, r2
 800ed74:	602b      	str	r3, [r5, #0]
 800ed76:	f7f3 fba4 	bl	80024c2 <_fstat>
 800ed7a:	1c43      	adds	r3, r0, #1
 800ed7c:	d102      	bne.n	800ed84 <_fstat_r+0x1c>
 800ed7e:	682b      	ldr	r3, [r5, #0]
 800ed80:	b103      	cbz	r3, 800ed84 <_fstat_r+0x1c>
 800ed82:	6023      	str	r3, [r4, #0]
 800ed84:	bd38      	pop	{r3, r4, r5, pc}
 800ed86:	bf00      	nop
 800ed88:	20002248 	.word	0x20002248

0800ed8c <_isatty_r>:
 800ed8c:	b538      	push	{r3, r4, r5, lr}
 800ed8e:	4d06      	ldr	r5, [pc, #24]	; (800eda8 <_isatty_r+0x1c>)
 800ed90:	2300      	movs	r3, #0
 800ed92:	4604      	mov	r4, r0
 800ed94:	4608      	mov	r0, r1
 800ed96:	602b      	str	r3, [r5, #0]
 800ed98:	f7f3 fba3 	bl	80024e2 <_isatty>
 800ed9c:	1c43      	adds	r3, r0, #1
 800ed9e:	d102      	bne.n	800eda6 <_isatty_r+0x1a>
 800eda0:	682b      	ldr	r3, [r5, #0]
 800eda2:	b103      	cbz	r3, 800eda6 <_isatty_r+0x1a>
 800eda4:	6023      	str	r3, [r4, #0]
 800eda6:	bd38      	pop	{r3, r4, r5, pc}
 800eda8:	20002248 	.word	0x20002248

0800edac <_lseek_r>:
 800edac:	b538      	push	{r3, r4, r5, lr}
 800edae:	4d07      	ldr	r5, [pc, #28]	; (800edcc <_lseek_r+0x20>)
 800edb0:	4604      	mov	r4, r0
 800edb2:	4608      	mov	r0, r1
 800edb4:	4611      	mov	r1, r2
 800edb6:	2200      	movs	r2, #0
 800edb8:	602a      	str	r2, [r5, #0]
 800edba:	461a      	mov	r2, r3
 800edbc:	f7f3 fb9c 	bl	80024f8 <_lseek>
 800edc0:	1c43      	adds	r3, r0, #1
 800edc2:	d102      	bne.n	800edca <_lseek_r+0x1e>
 800edc4:	682b      	ldr	r3, [r5, #0]
 800edc6:	b103      	cbz	r3, 800edca <_lseek_r+0x1e>
 800edc8:	6023      	str	r3, [r4, #0]
 800edca:	bd38      	pop	{r3, r4, r5, pc}
 800edcc:	20002248 	.word	0x20002248

0800edd0 <_read_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4d07      	ldr	r5, [pc, #28]	; (800edf0 <_read_r+0x20>)
 800edd4:	4604      	mov	r4, r0
 800edd6:	4608      	mov	r0, r1
 800edd8:	4611      	mov	r1, r2
 800edda:	2200      	movs	r2, #0
 800eddc:	602a      	str	r2, [r5, #0]
 800edde:	461a      	mov	r2, r3
 800ede0:	f7f3 fb2a 	bl	8002438 <_read>
 800ede4:	1c43      	adds	r3, r0, #1
 800ede6:	d102      	bne.n	800edee <_read_r+0x1e>
 800ede8:	682b      	ldr	r3, [r5, #0]
 800edea:	b103      	cbz	r3, 800edee <_read_r+0x1e>
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	bd38      	pop	{r3, r4, r5, pc}
 800edf0:	20002248 	.word	0x20002248

0800edf4 <_init>:
 800edf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf6:	bf00      	nop
 800edf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edfa:	bc08      	pop	{r3}
 800edfc:	469e      	mov	lr, r3
 800edfe:	4770      	bx	lr

0800ee00 <_fini>:
 800ee00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee02:	bf00      	nop
 800ee04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee06:	bc08      	pop	{r3}
 800ee08:	469e      	mov	lr, r3
 800ee0a:	4770      	bx	lr
>>>>>>> parent of 1d14859 (0706 version for the 103 and test)
